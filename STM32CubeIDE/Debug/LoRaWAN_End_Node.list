
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b090  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001800  0801b1d0  0801b1d0  0002b1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c9d0  0801c9d0  0003e5c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801c9d0  0801c9d0  0002c9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c9d8  0801c9d8  0003e5c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801c9d8  0801c9d8  0002c9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801c9e0  0801c9e0  0002c9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000c0  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         000002f8  20000000  0801c9e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b18  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          000016b8  200002f8  200002f8  000402f8  2**2
                  ALLOC
 12 RAM1_region   00000000  200019b0  200019b0  0003e5c0  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5c0  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  200019b0  200019b0  000402f8  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY
 16 .debug_info   0007b6c1  00000000  00000000  0003e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000ff61  00000000  00000000  000b9cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0003973a  00000000  00000000  000c9c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000038f0  00000000  00000000  00103348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000041d0  00000000  00000000  00106c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00030483  00000000  00000000  0010ae08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000622d9  00000000  00000000  0013b28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000e8672  00000000  00000000  0019d564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  00285bd6  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000b49c  00000000  00000000  00285c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .stab         00000024  00000000  00000000  002910c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 27 .stabstr      0000004e  00000000  00000000  002910e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002f8 	.word	0x200002f8
 800015c:	00000000 	.word	0x00000000
 8000160:	0801b1b8 	.word	0x0801b1b8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002fc 	.word	0x200002fc
 800017c:	0801b1b8 	.word	0x0801b1b8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_fmul>:
 8000230:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000234:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000238:	bf1e      	ittt	ne
 800023a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800023e:	ea92 0f0c 	teqne	r2, ip
 8000242:	ea93 0f0c 	teqne	r3, ip
 8000246:	d06f      	beq.n	8000328 <__aeabi_fmul+0xf8>
 8000248:	441a      	add	r2, r3
 800024a:	ea80 0c01 	eor.w	ip, r0, r1
 800024e:	0240      	lsls	r0, r0, #9
 8000250:	bf18      	it	ne
 8000252:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000256:	d01e      	beq.n	8000296 <__aeabi_fmul+0x66>
 8000258:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800025c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000260:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000264:	fba0 3101 	umull	r3, r1, r0, r1
 8000268:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800026c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000270:	bf3e      	ittt	cc
 8000272:	0049      	lslcc	r1, r1, #1
 8000274:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000278:	005b      	lslcc	r3, r3, #1
 800027a:	ea40 0001 	orr.w	r0, r0, r1
 800027e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000282:	2afd      	cmp	r2, #253	; 0xfd
 8000284:	d81d      	bhi.n	80002c2 <__aeabi_fmul+0x92>
 8000286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800028a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800028e:	bf08      	it	eq
 8000290:	f020 0001 	biceq.w	r0, r0, #1
 8000294:	4770      	bx	lr
 8000296:	f090 0f00 	teq	r0, #0
 800029a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800029e:	bf08      	it	eq
 80002a0:	0249      	lsleq	r1, r1, #9
 80002a2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002a6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002aa:	3a7f      	subs	r2, #127	; 0x7f
 80002ac:	bfc2      	ittt	gt
 80002ae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002b2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002b6:	4770      	bxgt	lr
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	3a01      	subs	r2, #1
 80002c2:	dc5d      	bgt.n	8000380 <__aeabi_fmul+0x150>
 80002c4:	f112 0f19 	cmn.w	r2, #25
 80002c8:	bfdc      	itt	le
 80002ca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002ce:	4770      	bxle	lr
 80002d0:	f1c2 0200 	rsb	r2, r2, #0
 80002d4:	0041      	lsls	r1, r0, #1
 80002d6:	fa21 f102 	lsr.w	r1, r1, r2
 80002da:	f1c2 0220 	rsb	r2, r2, #32
 80002de:	fa00 fc02 	lsl.w	ip, r0, r2
 80002e2:	ea5f 0031 	movs.w	r0, r1, rrx
 80002e6:	f140 0000 	adc.w	r0, r0, #0
 80002ea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002ee:	bf08      	it	eq
 80002f0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002f4:	4770      	bx	lr
 80002f6:	f092 0f00 	teq	r2, #0
 80002fa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002fe:	bf02      	ittt	eq
 8000300:	0040      	lsleq	r0, r0, #1
 8000302:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000306:	3a01      	subeq	r2, #1
 8000308:	d0f9      	beq.n	80002fe <__aeabi_fmul+0xce>
 800030a:	ea40 000c 	orr.w	r0, r0, ip
 800030e:	f093 0f00 	teq	r3, #0
 8000312:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000316:	bf02      	ittt	eq
 8000318:	0049      	lsleq	r1, r1, #1
 800031a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800031e:	3b01      	subeq	r3, #1
 8000320:	d0f9      	beq.n	8000316 <__aeabi_fmul+0xe6>
 8000322:	ea41 010c 	orr.w	r1, r1, ip
 8000326:	e78f      	b.n	8000248 <__aeabi_fmul+0x18>
 8000328:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800032c:	ea92 0f0c 	teq	r2, ip
 8000330:	bf18      	it	ne
 8000332:	ea93 0f0c 	teqne	r3, ip
 8000336:	d00a      	beq.n	800034e <__aeabi_fmul+0x11e>
 8000338:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800033c:	bf18      	it	ne
 800033e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000342:	d1d8      	bne.n	80002f6 <__aeabi_fmul+0xc6>
 8000344:	ea80 0001 	eor.w	r0, r0, r1
 8000348:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800034c:	4770      	bx	lr
 800034e:	f090 0f00 	teq	r0, #0
 8000352:	bf17      	itett	ne
 8000354:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000358:	4608      	moveq	r0, r1
 800035a:	f091 0f00 	teqne	r1, #0
 800035e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000362:	d014      	beq.n	800038e <__aeabi_fmul+0x15e>
 8000364:	ea92 0f0c 	teq	r2, ip
 8000368:	d101      	bne.n	800036e <__aeabi_fmul+0x13e>
 800036a:	0242      	lsls	r2, r0, #9
 800036c:	d10f      	bne.n	800038e <__aeabi_fmul+0x15e>
 800036e:	ea93 0f0c 	teq	r3, ip
 8000372:	d103      	bne.n	800037c <__aeabi_fmul+0x14c>
 8000374:	024b      	lsls	r3, r1, #9
 8000376:	bf18      	it	ne
 8000378:	4608      	movne	r0, r1
 800037a:	d108      	bne.n	800038e <__aeabi_fmul+0x15e>
 800037c:	ea80 0001 	eor.w	r0, r0, r1
 8000380:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000384:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000388:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800038c:	4770      	bx	lr
 800038e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000392:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000396:	4770      	bx	lr

08000398 <__aeabi_drsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800039c:	e002      	b.n	80003a4 <__adddf3>
 800039e:	bf00      	nop

080003a0 <__aeabi_dsub>:
 80003a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003a4 <__adddf3>:
 80003a4:	b530      	push	{r4, r5, lr}
 80003a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ae:	ea94 0f05 	teq	r4, r5
 80003b2:	bf08      	it	eq
 80003b4:	ea90 0f02 	teqeq	r0, r2
 80003b8:	bf1f      	itttt	ne
 80003ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ca:	f000 80e2 	beq.w	8000592 <__adddf3+0x1ee>
 80003ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003d6:	bfb8      	it	lt
 80003d8:	426d      	neglt	r5, r5
 80003da:	dd0c      	ble.n	80003f6 <__adddf3+0x52>
 80003dc:	442c      	add	r4, r5
 80003de:	ea80 0202 	eor.w	r2, r0, r2
 80003e2:	ea81 0303 	eor.w	r3, r1, r3
 80003e6:	ea82 0000 	eor.w	r0, r2, r0
 80003ea:	ea83 0101 	eor.w	r1, r3, r1
 80003ee:	ea80 0202 	eor.w	r2, r0, r2
 80003f2:	ea81 0303 	eor.w	r3, r1, r3
 80003f6:	2d36      	cmp	r5, #54	; 0x36
 80003f8:	bf88      	it	hi
 80003fa:	bd30      	pophi	{r4, r5, pc}
 80003fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000400:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000404:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000408:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800040c:	d002      	beq.n	8000414 <__adddf3+0x70>
 800040e:	4240      	negs	r0, r0
 8000410:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000414:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000418:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800041c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000420:	d002      	beq.n	8000428 <__adddf3+0x84>
 8000422:	4252      	negs	r2, r2
 8000424:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000428:	ea94 0f05 	teq	r4, r5
 800042c:	f000 80a7 	beq.w	800057e <__adddf3+0x1da>
 8000430:	f1a4 0401 	sub.w	r4, r4, #1
 8000434:	f1d5 0e20 	rsbs	lr, r5, #32
 8000438:	db0d      	blt.n	8000456 <__adddf3+0xb2>
 800043a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800043e:	fa22 f205 	lsr.w	r2, r2, r5
 8000442:	1880      	adds	r0, r0, r2
 8000444:	f141 0100 	adc.w	r1, r1, #0
 8000448:	fa03 f20e 	lsl.w	r2, r3, lr
 800044c:	1880      	adds	r0, r0, r2
 800044e:	fa43 f305 	asr.w	r3, r3, r5
 8000452:	4159      	adcs	r1, r3
 8000454:	e00e      	b.n	8000474 <__adddf3+0xd0>
 8000456:	f1a5 0520 	sub.w	r5, r5, #32
 800045a:	f10e 0e20 	add.w	lr, lr, #32
 800045e:	2a01      	cmp	r2, #1
 8000460:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000464:	bf28      	it	cs
 8000466:	f04c 0c02 	orrcs.w	ip, ip, #2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	18c0      	adds	r0, r0, r3
 8000470:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	d507      	bpl.n	800048a <__adddf3+0xe6>
 800047a:	f04f 0e00 	mov.w	lr, #0
 800047e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000482:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000486:	eb6e 0101 	sbc.w	r1, lr, r1
 800048a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800048e:	d31b      	bcc.n	80004c8 <__adddf3+0x124>
 8000490:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000494:	d30c      	bcc.n	80004b0 <__adddf3+0x10c>
 8000496:	0849      	lsrs	r1, r1, #1
 8000498:	ea5f 0030 	movs.w	r0, r0, rrx
 800049c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a0:	f104 0401 	add.w	r4, r4, #1
 80004a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004ac:	f080 809a 	bcs.w	80005e4 <__adddf3+0x240>
 80004b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004b4:	bf08      	it	eq
 80004b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004ba:	f150 0000 	adcs.w	r0, r0, #0
 80004be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004c2:	ea41 0105 	orr.w	r1, r1, r5
 80004c6:	bd30      	pop	{r4, r5, pc}
 80004c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004cc:	4140      	adcs	r0, r0
 80004ce:	eb41 0101 	adc.w	r1, r1, r1
 80004d2:	3c01      	subs	r4, #1
 80004d4:	bf28      	it	cs
 80004d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004da:	d2e9      	bcs.n	80004b0 <__adddf3+0x10c>
 80004dc:	f091 0f00 	teq	r1, #0
 80004e0:	bf04      	itt	eq
 80004e2:	4601      	moveq	r1, r0
 80004e4:	2000      	moveq	r0, #0
 80004e6:	fab1 f381 	clz	r3, r1
 80004ea:	bf08      	it	eq
 80004ec:	3320      	addeq	r3, #32
 80004ee:	f1a3 030b 	sub.w	r3, r3, #11
 80004f2:	f1b3 0220 	subs.w	r2, r3, #32
 80004f6:	da0c      	bge.n	8000512 <__adddf3+0x16e>
 80004f8:	320c      	adds	r2, #12
 80004fa:	dd08      	ble.n	800050e <__adddf3+0x16a>
 80004fc:	f102 0c14 	add.w	ip, r2, #20
 8000500:	f1c2 020c 	rsb	r2, r2, #12
 8000504:	fa01 f00c 	lsl.w	r0, r1, ip
 8000508:	fa21 f102 	lsr.w	r1, r1, r2
 800050c:	e00c      	b.n	8000528 <__adddf3+0x184>
 800050e:	f102 0214 	add.w	r2, r2, #20
 8000512:	bfd8      	it	le
 8000514:	f1c2 0c20 	rsble	ip, r2, #32
 8000518:	fa01 f102 	lsl.w	r1, r1, r2
 800051c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000520:	bfdc      	itt	le
 8000522:	ea41 010c 	orrle.w	r1, r1, ip
 8000526:	4090      	lslle	r0, r2
 8000528:	1ae4      	subs	r4, r4, r3
 800052a:	bfa2      	ittt	ge
 800052c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000530:	4329      	orrge	r1, r5
 8000532:	bd30      	popge	{r4, r5, pc}
 8000534:	ea6f 0404 	mvn.w	r4, r4
 8000538:	3c1f      	subs	r4, #31
 800053a:	da1c      	bge.n	8000576 <__adddf3+0x1d2>
 800053c:	340c      	adds	r4, #12
 800053e:	dc0e      	bgt.n	800055e <__adddf3+0x1ba>
 8000540:	f104 0414 	add.w	r4, r4, #20
 8000544:	f1c4 0220 	rsb	r2, r4, #32
 8000548:	fa20 f004 	lsr.w	r0, r0, r4
 800054c:	fa01 f302 	lsl.w	r3, r1, r2
 8000550:	ea40 0003 	orr.w	r0, r0, r3
 8000554:	fa21 f304 	lsr.w	r3, r1, r4
 8000558:	ea45 0103 	orr.w	r1, r5, r3
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	f1c4 040c 	rsb	r4, r4, #12
 8000562:	f1c4 0220 	rsb	r2, r4, #32
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 f304 	lsl.w	r3, r1, r4
 800056e:	ea40 0003 	orr.w	r0, r0, r3
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	fa21 f004 	lsr.w	r0, r1, r4
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	f094 0f00 	teq	r4, #0
 8000582:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000586:	bf06      	itte	eq
 8000588:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800058c:	3401      	addeq	r4, #1
 800058e:	3d01      	subne	r5, #1
 8000590:	e74e      	b.n	8000430 <__adddf3+0x8c>
 8000592:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000596:	bf18      	it	ne
 8000598:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800059c:	d029      	beq.n	80005f2 <__adddf3+0x24e>
 800059e:	ea94 0f05 	teq	r4, r5
 80005a2:	bf08      	it	eq
 80005a4:	ea90 0f02 	teqeq	r0, r2
 80005a8:	d005      	beq.n	80005b6 <__adddf3+0x212>
 80005aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ae:	bf04      	itt	eq
 80005b0:	4619      	moveq	r1, r3
 80005b2:	4610      	moveq	r0, r2
 80005b4:	bd30      	pop	{r4, r5, pc}
 80005b6:	ea91 0f03 	teq	r1, r3
 80005ba:	bf1e      	ittt	ne
 80005bc:	2100      	movne	r1, #0
 80005be:	2000      	movne	r0, #0
 80005c0:	bd30      	popne	{r4, r5, pc}
 80005c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005c6:	d105      	bne.n	80005d4 <__adddf3+0x230>
 80005c8:	0040      	lsls	r0, r0, #1
 80005ca:	4149      	adcs	r1, r1
 80005cc:	bf28      	it	cs
 80005ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005d2:	bd30      	pop	{r4, r5, pc}
 80005d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d8:	bf3c      	itt	cc
 80005da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005de:	bd30      	popcc	{r4, r5, pc}
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005ec:	f04f 0000 	mov.w	r0, #0
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005f6:	bf1a      	itte	ne
 80005f8:	4619      	movne	r1, r3
 80005fa:	4610      	movne	r0, r2
 80005fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000600:	bf1c      	itt	ne
 8000602:	460b      	movne	r3, r1
 8000604:	4602      	movne	r2, r0
 8000606:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800060a:	bf06      	itte	eq
 800060c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000610:	ea91 0f03 	teqeq	r1, r3
 8000614:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	bf00      	nop

0800061c <__aeabi_ui2d>:
 800061c:	f090 0f00 	teq	r0, #0
 8000620:	bf04      	itt	eq
 8000622:	2100      	moveq	r1, #0
 8000624:	4770      	bxeq	lr
 8000626:	b530      	push	{r4, r5, lr}
 8000628:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800062c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000630:	f04f 0500 	mov.w	r5, #0
 8000634:	f04f 0100 	mov.w	r1, #0
 8000638:	e750      	b.n	80004dc <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_i2d>:
 800063c:	f090 0f00 	teq	r0, #0
 8000640:	bf04      	itt	eq
 8000642:	2100      	moveq	r1, #0
 8000644:	4770      	bxeq	lr
 8000646:	b530      	push	{r4, r5, lr}
 8000648:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800064c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000650:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000654:	bf48      	it	mi
 8000656:	4240      	negmi	r0, r0
 8000658:	f04f 0100 	mov.w	r1, #0
 800065c:	e73e      	b.n	80004dc <__adddf3+0x138>
 800065e:	bf00      	nop

08000660 <__aeabi_f2d>:
 8000660:	0042      	lsls	r2, r0, #1
 8000662:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000666:	ea4f 0131 	mov.w	r1, r1, rrx
 800066a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800066e:	bf1f      	itttt	ne
 8000670:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000674:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000678:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800067c:	4770      	bxne	lr
 800067e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000682:	bf08      	it	eq
 8000684:	4770      	bxeq	lr
 8000686:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800068a:	bf04      	itt	eq
 800068c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000690:	4770      	bxeq	lr
 8000692:	b530      	push	{r4, r5, lr}
 8000694:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800069c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	e71c      	b.n	80004dc <__adddf3+0x138>
 80006a2:	bf00      	nop

080006a4 <__aeabi_ul2d>:
 80006a4:	ea50 0201 	orrs.w	r2, r0, r1
 80006a8:	bf08      	it	eq
 80006aa:	4770      	bxeq	lr
 80006ac:	b530      	push	{r4, r5, lr}
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	e00a      	b.n	80006ca <__aeabi_l2d+0x16>

080006b4 <__aeabi_l2d>:
 80006b4:	ea50 0201 	orrs.w	r2, r0, r1
 80006b8:	bf08      	it	eq
 80006ba:	4770      	bxeq	lr
 80006bc:	b530      	push	{r4, r5, lr}
 80006be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006c2:	d502      	bpl.n	80006ca <__aeabi_l2d+0x16>
 80006c4:	4240      	negs	r0, r0
 80006c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006d6:	f43f aed8 	beq.w	800048a <__adddf3+0xe6>
 80006da:	f04f 0203 	mov.w	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006f2:	f1c2 0320 	rsb	r3, r2, #32
 80006f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80006fa:	fa20 f002 	lsr.w	r0, r0, r2
 80006fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000702:	ea40 000e 	orr.w	r0, r0, lr
 8000706:	fa21 f102 	lsr.w	r1, r1, r2
 800070a:	4414      	add	r4, r2
 800070c:	e6bd      	b.n	800048a <__adddf3+0xe6>
 800070e:	bf00      	nop

08000710 <__aeabi_dmul>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800071e:	bf1d      	ittte	ne
 8000720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000724:	ea94 0f0c 	teqne	r4, ip
 8000728:	ea95 0f0c 	teqne	r5, ip
 800072c:	f000 f8de 	bleq	80008ec <__aeabi_dmul+0x1dc>
 8000730:	442c      	add	r4, r5
 8000732:	ea81 0603 	eor.w	r6, r1, r3
 8000736:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800073a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800073e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000742:	bf18      	it	ne
 8000744:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800074c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000750:	d038      	beq.n	80007c4 <__aeabi_dmul+0xb4>
 8000752:	fba0 ce02 	umull	ip, lr, r0, r2
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800075e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000762:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000766:	f04f 0600 	mov.w	r6, #0
 800076a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800076e:	f09c 0f00 	teq	ip, #0
 8000772:	bf18      	it	ne
 8000774:	f04e 0e01 	orrne.w	lr, lr, #1
 8000778:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800077c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000780:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000784:	d204      	bcs.n	8000790 <__aeabi_dmul+0x80>
 8000786:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800078a:	416d      	adcs	r5, r5
 800078c:	eb46 0606 	adc.w	r6, r6, r6
 8000790:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000794:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000798:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800079c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007a8:	bf88      	it	hi
 80007aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007ae:	d81e      	bhi.n	80007ee <__aeabi_dmul+0xde>
 80007b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007b4:	bf08      	it	eq
 80007b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007ba:	f150 0000 	adcs.w	r0, r0, #0
 80007be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007c8:	ea46 0101 	orr.w	r1, r6, r1
 80007cc:	ea40 0002 	orr.w	r0, r0, r2
 80007d0:	ea81 0103 	eor.w	r1, r1, r3
 80007d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007d8:	bfc2      	ittt	gt
 80007da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007e2:	bd70      	popgt	{r4, r5, r6, pc}
 80007e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007e8:	f04f 0e00 	mov.w	lr, #0
 80007ec:	3c01      	subs	r4, #1
 80007ee:	f300 80ab 	bgt.w	8000948 <__aeabi_dmul+0x238>
 80007f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007f6:	bfde      	ittt	le
 80007f8:	2000      	movle	r0, #0
 80007fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007fe:	bd70      	pople	{r4, r5, r6, pc}
 8000800:	f1c4 0400 	rsb	r4, r4, #0
 8000804:	3c20      	subs	r4, #32
 8000806:	da35      	bge.n	8000874 <__aeabi_dmul+0x164>
 8000808:	340c      	adds	r4, #12
 800080a:	dc1b      	bgt.n	8000844 <__aeabi_dmul+0x134>
 800080c:	f104 0414 	add.w	r4, r4, #20
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f305 	lsl.w	r3, r0, r5
 8000818:	fa20 f004 	lsr.w	r0, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800082c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000830:	fa21 f604 	lsr.w	r6, r1, r4
 8000834:	eb42 0106 	adc.w	r1, r2, r6
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f1c4 040c 	rsb	r4, r4, #12
 8000848:	f1c4 0520 	rsb	r5, r4, #32
 800084c:	fa00 f304 	lsl.w	r3, r0, r4
 8000850:	fa20 f005 	lsr.w	r0, r0, r5
 8000854:	fa01 f204 	lsl.w	r2, r1, r4
 8000858:	ea40 0002 	orr.w	r0, r0, r2
 800085c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000860:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000864:	f141 0100 	adc.w	r1, r1, #0
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f1c4 0520 	rsb	r5, r4, #32
 8000878:	fa00 f205 	lsl.w	r2, r0, r5
 800087c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000880:	fa20 f304 	lsr.w	r3, r0, r4
 8000884:	fa01 f205 	lsl.w	r2, r1, r5
 8000888:	ea43 0302 	orr.w	r3, r3, r2
 800088c:	fa21 f004 	lsr.w	r0, r1, r4
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	fa21 f204 	lsr.w	r2, r1, r4
 8000898:	ea20 0002 	bic.w	r0, r0, r2
 800089c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008a4:	bf08      	it	eq
 80008a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008aa:	bd70      	pop	{r4, r5, r6, pc}
 80008ac:	f094 0f00 	teq	r4, #0
 80008b0:	d10f      	bne.n	80008d2 <__aeabi_dmul+0x1c2>
 80008b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008b6:	0040      	lsls	r0, r0, #1
 80008b8:	eb41 0101 	adc.w	r1, r1, r1
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	bf08      	it	eq
 80008c2:	3c01      	subeq	r4, #1
 80008c4:	d0f7      	beq.n	80008b6 <__aeabi_dmul+0x1a6>
 80008c6:	ea41 0106 	orr.w	r1, r1, r6
 80008ca:	f095 0f00 	teq	r5, #0
 80008ce:	bf18      	it	ne
 80008d0:	4770      	bxne	lr
 80008d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008d6:	0052      	lsls	r2, r2, #1
 80008d8:	eb43 0303 	adc.w	r3, r3, r3
 80008dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e0:	bf08      	it	eq
 80008e2:	3d01      	subeq	r5, #1
 80008e4:	d0f7      	beq.n	80008d6 <__aeabi_dmul+0x1c6>
 80008e6:	ea43 0306 	orr.w	r3, r3, r6
 80008ea:	4770      	bx	lr
 80008ec:	ea94 0f0c 	teq	r4, ip
 80008f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008f4:	bf18      	it	ne
 80008f6:	ea95 0f0c 	teqne	r5, ip
 80008fa:	d00c      	beq.n	8000916 <__aeabi_dmul+0x206>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	d1d1      	bne.n	80008ac <__aeabi_dmul+0x19c>
 8000908:	ea81 0103 	eor.w	r1, r1, r3
 800090c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	bd70      	pop	{r4, r5, r6, pc}
 8000916:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800091a:	bf06      	itte	eq
 800091c:	4610      	moveq	r0, r2
 800091e:	4619      	moveq	r1, r3
 8000920:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000924:	d019      	beq.n	800095a <__aeabi_dmul+0x24a>
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	d102      	bne.n	8000932 <__aeabi_dmul+0x222>
 800092c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000930:	d113      	bne.n	800095a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	d105      	bne.n	8000944 <__aeabi_dmul+0x234>
 8000938:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800093c:	bf1c      	itt	ne
 800093e:	4610      	movne	r0, r2
 8000940:	4619      	movne	r1, r3
 8000942:	d10a      	bne.n	800095a <__aeabi_dmul+0x24a>
 8000944:	ea81 0103 	eor.w	r1, r1, r3
 8000948:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800094c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000950:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	bd70      	pop	{r4, r5, r6, pc}
 800095a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800095e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000962:	bd70      	pop	{r4, r5, r6, pc}

08000964 <__aeabi_ddiv>:
 8000964:	b570      	push	{r4, r5, r6, lr}
 8000966:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800096a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800096e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000972:	bf1d      	ittte	ne
 8000974:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000978:	ea94 0f0c 	teqne	r4, ip
 800097c:	ea95 0f0c 	teqne	r5, ip
 8000980:	f000 f8a7 	bleq	8000ad2 <__aeabi_ddiv+0x16e>
 8000984:	eba4 0405 	sub.w	r4, r4, r5
 8000988:	ea81 0e03 	eor.w	lr, r1, r3
 800098c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000990:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000994:	f000 8088 	beq.w	8000aa8 <__aeabi_ddiv+0x144>
 8000998:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800099c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009bc:	429d      	cmp	r5, r3
 80009be:	bf08      	it	eq
 80009c0:	4296      	cmpeq	r6, r2
 80009c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009ca:	d202      	bcs.n	80009d2 <__aeabi_ddiv+0x6e>
 80009cc:	085b      	lsrs	r3, r3, #1
 80009ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d2:	1ab6      	subs	r6, r6, r2
 80009d4:	eb65 0503 	sbc.w	r5, r5, r3
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a28:	085b      	lsrs	r3, r3, #1
 8000a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a36:	bf22      	ittt	cs
 8000a38:	1ab6      	subcs	r6, r6, r2
 8000a3a:	4675      	movcs	r5, lr
 8000a3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a40:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a44:	d018      	beq.n	8000a78 <__aeabi_ddiv+0x114>
 8000a46:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a62:	d1c0      	bne.n	80009e6 <__aeabi_ddiv+0x82>
 8000a64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a68:	d10b      	bne.n	8000a82 <__aeabi_ddiv+0x11e>
 8000a6a:	ea41 0100 	orr.w	r1, r1, r0
 8000a6e:	f04f 0000 	mov.w	r0, #0
 8000a72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a76:	e7b6      	b.n	80009e6 <__aeabi_ddiv+0x82>
 8000a78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a7c:	bf04      	itt	eq
 8000a7e:	4301      	orreq	r1, r0
 8000a80:	2000      	moveq	r0, #0
 8000a82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a86:	bf88      	it	hi
 8000a88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a8c:	f63f aeaf 	bhi.w	80007ee <__aeabi_dmul+0xde>
 8000a90:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a94:	bf04      	itt	eq
 8000a96:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a9e:	f150 0000 	adcs.w	r0, r0, #0
 8000aa2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000aac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ab4:	bfc2      	ittt	gt
 8000ab6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000abe:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac4:	f04f 0e00 	mov.w	lr, #0
 8000ac8:	3c01      	subs	r4, #1
 8000aca:	e690      	b.n	80007ee <__aeabi_dmul+0xde>
 8000acc:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad0:	e68d      	b.n	80007ee <__aeabi_dmul+0xde>
 8000ad2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ad6:	ea94 0f0c 	teq	r4, ip
 8000ada:	bf08      	it	eq
 8000adc:	ea95 0f0c 	teqeq	r5, ip
 8000ae0:	f43f af3b 	beq.w	800095a <__aeabi_dmul+0x24a>
 8000ae4:	ea94 0f0c 	teq	r4, ip
 8000ae8:	d10a      	bne.n	8000b00 <__aeabi_ddiv+0x19c>
 8000aea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aee:	f47f af34 	bne.w	800095a <__aeabi_dmul+0x24a>
 8000af2:	ea95 0f0c 	teq	r5, ip
 8000af6:	f47f af25 	bne.w	8000944 <__aeabi_dmul+0x234>
 8000afa:	4610      	mov	r0, r2
 8000afc:	4619      	mov	r1, r3
 8000afe:	e72c      	b.n	800095a <__aeabi_dmul+0x24a>
 8000b00:	ea95 0f0c 	teq	r5, ip
 8000b04:	d106      	bne.n	8000b14 <__aeabi_ddiv+0x1b0>
 8000b06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b0a:	f43f aefd 	beq.w	8000908 <__aeabi_dmul+0x1f8>
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4619      	mov	r1, r3
 8000b12:	e722      	b.n	800095a <__aeabi_dmul+0x24a>
 8000b14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b18:	bf18      	it	ne
 8000b1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b1e:	f47f aec5 	bne.w	80008ac <__aeabi_dmul+0x19c>
 8000b22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b26:	f47f af0d 	bne.w	8000944 <__aeabi_dmul+0x234>
 8000b2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b2e:	f47f aeeb 	bne.w	8000908 <__aeabi_dmul+0x1f8>
 8000b32:	e712      	b.n	800095a <__aeabi_dmul+0x24a>

08000b34 <__gedf2>:
 8000b34:	f04f 3cff 	mov.w	ip, #4294967295
 8000b38:	e006      	b.n	8000b48 <__cmpdf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__ledf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	e002      	b.n	8000b48 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__cmpdf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	bf18      	it	ne
 8000b5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b5e:	d01b      	beq.n	8000b98 <__cmpdf2+0x54>
 8000b60:	b001      	add	sp, #4
 8000b62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b66:	bf0c      	ite	eq
 8000b68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b6c:	ea91 0f03 	teqne	r1, r3
 8000b70:	bf02      	ittt	eq
 8000b72:	ea90 0f02 	teqeq	r0, r2
 8000b76:	2000      	moveq	r0, #0
 8000b78:	4770      	bxeq	lr
 8000b7a:	f110 0f00 	cmn.w	r0, #0
 8000b7e:	ea91 0f03 	teq	r1, r3
 8000b82:	bf58      	it	pl
 8000b84:	4299      	cmppl	r1, r3
 8000b86:	bf08      	it	eq
 8000b88:	4290      	cmpeq	r0, r2
 8000b8a:	bf2c      	ite	cs
 8000b8c:	17d8      	asrcs	r0, r3, #31
 8000b8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b92:	f040 0001 	orr.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba0:	d102      	bne.n	8000ba8 <__cmpdf2+0x64>
 8000ba2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ba6:	d107      	bne.n	8000bb8 <__cmpdf2+0x74>
 8000ba8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb0:	d1d6      	bne.n	8000b60 <__cmpdf2+0x1c>
 8000bb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bb6:	d0d3      	beq.n	8000b60 <__cmpdf2+0x1c>
 8000bb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_cdrcmple>:
 8000bc0:	4684      	mov	ip, r0
 8000bc2:	4610      	mov	r0, r2
 8000bc4:	4662      	mov	r2, ip
 8000bc6:	468c      	mov	ip, r1
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4663      	mov	r3, ip
 8000bcc:	e000      	b.n	8000bd0 <__aeabi_cdcmpeq>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_cdcmpeq>:
 8000bd0:	b501      	push	{r0, lr}
 8000bd2:	f7ff ffb7 	bl	8000b44 <__cmpdf2>
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	bf48      	it	mi
 8000bda:	f110 0f00 	cmnmi.w	r0, #0
 8000bde:	bd01      	pop	{r0, pc}

08000be0 <__aeabi_dcmpeq>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff fff4 	bl	8000bd0 <__aeabi_cdcmpeq>
 8000be8:	bf0c      	ite	eq
 8000bea:	2001      	moveq	r0, #1
 8000bec:	2000      	movne	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmplt>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffea 	bl	8000bd0 <__aeabi_cdcmpeq>
 8000bfc:	bf34      	ite	cc
 8000bfe:	2001      	movcc	r0, #1
 8000c00:	2000      	movcs	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmple>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffe0 	bl	8000bd0 <__aeabi_cdcmpeq>
 8000c10:	bf94      	ite	ls
 8000c12:	2001      	movls	r0, #1
 8000c14:	2000      	movhi	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_dcmpge>:
 8000c1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c20:	f7ff ffce 	bl	8000bc0 <__aeabi_cdrcmple>
 8000c24:	bf94      	ite	ls
 8000c26:	2001      	movls	r0, #1
 8000c28:	2000      	movhi	r0, #0
 8000c2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2e:	bf00      	nop

08000c30 <__aeabi_dcmpgt>:
 8000c30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c34:	f7ff ffc4 	bl	8000bc0 <__aeabi_cdrcmple>
 8000c38:	bf34      	ite	cc
 8000c3a:	2001      	movcc	r0, #1
 8000c3c:	2000      	movcs	r0, #0
 8000c3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c42:	bf00      	nop

08000c44 <__aeabi_dcmpun>:
 8000c44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c4c:	d102      	bne.n	8000c54 <__aeabi_dcmpun+0x10>
 8000c4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c52:	d10a      	bne.n	8000c6a <__aeabi_dcmpun+0x26>
 8000c54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c5c:	d102      	bne.n	8000c64 <__aeabi_dcmpun+0x20>
 8000c5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c62:	d102      	bne.n	8000c6a <__aeabi_dcmpun+0x26>
 8000c64:	f04f 0000 	mov.w	r0, #0
 8000c68:	4770      	bx	lr
 8000c6a:	f04f 0001 	mov.w	r0, #1
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_d2iz>:
 8000c70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c78:	d215      	bcs.n	8000ca6 <__aeabi_d2iz+0x36>
 8000c7a:	d511      	bpl.n	8000ca0 <__aeabi_d2iz+0x30>
 8000c7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c84:	d912      	bls.n	8000cac <__aeabi_d2iz+0x3c>
 8000c86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c96:	fa23 f002 	lsr.w	r0, r3, r2
 8000c9a:	bf18      	it	ne
 8000c9c:	4240      	negne	r0, r0
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000caa:	d105      	bne.n	8000cb8 <__aeabi_d2iz+0x48>
 8000cac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cb6:	4770      	bx	lr
 8000cb8:	f04f 0000 	mov.w	r0, #0
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_d2uiz>:
 8000cc0:	004a      	lsls	r2, r1, #1
 8000cc2:	d211      	bcs.n	8000ce8 <__aeabi_d2uiz+0x28>
 8000cc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cc8:	d211      	bcs.n	8000cee <__aeabi_d2uiz+0x2e>
 8000cca:	d50d      	bpl.n	8000ce8 <__aeabi_d2uiz+0x28>
 8000ccc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cd4:	d40e      	bmi.n	8000cf4 <__aeabi_d2uiz+0x34>
 8000cd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ce2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ce6:	4770      	bx	lr
 8000ce8:	f04f 0000 	mov.w	r0, #0
 8000cec:	4770      	bx	lr
 8000cee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cf2:	d102      	bne.n	8000cfa <__aeabi_d2uiz+0x3a>
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	4770      	bx	lr
 8000cfa:	f04f 0000 	mov.w	r0, #0
 8000cfe:	4770      	bx	lr

08000d00 <__aeabi_frsub>:
 8000d00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000d04:	e002      	b.n	8000d0c <__addsf3>
 8000d06:	bf00      	nop

08000d08 <__aeabi_fsub>:
 8000d08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000d0c <__addsf3>:
 8000d0c:	0042      	lsls	r2, r0, #1
 8000d0e:	bf1f      	itttt	ne
 8000d10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000d14:	ea92 0f03 	teqne	r2, r3
 8000d18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d20:	d06a      	beq.n	8000df8 <__addsf3+0xec>
 8000d22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d2a:	bfc1      	itttt	gt
 8000d2c:	18d2      	addgt	r2, r2, r3
 8000d2e:	4041      	eorgt	r1, r0
 8000d30:	4048      	eorgt	r0, r1
 8000d32:	4041      	eorgt	r1, r0
 8000d34:	bfb8      	it	lt
 8000d36:	425b      	neglt	r3, r3
 8000d38:	2b19      	cmp	r3, #25
 8000d3a:	bf88      	it	hi
 8000d3c:	4770      	bxhi	lr
 8000d3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d4a:	bf18      	it	ne
 8000d4c:	4240      	negne	r0, r0
 8000d4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d5a:	bf18      	it	ne
 8000d5c:	4249      	negne	r1, r1
 8000d5e:	ea92 0f03 	teq	r2, r3
 8000d62:	d03f      	beq.n	8000de4 <__addsf3+0xd8>
 8000d64:	f1a2 0201 	sub.w	r2, r2, #1
 8000d68:	fa41 fc03 	asr.w	ip, r1, r3
 8000d6c:	eb10 000c 	adds.w	r0, r0, ip
 8000d70:	f1c3 0320 	rsb	r3, r3, #32
 8000d74:	fa01 f103 	lsl.w	r1, r1, r3
 8000d78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__addsf3+0x78>
 8000d7e:	4249      	negs	r1, r1
 8000d80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d88:	d313      	bcc.n	8000db2 <__addsf3+0xa6>
 8000d8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d8e:	d306      	bcc.n	8000d9e <__addsf3+0x92>
 8000d90:	0840      	lsrs	r0, r0, #1
 8000d92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d96:	f102 0201 	add.w	r2, r2, #1
 8000d9a:	2afe      	cmp	r2, #254	; 0xfe
 8000d9c:	d251      	bcs.n	8000e42 <__addsf3+0x136>
 8000d9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000da2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da6:	bf08      	it	eq
 8000da8:	f020 0001 	biceq.w	r0, r0, #1
 8000dac:	ea40 0003 	orr.w	r0, r0, r3
 8000db0:	4770      	bx	lr
 8000db2:	0049      	lsls	r1, r1, #1
 8000db4:	eb40 0000 	adc.w	r0, r0, r0
 8000db8:	3a01      	subs	r2, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000dc0:	d2ed      	bcs.n	8000d9e <__addsf3+0x92>
 8000dc2:	fab0 fc80 	clz	ip, r0
 8000dc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000dca:	ebb2 020c 	subs.w	r2, r2, ip
 8000dce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000dd2:	bfaa      	itet	ge
 8000dd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000dd8:	4252      	neglt	r2, r2
 8000dda:	4318      	orrge	r0, r3
 8000ddc:	bfbc      	itt	lt
 8000dde:	40d0      	lsrlt	r0, r2
 8000de0:	4318      	orrlt	r0, r3
 8000de2:	4770      	bx	lr
 8000de4:	f092 0f00 	teq	r2, #0
 8000de8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dec:	bf06      	itte	eq
 8000dee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000df2:	3201      	addeq	r2, #1
 8000df4:	3b01      	subne	r3, #1
 8000df6:	e7b5      	b.n	8000d64 <__addsf3+0x58>
 8000df8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e00:	bf18      	it	ne
 8000e02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e06:	d021      	beq.n	8000e4c <__addsf3+0x140>
 8000e08:	ea92 0f03 	teq	r2, r3
 8000e0c:	d004      	beq.n	8000e18 <__addsf3+0x10c>
 8000e0e:	f092 0f00 	teq	r2, #0
 8000e12:	bf08      	it	eq
 8000e14:	4608      	moveq	r0, r1
 8000e16:	4770      	bx	lr
 8000e18:	ea90 0f01 	teq	r0, r1
 8000e1c:	bf1c      	itt	ne
 8000e1e:	2000      	movne	r0, #0
 8000e20:	4770      	bxne	lr
 8000e22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000e26:	d104      	bne.n	8000e32 <__addsf3+0x126>
 8000e28:	0040      	lsls	r0, r0, #1
 8000e2a:	bf28      	it	cs
 8000e2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e30:	4770      	bx	lr
 8000e32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e36:	bf3c      	itt	cc
 8000e38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e3c:	4770      	bxcc	lr
 8000e3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e4a:	4770      	bx	lr
 8000e4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e50:	bf16      	itet	ne
 8000e52:	4608      	movne	r0, r1
 8000e54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e58:	4601      	movne	r1, r0
 8000e5a:	0242      	lsls	r2, r0, #9
 8000e5c:	bf06      	itte	eq
 8000e5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e62:	ea90 0f01 	teqeq	r0, r1
 8000e66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e6a:	4770      	bx	lr

08000e6c <__aeabi_ui2f>:
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	e004      	b.n	8000e7c <__aeabi_i2f+0x8>
 8000e72:	bf00      	nop

08000e74 <__aeabi_i2f>:
 8000e74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e78:	bf48      	it	mi
 8000e7a:	4240      	negmi	r0, r0
 8000e7c:	ea5f 0c00 	movs.w	ip, r0
 8000e80:	bf08      	it	eq
 8000e82:	4770      	bxeq	lr
 8000e84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e88:	4601      	mov	r1, r0
 8000e8a:	f04f 0000 	mov.w	r0, #0
 8000e8e:	e01c      	b.n	8000eca <__aeabi_l2f+0x2a>

08000e90 <__aeabi_ul2f>:
 8000e90:	ea50 0201 	orrs.w	r2, r0, r1
 8000e94:	bf08      	it	eq
 8000e96:	4770      	bxeq	lr
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	e00a      	b.n	8000eb4 <__aeabi_l2f+0x14>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_l2f>:
 8000ea0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ea4:	bf08      	it	eq
 8000ea6:	4770      	bxeq	lr
 8000ea8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000eac:	d502      	bpl.n	8000eb4 <__aeabi_l2f+0x14>
 8000eae:	4240      	negs	r0, r0
 8000eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eb4:	ea5f 0c01 	movs.w	ip, r1
 8000eb8:	bf02      	ittt	eq
 8000eba:	4684      	moveq	ip, r0
 8000ebc:	4601      	moveq	r1, r0
 8000ebe:	2000      	moveq	r0, #0
 8000ec0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ec4:	bf08      	it	eq
 8000ec6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000eca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ece:	fabc f28c 	clz	r2, ip
 8000ed2:	3a08      	subs	r2, #8
 8000ed4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ed8:	db10      	blt.n	8000efc <__aeabi_l2f+0x5c>
 8000eda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ede:	4463      	add	r3, ip
 8000ee0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ee4:	f1c2 0220 	rsb	r2, r2, #32
 8000ee8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eec:	fa20 f202 	lsr.w	r2, r0, r2
 8000ef0:	eb43 0002 	adc.w	r0, r3, r2
 8000ef4:	bf08      	it	eq
 8000ef6:	f020 0001 	biceq.w	r0, r0, #1
 8000efa:	4770      	bx	lr
 8000efc:	f102 0220 	add.w	r2, r2, #32
 8000f00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f04:	f1c2 0220 	rsb	r2, r2, #32
 8000f08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000f0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000f10:	eb43 0002 	adc.w	r0, r3, r2
 8000f14:	bf08      	it	eq
 8000f16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f1a:	4770      	bx	lr

08000f1c <__gesf2>:
 8000f1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000f20:	e006      	b.n	8000f30 <__cmpsf2+0x4>
 8000f22:	bf00      	nop

08000f24 <__lesf2>:
 8000f24:	f04f 0c01 	mov.w	ip, #1
 8000f28:	e002      	b.n	8000f30 <__cmpsf2+0x4>
 8000f2a:	bf00      	nop

08000f2c <__cmpsf2>:
 8000f2c:	f04f 0c01 	mov.w	ip, #1
 8000f30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	bf18      	it	ne
 8000f42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f46:	d011      	beq.n	8000f6c <__cmpsf2+0x40>
 8000f48:	b001      	add	sp, #4
 8000f4a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f4e:	bf18      	it	ne
 8000f50:	ea90 0f01 	teqne	r0, r1
 8000f54:	bf58      	it	pl
 8000f56:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f5a:	bf88      	it	hi
 8000f5c:	17c8      	asrhi	r0, r1, #31
 8000f5e:	bf38      	it	cc
 8000f60:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f64:	bf18      	it	ne
 8000f66:	f040 0001 	orrne.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f70:	d102      	bne.n	8000f78 <__cmpsf2+0x4c>
 8000f72:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f76:	d105      	bne.n	8000f84 <__cmpsf2+0x58>
 8000f78:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f7c:	d1e4      	bne.n	8000f48 <__cmpsf2+0x1c>
 8000f7e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f82:	d0e1      	beq.n	8000f48 <__cmpsf2+0x1c>
 8000f84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__aeabi_cfrcmple>:
 8000f8c:	4684      	mov	ip, r0
 8000f8e:	4608      	mov	r0, r1
 8000f90:	4661      	mov	r1, ip
 8000f92:	e7ff      	b.n	8000f94 <__aeabi_cfcmpeq>

08000f94 <__aeabi_cfcmpeq>:
 8000f94:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f96:	f7ff ffc9 	bl	8000f2c <__cmpsf2>
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	bf48      	it	mi
 8000f9e:	f110 0f00 	cmnmi.w	r0, #0
 8000fa2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fa4 <__aeabi_fcmpeq>:
 8000fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa8:	f7ff fff4 	bl	8000f94 <__aeabi_cfcmpeq>
 8000fac:	bf0c      	ite	eq
 8000fae:	2001      	moveq	r0, #1
 8000fb0:	2000      	movne	r0, #0
 8000fb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_fcmplt>:
 8000fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fbc:	f7ff ffea 	bl	8000f94 <__aeabi_cfcmpeq>
 8000fc0:	bf34      	ite	cc
 8000fc2:	2001      	movcc	r0, #1
 8000fc4:	2000      	movcs	r0, #0
 8000fc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fca:	bf00      	nop

08000fcc <__aeabi_fcmple>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff ffe0 	bl	8000f94 <__aeabi_cfcmpeq>
 8000fd4:	bf94      	ite	ls
 8000fd6:	2001      	movls	r0, #1
 8000fd8:	2000      	movhi	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmpge>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffd2 	bl	8000f8c <__aeabi_cfrcmple>
 8000fe8:	bf94      	ite	ls
 8000fea:	2001      	movls	r0, #1
 8000fec:	2000      	movhi	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmpgt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffc8 	bl	8000f8c <__aeabi_cfrcmple>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_f2iz>:
 8001008:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800100c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001010:	d30f      	bcc.n	8001032 <__aeabi_f2iz+0x2a>
 8001012:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001016:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800101a:	d90d      	bls.n	8001038 <__aeabi_f2iz+0x30>
 800101c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001020:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001024:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001028:	fa23 f002 	lsr.w	r0, r3, r2
 800102c:	bf18      	it	ne
 800102e:	4240      	negne	r0, r0
 8001030:	4770      	bx	lr
 8001032:	f04f 0000 	mov.w	r0, #0
 8001036:	4770      	bx	lr
 8001038:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800103c:	d101      	bne.n	8001042 <__aeabi_f2iz+0x3a>
 800103e:	0242      	lsls	r2, r0, #9
 8001040:	d105      	bne.n	800104e <__aeabi_f2iz+0x46>
 8001042:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001046:	bf08      	it	eq
 8001048:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr

08001054 <__aeabi_uldivmod>:
 8001054:	b953      	cbnz	r3, 800106c <__aeabi_uldivmod+0x18>
 8001056:	b94a      	cbnz	r2, 800106c <__aeabi_uldivmod+0x18>
 8001058:	2900      	cmp	r1, #0
 800105a:	bf08      	it	eq
 800105c:	2800      	cmpeq	r0, #0
 800105e:	bf1c      	itt	ne
 8001060:	f04f 31ff 	movne.w	r1, #4294967295
 8001064:	f04f 30ff 	movne.w	r0, #4294967295
 8001068:	f000 b9ac 	b.w	80013c4 <__aeabi_idiv0>
 800106c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001070:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001074:	f000 f83e 	bl	80010f4 <__udivmoddi4>
 8001078:	f8dd e004 	ldr.w	lr, [sp, #4]
 800107c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001080:	b004      	add	sp, #16
 8001082:	4770      	bx	lr

08001084 <__aeabi_d2lz>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	4605      	mov	r5, r0
 8001088:	460c      	mov	r4, r1
 800108a:	4628      	mov	r0, r5
 800108c:	4621      	mov	r1, r4
 800108e:	2200      	movs	r2, #0
 8001090:	2300      	movs	r3, #0
 8001092:	f7ff fdaf 	bl	8000bf4 <__aeabi_dcmplt>
 8001096:	b928      	cbnz	r0, 80010a4 <__aeabi_d2lz+0x20>
 8001098:	4628      	mov	r0, r5
 800109a:	4621      	mov	r1, r4
 800109c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010a0:	f000 b80a 	b.w	80010b8 <__aeabi_d2ulz>
 80010a4:	4628      	mov	r0, r5
 80010a6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010aa:	f000 f805 	bl	80010b8 <__aeabi_d2ulz>
 80010ae:	4240      	negs	r0, r0
 80010b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b4:	bd38      	pop	{r3, r4, r5, pc}
 80010b6:	bf00      	nop

080010b8 <__aeabi_d2ulz>:
 80010b8:	b5d0      	push	{r4, r6, r7, lr}
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <__aeabi_d2ulz+0x34>)
 80010bc:	2200      	movs	r2, #0
 80010be:	4606      	mov	r6, r0
 80010c0:	460f      	mov	r7, r1
 80010c2:	f7ff fb25 	bl	8000710 <__aeabi_dmul>
 80010c6:	f7ff fdfb 	bl	8000cc0 <__aeabi_d2uiz>
 80010ca:	4604      	mov	r4, r0
 80010cc:	f7ff faa6 	bl	800061c <__aeabi_ui2d>
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <__aeabi_d2ulz+0x38>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f7ff fb1c 	bl	8000710 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4630      	mov	r0, r6
 80010de:	4639      	mov	r1, r7
 80010e0:	f7ff f95e 	bl	80003a0 <__aeabi_dsub>
 80010e4:	f7ff fdec 	bl	8000cc0 <__aeabi_d2uiz>
 80010e8:	4621      	mov	r1, r4
 80010ea:	bdd0      	pop	{r4, r6, r7, pc}
 80010ec:	3df00000 	.word	0x3df00000
 80010f0:	41f00000 	.word	0x41f00000

080010f4 <__udivmoddi4>:
 80010f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010f8:	9e08      	ldr	r6, [sp, #32]
 80010fa:	460d      	mov	r5, r1
 80010fc:	4604      	mov	r4, r0
 80010fe:	4688      	mov	r8, r1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d14d      	bne.n	80011a0 <__udivmoddi4+0xac>
 8001104:	428a      	cmp	r2, r1
 8001106:	4694      	mov	ip, r2
 8001108:	d968      	bls.n	80011dc <__udivmoddi4+0xe8>
 800110a:	fab2 f282 	clz	r2, r2
 800110e:	b152      	cbz	r2, 8001126 <__udivmoddi4+0x32>
 8001110:	fa01 f302 	lsl.w	r3, r1, r2
 8001114:	f1c2 0120 	rsb	r1, r2, #32
 8001118:	fa20 f101 	lsr.w	r1, r0, r1
 800111c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001120:	ea41 0803 	orr.w	r8, r1, r3
 8001124:	4094      	lsls	r4, r2
 8001126:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800112a:	0c21      	lsrs	r1, r4, #16
 800112c:	fbb8 fef5 	udiv	lr, r8, r5
 8001130:	fa1f f78c 	uxth.w	r7, ip
 8001134:	fb05 831e 	mls	r3, r5, lr, r8
 8001138:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800113c:	fb0e f107 	mul.w	r1, lr, r7
 8001140:	4299      	cmp	r1, r3
 8001142:	d90b      	bls.n	800115c <__udivmoddi4+0x68>
 8001144:	eb1c 0303 	adds.w	r3, ip, r3
 8001148:	f10e 30ff 	add.w	r0, lr, #4294967295
 800114c:	f080 811e 	bcs.w	800138c <__udivmoddi4+0x298>
 8001150:	4299      	cmp	r1, r3
 8001152:	f240 811b 	bls.w	800138c <__udivmoddi4+0x298>
 8001156:	f1ae 0e02 	sub.w	lr, lr, #2
 800115a:	4463      	add	r3, ip
 800115c:	1a5b      	subs	r3, r3, r1
 800115e:	b2a4      	uxth	r4, r4
 8001160:	fbb3 f0f5 	udiv	r0, r3, r5
 8001164:	fb05 3310 	mls	r3, r5, r0, r3
 8001168:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800116c:	fb00 f707 	mul.w	r7, r0, r7
 8001170:	42a7      	cmp	r7, r4
 8001172:	d90a      	bls.n	800118a <__udivmoddi4+0x96>
 8001174:	eb1c 0404 	adds.w	r4, ip, r4
 8001178:	f100 33ff 	add.w	r3, r0, #4294967295
 800117c:	f080 8108 	bcs.w	8001390 <__udivmoddi4+0x29c>
 8001180:	42a7      	cmp	r7, r4
 8001182:	f240 8105 	bls.w	8001390 <__udivmoddi4+0x29c>
 8001186:	4464      	add	r4, ip
 8001188:	3802      	subs	r0, #2
 800118a:	1be4      	subs	r4, r4, r7
 800118c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001190:	2100      	movs	r1, #0
 8001192:	b11e      	cbz	r6, 800119c <__udivmoddi4+0xa8>
 8001194:	40d4      	lsrs	r4, r2
 8001196:	2300      	movs	r3, #0
 8001198:	e9c6 4300 	strd	r4, r3, [r6]
 800119c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a0:	428b      	cmp	r3, r1
 80011a2:	d908      	bls.n	80011b6 <__udivmoddi4+0xc2>
 80011a4:	2e00      	cmp	r6, #0
 80011a6:	f000 80ee 	beq.w	8001386 <__udivmoddi4+0x292>
 80011aa:	2100      	movs	r1, #0
 80011ac:	e9c6 0500 	strd	r0, r5, [r6]
 80011b0:	4608      	mov	r0, r1
 80011b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b6:	fab3 f183 	clz	r1, r3
 80011ba:	2900      	cmp	r1, #0
 80011bc:	d14a      	bne.n	8001254 <__udivmoddi4+0x160>
 80011be:	42ab      	cmp	r3, r5
 80011c0:	d302      	bcc.n	80011c8 <__udivmoddi4+0xd4>
 80011c2:	4282      	cmp	r2, r0
 80011c4:	f200 80f9 	bhi.w	80013ba <__udivmoddi4+0x2c6>
 80011c8:	1a84      	subs	r4, r0, r2
 80011ca:	eb65 0303 	sbc.w	r3, r5, r3
 80011ce:	2001      	movs	r0, #1
 80011d0:	4698      	mov	r8, r3
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d0e2      	beq.n	800119c <__udivmoddi4+0xa8>
 80011d6:	e9c6 4800 	strd	r4, r8, [r6]
 80011da:	e7df      	b.n	800119c <__udivmoddi4+0xa8>
 80011dc:	b902      	cbnz	r2, 80011e0 <__udivmoddi4+0xec>
 80011de:	deff      	udf	#255	; 0xff
 80011e0:	fab2 f282 	clz	r2, r2
 80011e4:	2a00      	cmp	r2, #0
 80011e6:	f040 8091 	bne.w	800130c <__udivmoddi4+0x218>
 80011ea:	eba1 050c 	sub.w	r5, r1, ip
 80011ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011f2:	fa1f fe8c 	uxth.w	lr, ip
 80011f6:	2101      	movs	r1, #1
 80011f8:	fbb5 f3f7 	udiv	r3, r5, r7
 80011fc:	fb07 5013 	mls	r0, r7, r3, r5
 8001200:	0c25      	lsrs	r5, r4, #16
 8001202:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001206:	fb0e f003 	mul.w	r0, lr, r3
 800120a:	42a8      	cmp	r0, r5
 800120c:	d908      	bls.n	8001220 <__udivmoddi4+0x12c>
 800120e:	eb1c 0505 	adds.w	r5, ip, r5
 8001212:	f103 38ff 	add.w	r8, r3, #4294967295
 8001216:	d202      	bcs.n	800121e <__udivmoddi4+0x12a>
 8001218:	42a8      	cmp	r0, r5
 800121a:	f200 80cb 	bhi.w	80013b4 <__udivmoddi4+0x2c0>
 800121e:	4643      	mov	r3, r8
 8001220:	1a2d      	subs	r5, r5, r0
 8001222:	b2a4      	uxth	r4, r4
 8001224:	fbb5 f0f7 	udiv	r0, r5, r7
 8001228:	fb07 5510 	mls	r5, r7, r0, r5
 800122c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001230:	fb0e fe00 	mul.w	lr, lr, r0
 8001234:	45a6      	cmp	lr, r4
 8001236:	d908      	bls.n	800124a <__udivmoddi4+0x156>
 8001238:	eb1c 0404 	adds.w	r4, ip, r4
 800123c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001240:	d202      	bcs.n	8001248 <__udivmoddi4+0x154>
 8001242:	45a6      	cmp	lr, r4
 8001244:	f200 80bb 	bhi.w	80013be <__udivmoddi4+0x2ca>
 8001248:	4628      	mov	r0, r5
 800124a:	eba4 040e 	sub.w	r4, r4, lr
 800124e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001252:	e79e      	b.n	8001192 <__udivmoddi4+0x9e>
 8001254:	f1c1 0720 	rsb	r7, r1, #32
 8001258:	408b      	lsls	r3, r1
 800125a:	fa22 fc07 	lsr.w	ip, r2, r7
 800125e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001262:	fa20 f407 	lsr.w	r4, r0, r7
 8001266:	fa05 f301 	lsl.w	r3, r5, r1
 800126a:	431c      	orrs	r4, r3
 800126c:	40fd      	lsrs	r5, r7
 800126e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001272:	fa00 f301 	lsl.w	r3, r0, r1
 8001276:	fbb5 f8f9 	udiv	r8, r5, r9
 800127a:	0c20      	lsrs	r0, r4, #16
 800127c:	fa1f fe8c 	uxth.w	lr, ip
 8001280:	fb09 5518 	mls	r5, r9, r8, r5
 8001284:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8001288:	fb08 f00e 	mul.w	r0, r8, lr
 800128c:	42a8      	cmp	r0, r5
 800128e:	fa02 f201 	lsl.w	r2, r2, r1
 8001292:	d90b      	bls.n	80012ac <__udivmoddi4+0x1b8>
 8001294:	eb1c 0505 	adds.w	r5, ip, r5
 8001298:	f108 3aff 	add.w	sl, r8, #4294967295
 800129c:	f080 8088 	bcs.w	80013b0 <__udivmoddi4+0x2bc>
 80012a0:	42a8      	cmp	r0, r5
 80012a2:	f240 8085 	bls.w	80013b0 <__udivmoddi4+0x2bc>
 80012a6:	f1a8 0802 	sub.w	r8, r8, #2
 80012aa:	4465      	add	r5, ip
 80012ac:	1a2d      	subs	r5, r5, r0
 80012ae:	b2a4      	uxth	r4, r4
 80012b0:	fbb5 f0f9 	udiv	r0, r5, r9
 80012b4:	fb09 5510 	mls	r5, r9, r0, r5
 80012b8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80012bc:	fb00 fe0e 	mul.w	lr, r0, lr
 80012c0:	45ae      	cmp	lr, r5
 80012c2:	d908      	bls.n	80012d6 <__udivmoddi4+0x1e2>
 80012c4:	eb1c 0505 	adds.w	r5, ip, r5
 80012c8:	f100 34ff 	add.w	r4, r0, #4294967295
 80012cc:	d26c      	bcs.n	80013a8 <__udivmoddi4+0x2b4>
 80012ce:	45ae      	cmp	lr, r5
 80012d0:	d96a      	bls.n	80013a8 <__udivmoddi4+0x2b4>
 80012d2:	3802      	subs	r0, #2
 80012d4:	4465      	add	r5, ip
 80012d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012da:	fba0 9402 	umull	r9, r4, r0, r2
 80012de:	eba5 050e 	sub.w	r5, r5, lr
 80012e2:	42a5      	cmp	r5, r4
 80012e4:	46c8      	mov	r8, r9
 80012e6:	46a6      	mov	lr, r4
 80012e8:	d356      	bcc.n	8001398 <__udivmoddi4+0x2a4>
 80012ea:	d053      	beq.n	8001394 <__udivmoddi4+0x2a0>
 80012ec:	b15e      	cbz	r6, 8001306 <__udivmoddi4+0x212>
 80012ee:	ebb3 0208 	subs.w	r2, r3, r8
 80012f2:	eb65 050e 	sbc.w	r5, r5, lr
 80012f6:	fa05 f707 	lsl.w	r7, r5, r7
 80012fa:	fa22 f301 	lsr.w	r3, r2, r1
 80012fe:	40cd      	lsrs	r5, r1
 8001300:	431f      	orrs	r7, r3
 8001302:	e9c6 7500 	strd	r7, r5, [r6]
 8001306:	2100      	movs	r1, #0
 8001308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800130c:	f1c2 0320 	rsb	r3, r2, #32
 8001310:	fa20 f103 	lsr.w	r1, r0, r3
 8001314:	fa0c fc02 	lsl.w	ip, ip, r2
 8001318:	fa25 f303 	lsr.w	r3, r5, r3
 800131c:	4095      	lsls	r5, r2
 800131e:	430d      	orrs	r5, r1
 8001320:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001324:	fa1f fe8c 	uxth.w	lr, ip
 8001328:	fbb3 f1f7 	udiv	r1, r3, r7
 800132c:	fb07 3011 	mls	r0, r7, r1, r3
 8001330:	0c2b      	lsrs	r3, r5, #16
 8001332:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001336:	fb01 f00e 	mul.w	r0, r1, lr
 800133a:	4298      	cmp	r0, r3
 800133c:	fa04 f402 	lsl.w	r4, r4, r2
 8001340:	d908      	bls.n	8001354 <__udivmoddi4+0x260>
 8001342:	eb1c 0303 	adds.w	r3, ip, r3
 8001346:	f101 38ff 	add.w	r8, r1, #4294967295
 800134a:	d22f      	bcs.n	80013ac <__udivmoddi4+0x2b8>
 800134c:	4298      	cmp	r0, r3
 800134e:	d92d      	bls.n	80013ac <__udivmoddi4+0x2b8>
 8001350:	3902      	subs	r1, #2
 8001352:	4463      	add	r3, ip
 8001354:	1a1b      	subs	r3, r3, r0
 8001356:	b2ad      	uxth	r5, r5
 8001358:	fbb3 f0f7 	udiv	r0, r3, r7
 800135c:	fb07 3310 	mls	r3, r7, r0, r3
 8001360:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001364:	fb00 f30e 	mul.w	r3, r0, lr
 8001368:	42ab      	cmp	r3, r5
 800136a:	d908      	bls.n	800137e <__udivmoddi4+0x28a>
 800136c:	eb1c 0505 	adds.w	r5, ip, r5
 8001370:	f100 38ff 	add.w	r8, r0, #4294967295
 8001374:	d216      	bcs.n	80013a4 <__udivmoddi4+0x2b0>
 8001376:	42ab      	cmp	r3, r5
 8001378:	d914      	bls.n	80013a4 <__udivmoddi4+0x2b0>
 800137a:	3802      	subs	r0, #2
 800137c:	4465      	add	r5, ip
 800137e:	1aed      	subs	r5, r5, r3
 8001380:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001384:	e738      	b.n	80011f8 <__udivmoddi4+0x104>
 8001386:	4631      	mov	r1, r6
 8001388:	4630      	mov	r0, r6
 800138a:	e707      	b.n	800119c <__udivmoddi4+0xa8>
 800138c:	4686      	mov	lr, r0
 800138e:	e6e5      	b.n	800115c <__udivmoddi4+0x68>
 8001390:	4618      	mov	r0, r3
 8001392:	e6fa      	b.n	800118a <__udivmoddi4+0x96>
 8001394:	454b      	cmp	r3, r9
 8001396:	d2a9      	bcs.n	80012ec <__udivmoddi4+0x1f8>
 8001398:	ebb9 0802 	subs.w	r8, r9, r2
 800139c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80013a0:	3801      	subs	r0, #1
 80013a2:	e7a3      	b.n	80012ec <__udivmoddi4+0x1f8>
 80013a4:	4640      	mov	r0, r8
 80013a6:	e7ea      	b.n	800137e <__udivmoddi4+0x28a>
 80013a8:	4620      	mov	r0, r4
 80013aa:	e794      	b.n	80012d6 <__udivmoddi4+0x1e2>
 80013ac:	4641      	mov	r1, r8
 80013ae:	e7d1      	b.n	8001354 <__udivmoddi4+0x260>
 80013b0:	46d0      	mov	r8, sl
 80013b2:	e77b      	b.n	80012ac <__udivmoddi4+0x1b8>
 80013b4:	3b02      	subs	r3, #2
 80013b6:	4465      	add	r5, ip
 80013b8:	e732      	b.n	8001220 <__udivmoddi4+0x12c>
 80013ba:	4608      	mov	r0, r1
 80013bc:	e709      	b.n	80011d2 <__udivmoddi4+0xde>
 80013be:	4464      	add	r4, ip
 80013c0:	3802      	subs	r0, #2
 80013c2:	e742      	b.n	800124a <__udivmoddi4+0x156>

080013c4 <__aeabi_idiv0>:
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop

080013c8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80013c8:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80013ca:	4813      	ldr	r0, [pc, #76]	; (8001418 <MX_ADC_Init+0x50>)
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <MX_ADC_Init+0x54>)
 80013ce:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013d4:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013d6:	2300      	movs	r3, #0
 80013d8:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013da:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013dc:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013de:	2204      	movs	r2, #4
 80013e0:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80013e2:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80013e4:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80013e6:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 80013e8:	2201      	movs	r2, #1
 80013ea:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013ec:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f0:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f2:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80013f4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013fc:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80013fe:	2207      	movs	r2, #7
 8001400:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001402:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001404:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001408:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800140a:	f007 fcef 	bl	8008dec <HAL_ADC_Init>
 800140e:	b900      	cbnz	r0, 8001412 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001410:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001412:	f000 fa9d 	bl	8001950 <Error_Handler>
}
 8001416:	e7fb      	b.n	8001410 <MX_ADC_Init+0x48>
 8001418:	20000314 	.word	0x20000314
 800141c:	40012400 	.word	0x40012400

08001420 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001420:	6802      	ldr	r2, [r0, #0]
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_ADC_MspInit+0x28>)
 8001424:	429a      	cmp	r2, r3
 8001426:	d000      	beq.n	800142a <HAL_ADC_MspInit+0xa>
 8001428:	4770      	bx	lr
{
 800142a:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800142c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001430:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001436:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800143e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001440:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001442:	b002      	add	sp, #8
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40012400 	.word	0x40012400

0800144c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 800144c:	6802      	ldr	r2, [r0, #0]
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_ADC_MspDeInit+0x18>)
 8001450:	429a      	cmp	r2, r3
 8001452:	d000      	beq.n	8001456 <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001454:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001456:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800145a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800145c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001460:	6613      	str	r3, [r2, #96]	; 0x60
 8001462:	e7f7      	b.n	8001454 <HAL_ADC_MspDeInit+0x8>
 8001464:	40012400 	.word	0x40012400

08001468 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001468:	b530      	push	{r4, r5, lr}
 800146a:	b085      	sub	sp, #20
 800146c:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 800146e:	2300      	movs	r3, #0
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8001476:	f7ff ffa7 	bl	80013c8 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800147a:	4816      	ldr	r0, [pc, #88]	; (80014d4 <ADC_ReadChannels+0x6c>)
 800147c:	f008 f8fa 	bl	8009674 <HAL_ADCEx_Calibration_Start>
 8001480:	b9f8      	cbnz	r0, 80014c2 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001482:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001484:	2300      	movs	r3, #0
 8001486:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001488:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800148a:	a901      	add	r1, sp, #4
 800148c:	4811      	ldr	r0, [pc, #68]	; (80014d4 <ADC_ReadChannels+0x6c>)
 800148e:	f007 fe3b 	bl	8009108 <HAL_ADC_ConfigChannel>
 8001492:	b9c8      	cbnz	r0, 80014c8 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001494:	480f      	ldr	r0, [pc, #60]	; (80014d4 <ADC_ReadChannels+0x6c>)
 8001496:	f007 fffb 	bl	8009490 <HAL_ADC_Start>
 800149a:	b9c0      	cbnz	r0, 80014ce <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800149c:	4c0d      	ldr	r4, [pc, #52]	; (80014d4 <ADC_ReadChannels+0x6c>)
 800149e:	f04f 31ff 	mov.w	r1, #4294967295
 80014a2:	4620      	mov	r0, r4
 80014a4:	f007 fdce 	bl	8009044 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80014a8:	4620      	mov	r0, r4
 80014aa:	f008 f8c3 	bl	8009634 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80014ae:	4620      	mov	r0, r4
 80014b0:	f007 fe27 	bl	8009102 <HAL_ADC_GetValue>
 80014b4:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 80014b6:	4620      	mov	r0, r4
 80014b8:	f008 f866 	bl	8009588 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80014bc:	4628      	mov	r0, r5
 80014be:	b005      	add	sp, #20
 80014c0:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80014c2:	f000 fa45 	bl	8001950 <Error_Handler>
 80014c6:	e7dc      	b.n	8001482 <ADC_ReadChannels+0x1a>
    Error_Handler();
 80014c8:	f000 fa42 	bl	8001950 <Error_Handler>
 80014cc:	e7e2      	b.n	8001494 <ADC_ReadChannels+0x2c>
    Error_Handler();
 80014ce:	f000 fa3f 	bl	8001950 <Error_Handler>
 80014d2:	e7e3      	b.n	800149c <ADC_ReadChannels+0x34>
 80014d4:	20000314 	.word	0x20000314

080014d8 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 80014d8:	4b01      	ldr	r3, [pc, #4]	; (80014e0 <SYS_InitMeasurement+0x8>)
 80014da:	4a02      	ldr	r2, [pc, #8]	; (80014e4 <SYS_InitMeasurement+0xc>)
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	4770      	bx	lr
 80014e0:	20000314 	.word	0x20000314
 80014e4:	40012400 	.word	0x40012400

080014e8 <SYS_GetBatteryLevel>:
{
 80014e8:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <SYS_GetBatteryLevel+0x38>)
 80014ec:	f7ff ffbc 	bl	8001468 <ADC_ReadChannels>
  if (measuredLevel == 0)
 80014f0:	b1a0      	cbz	r0, 800151c <SYS_GetBatteryLevel+0x34>
 80014f2:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <SYS_GetBatteryLevel+0x3c>)
 80014f6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80014fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014fe:	428b      	cmp	r3, r1
 8001500:	d007      	beq.n	8001512 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001502:	f640 40e4 	movw	r0, #3300	; 0xce4
 8001506:	fb03 f000 	mul.w	r0, r3, r0
 800150a:	fbb0 f0f2 	udiv	r0, r0, r2
 800150e:	b280      	uxth	r0, r0
 8001510:	e005      	b.n	800151e <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <SYS_GetBatteryLevel+0x40>)
 8001514:	fbb0 f0f2 	udiv	r0, r0, r2
 8001518:	b280      	uxth	r0, r0
 800151a:	e000      	b.n	800151e <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 800151c:	2000      	movs	r0, #0
}
 800151e:	bd08      	pop	{r3, pc}
 8001520:	b4002000 	.word	0xb4002000
 8001524:	1fff7500 	.word	0x1fff7500
 8001528:	004c08d8 	.word	0x004c08d8

0800152c <SYS_GetTemperatureLevel>:
{
 800152c:	b510      	push	{r4, lr}
 800152e:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001536:	f7ff ffd7 	bl	80014e8 <SYS_GetBatteryLevel>
 800153a:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 800153c:	4821      	ldr	r0, [pc, #132]	; (80015c4 <SYS_GetTemperatureLevel+0x98>)
 800153e:	f7ff ff93 	bl	8001468 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <SYS_GetTemperatureLevel+0x9c>)
 8001544:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 8001548:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 800154c:	428a      	cmp	r2, r1
 800154e:	d01d      	beq.n	800158c <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001550:	fb00 f304 	mul.w	r3, r0, r4
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	4c1d      	ldr	r4, [pc, #116]	; (80015cc <SYS_GetTemperatureLevel+0xa0>)
 8001558:	fba4 0303 	umull	r0, r3, r4, r3
 800155c:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8001560:	2064      	movs	r0, #100	; 0x64
 8001562:	fb00 f303 	mul.w	r3, r0, r3
 8001566:	1a52      	subs	r2, r2, r1
 8001568:	fb93 f3f2 	sdiv	r3, r3, r2
 800156c:	331e      	adds	r3, #30
 800156e:	b21b      	sxth	r3, r3
 8001570:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001574:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001578:	b21b      	sxth	r3, r3
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b21b      	sxth	r3, r3
 800157e:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8001582:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8001586:	b200      	sxth	r0, r0
 8001588:	b002      	add	sp, #8
 800158a:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 800158c:	fb00 f404 	mul.w	r4, r0, r4
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <SYS_GetTemperatureLevel+0xa4>)
 8001592:	fba3 2304 	umull	r2, r3, r3, r4
 8001596:	1ae4      	subs	r4, r4, r3
 8001598:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 800159c:	0ae4      	lsrs	r4, r4, #11
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fb03 f404 	mul.w	r4, r3, r4
 80015a6:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 80015aa:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <SYS_GetTemperatureLevel+0xa8>)
 80015b0:	fb83 2304 	smull	r2, r3, r3, r4
 80015b4:	17e4      	asrs	r4, r4, #31
 80015b6:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 80015ba:	341e      	adds	r4, #30
 80015bc:	b224      	sxth	r4, r4
 80015be:	f8ad 4006 	strh.w	r4, [sp, #6]
 80015c2:	e7d7      	b.n	8001574 <SYS_GetTemperatureLevel+0x48>
 80015c4:	b0001000 	.word	0xb0001000
 80015c8:	1fff7500 	.word	0x1fff7500
 80015cc:	09ee009f 	.word	0x09ee009f
 80015d0:	00100101 	.word	0x00100101
 80015d4:	68db8bad 	.word	0x68db8bad

080015d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015d8:	b500      	push	{lr}
 80015da:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015e2:	f042 0204 	orr.w	r2, r2, #4
 80015e6:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015ea:	f002 0204 	and.w	r2, r2, #4
 80015ee:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80015f0:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015f4:	f042 0201 	orr.w	r2, r2, #1
 80015f8:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001602:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2102      	movs	r1, #2
 8001608:	200f      	movs	r0, #15
 800160a:	f008 f8e5 	bl	80097d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800160e:	200f      	movs	r0, #15
 8001610:	f008 f91a 	bl	8009848 <HAL_NVIC_EnableIRQ>

}
 8001614:	b003      	add	sp, #12
 8001616:	f85d fb04 	ldr.w	pc, [sp], #4

0800161a <FLASH_IF_IsEmpty>:
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 800161a:	e000      	b.n	800161e <FLASH_IF_IsEmpty+0x4>
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 800161c:	3901      	subs	r1, #1
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 800161e:	f010 0307 	ands.w	r3, r0, #7
 8001622:	d012      	beq.n	800164a <FLASH_IF_IsEmpty+0x30>
    if (*addr++ != UINT8_MAX)
 8001624:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001628:	2bff      	cmp	r3, #255	; 0xff
 800162a:	d0f7      	beq.n	800161c <FLASH_IF_IsEmpty+0x2>
      return FLASH_NOT_EMPTY;
 800162c:	2001      	movs	r0, #1
 800162e:	4770      	bx	lr
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 8001630:	3901      	subs	r1, #1
  while (size != 0)
 8001632:	b129      	cbz	r1, 8001640 <FLASH_IF_IsEmpty+0x26>
    if (*addr++ != UINT8_MAX)
 8001634:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001638:	2bff      	cmp	r3, #255	; 0xff
 800163a:	d0f9      	beq.n	8001630 <FLASH_IF_IsEmpty+0x16>
      return FLASH_NOT_EMPTY;
 800163c:	2001      	movs	r0, #1
 800163e:	e002      	b.n	8001646 <FLASH_IF_IsEmpty+0x2c>
  }
  return FLASH_EMPTY;
 8001640:	2000      	movs	r0, #0
 8001642:	e000      	b.n	8001646 <FLASH_IF_IsEmpty+0x2c>
      return FLASH_NOT_EMPTY;
 8001644:	2001      	movs	r0, #1
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001646:	bc10      	pop	{r4}
 8001648:	4770      	bx	lr
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800164a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800164e:	d212      	bcs.n	8001676 <FLASH_IF_IsEmpty+0x5c>
{
 8001650:	b410      	push	{r4}
    if (*addr64++ != UINT64_MAX)
 8001652:	4602      	mov	r2, r0
 8001654:	f852 4b08 	ldr.w	r4, [r2], #8
 8001658:	6840      	ldr	r0, [r0, #4]
 800165a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800165e:	bf08      	it	eq
 8001660:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 8001664:	d1ee      	bne.n	8001644 <FLASH_IF_IsEmpty+0x2a>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001666:	3301      	adds	r3, #1
    if (*addr64++ != UINT64_MAX)
 8001668:	4610      	mov	r0, r2
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800166a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800166e:	d3f0      	bcc.n	8001652 <FLASH_IF_IsEmpty+0x38>
  size -= sizeof(uint64_t) * i;
 8001670:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 8001674:	e7dd      	b.n	8001632 <FLASH_IF_IsEmpty+0x18>
  size -= sizeof(uint64_t) * i;
 8001676:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 800167a:	b129      	cbz	r1, 8001688 <FLASH_IF_IsEmpty+0x6e>
    if (*addr++ != UINT8_MAX)
 800167c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001680:	2bff      	cmp	r3, #255	; 0xff
 8001682:	d103      	bne.n	800168c <FLASH_IF_IsEmpty+0x72>
    size--;
 8001684:	3901      	subs	r1, #1
 8001686:	e7f8      	b.n	800167a <FLASH_IF_IsEmpty+0x60>
  return FLASH_EMPTY;
 8001688:	2000      	movs	r0, #0
 800168a:	4770      	bx	lr
      return FLASH_NOT_EMPTY;
 800168c:	2001      	movs	r0, #1
}
 800168e:	4770      	bx	lr

08001690 <FLASH_IF_Write64>:
{
 8001690:	b570      	push	{r4, r5, r6, lr}
 8001692:	4604      	mov	r4, r0
 8001694:	4616      	mov	r6, r2
 8001696:	461d      	mov	r5, r3
  while (*(uint64_t *)address != data)
 8001698:	e005      	b.n	80016a6 <FLASH_IF_Write64+0x16>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800169a:	4632      	mov	r2, r6
 800169c:	462b      	mov	r3, r5
 800169e:	4621      	mov	r1, r4
 80016a0:	2001      	movs	r0, #1
 80016a2:	f008 fbfd 	bl	8009ea0 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 80016a6:	6822      	ldr	r2, [r4, #0]
 80016a8:	6863      	ldr	r3, [r4, #4]
 80016aa:	42ab      	cmp	r3, r5
 80016ac:	bf08      	it	eq
 80016ae:	42b2      	cmpeq	r2, r6
 80016b0:	d005      	beq.n	80016be <FLASH_IF_Write64+0x2e>
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 80016b2:	4904      	ldr	r1, [pc, #16]	; (80016c4 <FLASH_IF_Write64+0x34>)
 80016b4:	6909      	ldr	r1, [r1, #16]
 80016b6:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 80016ba:	d1fa      	bne.n	80016b2 <FLASH_IF_Write64+0x22>
 80016bc:	e7ed      	b.n	800169a <FLASH_IF_Write64+0xa>
}
 80016be:	2000      	movs	r0, #0
 80016c0:	bd70      	pop	{r4, r5, r6, pc}
 80016c2:	bf00      	nop
 80016c4:	58004000 	.word	0x58004000

080016c8 <FLASH_IF_Write_Buffer>:
{
 80016c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	4606      	mov	r6, r0
 80016d0:	460c      	mov	r4, r1
 80016d2:	4690      	mov	r8, r2
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80016d4:	2500      	movs	r5, #0
  int32_t status = FLASH_OK;
 80016d6:	462f      	mov	r7, r5
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80016d8:	e003      	b.n	80016e2 <FLASH_IF_Write_Buffer+0x1a>
    pDestination += sizeof(uint64_t);
 80016da:	3608      	adds	r6, #8
    pSrc += sizeof(uint64_t);
 80016dc:	3408      	adds	r4, #8
    if (status != FLASH_OK)
 80016de:	b9af      	cbnz	r7, 800170c <FLASH_IF_Write_Buffer+0x44>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80016e0:	3501      	adds	r5, #1
 80016e2:	ebb5 0fd8 	cmp.w	r5, r8, lsr #3
 80016e6:	d211      	bcs.n	800170c <FLASH_IF_Write_Buffer+0x44>
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80016e8:	2208      	movs	r2, #8
 80016ea:	4621      	mov	r1, r4
 80016ec:	4668      	mov	r0, sp
 80016ee:	f015 ffa3 	bl	8017638 <UTIL_MEM_cpy_8>
    if (src_value != UINT64_MAX)
 80016f2:	9a00      	ldr	r2, [sp, #0]
 80016f4:	9b01      	ldr	r3, [sp, #4]
 80016f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fa:	bf08      	it	eq
 80016fc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001700:	d0eb      	beq.n	80016da <FLASH_IF_Write_Buffer+0x12>
      status = FLASH_IF_Write64(pDestination, src_value);
 8001702:	4630      	mov	r0, r6
 8001704:	f7ff ffc4 	bl	8001690 <FLASH_IF_Write64>
 8001708:	4607      	mov	r7, r0
 800170a:	e7e6      	b.n	80016da <FLASH_IF_Write_Buffer+0x12>
}
 800170c:	4638      	mov	r0, r7
 800170e:	b002      	add	sp, #8
 8001710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001714 <FLASH_IF_EraseByPages>:
{
 8001714:	b500      	push	{lr}
 8001716:	b085      	sub	sp, #20
  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001718:	2302      	movs	r3, #2
 800171a:	9301      	str	r3, [sp, #4]
  erase_str.Page = page;
 800171c:	9002      	str	r0, [sp, #8]
  erase_str.NbPages = n;
 800171e:	9103      	str	r1, [sp, #12]
  if (interrupt)
 8001720:	b13a      	cbz	r2, 8001732 <FLASH_IF_EraseByPages+0x1e>
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001722:	a801      	add	r0, sp, #4
 8001724:	f008 fc84 	bl	800a030 <HAL_FLASHEx_Erase_IT>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001728:	b140      	cbz	r0, 800173c <FLASH_IF_EraseByPages+0x28>
 800172a:	2802      	cmp	r0, #2
 800172c:	d10a      	bne.n	8001744 <FLASH_IF_EraseByPages+0x30>
 800172e:	2001      	movs	r0, #1
 8001730:	e005      	b.n	800173e <FLASH_IF_EraseByPages+0x2a>
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001732:	4669      	mov	r1, sp
 8001734:	a801      	add	r0, sp, #4
 8001736:	f008 fc3b 	bl	8009fb0 <HAL_FLASHEx_Erase>
 800173a:	e7f5      	b.n	8001728 <FLASH_IF_EraseByPages+0x14>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 800173c:	2000      	movs	r0, #0
}
 800173e:	b005      	add	sp, #20
 8001740:	f85d fb04 	ldr.w	pc, [sp], #4
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001744:	f06f 0001 	mvn.w	r0, #1
 8001748:	e7f9      	b.n	800173e <FLASH_IF_EraseByPages+0x2a>
	...

0800174c <FLASH_IF_Write>:
{
 800174c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001750:	4693      	mov	fp, r2
 8001752:	4699      	mov	r9, r3
  uint32_t page_start_index = PAGE(address);
 8001754:	f100 4578 	add.w	r5, r0, #4160749568	; 0xf8000000
 8001758:	4b3e      	ldr	r3, [pc, #248]	; (8001854 <FLASH_IF_Write+0x108>)
 800175a:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800175e:	4b3e      	ldr	r3, [pc, #248]	; (8001858 <FLASH_IF_Write+0x10c>)
 8001760:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001764:	fbb5 f2f3 	udiv	r2, r5, r3
 8001768:	fb03 5512 	mls	r5, r3, r2, r5
  uint32_t page_end_index = PAGE(address + size - 1);
 800176c:	eb00 0a0b 	add.w	sl, r0, fp
 8001770:	f10a 4a78 	add.w	sl, sl, #4160749568	; 0xf8000000
 8001774:	f10a 3aff 	add.w	sl, sl, #4294967295
 8001778:	fbba f2f3 	udiv	r2, sl, r3
 800177c:	fb03 aa12 	mls	sl, r3, r2, sl
  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001780:	2900      	cmp	r1, #0
 8001782:	d052      	beq.n	800182a <FLASH_IF_Write+0xde>
 8001784:	4606      	mov	r6, r0
 8001786:	0aed      	lsrs	r5, r5, #11
 8001788:	ea4f 2ada 	mov.w	sl, sl, lsr #11
 800178c:	4688      	mov	r8, r1
 800178e:	f01b 0f07 	tst.w	fp, #7
 8001792:	d14d      	bne.n	8001830 <FLASH_IF_Write+0xe4>
 8001794:	f010 0f07 	tst.w	r0, #7
 8001798:	d14d      	bne.n	8001836 <FLASH_IF_Write+0xea>
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <FLASH_IF_Write+0x110>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db4c      	blt.n	800183c <FLASH_IF_Write+0xf0>
  if (page_start_index != page_end_index)
 80017a2:	4555      	cmp	r5, sl
 80017a4:	d004      	beq.n	80017b0 <FLASH_IF_Write+0x64>
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 80017a6:	f3c0 040a 	ubfx	r4, r0, #0, #11
 80017aa:	f5c4 6400 	rsb	r4, r4, #2048	; 0x800
 80017ae:	e00d      	b.n	80017cc <FLASH_IF_Write+0x80>
  uint32_t curr_size = size;
 80017b0:	465c      	mov	r4, fp
 80017b2:	e00b      	b.n	80017cc <FLASH_IF_Write+0x80>
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80017b4:	4622      	mov	r2, r4
 80017b6:	4641      	mov	r1, r8
 80017b8:	4630      	mov	r0, r6
 80017ba:	f7ff ff85 	bl	80016c8 <FLASH_IF_Write_Buffer>
 80017be:	2800      	cmp	r0, #0
 80017c0:	d145      	bne.n	800184e <FLASH_IF_Write+0x102>
    curr_dest_addr += curr_size;
 80017c2:	4426      	add	r6, r4
    curr_src_addr += curr_size;
 80017c4:	44a0      	add	r8, r4
    curr_size = size - curr_size;
 80017c6:	ebab 0404 	sub.w	r4, fp, r4
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80017ca:	3501      	adds	r5, #1
 80017cc:	4555      	cmp	r5, sl
 80017ce:	d829      	bhi.n	8001824 <FLASH_IF_Write+0xd8>
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 80017d0:	4621      	mov	r1, r4
 80017d2:	4630      	mov	r0, r6
 80017d4:	f7ff ff21 	bl	800161a <FLASH_IF_IsEmpty>
 80017d8:	2800      	cmp	r0, #0
 80017da:	d0eb      	beq.n	80017b4 <FLASH_IF_Write+0x68>
      if (dataTempPage == NULL)
 80017dc:	f1b9 0f00 	cmp.w	r9, #0
 80017e0:	d02f      	beq.n	8001842 <FLASH_IF_Write+0xf6>
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80017e2:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 80017e6:	02ff      	lsls	r7, r7, #11
 80017e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ec:	4639      	mov	r1, r7
 80017ee:	4648      	mov	r0, r9
 80017f0:	f015 ff22 	bl	8017638 <UTIL_MEM_cpy_8>
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 80017f4:	f3c6 000a 	ubfx	r0, r6, #0, #11
 80017f8:	b2a2      	uxth	r2, r4
 80017fa:	4641      	mov	r1, r8
 80017fc:	4448      	add	r0, r9
 80017fe:	f015 ff1b 	bl	8017638 <UTIL_MEM_cpy_8>
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001802:	2200      	movs	r2, #0
 8001804:	2101      	movs	r1, #1
 8001806:	4628      	mov	r0, r5
 8001808:	f7ff ff84 	bl	8001714 <FLASH_IF_EraseByPages>
 800180c:	b9e0      	cbnz	r0, 8001848 <FLASH_IF_Write+0xfc>
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800180e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001812:	4649      	mov	r1, r9
 8001814:	4638      	mov	r0, r7
 8001816:	f7ff ff57 	bl	80016c8 <FLASH_IF_Write_Buffer>
 800181a:	2800      	cmp	r0, #0
 800181c:	d0d1      	beq.n	80017c2 <FLASH_IF_Write+0x76>
          status = FLASH_WRITE_ERROR;
 800181e:	f06f 0002 	mvn.w	r0, #2
 8001822:	e000      	b.n	8001826 <FLASH_IF_Write+0xda>
  int32_t status = FLASH_OK;
 8001824:	2000      	movs	r0, #0
}
 8001826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FLASH_PARAM_ERROR;
 800182a:	f06f 0004 	mvn.w	r0, #4
 800182e:	e7fa      	b.n	8001826 <FLASH_IF_Write+0xda>
 8001830:	f06f 0004 	mvn.w	r0, #4
 8001834:	e7f7      	b.n	8001826 <FLASH_IF_Write+0xda>
 8001836:	f06f 0004 	mvn.w	r0, #4
 800183a:	e7f4      	b.n	8001826 <FLASH_IF_Write+0xda>
    return FLASH_LOCK_ERROR;
 800183c:	f06f 0003 	mvn.w	r0, #3
 8001840:	e7f1      	b.n	8001826 <FLASH_IF_Write+0xda>
        return FLASH_PARAM_ERROR;
 8001842:	f06f 0004 	mvn.w	r0, #4
 8001846:	e7ee      	b.n	8001826 <FLASH_IF_Write+0xda>
        status = FLASH_ERASE_ERROR;
 8001848:	f06f 0001 	mvn.w	r0, #1
 800184c:	e7eb      	b.n	8001826 <FLASH_IF_Write+0xda>
        status = FLASH_WRITE_ERROR;
 800184e:	f06f 0002 	mvn.w	r0, #2
 8001852:	e7e8      	b.n	8001826 <FLASH_IF_Write+0xda>
 8001854:	1fff7000 	.word	0x1fff7000
 8001858:	03fffc00 	.word	0x03fffc00
 800185c:	58004000 	.word	0x58004000

08001860 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001864:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	2400      	movs	r4, #0
 8001868:	9403      	str	r4, [sp, #12]
 800186a:	9404      	str	r4, [sp, #16]
 800186c:	9405      	str	r4, [sp, #20]
 800186e:	9406      	str	r4, [sp, #24]
 8001870:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001878:	f042 0202 	orr.w	r2, r2, #2
 800187c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800187e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001880:	f002 0202 	and.w	r2, r2, #2
 8001884:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001886:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001888:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800188a:	f042 0204 	orr.w	r2, r2, #4
 800188e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001890:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001892:	f002 0204 	and.w	r2, r2, #4
 8001896:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001898:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800189a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800189c:	f042 0201 	orr.w	r2, r2, #1
 80018a0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80018aa:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80018ac:	4e26      	ldr	r6, [pc, #152]	; (8001948 <MX_GPIO_Init+0xe8>)
 80018ae:	4622      	mov	r2, r4
 80018b0:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80018b4:	4630      	mov	r0, r6
 80018b6:	f008 fd3f 	bl	800a338 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80018ba:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80018be:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2501      	movs	r5, #1
 80018c2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c6:	2302      	movs	r3, #2
 80018c8:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	a903      	add	r1, sp, #12
 80018cc:	4630      	mov	r0, r6
 80018ce:	f008 fbe3 	bl	800a098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80018d2:	f04f 0803 	mov.w	r8, #3
 80018d6:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018da:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80018de:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	a903      	add	r1, sp, #12
 80018e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e8:	f008 fbd6 	bl	800a098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80018ec:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018f0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	a903      	add	r1, sp, #12
 80018fc:	4630      	mov	r0, r6
 80018fe:	f008 fbcb 	bl	800a098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 8001902:	2340      	movs	r3, #64	; 0x40
 8001904:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001906:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001908:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 800190a:	a903      	add	r1, sp, #12
 800190c:	480f      	ldr	r0, [pc, #60]	; (800194c <MX_GPIO_Init+0xec>)
 800190e:	f008 fbc3 	bl	800a098 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001912:	4622      	mov	r2, r4
 8001914:	4621      	mov	r1, r4
 8001916:	2006      	movs	r0, #6
 8001918:	f007 ff5e 	bl	80097d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800191c:	2006      	movs	r0, #6
 800191e:	f007 ff93 	bl	8009848 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001922:	4622      	mov	r2, r4
 8001924:	4621      	mov	r1, r4
 8001926:	2007      	movs	r0, #7
 8001928:	f007 ff56 	bl	80097d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800192c:	2007      	movs	r0, #7
 800192e:	f007 ff8b 	bl	8009848 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001932:	4622      	mov	r2, r4
 8001934:	4621      	mov	r1, r4
 8001936:	2016      	movs	r0, #22
 8001938:	f007 ff4e 	bl	80097d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800193c:	2016      	movs	r0, #22
 800193e:	f007 ff83 	bl	8009848 <HAL_NVIC_EnableIRQ>

}
 8001942:	b008      	add	sp, #32
 8001944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001948:	48000400 	.word	0x48000400
 800194c:	48000800 	.word	0x48000800

08001950 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001952:	e7fe      	b.n	8001952 <Error_Handler+0x2>

08001954 <SystemClock_Config>:
{
 8001954:	b510      	push	{r4, lr}
 8001956:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001958:	2248      	movs	r2, #72	; 0x48
 800195a:	2100      	movs	r1, #0
 800195c:	a808      	add	r0, sp, #32
 800195e:	f016 fc2f 	bl	80181c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001962:	2400      	movs	r4, #0
 8001964:	9401      	str	r4, [sp, #4]
 8001966:	9402      	str	r4, [sp, #8]
 8001968:	9403      	str	r4, [sp, #12]
 800196a:	9404      	str	r4, [sp, #16]
 800196c:	9405      	str	r4, [sp, #20]
 800196e:	9406      	str	r4, [sp, #24]
 8001970:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001972:	f008 fcfd 	bl	800a370 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001976:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800197a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800197e:	f023 0318 	bic.w	r3, r3, #24
 8001982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001986:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800198a:	6813      	ldr	r3, [r2, #0]
 800198c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001990:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	6813      	ldr	r3, [r2, #0]
 8001998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80019a0:	2324      	movs	r3, #36	; 0x24
 80019a2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019a4:	2381      	movs	r3, #129	; 0x81
 80019a6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019a8:	2301      	movs	r3, #1
 80019aa:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80019ac:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80019ae:	23b0      	movs	r3, #176	; 0xb0
 80019b0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019b2:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b4:	a808      	add	r0, sp, #32
 80019b6:	f008 fe75 	bl	800a6a4 <HAL_RCC_OscConfig>
 80019ba:	b970      	cbnz	r0, 80019da <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80019bc:	234f      	movs	r3, #79	; 0x4f
 80019be:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019c0:	2300      	movs	r3, #0
 80019c2:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019c6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80019ca:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019cc:	2102      	movs	r1, #2
 80019ce:	a801      	add	r0, sp, #4
 80019d0:	f009 f9a4 	bl	800ad1c <HAL_RCC_ClockConfig>
 80019d4:	b918      	cbnz	r0, 80019de <SystemClock_Config+0x8a>
}
 80019d6:	b01a      	add	sp, #104	; 0x68
 80019d8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80019da:	f7ff ffb9 	bl	8001950 <Error_Handler>
    Error_Handler();
 80019de:	f7ff ffb7 	bl	8001950 <Error_Handler>

080019e2 <main>:
{
 80019e2:	b508      	push	{r3, lr}
  HAL_Init();
 80019e4:	f007 f9b4 	bl	8008d50 <HAL_Init>
  SystemClock_Config();
 80019e8:	f7ff ffb4 	bl	8001954 <SystemClock_Config>
  MX_GPIO_Init();
 80019ec:	f7ff ff38 	bl	8001860 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80019f0:	f000 fe1a 	bl	8002628 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 80019f4:	f000 fe1e 	bl	8002634 <MX_LoRaWAN_Process>
  while (1)
 80019f8:	e7fc      	b.n	80019f4 <main+0x12>
	...

080019fc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80019fc:	b500      	push	{lr}
 80019fe:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001a00:	222c      	movs	r2, #44	; 0x2c
 8001a02:	2100      	movs	r1, #0
 8001a04:	a801      	add	r0, sp, #4
 8001a06:	f016 fbdb 	bl	80181c0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a0a:	4819      	ldr	r0, [pc, #100]	; (8001a70 <MX_RTC_Init+0x74>)
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <MX_RTC_Init+0x78>)
 8001a0e:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001a10:	231f      	movs	r3, #31
 8001a12:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a18:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a1a:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a20:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a22:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a28:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a2a:	f009 fcdd 	bl	800b3e8 <HAL_RTC_Init>
 8001a2e:	b9a8      	cbnz	r0, 8001a5c <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001a30:	480f      	ldr	r0, [pc, #60]	; (8001a70 <MX_RTC_Init+0x74>)
 8001a32:	f009 fe13 	bl	800b65c <HAL_RTCEx_SetSSRU_IT>
 8001a36:	b9a0      	cbnz	r0, 8001a62 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001a38:	2200      	movs	r2, #0
 8001a3a:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a3c:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a3e:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001a40:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a44:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a4a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001a4c:	a901      	add	r1, sp, #4
 8001a4e:	4808      	ldr	r0, [pc, #32]	; (8001a70 <MX_RTC_Init+0x74>)
 8001a50:	f009 fd28 	bl	800b4a4 <HAL_RTC_SetAlarm_IT>
 8001a54:	b940      	cbnz	r0, 8001a68 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a56:	b00d      	add	sp, #52	; 0x34
 8001a58:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001a5c:	f7ff ff78 	bl	8001950 <Error_Handler>
 8001a60:	e7e6      	b.n	8001a30 <MX_RTC_Init+0x34>
    Error_Handler();
 8001a62:	f7ff ff75 	bl	8001950 <Error_Handler>
 8001a66:	e7e7      	b.n	8001a38 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001a68:	f7ff ff72 	bl	8001950 <Error_Handler>
}
 8001a6c:	e7f3      	b.n	8001a56 <MX_RTC_Init+0x5a>
 8001a6e:	bf00      	nop
 8001a70:	20000378 	.word	0x20000378
 8001a74:	40002800 	.word	0x40002800

08001a78 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a78:	b510      	push	{r4, lr}
 8001a7a:	b090      	sub	sp, #64	; 0x40
 8001a7c:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a7e:	2238      	movs	r2, #56	; 0x38
 8001a80:	2100      	movs	r1, #0
 8001a82:	a802      	add	r0, sp, #8
 8001a84:	f016 fb9c 	bl	80181c0 <memset>
  if(rtcHandle->Instance==RTC)
 8001a88:	6822      	ldr	r2, [r4, #0]
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <HAL_RTC_MspInit+0x7c>)
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001a90:	b010      	add	sp, #64	; 0x40
 8001a92:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a98:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a9e:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa0:	a802      	add	r0, sp, #8
 8001aa2:	f009 fa8f 	bl	800afc4 <HAL_RCCEx_PeriphCLKConfig>
 8001aa6:	bb08      	cbnz	r0, 8001aec <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001ab0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ab4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ab8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001abe:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001ac8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	4611      	mov	r1, r2
 8001ace:	2002      	movs	r0, #2
 8001ad0:	f007 fe82 	bl	80097d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	f007 feb7 	bl	8009848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	4611      	mov	r1, r2
 8001ade:	202a      	movs	r0, #42	; 0x2a
 8001ae0:	f007 fe7a 	bl	80097d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001ae4:	202a      	movs	r0, #42	; 0x2a
 8001ae6:	f007 feaf 	bl	8009848 <HAL_NVIC_EnableIRQ>
}
 8001aea:	e7d1      	b.n	8001a90 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001aec:	f7ff ff30 	bl	8001950 <Error_Handler>
 8001af0:	e7da      	b.n	8001aa8 <HAL_RTC_MspInit+0x30>
 8001af2:	bf00      	nop
 8001af4:	40002800 	.word	0x40002800

08001af8 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001af8:	4770      	bx	lr

08001afa <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001afa:	4770      	bx	lr

08001afc <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001afc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001afe:	f007 f93d 	bl	8008d7c <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001b02:	2001      	movs	r0, #1
 8001b04:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <PWR_EnterStopMode+0x14>)
 8001b06:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001b0a:	f008 fc95 	bl	800a438 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001b0e:	bd08      	pop	{r3, pc}
 8001b10:	58000400 	.word	0x58000400

08001b14 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001b14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001b16:	f007 f938 	bl	8008d8a <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001b1a:	bd08      	pop	{r3, pc}

08001b1c <PWR_ExitStopMode>:
{
 8001b1c:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001b1e:	f007 f934 	bl	8008d8a <HAL_ResumeTick>
  vcom_Resume();
 8001b22:	f000 fc7d 	bl	8002420 <vcom_Resume>
}
 8001b26:	bd08      	pop	{r3, pc}

08001b28 <PWR_EnterSleepMode>:
{
 8001b28:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001b2a:	f007 f927 	bl	8008d7c <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001b2e:	2101      	movs	r1, #1
 8001b30:	2000      	movs	r0, #0
 8001b32:	f008 fc25 	bl	800a380 <HAL_PWR_EnterSLEEPMode>
}
 8001b36:	bd08      	pop	{r3, pc}

08001b38 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b38:	4770      	bx	lr

08001b3a <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b3a:	e7fe      	b.n	8001b3a <NMI_Handler>

08001b3c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <HardFault_Handler>

08001b3e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <MemManage_Handler>

08001b40 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <BusFault_Handler>

08001b42 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <UsageFault_Handler>

08001b44 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b44:	4770      	bx	lr

08001b46 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b46:	4770      	bx	lr

08001b48 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b48:	4770      	bx	lr

08001b4a <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4a:	4770      	bx	lr

08001b4c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001b4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001b4e:	4802      	ldr	r0, [pc, #8]	; (8001b58 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001b50:	f009 fdb0 	bl	800b6b4 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001b54:	bd08      	pop	{r3, pc}
 8001b56:	bf00      	nop
 8001b58:	20000378 	.word	0x20000378

08001b5c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f008 fbf8 	bl	800a354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b64:	bd08      	pop	{r3, pc}

08001b66 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b66:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001b68:	2002      	movs	r0, #2
 8001b6a:	f008 fbf3 	bl	800a354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b6e:	bd08      	pop	{r3, pc}

08001b70 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001b70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b72:	4802      	ldr	r0, [pc, #8]	; (8001b7c <DMA1_Channel5_IRQHandler+0xc>)
 8001b74:	f008 f886 	bl	8009c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001b78:	bd08      	pop	{r3, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200003cc 	.word	0x200003cc

08001b80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001b82:	2040      	movs	r0, #64	; 0x40
 8001b84:	f008 fbe6 	bl	800a354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b88:	bd08      	pop	{r3, pc}
	...

08001b8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b8e:	4802      	ldr	r0, [pc, #8]	; (8001b98 <USART2_IRQHandler+0xc>)
 8001b90:	f00a fa4c 	bl	800c02c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b94:	bd08      	pop	{r3, pc}
 8001b96:	bf00      	nop
 8001b98:	2000042c 	.word	0x2000042c

08001b9c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001b9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b9e:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <RTC_Alarm_IRQHandler+0xc>)
 8001ba0:	f009 fb9a 	bl	800b2d8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001ba4:	bd08      	pop	{r3, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000378 	.word	0x20000378

08001bac <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001bac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001bae:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <SUBGHZ_Radio_IRQHandler+0xc>)
 8001bb0:	f00a f82a 	bl	800bc08 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001bb4:	bd08      	pop	{r3, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200003b0 	.word	0x200003b0

08001bbc <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001bbc:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_SUBGHZ_Init+0x18>)
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001bc4:	f009 fdac 	bl	800b720 <HAL_SUBGHZ_Init>
 8001bc8:	b900      	cbnz	r0, 8001bcc <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001bca:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001bcc:	f7ff fec0 	bl	8001950 <Error_Handler>
}
 8001bd0:	e7fb      	b.n	8001bca <MX_SUBGHZ_Init+0xe>
 8001bd2:	bf00      	nop
 8001bd4:	200003b0 	.word	0x200003b0

08001bd8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001bd8:	b500      	push	{lr}
 8001bda:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001bf0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	2032      	movs	r0, #50	; 0x32
 8001bf8:	f007 fdee 	bl	80097d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001bfc:	2032      	movs	r0, #50	; 0x32
 8001bfe:	f007 fe23 	bl	8009848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001c02:	b003      	add	sp, #12
 8001c04:	f85d fb04 	ldr.w	pc, [sp], #4

08001c08 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001c08:	b40c      	push	{r2, r3}
 8001c0a:	b500      	push	{lr}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	ab04      	add	r3, sp, #16
 8001c10:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001c14:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001c16:	f016 f8e9 	bl	8017dec <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001c1a:	b003      	add	sp, #12
 8001c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c20:	b002      	add	sp, #8
 8001c22:	4770      	bx	lr

08001c24 <TimestampNow>:
{
 8001c24:	b530      	push	{r4, r5, lr}
 8001c26:	b085      	sub	sp, #20
 8001c28:	4604      	mov	r4, r0
 8001c2a:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001c2c:	a802      	add	r0, sp, #8
 8001c2e:	f015 fe53 	bl	80178d8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001c32:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	9b02      	ldr	r3, [sp, #8]
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <TimestampNow+0x2c>)
 8001c3c:	2110      	movs	r1, #16
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7ff ffe2 	bl	8001c08 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001c44:	4620      	mov	r0, r4
 8001c46:	f7fe faeb 	bl	8000220 <strlen>
 8001c4a:	8028      	strh	r0, [r5, #0]
}
 8001c4c:	b005      	add	sp, #20
 8001c4e:	bd30      	pop	{r4, r5, pc}
 8001c50:	0801b2b4 	.word	0x0801b2b4

08001c54 <SystemApp_Init>:
{
 8001c54:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001c56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c5a:	6893      	ldr	r3, [r2, #8]
 8001c5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001c60:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001c62:	f015 febd 	bl	80179e0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001c66:	2401      	movs	r4, #1
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <SystemApp_Init+0x4c>)
 8001c6a:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001c6c:	f000 f8b8 	bl	8001de0 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001c70:	f015 fb58 	bl	8017324 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001c74:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <SystemApp_Init+0x50>)
 8001c76:	f015 fb6f 	bl	8017358 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <SystemApp_Init+0x54>)
 8001c7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c80:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001c82:	2002      	movs	r0, #2
 8001c84:	f015 fb6e 	bl	8017364 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001c88:	f7ff fc26 	bl	80014d8 <SYS_InitMeasurement>
  EnvSensors_Init();
 8001c8c:	f000 f908 	bl	8001ea0 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001c90:	f015 fc78 	bl	8017584 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001c94:	4621      	mov	r1, r4
 8001c96:	4620      	mov	r0, r4
 8001c98:	f015 fc94 	bl	80175c4 <UTIL_LPM_SetOffMode>
}
 8001c9c:	bd10      	pop	{r4, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200003bc 	.word	0x200003bc
 8001ca4:	08001c25 	.word	0x08001c25
 8001ca8:	58004000 	.word	0x58004000

08001cac <UTIL_SEQ_Idle>:
{
 8001cac:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8001cae:	f015 fc9f 	bl	80175f0 <UTIL_LPM_EnterLowPower>
}
 8001cb2:	bd08      	pop	{r3, pc}

08001cb4 <GetBatteryLevel>:
{
 8001cb4:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001cb6:	f7ff fc17 	bl	80014e8 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001cba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001cbe:	4298      	cmp	r0, r3
 8001cc0:	d80d      	bhi.n	8001cde <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001cc2:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8001cc6:	d30c      	bcc.n	8001ce2 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001cc8:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001ccc:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001cd0:	0040      	lsls	r0, r0, #1
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <GetBatteryLevel+0x34>)
 8001cd4:	fba3 3000 	umull	r3, r0, r3, r0
 8001cd8:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001cdc:	e000      	b.n	8001ce0 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001cde:	20fe      	movs	r0, #254	; 0xfe
}
 8001ce0:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	e7fc      	b.n	8001ce0 <GetBatteryLevel+0x2c>
 8001ce6:	bf00      	nop
 8001ce8:	1b4e81b5 	.word	0x1b4e81b5

08001cec <GetTemperatureLevel>:
{
 8001cec:	b500      	push	{lr}
 8001cee:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8001cf0:	4668      	mov	r0, sp
 8001cf2:	f000 f8b9 	bl	8001e68 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001cf6:	9801      	ldr	r0, [sp, #4]
 8001cf8:	f7ff f986 	bl	8001008 <__aeabi_f2iz>
}
 8001cfc:	b200      	sxth	r0, r0
 8001cfe:	b007      	add	sp, #28
 8001d00:	f85d fb04 	ldr.w	pc, [sp], #4

08001d04 <GetUniqueId>:
{
 8001d04:	b538      	push	{r3, r4, r5, lr}
 8001d06:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <GetUniqueId+0x68>)
 8001d0a:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d12:	d013      	beq.n	8001d3c <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001d14:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001d16:	0a1a      	lsrs	r2, r3, #8
 8001d18:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001d1a:	0c1a      	lsrs	r2, r3, #16
 8001d1c:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001d1e:	0e1b      	lsrs	r3, r3, #24
 8001d20:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <GetUniqueId+0x68>)
 8001d24:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001d28:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001d2a:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001d2e:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001d30:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001d32:	0c1a      	lsrs	r2, r3, #16
 8001d34:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001d36:	0e1b      	lsrs	r3, r3, #24
 8001d38:	7003      	strb	r3, [r0, #0]
}
 8001d3a:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001d3c:	f007 f82c 	bl	8008d98 <HAL_GetUIDw0>
 8001d40:	4605      	mov	r5, r0
 8001d42:	f007 f835 	bl	8008db0 <HAL_GetUIDw2>
 8001d46:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001d48:	f007 f82c 	bl	8008da4 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001d4c:	0e2b      	lsrs	r3, r5, #24
 8001d4e:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001d50:	0c2b      	lsrs	r3, r5, #16
 8001d52:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001d54:	0a2b      	lsrs	r3, r5, #8
 8001d56:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001d58:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001d5a:	0e03      	lsrs	r3, r0, #24
 8001d5c:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001d5e:	0c03      	lsrs	r3, r0, #16
 8001d60:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001d62:	0a03      	lsrs	r3, r0, #8
 8001d64:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001d66:	7020      	strb	r0, [r4, #0]
 8001d68:	e7e7      	b.n	8001d3a <GetUniqueId+0x36>
 8001d6a:	bf00      	nop
 8001d6c:	1fff7000 	.word	0x1fff7000

08001d70 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <GetDevAddr+0x24>)
 8001d72:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)
 8001d76:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001d7a:	d000      	beq.n	8001d7e <GetDevAddr+0xe>
}
 8001d7c:	4770      	bx	lr
{
 8001d7e:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001d80:	f007 f80a 	bl	8008d98 <HAL_GetUIDw0>
 8001d84:	4604      	mov	r4, r0
 8001d86:	f007 f80d 	bl	8008da4 <HAL_GetUIDw1>
 8001d8a:	4044      	eors	r4, r0
 8001d8c:	f007 f810 	bl	8008db0 <HAL_GetUIDw2>
 8001d90:	4060      	eors	r0, r4
}
 8001d92:	bd10      	pop	{r4, pc}
 8001d94:	1fff7000 	.word	0x1fff7000

08001d98 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001d98:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	f015 fbfb 	bl	8017598 <UTIL_LPM_SetStopMode>
}
 8001da2:	bd08      	pop	{r3, pc}

08001da4 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001da4:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001da6:	2100      	movs	r1, #0
 8001da8:	2002      	movs	r0, #2
 8001daa:	f015 fbf5 	bl	8017598 <UTIL_LPM_SetStopMode>
}
 8001dae:	bd08      	pop	{r3, pc}

08001db0 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001db0:	2000      	movs	r0, #0
 8001db2:	4770      	bx	lr

08001db4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001db4:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001db6:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <HAL_GetTick+0x14>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	b90b      	cbnz	r3, 8001dc0 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001dbc:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001dbe:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001dc0:	f000 f8f8 	bl	8001fb4 <TIMER_IF_GetTimerValue>
 8001dc4:	e7fb      	b.n	8001dbe <HAL_GetTick+0xa>
 8001dc6:	bf00      	nop
 8001dc8:	200003bc 	.word	0x200003bc

08001dcc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001dcc:	b500      	push	{lr}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001dd2:	9801      	ldr	r0, [sp, #4]
 8001dd4:	f000 f9d4 	bl	8002180 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001dd8:	b003      	add	sp, #12
 8001dda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001de0 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de2:	b089      	sub	sp, #36	; 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001de4:	f006 ffea 	bl	8008dbc <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001de8:	f006 fff0 	bl	8008dcc <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001dec:	f006 fff6 	bl	8008ddc <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001df0:	2400      	movs	r4, #0
 8001df2:	9403      	str	r4, [sp, #12]
 8001df4:	9404      	str	r4, [sp, #16]
 8001df6:	9405      	str	r4, [sp, #20]
 8001df8:	9406      	str	r4, [sp, #24]
 8001dfa:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e0a:	f042 0202 	orr.w	r2, r2, #2
 8001e0e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e12:	f002 0202 	and.w	r2, r2, #2
 8001e16:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001e18:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e1c:	f042 0202 	orr.w	r2, r2, #2
 8001e20:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001e2a:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001e2c:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001e30:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001e32:	4d0c      	ldr	r5, [pc, #48]	; (8001e64 <DBG_Init+0x84>)
 8001e34:	a903      	add	r1, sp, #12
 8001e36:	4628      	mov	r0, r5
 8001e38:	f008 f92e 	bl	800a098 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001e3c:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001e40:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001e42:	a903      	add	r1, sp, #12
 8001e44:	4628      	mov	r0, r5
 8001e46:	f008 f927 	bl	800a098 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001e4a:	4622      	mov	r2, r4
 8001e4c:	4639      	mov	r1, r7
 8001e4e:	4628      	mov	r0, r5
 8001e50:	f008 fa72 	bl	800a338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001e54:	4622      	mov	r2, r4
 8001e56:	4631      	mov	r1, r6
 8001e58:	4628      	mov	r0, r5
 8001e5a:	f008 fa6d 	bl	800a338 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001e5e:	b009      	add	sp, #36	; 0x24
 8001e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e62:	bf00      	nop
 8001e64:	48000400 	.word	0x48000400

08001e68 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001e68:	b510      	push	{r4, lr}
 8001e6a:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001e6c:	f7ff fb5e 	bl	800152c <SYS_GetTemperatureLevel>
 8001e70:	f340 200f 	sbfx	r0, r0, #8, #16
 8001e74:	f7fe fffe 	bl	8000e74 <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <EnvSensors_Read+0x28>)
 8001e7a:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001e7c:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <EnvSensors_Read+0x2c>)
 8001e80:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <EnvSensors_Read+0x30>)
 8001e84:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <EnvSensors_Read+0x34>)
 8001e88:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	bd10      	pop	{r4, pc}
 8001e8e:	bf00      	nop
 8001e90:	42480000 	.word	0x42480000
 8001e94:	447a0000 	.word	0x447a0000
 8001e98:	003e090d 	.word	0x003e090d
 8001e9c:	000503ab 	.word	0x000503ab

08001ea0 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	4770      	bx	lr

08001ea4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	4770      	bx	lr

08001ea8 <_kill>:

int _kill(int pid, int sig)
{
 8001ea8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001eaa:	f016 f863 	bl	8017f74 <__errno>
 8001eae:	2316      	movs	r3, #22
 8001eb0:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb6:	bd08      	pop	{r3, pc}

08001eb8 <_exit>:

void _exit (int status)
{
 8001eb8:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001eba:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebe:	f7ff fff3 	bl	8001ea8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ec2:	e7fe      	b.n	8001ec2 <_exit+0xa>

08001ec4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec4:	b570      	push	{r4, r5, r6, lr}
 8001ec6:	460c      	mov	r4, r1
 8001ec8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eca:	2500      	movs	r5, #0
 8001ecc:	e006      	b.n	8001edc <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8001ece:	f3af 8000 	nop.w
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed8:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001eda:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001edc:	42b5      	cmp	r5, r6
 8001ede:	dbf6      	blt.n	8001ece <_read+0xa>
	}

return len;
}
 8001ee0:	4630      	mov	r0, r6
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}

08001ee4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	460c      	mov	r4, r1
 8001ee8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eea:	2500      	movs	r5, #0
 8001eec:	e004      	b.n	8001ef8 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8001eee:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001ef2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef6:	3501      	adds	r5, #1
 8001ef8:	42b5      	cmp	r5, r6
 8001efa:	dbf8      	blt.n	8001eee <_write+0xa>
	}
	return len;
}
 8001efc:	4630      	mov	r0, r6
 8001efe:	bd70      	pop	{r4, r5, r6, pc}

08001f00 <_close>:

int _close(int file)
{
	return -1;
}
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	4770      	bx	lr

08001f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f0a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	4770      	bx	lr

08001f10 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001f10:	2001      	movs	r0, #1
 8001f12:	4770      	bx	lr

08001f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001f14:	2000      	movs	r0, #0
 8001f16:	4770      	bx	lr

08001f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f18:	b510      	push	{r4, lr}
 8001f1a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f1c:	4a0c      	ldr	r2, [pc, #48]	; (8001f50 <_sbrk+0x38>)
 8001f1e:	490d      	ldr	r1, [pc, #52]	; (8001f54 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f20:	480d      	ldr	r0, [pc, #52]	; (8001f58 <_sbrk+0x40>)
 8001f22:	6800      	ldr	r0, [r0, #0]
 8001f24:	b140      	cbz	r0, 8001f38 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f26:	480c      	ldr	r0, [pc, #48]	; (8001f58 <_sbrk+0x40>)
 8001f28:	6800      	ldr	r0, [r0, #0]
 8001f2a:	4403      	add	r3, r0
 8001f2c:	1a52      	subs	r2, r2, r1
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d806      	bhi.n	8001f40 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <_sbrk+0x40>)
 8001f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001f36:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001f38:	4807      	ldr	r0, [pc, #28]	; (8001f58 <_sbrk+0x40>)
 8001f3a:	4c08      	ldr	r4, [pc, #32]	; (8001f5c <_sbrk+0x44>)
 8001f3c:	6004      	str	r4, [r0, #0]
 8001f3e:	e7f2      	b.n	8001f26 <_sbrk+0xe>
    errno = ENOMEM;
 8001f40:	f016 f818 	bl	8017f74 <__errno>
 8001f44:	230c      	movs	r3, #12
 8001f46:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	e7f3      	b.n	8001f36 <_sbrk+0x1e>
 8001f4e:	bf00      	nop
 8001f50:	20008000 	.word	0x20008000
 8001f54:	00000800 	.word	0x00000800
 8001f58:	200003c0 	.word	0x200003c0
 8001f5c:	200019b0 	.word	0x200019b0

08001f60 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <TIMER_IF_SetTimerContext+0x1c>)
 8001f62:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f64:	e001      	b.n	8001f6a <TIMER_IF_SetTimerContext+0xa>
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <TIMER_IF_SetTimerContext+0x1c>)
 8001f68:	6898      	ldr	r0, [r3, #8]
 8001f6a:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <TIMER_IF_SetTimerContext+0x1c>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	4283      	cmp	r3, r0
 8001f70:	d1f9      	bne.n	8001f66 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001f72:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001f74:	4b02      	ldr	r3, [pc, #8]	; (8001f80 <TIMER_IF_SetTimerContext+0x20>)
 8001f76:	6018      	str	r0, [r3, #0]
}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40002800 	.word	0x40002800
 8001f80:	200003c8 	.word	0x200003c8

08001f84 <TIMER_IF_GetTimerContext>:
}
 8001f84:	4b01      	ldr	r3, [pc, #4]	; (8001f8c <TIMER_IF_GetTimerContext+0x8>)
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	200003c8 	.word	0x200003c8

08001f90 <TIMER_IF_GetTimerElapsedTime>:
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001f92:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f94:	e001      	b.n	8001f9a <TIMER_IF_GetTimerElapsedTime+0xa>
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001f98:	6898      	ldr	r0, [r3, #8]
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	4283      	cmp	r3, r0
 8001fa0:	d1f9      	bne.n	8001f96 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001fa2:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001fa4:	4b02      	ldr	r3, [pc, #8]	; (8001fb0 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	1ac0      	subs	r0, r0, r3
 8001faa:	4770      	bx	lr
 8001fac:	40002800 	.word	0x40002800
 8001fb0:	200003c8 	.word	0x200003c8

08001fb4 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <TIMER_IF_GetTimerValue+0x20>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b153      	cbz	r3, 8001fd0 <TIMER_IF_GetTimerValue+0x1c>
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <TIMER_IF_GetTimerValue+0x24>)
 8001fbc:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001fbe:	e001      	b.n	8001fc4 <TIMER_IF_GetTimerValue+0x10>
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <TIMER_IF_GetTimerValue+0x24>)
 8001fc2:	6898      	ldr	r0, [r3, #8]
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <TIMER_IF_GetTimerValue+0x24>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4283      	cmp	r3, r0
 8001fca:	d1f9      	bne.n	8001fc0 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001fcc:	43c0      	mvns	r0, r0
 8001fce:	4770      	bx	lr
  uint32_t ret = 0;
 8001fd0:	2000      	movs	r0, #0
}
 8001fd2:	4770      	bx	lr
 8001fd4:	200003c4 	.word	0x200003c4
 8001fd8:	40002800 	.word	0x40002800

08001fdc <TIMER_IF_GetMinimumTimeout>:
}
 8001fdc:	2003      	movs	r0, #3
 8001fde:	4770      	bx	lr

08001fe0 <TIMER_IF_Convert_ms2Tick>:
{
 8001fe0:	b508      	push	{r3, lr}
 8001fe2:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001fe4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fe8:	2300      	movs	r3, #0
 8001fea:	0280      	lsls	r0, r0, #10
 8001fec:	0d89      	lsrs	r1, r1, #22
 8001fee:	f7ff f831 	bl	8001054 <__aeabi_uldivmod>
}
 8001ff2:	bd08      	pop	{r3, pc}

08001ff4 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001ff4:	0ec2      	lsrs	r2, r0, #27
 8001ff6:	0143      	lsls	r3, r0, #5
 8001ff8:	1a1b      	subs	r3, r3, r0
 8001ffa:	f162 0200 	sbc.w	r2, r2, #0
 8001ffe:	0092      	lsls	r2, r2, #2
 8002000:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	181b      	adds	r3, r3, r0
 8002008:	f142 0000 	adc.w	r0, r2, #0
 800200c:	00c0      	lsls	r0, r0, #3
 800200e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002012:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8002016:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 800201a:	4770      	bx	lr

0800201c <TIMER_IF_StopTimer>:
{
 800201c:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <TIMER_IF_StopTimer+0x20>)
 8002020:	2201      	movs	r2, #1
 8002022:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002024:	4c06      	ldr	r4, [pc, #24]	; (8002040 <TIMER_IF_StopTimer+0x24>)
 8002026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800202a:	4620      	mov	r0, r4
 800202c:	f009 f914 	bl	800b258 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002030:	f04f 33ff 	mov.w	r3, #4294967295
 8002034:	6323      	str	r3, [r4, #48]	; 0x30
}
 8002036:	2000      	movs	r0, #0
 8002038:	bd10      	pop	{r4, pc}
 800203a:	bf00      	nop
 800203c:	40002800 	.word	0x40002800
 8002040:	20000378 	.word	0x20000378

08002044 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8002044:	b508      	push	{r3, lr}
 8002046:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002048:	2102      	movs	r1, #2
 800204a:	4802      	ldr	r0, [pc, #8]	; (8002054 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 800204c:	f009 fb47 	bl	800b6de <HAL_RTCEx_BKUPWrite>
}
 8002050:	bd08      	pop	{r3, pc}
 8002052:	bf00      	nop
 8002054:	20000378 	.word	0x20000378

08002058 <TIMER_IF_Init>:
{
 8002058:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <TIMER_IF_Init+0x40>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	b10b      	cbz	r3, 8002064 <TIMER_IF_Init+0xc>
}
 8002060:	2000      	movs	r0, #0
 8002062:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002064:	4c0d      	ldr	r4, [pc, #52]	; (800209c <TIMER_IF_Init+0x44>)
 8002066:	f04f 35ff 	mov.w	r5, #4294967295
 800206a:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 800206c:	f7ff fcc6 	bl	80019fc <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8002070:	f7ff ffd4 	bl	800201c <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002078:	4620      	mov	r0, r4
 800207a:	f009 f8ed 	bl	800b258 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800207e:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002080:	4620      	mov	r0, r4
 8002082:	f009 facb 	bl	800b61c <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002086:	2000      	movs	r0, #0
 8002088:	f7ff ffdc 	bl	8002044 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 800208c:	f7ff ff68 	bl	8001f60 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8002090:	4b01      	ldr	r3, [pc, #4]	; (8002098 <TIMER_IF_Init+0x40>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	e7e3      	b.n	8002060 <TIMER_IF_Init+0x8>
 8002098:	200003c4 	.word	0x200003c4
 800209c:	20000378 	.word	0x20000378

080020a0 <TIMER_IF_BkUp_Write_Seconds>:
{
 80020a0:	b508      	push	{r3, lr}
 80020a2:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80020a4:	2100      	movs	r1, #0
 80020a6:	4802      	ldr	r0, [pc, #8]	; (80020b0 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 80020a8:	f009 fb19 	bl	800b6de <HAL_RTCEx_BKUPWrite>
}
 80020ac:	bd08      	pop	{r3, pc}
 80020ae:	bf00      	nop
 80020b0:	20000378 	.word	0x20000378

080020b4 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 80020b4:	b508      	push	{r3, lr}
 80020b6:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80020b8:	2101      	movs	r1, #1
 80020ba:	4802      	ldr	r0, [pc, #8]	; (80020c4 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 80020bc:	f009 fb0f 	bl	800b6de <HAL_RTCEx_BKUPWrite>
}
 80020c0:	bd08      	pop	{r3, pc}
 80020c2:	bf00      	nop
 80020c4:	20000378 	.word	0x20000378

080020c8 <TIMER_IF_StartTimer>:
{
 80020c8:	b510      	push	{r4, lr}
 80020ca:	b08c      	sub	sp, #48	; 0x30
 80020cc:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 80020ce:	222c      	movs	r2, #44	; 0x2c
 80020d0:	2100      	movs	r1, #0
 80020d2:	a801      	add	r0, sp, #4
 80020d4:	f016 f874 	bl	80181c0 <memset>
  TIMER_IF_StopTimer();
 80020d8:	f7ff ffa0 	bl	800201c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <TIMER_IF_StartTimer+0x48>)
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80020e2:	2300      	movs	r3, #0
 80020e4:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80020e6:	43e4      	mvns	r4, r4
 80020e8:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80020ea:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80020ec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80020f0:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80020f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020f6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80020f8:	2201      	movs	r2, #1
 80020fa:	a901      	add	r1, sp, #4
 80020fc:	4805      	ldr	r0, [pc, #20]	; (8002114 <TIMER_IF_StartTimer+0x4c>)
 80020fe:	f009 f9d1 	bl	800b4a4 <HAL_RTC_SetAlarm_IT>
 8002102:	b910      	cbnz	r0, 800210a <TIMER_IF_StartTimer+0x42>
}
 8002104:	2000      	movs	r0, #0
 8002106:	b00c      	add	sp, #48	; 0x30
 8002108:	bd10      	pop	{r4, pc}
    Error_Handler();
 800210a:	f7ff fc21 	bl	8001950 <Error_Handler>
 800210e:	e7f9      	b.n	8002104 <TIMER_IF_StartTimer+0x3c>
 8002110:	200003c8 	.word	0x200003c8
 8002114:	20000378 	.word	0x20000378

08002118 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8002118:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800211a:	2102      	movs	r1, #2
 800211c:	4801      	ldr	r0, [pc, #4]	; (8002124 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 800211e:	f009 fae5 	bl	800b6ec <HAL_RTCEx_BKUPRead>
}
 8002122:	bd08      	pop	{r3, pc}
 8002124:	20000378 	.word	0x20000378

08002128 <TIMER_IF_GetTime>:
{
 8002128:	b538      	push	{r3, r4, r5, lr}
 800212a:	4605      	mov	r5, r0
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <TIMER_IF_GetTime+0x34>)
 800212e:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002130:	e001      	b.n	8002136 <TIMER_IF_GetTime+0xe>
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <TIMER_IF_GetTime+0x34>)
 8002134:	689c      	ldr	r4, [r3, #8]
 8002136:	4a09      	ldr	r2, [pc, #36]	; (800215c <TIMER_IF_GetTime+0x34>)
 8002138:	6892      	ldr	r2, [r2, #8]
 800213a:	42a2      	cmp	r2, r4
 800213c:	d1f9      	bne.n	8002132 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 800213e:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002140:	f7ff ffea 	bl	8002118 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002144:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002146:	0aa4      	lsrs	r4, r4, #10
 8002148:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800214c:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8002150:	f7ff ff50 	bl	8001ff4 <TIMER_IF_Convert_Tick2ms>
 8002154:	8028      	strh	r0, [r5, #0]
}
 8002156:	4620      	mov	r0, r4
 8002158:	bd38      	pop	{r3, r4, r5, pc}
 800215a:	bf00      	nop
 800215c:	40002800 	.word	0x40002800

08002160 <TIMER_IF_BkUp_Read_Seconds>:
{
 8002160:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002162:	2100      	movs	r1, #0
 8002164:	4801      	ldr	r0, [pc, #4]	; (800216c <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8002166:	f009 fac1 	bl	800b6ec <HAL_RTCEx_BKUPRead>
}
 800216a:	bd08      	pop	{r3, pc}
 800216c:	20000378 	.word	0x20000378

08002170 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8002170:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002172:	2101      	movs	r1, #1
 8002174:	4801      	ldr	r0, [pc, #4]	; (800217c <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8002176:	f009 fab9 	bl	800b6ec <HAL_RTCEx_BKUPRead>
}
 800217a:	bd08      	pop	{r3, pc}
 800217c:	20000378 	.word	0x20000378

08002180 <TIMER_IF_DelayMs>:
{
 8002180:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002182:	f7ff ff2d 	bl	8001fe0 <TIMER_IF_Convert_ms2Tick>
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <TIMER_IF_DelayMs+0x3c>)
 8002188:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800218a:	e001      	b.n	8002190 <TIMER_IF_DelayMs+0x10>
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <TIMER_IF_DelayMs+0x3c>)
 800218e:	6899      	ldr	r1, [r3, #8]
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <TIMER_IF_DelayMs+0x3c>)
 8002192:	6892      	ldr	r2, [r2, #8]
 8002194:	428a      	cmp	r2, r1
 8002196:	d1f9      	bne.n	800218c <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8002198:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800219a:	e00a      	b.n	80021b2 <TIMER_IF_DelayMs+0x32>
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <TIMER_IF_DelayMs+0x3c>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a06      	ldr	r2, [pc, #24]	; (80021bc <TIMER_IF_DelayMs+0x3c>)
 80021a2:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d1f9      	bne.n	800219c <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 80021a8:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80021aa:	1a5b      	subs	r3, r3, r1
 80021ac:	4283      	cmp	r3, r0
 80021ae:	d203      	bcs.n	80021b8 <TIMER_IF_DelayMs+0x38>
    __NOP();
 80021b0:	bf00      	nop
 80021b2:	4b02      	ldr	r3, [pc, #8]	; (80021bc <TIMER_IF_DelayMs+0x3c>)
 80021b4:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80021b6:	e7f3      	b.n	80021a0 <TIMER_IF_DelayMs+0x20>
}
 80021b8:	bd08      	pop	{r3, pc}
 80021ba:	bf00      	nop
 80021bc:	40002800 	.word	0x40002800

080021c0 <HAL_RTC_AlarmAEventCallback>:
{
 80021c0:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80021c2:	f015 fd31 	bl	8017c28 <UTIL_TIMER_IRQ_Handler>
}
 80021c6:	bd08      	pop	{r3, pc}

080021c8 <HAL_RTCEx_SSRUEventCallback>:
{
 80021c8:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80021ca:	f7ff ffa5 	bl	8002118 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80021ce:	3001      	adds	r0, #1
 80021d0:	f7ff ff38 	bl	8002044 <TIMER_IF_BkUp_Write_MSBticks>
}
 80021d4:	bd08      	pop	{r3, pc}
	...

080021d8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021d8:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021da:	4817      	ldr	r0, [pc, #92]	; (8002238 <MX_USART2_UART_Init+0x60>)
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <MX_USART2_UART_Init+0x64>)
 80021de:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80021e0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80021e4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021e6:	2300      	movs	r3, #0
 80021e8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021ea:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ec:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021ee:	220c      	movs	r2, #12
 80021f0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021f6:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021f8:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021fa:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021fc:	f00a fd75 	bl	800ccea <HAL_UART_Init>
 8002200:	b970      	cbnz	r0, 8002220 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002202:	2100      	movs	r1, #0
 8002204:	480c      	ldr	r0, [pc, #48]	; (8002238 <MX_USART2_UART_Init+0x60>)
 8002206:	f00a ff32 	bl	800d06e <HAL_UARTEx_SetTxFifoThreshold>
 800220a:	b960      	cbnz	r0, 8002226 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800220c:	2100      	movs	r1, #0
 800220e:	480a      	ldr	r0, [pc, #40]	; (8002238 <MX_USART2_UART_Init+0x60>)
 8002210:	f00a ff52 	bl	800d0b8 <HAL_UARTEx_SetRxFifoThreshold>
 8002214:	b950      	cbnz	r0, 800222c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8002216:	4808      	ldr	r0, [pc, #32]	; (8002238 <MX_USART2_UART_Init+0x60>)
 8002218:	f00a ff05 	bl	800d026 <HAL_UARTEx_EnableFifoMode>
 800221c:	b948      	cbnz	r0, 8002232 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800221e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002220:	f7ff fb96 	bl	8001950 <Error_Handler>
 8002224:	e7ed      	b.n	8002202 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8002226:	f7ff fb93 	bl	8001950 <Error_Handler>
 800222a:	e7ef      	b.n	800220c <MX_USART2_UART_Init+0x34>
    Error_Handler();
 800222c:	f7ff fb90 	bl	8001950 <Error_Handler>
 8002230:	e7f1      	b.n	8002216 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8002232:	f7ff fb8d 	bl	8001950 <Error_Handler>
}
 8002236:	e7f2      	b.n	800221e <MX_USART2_UART_Init+0x46>
 8002238:	2000042c 	.word	0x2000042c
 800223c:	40004400 	.word	0x40004400

08002240 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002240:	b530      	push	{r4, r5, lr}
 8002242:	b097      	sub	sp, #92	; 0x5c
 8002244:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002246:	2100      	movs	r1, #0
 8002248:	9111      	str	r1, [sp, #68]	; 0x44
 800224a:	9112      	str	r1, [sp, #72]	; 0x48
 800224c:	9113      	str	r1, [sp, #76]	; 0x4c
 800224e:	9114      	str	r1, [sp, #80]	; 0x50
 8002250:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002252:	2238      	movs	r2, #56	; 0x38
 8002254:	a803      	add	r0, sp, #12
 8002256:	f015 ffb3 	bl	80181c0 <memset>
  if(uartHandle->Instance==USART2)
 800225a:	6822      	ldr	r2, [r4, #0]
 800225c:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_UART_MspInit+0xd4>)
 800225e:	429a      	cmp	r2, r3
 8002260:	d001      	beq.n	8002266 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002262:	b017      	add	sp, #92	; 0x5c
 8002264:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002266:	2302      	movs	r3, #2
 8002268:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800226a:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <HAL_UART_MspInit+0xd8>)
 800226c:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800226e:	a803      	add	r0, sp, #12
 8002270:	f008 fea8 	bl	800afc4 <HAL_RCCEx_PeriphCLKConfig>
 8002274:	2800      	cmp	r0, #0
 8002276:	d144      	bne.n	8002302 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800227e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002282:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002284:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002286:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800228a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800228c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800228e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002290:	f042 0201 	orr.w	r2, r2, #1
 8002294:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800229e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80022a0:	230c      	movs	r3, #12
 80022a2:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2500      	movs	r5, #0
 80022aa:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ac:	2303      	movs	r3, #3
 80022ae:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022b0:	2307      	movs	r3, #7
 80022b2:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	a911      	add	r1, sp, #68	; 0x44
 80022b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ba:	f007 feed 	bl	800a098 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80022be:	4817      	ldr	r0, [pc, #92]	; (800231c <HAL_UART_MspInit+0xdc>)
 80022c0:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_UART_MspInit+0xe0>)
 80022c2:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80022c4:	2314      	movs	r3, #20
 80022c6:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022c8:	2310      	movs	r3, #16
 80022ca:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022cc:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022d2:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022d4:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80022d6:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022d8:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80022da:	f007 fb45 	bl	8009968 <HAL_DMA_Init>
 80022de:	b998      	cbnz	r0, 8002308 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80022e0:	2110      	movs	r1, #16
 80022e2:	480e      	ldr	r0, [pc, #56]	; (800231c <HAL_UART_MspInit+0xdc>)
 80022e4:	f007 fd42 	bl	8009d6c <HAL_DMA_ConfigChannelAttributes>
 80022e8:	b988      	cbnz	r0, 800230e <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80022ea:	4b0c      	ldr	r3, [pc, #48]	; (800231c <HAL_UART_MspInit+0xdc>)
 80022ec:	67a3      	str	r3, [r4, #120]	; 0x78
 80022ee:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80022f0:	2200      	movs	r2, #0
 80022f2:	2102      	movs	r1, #2
 80022f4:	2025      	movs	r0, #37	; 0x25
 80022f6:	f007 fa6f 	bl	80097d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022fa:	2025      	movs	r0, #37	; 0x25
 80022fc:	f007 faa4 	bl	8009848 <HAL_NVIC_EnableIRQ>
}
 8002300:	e7af      	b.n	8002262 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8002302:	f7ff fb25 	bl	8001950 <Error_Handler>
 8002306:	e7b7      	b.n	8002278 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8002308:	f7ff fb22 	bl	8001950 <Error_Handler>
 800230c:	e7e8      	b.n	80022e0 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 800230e:	f7ff fb1f 	bl	8001950 <Error_Handler>
 8002312:	e7ea      	b.n	80022ea <HAL_UART_MspInit+0xaa>
 8002314:	40004400 	.word	0x40004400
 8002318:	000c0004 	.word	0x000c0004
 800231c:	200003cc 	.word	0x200003cc
 8002320:	40020058 	.word	0x40020058

08002324 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8002324:	6802      	ldr	r2, [r0, #0]
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_UART_MspDeInit+0x34>)
 8002328:	429a      	cmp	r2, r3
 800232a:	d000      	beq.n	800232e <HAL_UART_MspDeInit+0xa>
 800232c:	4770      	bx	lr
{
 800232e:	b510      	push	{r4, lr}
 8002330:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002332:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002336:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002338:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800233c:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800233e:	210c      	movs	r1, #12
 8002340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002344:	f007 ff7a 	bl	800a23c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002348:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800234a:	f007 fb7f 	bl	8009a4c <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800234e:	2025      	movs	r0, #37	; 0x25
 8002350:	f007 fa88 	bl	8009864 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002354:	bd10      	pop	{r4, pc}
 8002356:	bf00      	nop
 8002358:	40004400 	.word	0x40004400

0800235c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800235c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800235e:	4b07      	ldr	r3, [pc, #28]	; (800237c <vcom_Init+0x20>)
 8002360:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002362:	f7ff f939 	bl	80015d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002366:	f7ff ff37 	bl	80021d8 <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 800236a:	4a05      	ldr	r2, [pc, #20]	; (8002380 <vcom_Init+0x24>)
 800236c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002370:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002374:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002378:	2000      	movs	r0, #0
 800237a:	bd08      	pop	{r3, pc}
 800237c:	200004c0 	.word	0x200004c0
 8002380:	58000800 	.word	0x58000800

08002384 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002384:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800238c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002390:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002394:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002398:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 800239a:	4804      	ldr	r0, [pc, #16]	; (80023ac <vcom_DeInit+0x28>)
 800239c:	f7ff ffc2 	bl	8002324 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80023a0:	200f      	movs	r0, #15
 80023a2:	f007 fa5f 	bl	8009864 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80023a6:	2000      	movs	r0, #0
 80023a8:	bd08      	pop	{r3, pc}
 80023aa:	bf00      	nop
 80023ac:	2000042c 	.word	0x2000042c

080023b0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80023b0:	b508      	push	{r3, lr}
 80023b2:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80023b4:	4601      	mov	r1, r0
 80023b6:	4802      	ldr	r0, [pc, #8]	; (80023c0 <vcom_Trace_DMA+0x10>)
 80023b8:	f009 fd64 	bl	800be84 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80023bc:	2000      	movs	r0, #0
 80023be:	bd08      	pop	{r3, pc}
 80023c0:	2000042c 	.word	0x2000042c

080023c4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80023c4:	b510      	push	{r4, lr}
 80023c6:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <vcom_ReceiveInit+0x50>)
 80023ca:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80023cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023d0:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80023d2:	ab02      	add	r3, sp, #8
 80023d4:	e913 0006 	ldmdb	r3, {r1, r2}
 80023d8:	480f      	ldr	r0, [pc, #60]	; (8002418 <vcom_ReceiveInit+0x54>)
 80023da:	f00a fdcc 	bl	800cf76 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <vcom_ReceiveInit+0x54>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69da      	ldr	r2, [r3, #28]
 80023e4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80023e8:	d1f9      	bne.n	80023de <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80023ea:	69da      	ldr	r2, [r3, #28]
 80023ec:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80023f0:	d0fb      	beq.n	80023ea <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80023f8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80023fa:	4c07      	ldr	r4, [pc, #28]	; (8002418 <vcom_ReceiveInit+0x54>)
 80023fc:	4620      	mov	r0, r4
 80023fe:	f00a fdfb 	bl	800cff8 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002402:	2201      	movs	r2, #1
 8002404:	4905      	ldr	r1, [pc, #20]	; (800241c <vcom_ReceiveInit+0x58>)
 8002406:	4620      	mov	r0, r4
 8002408:	f00a fd46 	bl	800ce98 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800240c:	2000      	movs	r0, #0
 800240e:	b002      	add	sp, #8
 8002410:	bd10      	pop	{r4, pc}
 8002412:	bf00      	nop
 8002414:	200004bc 	.word	0x200004bc
 8002418:	2000042c 	.word	0x2000042c
 800241c:	200004c4 	.word	0x200004c4

08002420 <vcom_Resume>:

void vcom_Resume(void)
{
 8002420:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002422:	4807      	ldr	r0, [pc, #28]	; (8002440 <vcom_Resume+0x20>)
 8002424:	f00a fc61 	bl	800ccea <HAL_UART_Init>
 8002428:	b920      	cbnz	r0, 8002434 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <vcom_Resume+0x24>)
 800242c:	f007 fa9c 	bl	8009968 <HAL_DMA_Init>
 8002430:	b918      	cbnz	r0, 800243a <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002432:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002434:	f7ff fa8c 	bl	8001950 <Error_Handler>
 8002438:	e7f7      	b.n	800242a <vcom_Resume+0xa>
    Error_Handler();
 800243a:	f7ff fa89 	bl	8001950 <Error_Handler>
}
 800243e:	e7f8      	b.n	8002432 <vcom_Resume+0x12>
 8002440:	2000042c 	.word	0x2000042c
 8002444:	200003cc 	.word	0x200003cc

08002448 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002448:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 800244a:	6802      	ldr	r2, [r0, #0]
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <HAL_UART_TxCpltCallback+0x18>)
 800244e:	429a      	cmp	r2, r3
 8002450:	d000      	beq.n	8002454 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002452:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_UART_TxCpltCallback+0x1c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2000      	movs	r0, #0
 800245a:	4798      	blx	r3
}
 800245c:	e7f9      	b.n	8002452 <HAL_UART_TxCpltCallback+0xa>
 800245e:	bf00      	nop
 8002460:	40004400 	.word	0x40004400
 8002464:	200004c0 	.word	0x200004c0

08002468 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002468:	6802      	ldr	r2, [r0, #0]
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_UART_RxCpltCallback+0x2c>)
 800246c:	429a      	cmp	r2, r3
 800246e:	d000      	beq.n	8002472 <HAL_UART_RxCpltCallback+0xa>
 8002470:	4770      	bx	lr
{
 8002472:	b510      	push	{r4, lr}
 8002474:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_UART_RxCpltCallback+0x30>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	b12b      	cbz	r3, 8002488 <HAL_UART_RxCpltCallback+0x20>
 800247c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8002480:	b912      	cbnz	r2, 8002488 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002482:	2101      	movs	r1, #1
 8002484:	4805      	ldr	r0, [pc, #20]	; (800249c <HAL_UART_RxCpltCallback+0x34>)
 8002486:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002488:	2201      	movs	r2, #1
 800248a:	4904      	ldr	r1, [pc, #16]	; (800249c <HAL_UART_RxCpltCallback+0x34>)
 800248c:	4620      	mov	r0, r4
 800248e:	f00a fd03 	bl	800ce98 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002492:	bd10      	pop	{r4, pc}
 8002494:	40004400 	.word	0x40004400
 8002498:	200004bc 	.word	0x200004bc
 800249c:	200004c4 	.word	0x200004c4

080024a0 <CayenneLppReset>:
  /* USER CODE END CayenneLppCursor */
}

void CayenneLppReset(void)
{
  CayenneLppCursor = 0;
 80024a0:	4b01      	ldr	r3, [pc, #4]	; (80024a8 <CayenneLppReset+0x8>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN CayenneLppReset */

  /* USER CODE END CayenneLppReset */
}
 80024a6:	4770      	bx	lr
 80024a8:	200005ba 	.word	0x200005ba

080024ac <CayenneLppGetSize>:
{
  /* USER CODE BEGIN CayenneLppGetSize */

  /* USER CODE END CayenneLppGetSize */
  return CayenneLppCursor;
}
 80024ac:	4b01      	ldr	r3, [pc, #4]	; (80024b4 <CayenneLppGetSize+0x8>)
 80024ae:	7818      	ldrb	r0, [r3, #0]
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	200005ba 	.word	0x200005ba

080024b8 <CayenneLppCopy>:
  /* USER CODE END CayenneLppGetBuffer */
  return CayenneLppBuffer;
}

uint8_t CayenneLppCopy(uint8_t *dst)
{
 80024b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN CayenneLppCopy_1 */

  /* USER CODE END CayenneLppCopy_1 */
  UTIL_MEM_cpy_8(dst, CayenneLppBuffer, CayenneLppCursor);
 80024ba:	4c03      	ldr	r4, [pc, #12]	; (80024c8 <CayenneLppCopy+0x10>)
 80024bc:	7822      	ldrb	r2, [r4, #0]
 80024be:	4903      	ldr	r1, [pc, #12]	; (80024cc <CayenneLppCopy+0x14>)
 80024c0:	f015 f8ba 	bl	8017638 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN CayenneLppCopy_2 */

  /* USER CODE END CayenneLppCopy_2 */
  return CayenneLppCursor;
}
 80024c4:	7820      	ldrb	r0, [r4, #0]
 80024c6:	bd10      	pop	{r4, pc}
 80024c8:	200005ba 	.word	0x200005ba
 80024cc:	200004c8 	.word	0x200004c8

080024d0 <CayenneLppAddDigitalOutput>:
uint8_t CayenneLppAddDigitalOutput(uint8_t channel, uint8_t value)
{
  /* USER CODE BEGIN CayenneLppAddDigitalOutput_1 */

  /* USER CODE END CayenneLppAddDigitalOutput_1 */
  if ((CayenneLppCursor + LPP_DIGITAL_OUTPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <CayenneLppAddDigitalOutput+0x30>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2bef      	cmp	r3, #239	; 0xef
 80024d6:	d811      	bhi.n	80024fc <CayenneLppAddDigitalOutput+0x2c>
{
 80024d8:	b430      	push	{r4, r5}
  {
    return 0;
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	4d08      	ldr	r5, [pc, #32]	; (8002500 <CayenneLppAddDigitalOutput+0x30>)
 80024e0:	702a      	strb	r2, [r5, #0]
 80024e2:	4c08      	ldr	r4, [pc, #32]	; (8002504 <CayenneLppAddDigitalOutput+0x34>)
 80024e4:	54e0      	strb	r0, [r4, r3]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_OUTPUT;
 80024e6:	1c53      	adds	r3, r2, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	702b      	strb	r3, [r5, #0]
 80024ec:	2001      	movs	r0, #1
 80024ee:	54a0      	strb	r0, [r4, r2]
  CayenneLppBuffer[CayenneLppCursor++] = value;
 80024f0:	1818      	adds	r0, r3, r0
 80024f2:	b2c0      	uxtb	r0, r0
 80024f4:	7028      	strb	r0, [r5, #0]
 80024f6:	54e1      	strb	r1, [r4, r3]
  /* USER CODE BEGIN CayenneLppAddDigitalOutput_2 */

  /* USER CODE END CayenneLppAddDigitalOutput_2 */
  return CayenneLppCursor;
}
 80024f8:	bc30      	pop	{r4, r5}
 80024fa:	4770      	bx	lr
    return 0;
 80024fc:	2000      	movs	r0, #0
}
 80024fe:	4770      	bx	lr
 8002500:	200005ba 	.word	0x200005ba
 8002504:	200004c8 	.word	0x200004c8

08002508 <CayenneLppAddTemperature>:
  /* USER CODE END CayenneLppAddPresence_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddTemperature(uint8_t channel, float celsius)
{
 8002508:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN CayenneLppAddTemperature_1 */

  /* USER CODE END CayenneLppAddTemperature_1 */
  if ((CayenneLppCursor + LPP_TEMPERATURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <CayenneLppAddTemperature+0x4c>)
 800250c:	781d      	ldrb	r5, [r3, #0]
 800250e:	2dee      	cmp	r5, #238	; 0xee
 8002510:	d81e      	bhi.n	8002550 <CayenneLppAddTemperature+0x48>
 8002512:	4604      	mov	r4, r0
 8002514:	4608      	mov	r0, r1
  {
    return 0;
  }
  int16_t val = (int16_t)(celsius * 10);
 8002516:	4910      	ldr	r1, [pc, #64]	; (8002558 <CayenneLppAddTemperature+0x50>)
 8002518:	f7fd fe8a 	bl	8000230 <__aeabi_fmul>
 800251c:	f7fe fd74 	bl	8001008 <__aeabi_f2iz>
 8002520:	4684      	mov	ip, r0
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 8002522:	1c6a      	adds	r2, r5, #1
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	4e0b      	ldr	r6, [pc, #44]	; (8002554 <CayenneLppAddTemperature+0x4c>)
 8002528:	7032      	strb	r2, [r6, #0]
 800252a:	490c      	ldr	r1, [pc, #48]	; (800255c <CayenneLppAddTemperature+0x54>)
 800252c:	554c      	strb	r4, [r1, r5]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_TEMPERATURE;
 800252e:	1c53      	adds	r3, r2, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	7033      	strb	r3, [r6, #0]
 8002534:	2067      	movs	r0, #103	; 0x67
 8002536:	5488      	strb	r0, [r1, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val >> 8;
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	7032      	strb	r2, [r6, #0]
 800253e:	f34c 2007 	sbfx	r0, ip, #8, #8
 8002542:	54c8      	strb	r0, [r1, r3]
  CayenneLppBuffer[CayenneLppCursor++] = val;
 8002544:	1c53      	adds	r3, r2, #1
 8002546:	b2d8      	uxtb	r0, r3
 8002548:	7030      	strb	r0, [r6, #0]
 800254a:	f801 c002 	strb.w	ip, [r1, r2]
  /* USER CODE BEGIN CayenneLppAddTemperature_2 */

  /* USER CODE END CayenneLppAddTemperature_2 */
  return CayenneLppCursor;
}
 800254e:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8002550:	2000      	movs	r0, #0
 8002552:	e7fc      	b.n	800254e <CayenneLppAddTemperature+0x46>
 8002554:	200005ba 	.word	0x200005ba
 8002558:	41200000 	.word	0x41200000
 800255c:	200004c8 	.word	0x200004c8

08002560 <CayenneLppAddAccelerometer>:
  /* USER CODE END CayenneLppAddRelativeHumidity_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddAccelerometer(uint8_t channel, float x, float y, float z)
{
 8002560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002564:	4606      	mov	r6, r0
 8002566:	4608      	mov	r0, r1
  /* USER CODE BEGIN CayenneLppAddAccelerometer_1 */

  /* USER CODE END CayenneLppAddAccelerometer_1 */
  if ((CayenneLppCursor + LPP_ACCELEROMETER_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 8002568:	492c      	ldr	r1, [pc, #176]	; (800261c <CayenneLppAddAccelerometer+0xbc>)
 800256a:	780f      	ldrb	r7, [r1, #0]
 800256c:	2fea      	cmp	r7, #234	; 0xea
 800256e:	d852      	bhi.n	8002616 <CayenneLppAddAccelerometer+0xb6>
 8002570:	4614      	mov	r4, r2
 8002572:	4698      	mov	r8, r3
  {
    return 0;
  }
  int16_t vx = (int16_t)(x * 1000);
 8002574:	492a      	ldr	r1, [pc, #168]	; (8002620 <CayenneLppAddAccelerometer+0xc0>)
 8002576:	f7fd fe5b 	bl	8000230 <__aeabi_fmul>
 800257a:	f7fe fd45 	bl	8001008 <__aeabi_f2iz>
 800257e:	b205      	sxth	r5, r0
  int16_t vy = (int16_t)(y * 1000);
 8002580:	4927      	ldr	r1, [pc, #156]	; (8002620 <CayenneLppAddAccelerometer+0xc0>)
 8002582:	4620      	mov	r0, r4
 8002584:	f7fd fe54 	bl	8000230 <__aeabi_fmul>
 8002588:	f7fe fd3e 	bl	8001008 <__aeabi_f2iz>
 800258c:	b204      	sxth	r4, r0
  int16_t vz = (int16_t)(z * 1000);
 800258e:	4924      	ldr	r1, [pc, #144]	; (8002620 <CayenneLppAddAccelerometer+0xc0>)
 8002590:	4640      	mov	r0, r8
 8002592:	f7fd fe4d 	bl	8000230 <__aeabi_fmul>
 8002596:	f7fe fd37 	bl	8001008 <__aeabi_f2iz>
 800259a:	4686      	mov	lr, r0

  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800259c:	f107 0c01 	add.w	ip, r7, #1
 80025a0:	fa5f fc8c 	uxtb.w	ip, ip
 80025a4:	4a1d      	ldr	r2, [pc, #116]	; (800261c <CayenneLppAddAccelerometer+0xbc>)
 80025a6:	f882 c000 	strb.w	ip, [r2]
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <CayenneLppAddAccelerometer+0xc4>)
 80025ac:	55de      	strb	r6, [r3, r7]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_ACCELEROMETER;
 80025ae:	f10c 0101 	add.w	r1, ip, #1
 80025b2:	b2c9      	uxtb	r1, r1
 80025b4:	7011      	strb	r1, [r2, #0]
 80025b6:	2071      	movs	r0, #113	; 0x71
 80025b8:	f803 000c 	strb.w	r0, [r3, ip]
  CayenneLppBuffer[CayenneLppCursor++] = vx >> 8;
 80025bc:	f101 0c01 	add.w	ip, r1, #1
 80025c0:	fa5f fc8c 	uxtb.w	ip, ip
 80025c4:	f882 c000 	strb.w	ip, [r2]
 80025c8:	1228      	asrs	r0, r5, #8
 80025ca:	5458      	strb	r0, [r3, r1]
  CayenneLppBuffer[CayenneLppCursor++] = vx;
 80025cc:	f10c 0101 	add.w	r1, ip, #1
 80025d0:	b2c9      	uxtb	r1, r1
 80025d2:	7011      	strb	r1, [r2, #0]
 80025d4:	f803 500c 	strb.w	r5, [r3, ip]
  CayenneLppBuffer[CayenneLppCursor++] = vy >> 8;
 80025d8:	f101 0c01 	add.w	ip, r1, #1
 80025dc:	fa5f fc8c 	uxtb.w	ip, ip
 80025e0:	f882 c000 	strb.w	ip, [r2]
 80025e4:	1220      	asrs	r0, r4, #8
 80025e6:	5458      	strb	r0, [r3, r1]
  CayenneLppBuffer[CayenneLppCursor++] = vy;
 80025e8:	f10c 0101 	add.w	r1, ip, #1
 80025ec:	b2c9      	uxtb	r1, r1
 80025ee:	7011      	strb	r1, [r2, #0]
 80025f0:	f803 400c 	strb.w	r4, [r3, ip]
  CayenneLppBuffer[CayenneLppCursor++] = vz >> 8;
 80025f4:	f101 0c01 	add.w	ip, r1, #1
 80025f8:	fa5f fc8c 	uxtb.w	ip, ip
 80025fc:	f882 c000 	strb.w	ip, [r2]
 8002600:	f34e 2007 	sbfx	r0, lr, #8, #8
 8002604:	5458      	strb	r0, [r3, r1]
  CayenneLppBuffer[CayenneLppCursor++] = vz;
 8002606:	f10c 0101 	add.w	r1, ip, #1
 800260a:	b2c8      	uxtb	r0, r1
 800260c:	7010      	strb	r0, [r2, #0]
 800260e:	f803 e00c 	strb.w	lr, [r3, ip]
  /* USER CODE BEGIN CayenneLppAddAccelerometer_2 */

  /* USER CODE END CayenneLppAddAccelerometer_2 */
  return CayenneLppCursor;
}
 8002612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 0;
 8002616:	2000      	movs	r0, #0
 8002618:	e7fb      	b.n	8002612 <CayenneLppAddAccelerometer+0xb2>
 800261a:	bf00      	nop
 800261c:	200005ba 	.word	0x200005ba
 8002620:	447a0000 	.word	0x447a0000
 8002624:	200004c8 	.word	0x200004c8

08002628 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002628:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800262a:	f7ff fb13 	bl	8001c54 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800262e:	f000 fbe1 	bl	8002df4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002632:	bd08      	pop	{r3, pc}

08002634 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002634:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002636:	f04f 30ff 	mov.w	r0, #4294967295
 800263a:	f015 f845 	bl	80176c8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800263e:	bd08      	pop	{r3, pc}

08002640 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8002640:	4b01      	ldr	r3, [pc, #4]	; (8002648 <OnTxFrameCtrlChanged+0x8>)
 8002642:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000058 	.word	0x20000058

0800264c <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800264c:	4b01      	ldr	r3, [pc, #4]	; (8002654 <OnPingSlotPeriodicityChanged+0x8>)
 800264e:	7318      	strb	r0, [r3, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000058 	.word	0x20000058

08002658 <OnBeaconStatusChange>:
  if (params != NULL)
 8002658:	2800      	cmp	r0, #0
 800265a:	d03f      	beq.n	80026dc <OnBeaconStatusChange+0x84>
{
 800265c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002660:	b08c      	sub	sp, #48	; 0x30
 8002662:	4603      	mov	r3, r0
    switch (params->State)
 8002664:	7842      	ldrb	r2, [r0, #1]
 8002666:	2a02      	cmp	r2, #2
 8002668:	d00a      	beq.n	8002680 <OnBeaconStatusChange+0x28>
 800266a:	2a03      	cmp	r2, #3
 800266c:	d02f      	beq.n	80026ce <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800266e:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <OnBeaconStatusChange+0x88>)
 8002670:	2200      	movs	r2, #0
 8002672:	4611      	mov	r1, r2
 8002674:	2002      	movs	r0, #2
 8002676:	f014 fec9 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 800267a:	b00c      	add	sp, #48	; 0x30
 800267c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002680:	7c02      	ldrb	r2, [r0, #16]
 8002682:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8002686:	f990 0014 	ldrsb.w	r0, [r0, #20]
 800268a:	7d9c      	ldrb	r4, [r3, #22]
 800268c:	7ddd      	ldrb	r5, [r3, #23]
 800268e:	7e1e      	ldrb	r6, [r3, #24]
 8002690:	7e5f      	ldrb	r7, [r3, #25]
 8002692:	f893 c01a 	ldrb.w	ip, [r3, #26]
 8002696:	f893 e01b 	ldrb.w	lr, [r3, #27]
 800269a:	f893 801c 	ldrb.w	r8, [r3, #28]
 800269e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80026a2:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 80026a6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80026aa:	9708      	str	r7, [sp, #32]
 80026ac:	9607      	str	r6, [sp, #28]
 80026ae:	9506      	str	r5, [sp, #24]
 80026b0:	9405      	str	r4, [sp, #20]
 80026b2:	685c      	ldr	r4, [r3, #4]
 80026b4:	9404      	str	r4, [sp, #16]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	9303      	str	r3, [sp, #12]
 80026ba:	9002      	str	r0, [sp, #8]
 80026bc:	9101      	str	r1, [sp, #4]
 80026be:	9200      	str	r2, [sp, #0]
 80026c0:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <OnBeaconStatusChange+0x8c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	4611      	mov	r1, r2
 80026c6:	2002      	movs	r0, #2
 80026c8:	f014 fea0 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
        break;
 80026cc:	e7d5      	b.n	800267a <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <OnBeaconStatusChange+0x90>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	4611      	mov	r1, r2
 80026d4:	2002      	movs	r0, #2
 80026d6:	f014 fe99 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 80026da:	e7ce      	b.n	800267a <OnBeaconStatusChange+0x22>
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	0801b310 	.word	0x0801b310
 80026e4:	0801b328 	.word	0x0801b328
 80026e8:	0801b39c 	.word	0x0801b39c

080026ec <OnClassChange>:
{
 80026ec:	b500      	push	{lr}
 80026ee:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <OnClassChange+0x1c>)
 80026f2:	5c1b      	ldrb	r3, [r3, r0]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <OnClassChange+0x20>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	4611      	mov	r1, r2
 80026fc:	2002      	movs	r0, #2
 80026fe:	f014 fe85 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 8002702:	b003      	add	sp, #12
 8002704:	f85d fb04 	ldr.w	pc, [sp], #4
 8002708:	0801b3d8 	.word	0x0801b3d8
 800270c:	0801b3bc 	.word	0x0801b3bc

08002710 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8002710:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 8002712:	2801      	cmp	r0, #1
 8002714:	d006      	beq.n	8002724 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <OnNvmDataChange+0x24>)
 8002718:	2200      	movs	r2, #0
 800271a:	4611      	mov	r1, r2
 800271c:	2002      	movs	r0, #2
 800271e:	f014 fe75 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 8002722:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <OnNvmDataChange+0x28>)
 8002726:	2200      	movs	r2, #0
 8002728:	4611      	mov	r1, r2
 800272a:	2002      	movs	r0, #2
 800272c:	f014 fe6e 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
 8002730:	e7f7      	b.n	8002722 <OnNvmDataChange+0x12>
 8002732:	bf00      	nop
 8002734:	0801b3f0 	.word	0x0801b3f0
 8002738:	0801b3dc 	.word	0x0801b3dc

0800273c <OnTxTimerEvent>:
{
 800273c:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800273e:	2100      	movs	r1, #0
 8002740:	2002      	movs	r0, #2
 8002742:	f014 ff8d 	bl	8017660 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8002746:	4802      	ldr	r0, [pc, #8]	; (8002750 <OnTxTimerEvent+0x14>)
 8002748:	f015 fa0e 	bl	8017b68 <UTIL_TIMER_Start>
}
 800274c:	bd08      	pop	{r3, pc}
 800274e:	bf00      	nop
 8002750:	20000710 	.word	0x20000710

08002754 <OnMacProcessNotify>:
{
 8002754:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002756:	2100      	movs	r1, #0
 8002758:	2001      	movs	r0, #1
 800275a:	f014 ff81 	bl	8017660 <UTIL_SEQ_SetTask>
}
 800275e:	bd08      	pop	{r3, pc}

08002760 <OnSystemReset>:
{
 8002760:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002762:	f00b f993 	bl	800da8c <LmHandlerHalt>
 8002766:	b100      	cbz	r0, 800276a <OnSystemReset+0xa>
}
 8002768:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800276a:	f00a fe11 	bl	800d390 <LmHandlerJoinStatus>
 800276e:	2801      	cmp	r0, #1
 8002770:	d1fa      	bne.n	8002768 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002772:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002776:	4905      	ldr	r1, [pc, #20]	; (800278c <OnSystemReset+0x2c>)
 8002778:	68ca      	ldr	r2, [r1, #12]
 800277a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800277e:	4b04      	ldr	r3, [pc, #16]	; (8002790 <OnSystemReset+0x30>)
 8002780:	4313      	orrs	r3, r2
 8002782:	60cb      	str	r3, [r1, #12]
 8002784:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002788:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800278a:	e7fd      	b.n	8002788 <OnSystemReset+0x28>
 800278c:	e000ed00 	.word	0xe000ed00
 8002790:	05fa0004 	.word	0x05fa0004

08002794 <OnTxPeriodicityChanged>:
{
 8002794:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <OnTxPeriodicityChanged+0x28>)
 8002798:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 800279a:	b910      	cbnz	r0, 80027a2 <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800279c:	f242 7210 	movw	r2, #10000	; 0x2710
 80027a0:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 80027a2:	4c07      	ldr	r4, [pc, #28]	; (80027c0 <OnTxPeriodicityChanged+0x2c>)
 80027a4:	4620      	mov	r0, r4
 80027a6:	f015 f985 	bl	8017ab4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 80027aa:	4b04      	ldr	r3, [pc, #16]	; (80027bc <OnTxPeriodicityChanged+0x28>)
 80027ac:	6819      	ldr	r1, [r3, #0]
 80027ae:	4620      	mov	r0, r4
 80027b0:	f015 fa20 	bl	8017bf4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 80027b4:	4620      	mov	r0, r4
 80027b6:	f015 f9d7 	bl	8017b68 <UTIL_TIMER_Start>
}
 80027ba:	bd10      	pop	{r4, pc}
 80027bc:	2000006c 	.word	0x2000006c
 80027c0:	20000710 	.word	0x20000710

080027c4 <OnTxData>:
  if ((params != NULL))
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d042      	beq.n	800284e <OnTxData+0x8a>
{
 80027c8:	b510      	push	{r4, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 80027ce:	7803      	ldrb	r3, [r0, #0]
 80027d0:	b90b      	cbnz	r3, 80027d6 <OnTxData+0x12>
}
 80027d2:	b004      	add	sp, #16
 80027d4:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80027d6:	2201      	movs	r2, #1
 80027d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027dc:	481c      	ldr	r0, [pc, #112]	; (8002850 <OnTxData+0x8c>)
 80027de:	f007 fdab 	bl	800a338 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 80027e2:	481c      	ldr	r0, [pc, #112]	; (8002854 <OnTxData+0x90>)
 80027e4:	f015 f9c0 	bl	8017b68 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 80027e8:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <OnTxData+0x94>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	4611      	mov	r1, r2
 80027ee:	2002      	movs	r0, #2
 80027f0:	f014 fe0c 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80027f4:	7c23      	ldrb	r3, [r4, #16]
 80027f6:	f994 200a 	ldrsb.w	r2, [r4, #10]
 80027fa:	f994 1018 	ldrsb.w	r1, [r4, #24]
 80027fe:	9103      	str	r1, [sp, #12]
 8002800:	9202      	str	r2, [sp, #8]
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	68e3      	ldr	r3, [r4, #12]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <OnTxData+0x98>)
 800280a:	2200      	movs	r2, #0
 800280c:	4611      	mov	r1, r2
 800280e:	2003      	movs	r0, #3
 8002810:	f014 fdfc 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <OnTxData+0x9c>)
 8002816:	2200      	movs	r2, #0
 8002818:	4611      	mov	r1, r2
 800281a:	2003      	movs	r0, #3
 800281c:	f014 fdf6 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8002820:	7a23      	ldrb	r3, [r4, #8]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d10c      	bne.n	8002840 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8002826:	7a63      	ldrb	r3, [r4, #9]
 8002828:	b143      	cbz	r3, 800283c <OnTxData+0x78>
 800282a:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <OnTxData+0xa0>)
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <OnTxData+0xa4>)
 8002830:	2200      	movs	r2, #0
 8002832:	4611      	mov	r1, r2
 8002834:	2003      	movs	r0, #3
 8002836:	f014 fde9 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
 800283a:	e7ca      	b.n	80027d2 <OnTxData+0xe>
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <OnTxData+0xa8>)
 800283e:	e7f5      	b.n	800282c <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <OnTxData+0xac>)
 8002842:	2200      	movs	r2, #0
 8002844:	4611      	mov	r1, r2
 8002846:	2003      	movs	r0, #3
 8002848:	f014 fde0 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 800284c:	e7c1      	b.n	80027d2 <OnTxData+0xe>
 800284e:	4770      	bx	lr
 8002850:	48000400 	.word	0x48000400
 8002854:	200006f8 	.word	0x200006f8
 8002858:	0801b410 	.word	0x0801b410
 800285c:	0801b444 	.word	0x0801b444
 8002860:	0801b478 	.word	0x0801b478
 8002864:	0801b40c 	.word	0x0801b40c
 8002868:	0801b488 	.word	0x0801b488
 800286c:	0801b404 	.word	0x0801b404
 8002870:	0801b49c 	.word	0x0801b49c

08002874 <OnJoinRequest>:
  if (joinParams != NULL)
 8002874:	b358      	cbz	r0, 80028ce <OnJoinRequest+0x5a>
{
 8002876:	b510      	push	{r4, lr}
 8002878:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800287a:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800287e:	b9fb      	cbnz	r3, 80028c0 <OnJoinRequest+0x4c>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002880:	4813      	ldr	r0, [pc, #76]	; (80028d0 <OnJoinRequest+0x5c>)
 8002882:	f015 f917 	bl	8017ab4 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002886:	2200      	movs	r2, #0
 8002888:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800288c:	4811      	ldr	r0, [pc, #68]	; (80028d4 <OnJoinRequest+0x60>)
 800288e:	f007 fd53 	bl	800a338 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <OnJoinRequest+0x64>)
 8002894:	2200      	movs	r2, #0
 8002896:	4611      	mov	r1, r2
 8002898:	2002      	movs	r0, #2
 800289a:	f014 fdb7 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800289e:	79a3      	ldrb	r3, [r4, #6]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d006      	beq.n	80028b2 <OnJoinRequest+0x3e>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 80028a4:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <OnJoinRequest+0x68>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	4611      	mov	r1, r2
 80028aa:	2002      	movs	r0, #2
 80028ac:	f014 fdae 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
 80028b0:	e00c      	b.n	80028cc <OnJoinRequest+0x58>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <OnJoinRequest+0x6c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	4611      	mov	r1, r2
 80028b8:	2002      	movs	r0, #2
 80028ba:	f014 fda7 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
 80028be:	e005      	b.n	80028cc <OnJoinRequest+0x58>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <OnJoinRequest+0x70>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	4611      	mov	r1, r2
 80028c6:	2002      	movs	r0, #2
 80028c8:	f014 fda0 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 80028cc:	bd10      	pop	{r4, pc}
 80028ce:	4770      	bx	lr
 80028d0:	200006b0 	.word	0x200006b0
 80028d4:	48000400 	.word	0x48000400
 80028d8:	0801b4ac 	.word	0x0801b4ac
 80028dc:	0801b4e4 	.word	0x0801b4e4
 80028e0:	0801b4c4 	.word	0x0801b4c4
 80028e4:	0801b504 	.word	0x0801b504

080028e8 <OnStopJoinTimerEvent>:
{
 80028e8:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <OnStopJoinTimerEvent+0x3c>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d013      	beq.n	800291a <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80028f2:	4c0d      	ldr	r4, [pc, #52]	; (8002928 <OnStopJoinTimerEvent+0x40>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028fa:	4620      	mov	r0, r4
 80028fc:	f007 fd1c 	bl	800a338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002900:	2200      	movs	r2, #0
 8002902:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002906:	4620      	mov	r0, r4
 8002908:	f007 fd16 	bl	800a338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800290c:	2200      	movs	r2, #0
 800290e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002912:	4620      	mov	r0, r4
 8002914:	f007 fd10 	bl	800a338 <HAL_GPIO_WritePin>
}
 8002918:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800291a:	2100      	movs	r1, #0
 800291c:	2008      	movs	r0, #8
 800291e:	f014 fe9f 	bl	8017660 <UTIL_SEQ_SetTask>
 8002922:	e7e6      	b.n	80028f2 <OnStopJoinTimerEvent+0xa>
 8002924:	20000000 	.word	0x20000000
 8002928:	48000400 	.word	0x48000400

0800292c <OnRxTimerLedEvent>:
{
 800292c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 800292e:	2200      	movs	r2, #0
 8002930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002934:	4801      	ldr	r0, [pc, #4]	; (800293c <OnRxTimerLedEvent+0x10>)
 8002936:	f007 fcff 	bl	800a338 <HAL_GPIO_WritePin>
}
 800293a:	bd08      	pop	{r3, pc}
 800293c:	48000400 	.word	0x48000400

08002940 <OnTxTimerLedEvent>:
{
 8002940:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002942:	2200      	movs	r2, #0
 8002944:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002948:	4801      	ldr	r0, [pc, #4]	; (8002950 <OnTxTimerLedEvent+0x10>)
 800294a:	f007 fcf5 	bl	800a338 <HAL_GPIO_WritePin>
}
 800294e:	bd08      	pop	{r3, pc}
 8002950:	48000400 	.word	0x48000400

08002954 <OnRxData>:
  if (params != NULL)
 8002954:	2900      	cmp	r1, #0
 8002956:	f000 8094 	beq.w	8002a82 <OnRxData+0x12e>
{
 800295a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295c:	b087      	sub	sp, #28
 800295e:	4604      	mov	r4, r0
 8002960:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002962:	2201      	movs	r2, #1
 8002964:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002968:	4846      	ldr	r0, [pc, #280]	; (8002a84 <OnRxData+0x130>)
 800296a:	f007 fce5 	bl	800a338 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 800296e:	4846      	ldr	r0, [pc, #280]	; (8002a88 <OnRxData+0x134>)
 8002970:	f015 f8fa 	bl	8017b68 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8002974:	782e      	ldrb	r6, [r5, #0]
 8002976:	2e00      	cmp	r6, #0
 8002978:	d067      	beq.n	8002a4a <OnRxData+0xf6>
      if (appData != NULL)
 800297a:	2c00      	cmp	r4, #0
 800297c:	d064      	beq.n	8002a48 <OnRxData+0xf4>
        RxPort = appData->Port;
 800297e:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 8002980:	6863      	ldr	r3, [r4, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d061      	beq.n	8002a4a <OnRxData+0xf6>
          switch (appData->Port)
 8002986:	2e02      	cmp	r6, #2
 8002988:	d017      	beq.n	80029ba <OnRxData+0x66>
 800298a:	2e03      	cmp	r6, #3
 800298c:	d15d      	bne.n	8002a4a <OnRxData+0xf6>
              if (appData->BufferSize == 1)
 800298e:	7862      	ldrb	r2, [r4, #1]
 8002990:	2a01      	cmp	r2, #1
 8002992:	d15a      	bne.n	8002a4a <OnRxData+0xf6>
                switch (appData->Buffer[0])
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d007      	beq.n	80029aa <OnRxData+0x56>
 800299a:	2b02      	cmp	r3, #2
 800299c:	d009      	beq.n	80029b2 <OnRxData+0x5e>
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d153      	bne.n	8002a4a <OnRxData+0xf6>
                    LmHandlerRequestClass(CLASS_A);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f00a fda8 	bl	800d4f8 <LmHandlerRequestClass>
                    break;
 80029a8:	e04f      	b.n	8002a4a <OnRxData+0xf6>
                    LmHandlerRequestClass(CLASS_B);
 80029aa:	2001      	movs	r0, #1
 80029ac:	f00a fda4 	bl	800d4f8 <LmHandlerRequestClass>
                    break;
 80029b0:	e04b      	b.n	8002a4a <OnRxData+0xf6>
                    LmHandlerRequestClass(CLASS_C);
 80029b2:	2002      	movs	r0, #2
 80029b4:	f00a fda0 	bl	800d4f8 <LmHandlerRequestClass>
                    break;
 80029b8:	e047      	b.n	8002a4a <OnRxData+0xf6>
            APP_LOG(TS_ON, VLEVEL_M, "message on user port: ");
 80029ba:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <OnRxData+0x138>)
 80029bc:	2201      	movs	r2, #1
 80029be:	2100      	movs	r1, #0
 80029c0:	2002      	movs	r0, #2
 80029c2:	f014 fd23 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_M, " buffer size %d\r\n", (int16_t)(appData->BufferSize));
 80029c6:	7863      	ldrb	r3, [r4, #1]
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <OnRxData+0x13c>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	2100      	movs	r1, #0
 80029d0:	2002      	movs	r0, #2
 80029d2:	f014 fd1b 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
            for(int i = 0; i < appData->BufferSize; i++){
 80029d6:	2700      	movs	r7, #0
 80029d8:	e009      	b.n	80029ee <OnRxData+0x9a>
            	APP_LOG(TS_ON, VLEVEL_M, "%d", (int16_t)(appData->Buffer[i]));
 80029da:	6863      	ldr	r3, [r4, #4]
 80029dc:	5ddb      	ldrb	r3, [r3, r7]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	4b2c      	ldr	r3, [pc, #176]	; (8002a94 <OnRxData+0x140>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	2100      	movs	r1, #0
 80029e6:	2002      	movs	r0, #2
 80029e8:	f014 fd10 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
            for(int i = 0; i < appData->BufferSize; i++){
 80029ec:	3701      	adds	r7, #1
 80029ee:	7863      	ldrb	r3, [r4, #1]
 80029f0:	42bb      	cmp	r3, r7
 80029f2:	dcf2      	bgt.n	80029da <OnRxData+0x86>
            APP_LOG(TS_ON, VLEVEL_M, "\r\n");
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <OnRxData+0x144>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	2100      	movs	r1, #0
 80029fa:	2002      	movs	r0, #2
 80029fc:	f014 fd06 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
              if (appData->BufferSize == 1)
 8002a00:	7863      	ldrb	r3, [r4, #1]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d121      	bne.n	8002a4a <OnRxData+0xf6>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8002a06:	6863      	ldr	r3, [r4, #4]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <OnRxData+0x148>)
 8002a10:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8002a12:	b963      	cbnz	r3, 8002a2e <OnRxData+0xda>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <OnRxData+0x14c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	4611      	mov	r1, r2
 8002a1a:	2003      	movs	r0, #3
 8002a1c:	f014 fcf6 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002a20:	2200      	movs	r2, #0
 8002a22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a26:	4817      	ldr	r0, [pc, #92]	; (8002a84 <OnRxData+0x130>)
 8002a28:	f007 fc86 	bl	800a338 <HAL_GPIO_WritePin>
 8002a2c:	e00d      	b.n	8002a4a <OnRxData+0xf6>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <OnRxData+0x150>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	4611      	mov	r1, r2
 8002a34:	2003      	movs	r0, #3
 8002a36:	f014 fce9 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a40:	4810      	ldr	r0, [pc, #64]	; (8002a84 <OnRxData+0x130>)
 8002a42:	f007 fc79 	bl	800a338 <HAL_GPIO_WritePin>
 8002a46:	e000      	b.n	8002a4a <OnRxData+0xf6>
  uint8_t RxPort = 0;
 8002a48:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 8002a4a:	7c2b      	ldrb	r3, [r5, #16]
 8002a4c:	2b05      	cmp	r3, #5
 8002a4e:	d901      	bls.n	8002a54 <OnRxData+0x100>
}
 8002a50:	b007      	add	sp, #28
 8002a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8002a54:	f995 2008 	ldrsb.w	r2, [r5, #8]
 8002a58:	f995 1009 	ldrsb.w	r1, [r5, #9]
 8002a5c:	f995 000a 	ldrsb.w	r0, [r5, #10]
 8002a60:	9005      	str	r0, [sp, #20]
 8002a62:	9104      	str	r1, [sp, #16]
 8002a64:	4910      	ldr	r1, [pc, #64]	; (8002aa8 <OnRxData+0x154>)
 8002a66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a6a:	9303      	str	r3, [sp, #12]
 8002a6c:	9202      	str	r2, [sp, #8]
 8002a6e:	9601      	str	r6, [sp, #4]
 8002a70:	68eb      	ldr	r3, [r5, #12]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <OnRxData+0x158>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	4611      	mov	r1, r2
 8002a7a:	2003      	movs	r0, #3
 8002a7c:	f014 fcc6 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 8002a80:	e7e6      	b.n	8002a50 <OnRxData+0xfc>
 8002a82:	4770      	bx	lr
 8002a84:	48000400 	.word	0x48000400
 8002a88:	200006c8 	.word	0x200006c8
 8002a8c:	0801b520 	.word	0x0801b520
 8002a90:	0801b538 	.word	0x0801b538
 8002a94:	0801b54c 	.word	0x0801b54c
 8002a98:	0801b7f0 	.word	0x0801b7f0
 8002a9c:	200006ae 	.word	0x200006ae
 8002aa0:	0801b550 	.word	0x0801b550
 8002aa4:	0801b55c 	.word	0x0801b55c
 8002aa8:	0801b790 	.word	0x0801b790
 8002aac:	0801b568 	.word	0x0801b568

08002ab0 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002ab0:	b538      	push	{r3, r4, r5, lr}
 8002ab2:	4605      	mov	r5, r0
 8002ab4:	460c      	mov	r4, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8002ab6:	f007 f997 	bl	8009de8 <HAL_FLASH_Unlock>
 8002aba:	b100      	cbz	r0, 8002abe <OnStoreContextRequest+0xe>
    HAL_FLASH_Lock();
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002abc:	bd38      	pop	{r3, r4, r5, pc}
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 8002abe:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <OnStoreContextRequest+0x4c>)
 8002ac0:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <OnStoreContextRequest+0x50>)
 8002ac6:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 8002aca:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8002ace:	fbb3 f3f0 	udiv	r3, r3, r0
 8002ad2:	fb00 f303 	mul.w	r3, r0, r3
 8002ad6:	f5c3 337c 	rsb	r3, r3, #258048	; 0x3f000
 8002ada:	2200      	movs	r2, #0
 8002adc:	2101      	movs	r1, #1
 8002ade:	0ad8      	lsrs	r0, r3, #11
 8002ae0:	f7fe fe18 	bl	8001714 <FLASH_IF_EraseByPages>
 8002ae4:	b110      	cbz	r0, 8002aec <OnStoreContextRequest+0x3c>
    HAL_FLASH_Lock();
 8002ae6:	f007 f997 	bl	8009e18 <HAL_FLASH_Lock>
}
 8002aea:	e7e7      	b.n	8002abc <OnStoreContextRequest+0xc>
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 8002aec:	2300      	movs	r3, #0
 8002aee:	4622      	mov	r2, r4
 8002af0:	4629      	mov	r1, r5
 8002af2:	4804      	ldr	r0, [pc, #16]	; (8002b04 <OnStoreContextRequest+0x54>)
 8002af4:	f7fe fe2a 	bl	800174c <FLASH_IF_Write>
 8002af8:	e7f5      	b.n	8002ae6 <OnStoreContextRequest+0x36>
 8002afa:	bf00      	nop
 8002afc:	1fff7000 	.word	0x1fff7000
 8002b00:	03fffc00 	.word	0x03fffc00
 8002b04:	0803f000 	.word	0x0803f000

08002b08 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002b08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8002b0a:	b28a      	uxth	r2, r1
 8002b0c:	4901      	ldr	r1, [pc, #4]	; (8002b14 <OnRestoreContextRequest+0xc>)
 8002b0e:	f014 fd93 	bl	8017638 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002b12:	bd08      	pop	{r3, pc}
 8002b14:	0803f000 	.word	0x0803f000

08002b18 <StopJoin>:
{
 8002b18:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002b1a:	4c1e      	ldr	r4, [pc, #120]	; (8002b94 <StopJoin+0x7c>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b22:	4620      	mov	r0, r4
 8002b24:	f007 fc08 	bl	800a338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f007 fc02 	bl	800a338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002b34:	2201      	movs	r2, #1
 8002b36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f007 fbfc 	bl	800a338 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 8002b40:	4815      	ldr	r0, [pc, #84]	; (8002b98 <StopJoin+0x80>)
 8002b42:	f014 ffb7 	bl	8017ab4 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8002b46:	f00a ff99 	bl	800da7c <LmHandlerStop>
 8002b4a:	b148      	cbz	r0, 8002b60 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <StopJoin+0x84>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	4611      	mov	r1, r2
 8002b52:	2002      	movs	r0, #2
 8002b54:	f014 fc5a 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 8002b58:	4811      	ldr	r0, [pc, #68]	; (8002ba0 <StopJoin+0x88>)
 8002b5a:	f015 f805 	bl	8017b68 <UTIL_TIMER_Start>
}
 8002b5e:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 8002b60:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <StopJoin+0x8c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	4611      	mov	r1, r2
 8002b66:	2002      	movs	r0, #2
 8002b68:	f014 fc50 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 8002b6c:	4c0e      	ldr	r4, [pc, #56]	; (8002ba8 <StopJoin+0x90>)
 8002b6e:	2501      	movs	r5, #1
 8002b70:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <StopJoin+0x94>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	4611      	mov	r1, r2
 8002b78:	2002      	movs	r0, #2
 8002b7a:	f014 fc47 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 8002b7e:	480c      	ldr	r0, [pc, #48]	; (8002bb0 <StopJoin+0x98>)
 8002b80:	f00a fdf8 	bl	800d774 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8002b84:	4629      	mov	r1, r5
 8002b86:	7820      	ldrb	r0, [r4, #0]
 8002b88:	f00a fb8a 	bl	800d2a0 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <StopJoin+0x80>)
 8002b8e:	f014 ffeb 	bl	8017b68 <UTIL_TIMER_Start>
 8002b92:	e7e1      	b.n	8002b58 <StopJoin+0x40>
 8002b94:	48000400 	.word	0x48000400
 8002b98:	20000710 	.word	0x20000710
 8002b9c:	0801b5b0 	.word	0x0801b5b0
 8002ba0:	200006e0 	.word	0x200006e0
 8002ba4:	0801b5d0 	.word	0x0801b5d0
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	0801b5e4 	.word	0x0801b5e4
 8002bb0:	20000058 	.word	0x20000058

08002bb4 <StoreContext>:
{
 8002bb4:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8002bb6:	f00a ff71 	bl	800da9c <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 8002bba:	f110 0f08 	cmn.w	r0, #8
 8002bbe:	d003      	beq.n	8002bc8 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002bc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002bc4:	d007      	beq.n	8002bd6 <StoreContext+0x22>
}
 8002bc6:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <StoreContext+0x30>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	4611      	mov	r1, r2
 8002bce:	2002      	movs	r0, #2
 8002bd0:	f014 fc1c 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
 8002bd4:	e7f7      	b.n	8002bc6 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8002bd6:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <StoreContext+0x34>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4611      	mov	r1, r2
 8002bdc:	2002      	movs	r0, #2
 8002bde:	f014 fc15 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 8002be2:	e7f0      	b.n	8002bc6 <StoreContext+0x12>
 8002be4:	0801b604 	.word	0x0801b604
 8002be8:	0801b61c 	.word	0x0801b61c

08002bec <randomFloat>:
static float randomFloat(){
 8002bec:	b508      	push	{r3, lr}
	return (float)rand()/(float)(RAND_MAX);
 8002bee:	f015 ff2f 	bl	8018a50 <rand>
 8002bf2:	f7fe f93f 	bl	8000e74 <__aeabi_i2f>
 8002bf6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8002bfa:	f7fd fb19 	bl	8000230 <__aeabi_fmul>
}
 8002bfe:	bd08      	pop	{r3, pc}

08002c00 <getMockTemperature>:
static float getMockTemperature(){
 8002c00:	b510      	push	{r4, lr}
	if(randomFloat() > 0.5)
 8002c02:	f7ff fff3 	bl	8002bec <randomFloat>
 8002c06:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002c0a:	f7fe f9f3 	bl	8000ff4 <__aeabi_fcmpgt>
 8002c0e:	b168      	cbz	r0, 8002c2c <getMockTemperature+0x2c>
		mockTemperature += 5 * randomFloat();
 8002c10:	f7ff ffec 	bl	8002bec <randomFloat>
 8002c14:	490b      	ldr	r1, [pc, #44]	; (8002c44 <getMockTemperature+0x44>)
 8002c16:	f7fd fb0b 	bl	8000230 <__aeabi_fmul>
 8002c1a:	4601      	mov	r1, r0
 8002c1c:	4c0a      	ldr	r4, [pc, #40]	; (8002c48 <getMockTemperature+0x48>)
 8002c1e:	6820      	ldr	r0, [r4, #0]
 8002c20:	f7fe f874 	bl	8000d0c <__addsf3>
 8002c24:	6020      	str	r0, [r4, #0]
}
 8002c26:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <getMockTemperature+0x48>)
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	bd10      	pop	{r4, pc}
		mockTemperature -= 5 * randomFloat();
 8002c2c:	f7ff ffde 	bl	8002bec <randomFloat>
 8002c30:	4904      	ldr	r1, [pc, #16]	; (8002c44 <getMockTemperature+0x44>)
 8002c32:	f7fd fafd 	bl	8000230 <__aeabi_fmul>
 8002c36:	4601      	mov	r1, r0
 8002c38:	4c03      	ldr	r4, [pc, #12]	; (8002c48 <getMockTemperature+0x48>)
 8002c3a:	6820      	ldr	r0, [r4, #0]
 8002c3c:	f7fe f864 	bl	8000d08 <__aeabi_fsub>
 8002c40:	6020      	str	r0, [r4, #0]
 8002c42:	e7f0      	b.n	8002c26 <getMockTemperature+0x26>
 8002c44:	40a00000 	.word	0x40a00000
 8002c48:	20000070 	.word	0x20000070

08002c4c <getMockAcceleration>:
static float* getMockAcceleration(){
 8002c4c:	b538      	push	{r3, r4, r5, lr}
	for(int i = 0; i < 3; i++){
 8002c4e:	2400      	movs	r4, #0
 8002c50:	e00a      	b.n	8002c68 <getMockAcceleration+0x1c>
			mockAcceleration[i] -= randomFloat();
 8002c52:	f7ff ffcb 	bl	8002bec <randomFloat>
 8002c56:	4601      	mov	r1, r0
 8002c58:	4d0f      	ldr	r5, [pc, #60]	; (8002c98 <getMockAcceleration+0x4c>)
 8002c5a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8002c5e:	f7fe f853 	bl	8000d08 <__aeabi_fsub>
 8002c62:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for(int i = 0; i < 3; i++){
 8002c66:	3401      	adds	r4, #1
 8002c68:	2c02      	cmp	r4, #2
 8002c6a:	dc12      	bgt.n	8002c92 <getMockAcceleration+0x46>
		if(randomFloat() > 0.5)
 8002c6c:	f7ff ffbe 	bl	8002bec <randomFloat>
 8002c70:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002c74:	f7fe f9be 	bl	8000ff4 <__aeabi_fcmpgt>
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	d0ea      	beq.n	8002c52 <getMockAcceleration+0x6>
			mockAcceleration[i] += randomFloat();
 8002c7c:	f7ff ffb6 	bl	8002bec <randomFloat>
 8002c80:	4601      	mov	r1, r0
 8002c82:	4d05      	ldr	r5, [pc, #20]	; (8002c98 <getMockAcceleration+0x4c>)
 8002c84:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8002c88:	f7fe f840 	bl	8000d0c <__addsf3>
 8002c8c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8002c90:	e7e9      	b.n	8002c66 <getMockAcceleration+0x1a>
}
 8002c92:	4801      	ldr	r0, [pc, #4]	; (8002c98 <getMockAcceleration+0x4c>)
 8002c94:	bd38      	pop	{r3, r4, r5, pc}
 8002c96:	bf00      	nop
 8002c98:	20000728 	.word	0x20000728

08002c9c <SendTxData>:
{
 8002c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ca0:	b084      	sub	sp, #16
  float temperature = getMockTemperature();
 8002ca2:	f7ff ffad 	bl	8002c00 <getMockTemperature>
 8002ca6:	4605      	mov	r5, r0
  float* acceleration = getMockAcceleration();
 8002ca8:	f7ff ffd0 	bl	8002c4c <getMockAcceleration>
 8002cac:	4604      	mov	r4, r0
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(temperature));
 8002cae:	4628      	mov	r0, r5
 8002cb0:	f7fe f9aa 	bl	8001008 <__aeabi_f2iz>
 8002cb4:	b200      	sxth	r0, r0
 8002cb6:	9000      	str	r0, [sp, #0]
 8002cb8:	4b3d      	ldr	r3, [pc, #244]	; (8002db0 <SendTxData+0x114>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	2002      	movs	r0, #2
 8002cc0:	f014 fba4 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "acc: x %d, y %d, z %d\r\n", (int16_t)(acceleration[0]), (int16_t)(acceleration[1]), (int16_t)(acceleration[2]));
 8002cc4:	6820      	ldr	r0, [r4, #0]
 8002cc6:	f7fe f99f 	bl	8001008 <__aeabi_f2iz>
 8002cca:	b206      	sxth	r6, r0
 8002ccc:	6860      	ldr	r0, [r4, #4]
 8002cce:	f7fe f99b 	bl	8001008 <__aeabi_f2iz>
 8002cd2:	b207      	sxth	r7, r0
 8002cd4:	68a0      	ldr	r0, [r4, #8]
 8002cd6:	f7fe f997 	bl	8001008 <__aeabi_f2iz>
 8002cda:	b200      	sxth	r0, r0
 8002cdc:	9002      	str	r0, [sp, #8]
 8002cde:	9701      	str	r7, [sp, #4]
 8002ce0:	9600      	str	r6, [sp, #0]
 8002ce2:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <SendTxData+0x118>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	2002      	movs	r0, #2
 8002cea:	f014 fb8f 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "led: %d\r\n", AppLedStateOn);
 8002cee:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8002db8 <SendTxData+0x11c>
 8002cf2:	f898 3000 	ldrb.w	r3, [r8]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	4b30      	ldr	r3, [pc, #192]	; (8002dbc <SendTxData+0x120>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	2002      	movs	r0, #2
 8002d00:	f014 fb84 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
  AppData.Port = LORAWAN_USER_APP_PORT;
 8002d04:	4e2e      	ldr	r6, [pc, #184]	; (8002dc0 <SendTxData+0x124>)
 8002d06:	2702      	movs	r7, #2
 8002d08:	7037      	strb	r7, [r6, #0]
  CayenneLppReset();
 8002d0a:	f7ff fbc9 	bl	80024a0 <CayenneLppReset>
  CayenneLppAddTemperature(channel++, temperature);
 8002d0e:	4629      	mov	r1, r5
 8002d10:	2000      	movs	r0, #0
 8002d12:	f7ff fbf9 	bl	8002508 <CayenneLppAddTemperature>
  CayenneLppAddAccelerometer(channel++, acceleration[0], acceleration[1], acceleration[2]);
 8002d16:	68a3      	ldr	r3, [r4, #8]
 8002d18:	6862      	ldr	r2, [r4, #4]
 8002d1a:	6821      	ldr	r1, [r4, #0]
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f7ff fc1f 	bl	8002560 <CayenneLppAddAccelerometer>
  CayenneLppAddDigitalOutput(channel++, AppLedStateOn);
 8002d22:	f898 1000 	ldrb.w	r1, [r8]
 8002d26:	4638      	mov	r0, r7
 8002d28:	f7ff fbd2 	bl	80024d0 <CayenneLppAddDigitalOutput>
  CayenneLppCopy(AppData.Buffer);
 8002d2c:	6870      	ldr	r0, [r6, #4]
 8002d2e:	f7ff fbc3 	bl	80024b8 <CayenneLppCopy>
  AppData.BufferSize = CayenneLppGetSize();
 8002d32:	f7ff fbbb 	bl	80024ac <CayenneLppGetSize>
 8002d36:	7070      	strb	r0, [r6, #1]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <SendTxData+0x128>)
 8002d3a:	7a5b      	ldrb	r3, [r3, #9]
 8002d3c:	b99b      	cbnz	r3, 8002d66 <SendTxData+0xca>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <SendTxData+0x12c>)
 8002d42:	78d9      	ldrb	r1, [r3, #3]
 8002d44:	481e      	ldr	r0, [pc, #120]	; (8002dc0 <SendTxData+0x124>)
 8002d46:	f00a fb35 	bl	800d3b4 <LmHandlerSend>
  if (LORAMAC_HANDLER_SUCCESS == status)
 8002d4a:	b1d0      	cbz	r0, 8002d82 <SendTxData+0xe6>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002d4c:	f110 0f06 	cmn.w	r0, #6
 8002d50:	d01e      	beq.n	8002d90 <SendTxData+0xf4>
    UTIL_TIMER_Stop(&TxTimer);
 8002d52:	4c1e      	ldr	r4, [pc, #120]	; (8002dcc <SendTxData+0x130>)
 8002d54:	4620      	mov	r0, r4
 8002d56:	f014 fead 	bl	8017ab4 <UTIL_TIMER_Stop>
    UTIL_TIMER_Start(&TxTimer);
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f014 ff04 	bl	8017b68 <UTIL_TIMER_Start>
}
 8002d60:	b004      	add	sp, #16
 8002d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002d66:	f00a fb13 	bl	800d390 <LmHandlerJoinStatus>
 8002d6a:	2801      	cmp	r0, #1
 8002d6c:	d1e7      	bne.n	8002d3e <SendTxData+0xa2>
    UTIL_TIMER_Stop(&JoinLedTimer);
 8002d6e:	4815      	ldr	r0, [pc, #84]	; (8002dc4 <SendTxData+0x128>)
 8002d70:	f014 fea0 	bl	8017ab4 <UTIL_TIMER_Stop>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002d74:	2200      	movs	r2, #0
 8002d76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d7a:	4815      	ldr	r0, [pc, #84]	; (8002dd0 <SendTxData+0x134>)
 8002d7c:	f007 fadc 	bl	800a338 <HAL_GPIO_WritePin>
 8002d80:	e7dd      	b.n	8002d3e <SendTxData+0xa2>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002d82:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <SendTxData+0x138>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	2100      	movs	r1, #0
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f014 fb3f 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
 8002d8e:	e7e0      	b.n	8002d52 <SendTxData+0xb6>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002d90:	f00a faf8 	bl	800d384 <LmHandlerGetDutyCycleWaitTime>
    if (nextTxIn > 0)
 8002d94:	2800      	cmp	r0, #0
 8002d96:	d0dc      	beq.n	8002d52 <SendTxData+0xb6>
      APP_LOG(TS_ON, VLEVEL_L, "(ignored) Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002d98:	4a0f      	ldr	r2, [pc, #60]	; (8002dd8 <SendTxData+0x13c>)
 8002d9a:	fba2 2300 	umull	r2, r3, r2, r0
 8002d9e:	099b      	lsrs	r3, r3, #6
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <SendTxData+0x140>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	2100      	movs	r1, #0
 8002da8:	4610      	mov	r0, r2
 8002daa:	f014 fb2f 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
 8002dae:	e7d0      	b.n	8002d52 <SendTxData+0xb6>
 8002db0:	0801b634 	.word	0x0801b634
 8002db4:	0801b640 	.word	0x0801b640
 8002db8:	200006ae 	.word	0x200006ae
 8002dbc:	0801b658 	.word	0x0801b658
 8002dc0:	20000004 	.word	0x20000004
 8002dc4:	200006b0 	.word	0x200006b0
 8002dc8:	20000058 	.word	0x20000058
 8002dcc:	20000710 	.word	0x20000710
 8002dd0:	48000400 	.word	0x48000400
 8002dd4:	0801b664 	.word	0x0801b664
 8002dd8:	10624dd3 	.word	0x10624dd3
 8002ddc:	0801b674 	.word	0x0801b674

08002de0 <OnJoinTimerLedEvent>:
{
 8002de0:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8002de2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002de6:	4802      	ldr	r0, [pc, #8]	; (8002df0 <OnJoinTimerLedEvent+0x10>)
 8002de8:	f007 faab 	bl	800a342 <HAL_GPIO_TogglePin>
}
 8002dec:	bd08      	pop	{r3, pc}
 8002dee:	bf00      	nop
 8002df0:	48000400 	.word	0x48000400

08002df4 <LoRaWAN_Init>:
{
 8002df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002df8:	b086      	sub	sp, #24
  uint32_t feature_version = 0UL;
 8002dfa:	2400      	movs	r4, #0
 8002dfc:	9405      	str	r4, [sp, #20]
  srand(time(NULL));
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f016 fcda 	bl	80197b8 <time>
 8002e04:	f015 fdf6 	bl	80189f4 <srand>
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002e08:	9402      	str	r4, [sp, #8]
 8002e0a:	2502      	movs	r5, #2
 8002e0c:	9501      	str	r5, [sp, #4]
 8002e0e:	2601      	movs	r6, #1
 8002e10:	9600      	str	r6, [sp, #0]
 8002e12:	4b53      	ldr	r3, [pc, #332]	; (8002f60 <LoRaWAN_Init+0x16c>)
 8002e14:	4622      	mov	r2, r4
 8002e16:	4621      	mov	r1, r4
 8002e18:	4628      	mov	r0, r5
 8002e1a:	f014 faf7 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002e1e:	9402      	str	r4, [sp, #8]
 8002e20:	2704      	movs	r7, #4
 8002e22:	9701      	str	r7, [sp, #4]
 8002e24:	9500      	str	r5, [sp, #0]
 8002e26:	4b4f      	ldr	r3, [pc, #316]	; (8002f64 <LoRaWAN_Init+0x170>)
 8002e28:	4622      	mov	r2, r4
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	4628      	mov	r0, r5
 8002e2e:	f014 faed 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002e32:	9402      	str	r4, [sp, #8]
 8002e34:	9501      	str	r5, [sp, #4]
 8002e36:	9600      	str	r6, [sp, #0]
 8002e38:	4b4b      	ldr	r3, [pc, #300]	; (8002f68 <LoRaWAN_Init+0x174>)
 8002e3a:	4622      	mov	r2, r4
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f014 fae4 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002e44:	a905      	add	r1, sp, #20
 8002e46:	4620      	mov	r0, r4
 8002e48:	f00a fe02 	bl	800da50 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002e4c:	9b05      	ldr	r3, [sp, #20]
 8002e4e:	0e1a      	lsrs	r2, r3, #24
 8002e50:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002e54:	9102      	str	r1, [sp, #8]
 8002e56:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002e5a:	9301      	str	r3, [sp, #4]
 8002e5c:	9200      	str	r2, [sp, #0]
 8002e5e:	4b43      	ldr	r3, [pc, #268]	; (8002f6c <LoRaWAN_Init+0x178>)
 8002e60:	4622      	mov	r2, r4
 8002e62:	4621      	mov	r1, r4
 8002e64:	4628      	mov	r0, r5
 8002e66:	f014 fad1 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002e6a:	a905      	add	r1, sp, #20
 8002e6c:	4630      	mov	r0, r6
 8002e6e:	f00a fdef 	bl	800da50 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002e72:	9b05      	ldr	r3, [sp, #20]
 8002e74:	0e1a      	lsrs	r2, r3, #24
 8002e76:	b2d9      	uxtb	r1, r3
 8002e78:	9103      	str	r1, [sp, #12]
 8002e7a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002e7e:	9102      	str	r1, [sp, #8]
 8002e80:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	9200      	str	r2, [sp, #0]
 8002e88:	4b39      	ldr	r3, [pc, #228]	; (8002f70 <LoRaWAN_Init+0x17c>)
 8002e8a:	4622      	mov	r2, r4
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	4628      	mov	r0, r5
 8002e90:	f014 fabc 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002e94:	9400      	str	r4, [sp, #0]
 8002e96:	4b37      	ldr	r3, [pc, #220]	; (8002f74 <LoRaWAN_Init+0x180>)
 8002e98:	4622      	mov	r2, r4
 8002e9a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002e9e:	4836      	ldr	r0, [pc, #216]	; (8002f78 <LoRaWAN_Init+0x184>)
 8002ea0:	f014 fdaa 	bl	80179f8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002ea4:	9400      	str	r4, [sp, #0]
 8002ea6:	4b35      	ldr	r3, [pc, #212]	; (8002f7c <LoRaWAN_Init+0x188>)
 8002ea8:	4622      	mov	r2, r4
 8002eaa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002eae:	4834      	ldr	r0, [pc, #208]	; (8002f80 <LoRaWAN_Init+0x18c>)
 8002eb0:	f014 fda2 	bl	80179f8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002eb4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8002f84 <LoRaWAN_Init+0x190>
 8002eb8:	9400      	str	r4, [sp, #0]
 8002eba:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <LoRaWAN_Init+0x194>)
 8002ebc:	4632      	mov	r2, r6
 8002ebe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002ec2:	4640      	mov	r0, r8
 8002ec4:	f014 fd98 	bl	80179f8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8002ec8:	9400      	str	r4, [sp, #0]
 8002eca:	4b30      	ldr	r3, [pc, #192]	; (8002f8c <LoRaWAN_Init+0x198>)
 8002ecc:	4622      	mov	r2, r4
 8002ece:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002ed2:	482f      	ldr	r0, [pc, #188]	; (8002f90 <LoRaWAN_Init+0x19c>)
 8002ed4:	f014 fd90 	bl	80179f8 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8002ed8:	4a2e      	ldr	r2, [pc, #184]	; (8002f94 <LoRaWAN_Init+0x1a0>)
 8002eda:	4621      	mov	r1, r4
 8002edc:	4630      	mov	r0, r6
 8002ede:	f014 fc8b 	bl	80177f8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002ee2:	4a2d      	ldr	r2, [pc, #180]	; (8002f98 <LoRaWAN_Init+0x1a4>)
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	4628      	mov	r0, r5
 8002ee8:	f014 fc86 	bl	80177f8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8002eec:	4a2b      	ldr	r2, [pc, #172]	; (8002f9c <LoRaWAN_Init+0x1a8>)
 8002eee:	4621      	mov	r1, r4
 8002ef0:	4638      	mov	r0, r7
 8002ef2:	f014 fc81 	bl	80177f8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8002ef6:	4a2a      	ldr	r2, [pc, #168]	; (8002fa0 <LoRaWAN_Init+0x1ac>)
 8002ef8:	4621      	mov	r1, r4
 8002efa:	2008      	movs	r0, #8
 8002efc:	f014 fc7c 	bl	80177f8 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8002f00:	f000 f870 	bl	8002fe4 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002f04:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 8002f08:	4826      	ldr	r0, [pc, #152]	; (8002fa4 <LoRaWAN_Init+0x1b0>)
 8002f0a:	f00a fd67 	bl	800d9dc <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002f0e:	4826      	ldr	r0, [pc, #152]	; (8002fa8 <LoRaWAN_Init+0x1b4>)
 8002f10:	f00a fc30 	bl	800d774 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002f14:	4640      	mov	r0, r8
 8002f16:	f014 fe27 	bl	8017b68 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	4b23      	ldr	r3, [pc, #140]	; (8002fac <LoRaWAN_Init+0x1b8>)
 8002f1e:	7818      	ldrb	r0, [r3, #0]
 8002f20:	f00a f9be 	bl	800d2a0 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002f24:	4f22      	ldr	r7, [pc, #136]	; (8002fb0 <LoRaWAN_Init+0x1bc>)
 8002f26:	9400      	str	r4, [sp, #0]
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <LoRaWAN_Init+0x1c0>)
 8002f2a:	4622      	mov	r2, r4
 8002f2c:	4922      	ldr	r1, [pc, #136]	; (8002fb8 <LoRaWAN_Init+0x1c4>)
 8002f2e:	6809      	ldr	r1, [r1, #0]
 8002f30:	4638      	mov	r0, r7
 8002f32:	f014 fd61 	bl	80179f8 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002f36:	4638      	mov	r0, r7
 8002f38:	f014 fe16 	bl	8017b68 <UTIL_TIMER_Start>
  APP_LOG(TS_ON, VLEVEL_M, "Before waakama ");
 8002f3c:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <LoRaWAN_Init+0x1c8>)
 8002f3e:	4632      	mov	r2, r6
 8002f40:	4621      	mov	r1, r4
 8002f42:	4628      	mov	r0, r5
 8002f44:	f014 fa62 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
  start_wakaama();
 8002f48:	f004 ffae 	bl	8007ea8 <start_wakaama>
  APP_LOG(TS_ON, VLEVEL_M, "POST waakama ");
 8002f4c:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <LoRaWAN_Init+0x1cc>)
 8002f4e:	4632      	mov	r2, r6
 8002f50:	4621      	mov	r1, r4
 8002f52:	4628      	mov	r0, r5
 8002f54:	f014 fa5a 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 8002f58:	b006      	add	sp, #24
 8002f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f5e:	bf00      	nop
 8002f60:	0801b69c 	.word	0x0801b69c
 8002f64:	0801b6c0 	.word	0x0801b6c0
 8002f68:	0801b6e4 	.word	0x0801b6e4
 8002f6c:	0801b708 	.word	0x0801b708
 8002f70:	0801b72c 	.word	0x0801b72c
 8002f74:	08002941 	.word	0x08002941
 8002f78:	200006f8 	.word	0x200006f8
 8002f7c:	0800292d 	.word	0x0800292d
 8002f80:	200006c8 	.word	0x200006c8
 8002f84:	200006b0 	.word	0x200006b0
 8002f88:	08002de1 	.word	0x08002de1
 8002f8c:	080028e9 	.word	0x080028e9
 8002f90:	200006e0 	.word	0x200006e0
 8002f94:	0800d4b1 	.word	0x0800d4b1
 8002f98:	08002c9d 	.word	0x08002c9d
 8002f9c:	08002bb5 	.word	0x08002bb5
 8002fa0:	08002b19 	.word	0x08002b19
 8002fa4:	2000000c 	.word	0x2000000c
 8002fa8:	20000058 	.word	0x20000058
 8002fac:	20000000 	.word	0x20000000
 8002fb0:	20000710 	.word	0x20000710
 8002fb4:	0800273d 	.word	0x0800273d
 8002fb8:	2000006c 	.word	0x2000006c
 8002fbc:	0801b750 	.word	0x0801b750
 8002fc0:	0801b760 	.word	0x0801b760

08002fc4 <HAL_GPIO_EXTI_Callback>:
{
 8002fc4:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 8002fc6:	2802      	cmp	r0, #2
 8002fc8:	d002      	beq.n	8002fd0 <HAL_GPIO_EXTI_Callback+0xc>
 8002fca:	2840      	cmp	r0, #64	; 0x40
 8002fcc:	d005      	beq.n	8002fda <HAL_GPIO_EXTI_Callback+0x16>
}
 8002fce:	bd08      	pop	{r3, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	2008      	movs	r0, #8
 8002fd4:	f014 fb44 	bl	8017660 <UTIL_SEQ_SetTask>
      break;
 8002fd8:	e7f9      	b.n	8002fce <HAL_GPIO_EXTI_Callback+0xa>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 8002fda:	2100      	movs	r1, #0
 8002fdc:	2004      	movs	r0, #4
 8002fde:	f014 fb3f 	bl	8017660 <UTIL_SEQ_SetTask>
}
 8002fe2:	e7f4      	b.n	8002fce <HAL_GPIO_EXTI_Callback+0xa>

08002fe4 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <LoraInfo_Init+0x1c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002fea:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002fec:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002fee:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8002ff4:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002ff8:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002ffe:	4770      	bx	lr
 8003000:	20000734 	.word	0x20000734

08003004 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8003004:	4800      	ldr	r0, [pc, #0]	; (8003008 <LoraInfo_GetPtr+0x4>)
 8003006:	4770      	bx	lr
 8003008:	20000734 	.word	0x20000734

0800300c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800300c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800300e:	f005 fe03 	bl	8008c18 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8003012:	bd08      	pop	{r3, pc}

08003014 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8003014:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8003016:	f005 fe41 	bl	8008c9c <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800301a:	bd08      	pop	{r3, pc}

0800301c <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800301c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800301e:	f005 fe8b 	bl	8008d38 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8003022:	bd08      	pop	{r3, pc}

08003024 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8003024:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8003026:	f005 fe89 	bl	8008d3c <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800302a:	bd08      	pop	{r3, pc}

0800302c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800302c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800302e:	f005 fe87 	bl	8008d40 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8003032:	bd08      	pop	{r3, pc}

08003034 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8003034:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8003036:	f005 fe85 	bl	8008d44 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800303a:	bd08      	pop	{r3, pc}

0800303c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800303c:	480d      	ldr	r0, [pc, #52]	; (8003074 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800303e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003040:	f005 fe85 	bl	8008d4e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003044:	480c      	ldr	r0, [pc, #48]	; (8003078 <LoopForever+0x6>)
  ldr r1, =_edata
 8003046:	490d      	ldr	r1, [pc, #52]	; (800307c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003048:	4a0d      	ldr	r2, [pc, #52]	; (8003080 <LoopForever+0xe>)
  movs r3, #0
 800304a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800304c:	e002      	b.n	8003054 <LoopCopyDataInit>

0800304e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800304e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003052:	3304      	adds	r3, #4

08003054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003058:	d3f9      	bcc.n	800304e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800305c:	4c0a      	ldr	r4, [pc, #40]	; (8003088 <LoopForever+0x16>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003060:	e001      	b.n	8003066 <LoopFillZerobss>

08003062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003064:	3204      	adds	r2, #4

08003066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003068:	d3fb      	bcc.n	8003062 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800306a:	f015 f849 	bl	8018100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800306e:	f7fe fcb8 	bl	80019e2 <main>

08003072 <LoopForever>:

LoopForever:
    b LoopForever
 8003072:	e7fe      	b.n	8003072 <LoopForever>
  ldr   r0, =_estack
 8003074:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800307c:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8003080:	0801c9e8 	.word	0x0801c9e8
  ldr r2, =_sbss
 8003084:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8003088:	200019b0 	.word	0x200019b0

0800308c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800308c:	e7fe      	b.n	800308c <ADC_IRQHandler>

0800308e <free_block_data>:
}


void free_block_data(lwm2m_block_data_t * blockData)
{
    if (blockData != NULL)
 800308e:	b170      	cbz	r0, 80030ae <free_block_data+0x20>
{
 8003090:	b510      	push	{r4, lr}
 8003092:	4604      	mov	r4, r0
    {
#ifndef LWM2M_RAW_BLOCK1_REQUESTS
        lwm2m_free(blockData->blockBuffer);
 8003094:	68c0      	ldr	r0, [r0, #12]
 8003096:	f005 fd63 	bl	8008b60 <lwm2m_free>
#endif
        if (blockData->blockType == BLOCK_1)
 800309a:	7923      	ldrb	r3, [r4, #4]
 800309c:	b11b      	cbz	r3, 80030a6 <free_block_data+0x18>
        {
            lwm2m_free(blockData->identifier.uri);
        }
        lwm2m_free(blockData);
 800309e:	4620      	mov	r0, r4
 80030a0:	f005 fd5e 	bl	8008b60 <lwm2m_free>
    }
}
 80030a4:	bd10      	pop	{r4, pc}
            lwm2m_free(blockData->identifier.uri);
 80030a6:	68a0      	ldr	r0, [r4, #8]
 80030a8:	f005 fd5a 	bl	8008b60 <lwm2m_free>
 80030ac:	e7f7      	b.n	800309e <free_block_data+0x10>
 80030ae:	4770      	bx	lr

080030b0 <transaction_new>:
                                      char * altPath,
                                      lwm2m_uri_t * uriP,
                                      uint16_t mID,
                                      uint8_t token_len,
                                      uint8_t* token)
{
 80030b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 80030ba:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    LOG_ARG("method: %d, altPath: \"%s\", mID: %d, token_len: %d",
            method, STR_NULL2EMPTY(altPath), mID, token_len);
    LOG_URI(uriP);

    // no transactions without peer
    if (NULL == sessionH) return NULL;
 80030be:	4682      	mov	sl, r0
 80030c0:	2800      	cmp	r0, #0
 80030c2:	f000 80af 	beq.w	8003224 <transaction_new+0x174>
 80030c6:	460f      	mov	r7, r1
 80030c8:	4616      	mov	r6, r2
 80030ca:	461d      	mov	r5, r3

    transacP = (lwm2m_transaction_t *)lwm2m_malloc(sizeof(lwm2m_transaction_t));
 80030cc:	2048      	movs	r0, #72	; 0x48
 80030ce:	f005 fd43 	bl	8008b58 <lwm2m_malloc>

    if (NULL == transacP) return NULL;
 80030d2:	4604      	mov	r4, r0
 80030d4:	2800      	cmp	r0, #0
 80030d6:	f000 80a1 	beq.w	800321c <transaction_new+0x16c>
    memset(transacP, 0, sizeof(lwm2m_transaction_t));
 80030da:	2248      	movs	r2, #72	; 0x48
 80030dc:	2100      	movs	r1, #0
 80030de:	f015 f86f 	bl	80181c0 <memset>

    transacP->message = lwm2m_malloc(sizeof(coap_packet_t));
 80030e2:	2090      	movs	r0, #144	; 0x90
 80030e4:	f005 fd38 	bl	8008b58 <lwm2m_malloc>
 80030e8:	62a0      	str	r0, [r4, #40]	; 0x28
    if (NULL == transacP->message) goto error;
 80030ea:	2800      	cmp	r0, #0
 80030ec:	f000 808b 	beq.w	8003206 <transaction_new+0x156>

    coap_init_message(transacP->message, COAP_TYPE_CON, method, mID);
 80030f0:	4643      	mov	r3, r8
 80030f2:	463a      	mov	r2, r7
 80030f4:	2100      	movs	r1, #0
 80030f6:	f000 fad9 	bl	80036ac <coap_init_message>

    transacP->peerH = sessionH;
 80030fa:	f8c4 a008 	str.w	sl, [r4, #8]

    transacP->mID = mID;
 80030fe:	f8a4 8004 	strh.w	r8, [r4, #4]

    if (altPath != NULL)
 8003102:	b11e      	cbz	r6, 800310c <transaction_new+0x5c>
    {
        // TODO: Support multi-segment alternative path
        coap_set_header_uri_path_segment(transacP->message, altPath + 1);
 8003104:	1c71      	adds	r1, r6, #1
 8003106:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003108:	f000 fd63 	bl	8003bd2 <coap_set_header_uri_path_segment>
    }
    if (NULL != uriP && LWM2M_URI_IS_SET_OBJECT(uriP))
 800310c:	b125      	cbz	r5, 8003118 <transaction_new+0x68>
 800310e:	8828      	ldrh	r0, [r5, #0]
 8003110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003114:	4298      	cmp	r0, r3
 8003116:	d10b      	bne.n	8003130 <transaction_new+0x80>
                }
#endif
            }
        }
    }
    if (0 < token_len)
 8003118:	f1b9 0f00 	cmp.w	r9, #0
 800311c:	d07e      	beq.n	800321c <transaction_new+0x16c>
    {
        if (NULL != token)
 800311e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003120:	2b00      	cmp	r3, #0
 8003122:	d057      	beq.n	80031d4 <transaction_new+0x124>
        {
            coap_set_header_token(transacP->message, token, token_len);
 8003124:	464a      	mov	r2, r9
 8003126:	4619      	mov	r1, r3
 8003128:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800312a:	f000 fd0c 	bl	8003b46 <coap_set_header_token>
 800312e:	e075      	b.n	800321c <transaction_new+0x16c>
        result = utils_intToText(uriP->objectId, (uint8_t*)stringID, LWM2M_STRING_ID_MAX_LEN);
 8003130:	2306      	movs	r3, #6
 8003132:	466a      	mov	r2, sp
 8003134:	2100      	movs	r1, #0
 8003136:	f003 fa37 	bl	80065a8 <utils_intToText>
        if (result == 0) goto error;
 800313a:	4603      	mov	r3, r0
 800313c:	2800      	cmp	r0, #0
 800313e:	d062      	beq.n	8003206 <transaction_new+0x156>
        stringID[result] = 0;
 8003140:	3308      	adds	r3, #8
 8003142:	446b      	add	r3, sp
 8003144:	2200      	movs	r2, #0
 8003146:	f803 2c08 	strb.w	r2, [r3, #-8]
        coap_set_header_uri_path_segment(transacP->message, stringID);
 800314a:	4669      	mov	r1, sp
 800314c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800314e:	f000 fd40 	bl	8003bd2 <coap_set_header_uri_path_segment>
        if (LWM2M_URI_IS_SET_INSTANCE(uriP))
 8003152:	8868      	ldrh	r0, [r5, #2]
 8003154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003158:	4298      	cmp	r0, r3
 800315a:	d0dd      	beq.n	8003118 <transaction_new+0x68>
            result = utils_intToText(uriP->instanceId, (uint8_t*)stringID, LWM2M_STRING_ID_MAX_LEN);
 800315c:	2306      	movs	r3, #6
 800315e:	466a      	mov	r2, sp
 8003160:	2100      	movs	r1, #0
 8003162:	f003 fa21 	bl	80065a8 <utils_intToText>
            if (result == 0) goto error;
 8003166:	4603      	mov	r3, r0
 8003168:	2800      	cmp	r0, #0
 800316a:	d04c      	beq.n	8003206 <transaction_new+0x156>
            stringID[result] = 0;
 800316c:	3308      	adds	r3, #8
 800316e:	446b      	add	r3, sp
 8003170:	2200      	movs	r2, #0
 8003172:	f803 2c08 	strb.w	r2, [r3, #-8]
            coap_set_header_uri_path_segment(transacP->message, stringID);
 8003176:	4669      	mov	r1, sp
 8003178:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800317a:	f000 fd2a 	bl	8003bd2 <coap_set_header_uri_path_segment>
            if (LWM2M_URI_IS_SET_RESOURCE(uriP))
 800317e:	88a8      	ldrh	r0, [r5, #4]
 8003180:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003184:	4298      	cmp	r0, r3
 8003186:	d0c7      	beq.n	8003118 <transaction_new+0x68>
                result = utils_intToText(uriP->resourceId, (uint8_t*)stringID, LWM2M_STRING_ID_MAX_LEN);
 8003188:	2306      	movs	r3, #6
 800318a:	466a      	mov	r2, sp
 800318c:	2100      	movs	r1, #0
 800318e:	f003 fa0b 	bl	80065a8 <utils_intToText>
                if (result == 0) goto error;
 8003192:	4603      	mov	r3, r0
 8003194:	b3b8      	cbz	r0, 8003206 <transaction_new+0x156>
                stringID[result] = 0;
 8003196:	3308      	adds	r3, #8
 8003198:	446b      	add	r3, sp
 800319a:	2200      	movs	r2, #0
 800319c:	f803 2c08 	strb.w	r2, [r3, #-8]
                coap_set_header_uri_path_segment(transacP->message, stringID);
 80031a0:	4669      	mov	r1, sp
 80031a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80031a4:	f000 fd15 	bl	8003bd2 <coap_set_header_uri_path_segment>
                if (LWM2M_URI_IS_SET_RESOURCE_INSTANCE(uriP))
 80031a8:	88e8      	ldrh	r0, [r5, #6]
 80031aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031ae:	4298      	cmp	r0, r3
 80031b0:	d0b2      	beq.n	8003118 <transaction_new+0x68>
                    result = utils_intToText(uriP->resourceInstanceId, (uint8_t*)stringID, LWM2M_STRING_ID_MAX_LEN);
 80031b2:	2306      	movs	r3, #6
 80031b4:	466a      	mov	r2, sp
 80031b6:	2100      	movs	r1, #0
 80031b8:	f003 f9f6 	bl	80065a8 <utils_intToText>
                    if (result == 0) goto error;
 80031bc:	4603      	mov	r3, r0
 80031be:	b310      	cbz	r0, 8003206 <transaction_new+0x156>
                    stringID[result] = 0;
 80031c0:	3308      	adds	r3, #8
 80031c2:	446b      	add	r3, sp
 80031c4:	2200      	movs	r2, #0
 80031c6:	f803 2c08 	strb.w	r2, [r3, #-8]
                    coap_set_header_uri_path_segment(transacP->message, stringID);
 80031ca:	4669      	mov	r1, sp
 80031cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80031ce:	f000 fd00 	bl	8003bd2 <coap_set_header_uri_path_segment>
 80031d2:	e7a1      	b.n	8003118 <transaction_new+0x68>
        }
        else {
            // generate a token
            uint8_t temp_token[COAP_TOKEN_LEN];
            time_t tv_sec = lwm2m_gettime();
 80031d4:	f005 fce1 	bl	8008b9a <lwm2m_gettime>

            // initialize first 6 bytes, leave the last 2 random
            temp_token[0] = mID;
 80031d8:	f88d 8000 	strb.w	r8, [sp]
            temp_token[1] = mID >> 8;
 80031dc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80031e0:	f88d 8001 	strb.w	r8, [sp, #1]
            temp_token[2] = tv_sec;
 80031e4:	f88d 0002 	strb.w	r0, [sp, #2]
            temp_token[3] = tv_sec >> 8;
 80031e8:	0a03      	lsrs	r3, r0, #8
 80031ea:	f88d 3003 	strb.w	r3, [sp, #3]
            temp_token[4] = tv_sec >> 16;
 80031ee:	0c03      	lsrs	r3, r0, #16
 80031f0:	f88d 3004 	strb.w	r3, [sp, #4]
            temp_token[5] = tv_sec >> 24;
 80031f4:	0e00      	lsrs	r0, r0, #24
 80031f6:	f88d 0005 	strb.w	r0, [sp, #5]
            // use just the provided amount of bytes
            coap_set_header_token(transacP->message, temp_token, token_len);
 80031fa:	464a      	mov	r2, r9
 80031fc:	4669      	mov	r1, sp
 80031fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003200:	f000 fca1 	bl	8003b46 <coap_set_header_token>
 8003204:	e00a      	b.n	800321c <transaction_new+0x16c>
    LOG_ARG("Exiting on success. new transac=%p", transacP);
    return transacP;

error:
    LOG("Exiting on failure");
    if(transacP->message)
 8003206:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003208:	b120      	cbz	r0, 8003214 <transaction_new+0x164>
    {
        coap_free_header(transacP->message);
 800320a:	f000 fa5c 	bl	80036c6 <coap_free_header>
        lwm2m_free(transacP->message);
 800320e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003210:	f005 fca6 	bl	8008b60 <lwm2m_free>
    }
    lwm2m_free(transacP);
 8003214:	4620      	mov	r0, r4
 8003216:	f005 fca3 	bl	8008b60 <lwm2m_free>
    return NULL;
 800321a:	2400      	movs	r4, #0
}
 800321c:	4620      	mov	r0, r4
 800321e:	b002      	add	sp, #8
 8003220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (NULL == sessionH) return NULL;
 8003224:	4604      	mov	r4, r0
 8003226:	e7f9      	b.n	800321c <transaction_new+0x16c>

08003228 <transaction_free>:

void transaction_free(lwm2m_transaction_t * transacP)
{
 8003228:	b510      	push	{r4, lr}
 800322a:	4604      	mov	r4, r0
    LOG_ARG("Entering. transaction=%p", transacP);
    if (transacP->message)
 800322c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800322e:	b130      	cbz	r0, 800323e <transaction_free+0x16>
    {
       coap_free_header(transacP->message);
 8003230:	f000 fa49 	bl	80036c6 <coap_free_header>
       lwm2m_free(transacP->message);
 8003234:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003236:	f005 fc93 	bl	8008b60 <lwm2m_free>
       transacP->message = NULL;
 800323a:	2300      	movs	r3, #0
 800323c:	62a3      	str	r3, [r4, #40]	; 0x28
    }

    if (transacP->payload) {
 800323e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003240:	b118      	cbz	r0, 800324a <transaction_free+0x22>
        lwm2m_free(transacP->payload);
 8003242:	f005 fc8d 	bl	8008b60 <lwm2m_free>
        transacP->payload = NULL;
 8003246:	2300      	movs	r3, #0
 8003248:	63a3      	str	r3, [r4, #56]	; 0x38
    }

    if (transacP->buffer) {
 800324a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800324c:	b118      	cbz	r0, 8003256 <transaction_free+0x2e>
        lwm2m_free(transacP->buffer);
 800324e:	f005 fc87 	bl	8008b60 <lwm2m_free>
        transacP->buffer = NULL;
 8003252:	2300      	movs	r3, #0
 8003254:	6323      	str	r3, [r4, #48]	; 0x30
    }

    lwm2m_free(transacP);
 8003256:	4620      	mov	r0, r4
 8003258:	f005 fc82 	bl	8008b60 <lwm2m_free>
}
 800325c:	bd10      	pop	{r4, pc}

0800325e <transaction_remove>:

void transaction_remove(lwm2m_context_t * contextP,
                        lwm2m_transaction_t * transacP)
{
 800325e:	b538      	push	{r3, r4, r5, lr}
 8003260:	4605      	mov	r5, r0
 8003262:	460c      	mov	r4, r1
    LOG_ARG("Entering. transaction=%p", transacP);
    contextP->transactionList = (lwm2m_transaction_t *) LWM2M_LIST_RM(contextP->transactionList, transacP->mID, NULL);
 8003264:	2200      	movs	r2, #0
 8003266:	8889      	ldrh	r1, [r1, #4]
 8003268:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800326a:	f001 fa46 	bl	80046fa <lwm2m_list_remove>
 800326e:	6268      	str	r0, [r5, #36]	; 0x24
    transaction_free(transacP);
 8003270:	4620      	mov	r0, r4
 8003272:	f7ff ffd9 	bl	8003228 <transaction_free>
}
 8003276:	bd38      	pop	{r3, r4, r5, pc}

08003278 <transaction_send>:
    return false;
}

int transaction_send(lwm2m_context_t * contextP,
                     lwm2m_transaction_t * transacP)
{
 8003278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327a:	4606      	mov	r6, r0
 800327c:	460c      	mov	r4, r1
    bool maxRetriesReached = false;

    LOG_ARG("Entering: transaction=%p", transacP);
    if (transacP->buffer == NULL)
 800327e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003280:	b30b      	cbz	r3, 80032c6 <transaction_send+0x4e>
            transaction_remove(contextP, transacP);
            return COAP_500_INTERNAL_SERVER_ERROR;
        }
    }

    if (!transacP->ack_received)
 8003282:	7b23      	ldrb	r3, [r4, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d157      	bne.n	8003338 <transaction_send+0xc0>
    {
        long unsigned timeout = 0;

        if (0 == transacP->retrans_counter)
 8003288:	7e25      	ldrb	r5, [r4, #24]
 800328a:	2d00      	cmp	r5, #0
 800328c:	d044      	beq.n	8003318 <transaction_send+0xa0>
                maxRetriesReached = true;
            }
        }
        else
        {
            timeout = COAP_RESPONSE_TIMEOUT << (transacP->retrans_counter - 1);
 800328e:	3d01      	subs	r5, #1
 8003290:	2302      	movs	r3, #2
 8003292:	fa03 f505 	lsl.w	r5, r3, r5
    bool maxRetriesReached = false;
 8003296:	2700      	movs	r7, #0
        }

        if (COAP_MAX_RETRANSMIT + 1 >= transacP->retrans_counter)
 8003298:	7e23      	ldrb	r3, [r4, #24]
 800329a:	2b05      	cmp	r3, #5
 800329c:	d84c      	bhi.n	8003338 <transaction_send+0xc0>
        {
            (void)lwm2m_buffer_send(transacP->peerH, transacP->buffer, transacP->buffer_len, contextP->userData);
 800329e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80032a0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80032a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80032a4:	68a0      	ldr	r0, [r4, #8]
 80032a6:	f005 fc93 	bl	8008bd0 <lwm2m_buffer_send>

            transacP->retrans_time += timeout;
 80032aa:	6a23      	ldr	r3, [r4, #32]
 80032ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80032ae:	195b      	adds	r3, r3, r5
 80032b0:	f142 0200 	adc.w	r2, r2, #0
 80032b4:	6223      	str	r3, [r4, #32]
 80032b6:	6262      	str	r2, [r4, #36]	; 0x24
            transacP->retrans_counter += 1;
 80032b8:	7e23      	ldrb	r3, [r4, #24]
 80032ba:	3301      	adds	r3, #1
 80032bc:	7623      	strb	r3, [r4, #24]
    }
    else
    {
        goto error;
    }
    if (maxRetriesReached)
 80032be:	2f00      	cmp	r7, #0
 80032c0:	d13a      	bne.n	8003338 <transaction_send+0xc0>
    {
        goto error;
    }

    return 0;
 80032c2:	2000      	movs	r0, #0
        LOG_ARG("transaction %p expired..calling callback", transacP);
        transacP->callback(contextP, transacP, NULL);
    }
    transaction_remove(contextP, transacP);
    return -1;
}
 80032c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        transacP->buffer_len = coap_serialize_get_size(transacP->message);
 80032c6:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80032c8:	f000 fa0f 	bl	80036ea <coap_serialize_get_size>
 80032cc:	b280      	uxth	r0, r0
 80032ce:	85a0      	strh	r0, [r4, #44]	; 0x2c
        if (transacP->buffer_len == 0)
 80032d0:	b1b0      	cbz	r0, 8003300 <transaction_send+0x88>
        transacP->buffer = (uint8_t*)lwm2m_malloc(transacP->buffer_len);
 80032d2:	f005 fc41 	bl	8008b58 <lwm2m_malloc>
 80032d6:	4601      	mov	r1, r0
 80032d8:	6320      	str	r0, [r4, #48]	; 0x30
        if (transacP->buffer == NULL)
 80032da:	b1b8      	cbz	r0, 800330c <transaction_send+0x94>
        transacP->buffer_len = coap_serialize_message(transacP->message, transacP->buffer);
 80032dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80032de:	f000 fa83 	bl	80037e8 <coap_serialize_message>
 80032e2:	b280      	uxth	r0, r0
 80032e4:	85a0      	strh	r0, [r4, #44]	; 0x2c
        if (transacP->buffer_len == 0)
 80032e6:	2800      	cmp	r0, #0
 80032e8:	d1cb      	bne.n	8003282 <transaction_send+0xa>
            lwm2m_free(transacP->buffer);
 80032ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80032ec:	f005 fc38 	bl	8008b60 <lwm2m_free>
            transacP->buffer = NULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	6323      	str	r3, [r4, #48]	; 0x30
            transaction_remove(contextP, transacP);
 80032f4:	4621      	mov	r1, r4
 80032f6:	4630      	mov	r0, r6
 80032f8:	f7ff ffb1 	bl	800325e <transaction_remove>
            return COAP_500_INTERNAL_SERVER_ERROR;
 80032fc:	20a0      	movs	r0, #160	; 0xa0
 80032fe:	e7e1      	b.n	80032c4 <transaction_send+0x4c>
           transaction_remove(contextP, transacP);
 8003300:	4621      	mov	r1, r4
 8003302:	4630      	mov	r0, r6
 8003304:	f7ff ffab 	bl	800325e <transaction_remove>
           return COAP_500_INTERNAL_SERVER_ERROR;
 8003308:	20a0      	movs	r0, #160	; 0xa0
 800330a:	e7db      	b.n	80032c4 <transaction_send+0x4c>
           transaction_remove(contextP, transacP);
 800330c:	4621      	mov	r1, r4
 800330e:	4630      	mov	r0, r6
 8003310:	f7ff ffa5 	bl	800325e <transaction_remove>
           return COAP_500_INTERNAL_SERVER_ERROR;
 8003314:	20a0      	movs	r0, #160	; 0xa0
 8003316:	e7d5      	b.n	80032c4 <transaction_send+0x4c>
            time_t tv_sec = lwm2m_gettime();
 8003318:	f005 fc3f 	bl	8008b9a <lwm2m_gettime>
            if (0 <= tv_sec)
 800331c:	2900      	cmp	r1, #0
 800331e:	db08      	blt.n	8003332 <transaction_send+0xba>
                transacP->retrans_time = tv_sec + COAP_RESPONSE_TIMEOUT;
 8003320:	3002      	adds	r0, #2
 8003322:	f141 0100 	adc.w	r1, r1, #0
 8003326:	6220      	str	r0, [r4, #32]
 8003328:	6261      	str	r1, [r4, #36]	; 0x24
                transacP->retrans_counter = 1;
 800332a:	2301      	movs	r3, #1
 800332c:	7623      	strb	r3, [r4, #24]
    bool maxRetriesReached = false;
 800332e:	462f      	mov	r7, r5
 8003330:	e7b2      	b.n	8003298 <transaction_send+0x20>
        long unsigned timeout = 0;
 8003332:	2500      	movs	r5, #0
                maxRetriesReached = true;
 8003334:	2701      	movs	r7, #1
 8003336:	e7af      	b.n	8003298 <transaction_send+0x20>
    if (transacP->callback)
 8003338:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800333a:	b11b      	cbz	r3, 8003344 <transaction_send+0xcc>
        transacP->callback(contextP, transacP, NULL);
 800333c:	2200      	movs	r2, #0
 800333e:	4621      	mov	r1, r4
 8003340:	4630      	mov	r0, r6
 8003342:	4798      	blx	r3
    transaction_remove(contextP, transacP);
 8003344:	4621      	mov	r1, r4
 8003346:	4630      	mov	r0, r6
 8003348:	f7ff ff89 	bl	800325e <transaction_remove>
    return -1;
 800334c:	f04f 30ff 	mov.w	r0, #4294967295
 8003350:	e7b8      	b.n	80032c4 <transaction_send+0x4c>

08003352 <transaction_step>:

void transaction_step(lwm2m_context_t * contextP,
                      time_t currentTime,
                      time_t * timeoutP)
{
 8003352:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003356:	4681      	mov	r9, r0
 8003358:	4615      	mov	r5, r2
 800335a:	461f      	mov	r7, r3
 800335c:	9e08      	ldr	r6, [sp, #32]
    lwm2m_transaction_t * transacP;

    LOG("Entering");
    transacP = contextP->transactionList;
 800335e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    while (transacP != NULL)
 8003360:	e014      	b.n	800338c <transaction_step+0x3a>
        lwm2m_transaction_t * nextP = transacP->next;
        int removed = 0;

        if (transacP->retrans_time <= currentTime)
        {
            removed = transaction_send(contextP, transacP);
 8003362:	4621      	mov	r1, r4
 8003364:	4648      	mov	r0, r9
 8003366:	f7ff ff87 	bl	8003278 <transaction_send>
        }

        if (0 == removed)
 800336a:	b1c0      	cbz	r0, 800339e <transaction_step+0x4c>
                *timeoutP = interval;
            }
        }
        else
        {
            *timeoutP = 1;
 800336c:	2201      	movs	r2, #1
 800336e:	2300      	movs	r3, #0
 8003370:	e9c6 2300 	strd	r2, r3, [r6]
 8003374:	e009      	b.n	800338a <transaction_step+0x38>
                interval = 1;
 8003376:	2101      	movs	r1, #1
 8003378:	2300      	movs	r3, #0
            if (*timeoutP > interval)
 800337a:	6830      	ldr	r0, [r6, #0]
 800337c:	6872      	ldr	r2, [r6, #4]
 800337e:	4281      	cmp	r1, r0
 8003380:	eb73 0202 	sbcs.w	r2, r3, r2
 8003384:	da01      	bge.n	800338a <transaction_step+0x38>
                *timeoutP = interval;
 8003386:	6031      	str	r1, [r6, #0]
 8003388:	6073      	str	r3, [r6, #4]
                interval = 1;
 800338a:	4644      	mov	r4, r8
    while (transacP != NULL)
 800338c:	b18c      	cbz	r4, 80033b2 <transaction_step+0x60>
        lwm2m_transaction_t * nextP = transacP->next;
 800338e:	f8d4 8000 	ldr.w	r8, [r4]
        if (transacP->retrans_time <= currentTime)
 8003392:	6a22      	ldr	r2, [r4, #32]
 8003394:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003396:	4295      	cmp	r5, r2
 8003398:	eb77 0303 	sbcs.w	r3, r7, r3
 800339c:	dae1      	bge.n	8003362 <transaction_step+0x10>
            if (transacP->retrans_time > currentTime)
 800339e:	6a21      	ldr	r1, [r4, #32]
 80033a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033a2:	428d      	cmp	r5, r1
 80033a4:	eb77 0203 	sbcs.w	r2, r7, r3
 80033a8:	dae5      	bge.n	8003376 <transaction_step+0x24>
                interval = transacP->retrans_time - currentTime;
 80033aa:	1b49      	subs	r1, r1, r5
 80033ac:	eb63 0307 	sbc.w	r3, r3, r7
 80033b0:	e7e3      	b.n	800337a <transaction_step+0x28>
        }

        transacP = nextP;
    }
}
 80033b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080033b6 <transaction_set_payload>:

bool transaction_set_payload(lwm2m_transaction_t *transaction, uint8_t *buffer, size_t length) {
 80033b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b8:	4605      	mov	r5, r0
 80033ba:	460e      	mov	r6, r1
 80033bc:	4614      	mov	r4, r2
    // copy payload as we might need it beyond scope of the current request / method call (e.g. in case of
    // retransmissions or block transfer)
    uint8_t *transaction_payload = (uint8_t *)lwm2m_malloc(length);
 80033be:	4610      	mov	r0, r2
 80033c0:	f005 fbca 	bl	8008b58 <lwm2m_malloc>
    if (transaction_payload == NULL) {
 80033c4:	b1e0      	cbz	r0, 8003400 <transaction_set_payload+0x4a>
 80033c6:	4607      	mov	r7, r0
        return false;
    }
    memcpy(transaction_payload, buffer, length);
 80033c8:	4622      	mov	r2, r4
 80033ca:	4631      	mov	r1, r6
 80033cc:	f014 fed0 	bl	8018170 <memcpy>

    transaction->payload = transaction_payload;
 80033d0:	63af      	str	r7, [r5, #56]	; 0x38
    transaction->payload_len = length;
 80033d2:	636c      	str	r4, [r5, #52]	; 0x34
    const uint16_t lwm2m_coap_block_size = lwm2m_get_coap_block_size();
 80033d4:	f002 f8da 	bl	800558c <lwm2m_get_coap_block_size>
 80033d8:	4607      	mov	r7, r0
    if (length > lwm2m_coap_block_size) {
 80033da:	42a0      	cmp	r0, r4
 80033dc:	d309      	bcc.n	80033f2 <transaction_set_payload+0x3c>
        coap_set_header_block1(transaction->message, 0, true, lwm2m_coap_block_size);
    }

    coap_set_payload(transaction->message, buffer, MIN(length, lwm2m_coap_block_size));
 80033de:	463a      	mov	r2, r7
 80033e0:	42a7      	cmp	r7, r4
 80033e2:	bf28      	it	cs
 80033e4:	4622      	movcs	r2, r4
 80033e6:	4631      	mov	r1, r6
 80033e8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80033ea:	f000 fc67 	bl	8003cbc <coap_set_payload>
    return true;
 80033ee:	2001      	movs	r0, #1
}
 80033f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        coap_set_header_block1(transaction->message, 0, true, lwm2m_coap_block_size);
 80033f2:	4603      	mov	r3, r0
 80033f4:	2201      	movs	r2, #1
 80033f6:	2100      	movs	r1, #0
 80033f8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80033fa:	f000 fc46 	bl	8003c8a <coap_set_header_block1>
 80033fe:	e7ee      	b.n	80033de <transaction_set_payload+0x28>
        return false;
 8003400:	2000      	movs	r0, #0
 8003402:	e7f5      	b.n	80033f0 <transaction_set_payload+0x3a>

08003404 <transaction_free_userData>:

bool transaction_free_userData(lwm2m_context_t * context, lwm2m_transaction_t * transaction)
{
 8003404:	b510      	push	{r4, lr}
 8003406:	460c      	mov	r4, r1
    lwm2m_transaction_t * target = context->transactionList;
 8003408:	6a43      	ldr	r3, [r0, #36]	; 0x24
    while (target != NULL){
 800340a:	e000      	b.n	800340e <transaction_free_userData+0xa>
        if (target->userData == transaction->userData && target != transaction) return false;
        target = target->next;
 800340c:	681b      	ldr	r3, [r3, #0]
    while (target != NULL){
 800340e:	b13b      	cbz	r3, 8003420 <transaction_free_userData+0x1c>
        if (target->userData == transaction->userData && target != transaction) return false;
 8003410:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003412:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003414:	4290      	cmp	r0, r2
 8003416:	d1f9      	bne.n	800340c <transaction_free_userData+0x8>
 8003418:	42a3      	cmp	r3, r4
 800341a:	d0f7      	beq.n	800340c <transaction_free_userData+0x8>
 800341c:	2000      	movs	r0, #0
 800341e:	e005      	b.n	800342c <transaction_free_userData+0x28>
    }
    lwm2m_free(transaction->userData);
 8003420:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003422:	f005 fb9d 	bl	8008b60 <lwm2m_free>
    transaction->userData = NULL;
 8003426:	2300      	movs	r3, #0
 8003428:	6423      	str	r3, [r4, #64]	; 0x40
    return true;
 800342a:	2001      	movs	r0, #1
}
 800342c:	bd10      	pop	{r4, pc}

0800342e <coap_log_2>:
/*- LOCAL HELP FUNCTIONS ------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
static
uint16_t
coap_log_2(uint16_t value)
{
 800342e:	4603      	mov	r3, r0
  uint16_t result = 0;
 8003430:	2000      	movs	r0, #0
  do {
    value = value >> 1;
    result++;
 8003432:	4602      	mov	r2, r0
 8003434:	3001      	adds	r0, #1
 8003436:	b280      	uxth	r0, r0
  } while (value);
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	d1fa      	bne.n	8003432 <coap_log_2+0x4>

  return result ? result - 1 : result;
 800343c:	b100      	cbz	r0, 8003440 <coap_log_2+0x12>
 800343e:	4610      	mov	r0, r2
}
 8003440:	4770      	bx	lr

08003442 <coap_option_nibble>:
/*-----------------------------------------------------------------------------------*/
static
uint8_t
coap_option_nibble(unsigned int value)
{
  if (value<13)
 8003442:	280c      	cmp	r0, #12
 8003444:	d904      	bls.n	8003450 <coap_option_nibble+0xe>
  {
    return value;
  }
  else if (value<=0xFF+13)
 8003446:	f5b0 7f86 	cmp.w	r0, #268	; 0x10c
 800344a:	d803      	bhi.n	8003454 <coap_option_nibble+0x12>
  {
    return 13;
 800344c:	200d      	movs	r0, #13
 800344e:	4770      	bx	lr
    return value;
 8003450:	b2c0      	uxtb	r0, r0
 8003452:	4770      	bx	lr
  }
  else
  {
    return 14;
 8003454:	200e      	movs	r0, #14
  }
}
 8003456:	4770      	bx	lr

08003458 <coap_set_option_header>:
/*-----------------------------------------------------------------------------------*/
static
size_t
coap_set_option_header(unsigned int delta, size_t length, uint8_t *buffer)
{
 8003458:	b530      	push	{r4, r5, lr}
 800345a:	b083      	sub	sp, #12
 800345c:	9001      	str	r0, [sp, #4]
 800345e:	9100      	str	r1, [sp, #0]
 8003460:	4614      	mov	r4, r2
  size_t written = 0;
  unsigned int *x = &delta;

  buffer[0] = coap_option_nibble(delta)<<4 | coap_option_nibble(length);
 8003462:	f7ff ffee 	bl	8003442 <coap_option_nibble>
 8003466:	0105      	lsls	r5, r0, #4
 8003468:	9800      	ldr	r0, [sp, #0]
 800346a:	f7ff ffea 	bl	8003442 <coap_option_nibble>
 800346e:	b240      	sxtb	r0, r0
 8003470:	4328      	orrs	r0, r5
 8003472:	7020      	strb	r0, [r4, #0]
  unsigned int *x = &delta;
 8003474:	a901      	add	r1, sp, #4
  size_t written = 0;
 8003476:	2000      	movs	r0, #0

  /* avoids code duplication without function overhead */
  do
  {
    if (*x>268)
 8003478:	680b      	ldr	r3, [r1, #0]
 800347a:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800347e:	d910      	bls.n	80034a2 <coap_set_option_header+0x4a>
    {
      buffer[++written] = (*x-269)>>8;
 8003480:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8003484:	0a1b      	lsrs	r3, r3, #8
 8003486:	1c42      	adds	r2, r0, #1
 8003488:	54a3      	strb	r3, [r4, r2]
      buffer[++written] = (*x-269);
 800348a:	680b      	ldr	r3, [r1, #0]
 800348c:	3002      	adds	r0, #2
 800348e:	3b0d      	subs	r3, #13
 8003490:	5423      	strb	r3, [r4, r0]
    else if (*x>12)
    {
      buffer[++written] = (*x-13);
    }
  }
  while (x!=(unsigned int *)&length && (x=(unsigned int *)&length));
 8003492:	466b      	mov	r3, sp
 8003494:	4299      	cmp	r1, r3
 8003496:	d102      	bne.n	800349e <coap_set_option_header+0x46>

  PRINTF("WRITTEN %u B opt header\n", written);

  return ++written;
}
 8003498:	3001      	adds	r0, #1
 800349a:	b003      	add	sp, #12
 800349c:	bd30      	pop	{r4, r5, pc}
  while (x!=(unsigned int *)&length && (x=(unsigned int *)&length));
 800349e:	4619      	mov	r1, r3
 80034a0:	e7ea      	b.n	8003478 <coap_set_option_header+0x20>
    else if (*x>12)
 80034a2:	2b0c      	cmp	r3, #12
 80034a4:	d9f5      	bls.n	8003492 <coap_set_option_header+0x3a>
      buffer[++written] = (*x-13);
 80034a6:	3001      	adds	r0, #1
 80034a8:	3b0d      	subs	r3, #13
 80034aa:	5423      	strb	r3, [r4, r0]
 80034ac:	e7f1      	b.n	8003492 <coap_set_option_header+0x3a>

080034ae <coap_serialize_int_option>:
/*-----------------------------------------------------------------------------------*/
static
size_t
coap_serialize_int_option(unsigned int number, unsigned int current_number, uint8_t *buffer, uint32_t value)
{
 80034ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034b2:	468c      	mov	ip, r1
 80034b4:	4615      	mov	r5, r2
 80034b6:	461c      	mov	r4, r3
  size_t i = 0;

  if (0xFF000000 & value) ++i;
 80034b8:	f013 477f 	ands.w	r7, r3, #4278190080	; 0xff000000
 80034bc:	d124      	bne.n	8003508 <coap_serialize_int_option+0x5a>
  size_t i = 0;
 80034be:	4639      	mov	r1, r7
  if (0xFFFF0000 & value) ++i;
 80034c0:	0c26      	lsrs	r6, r4, #16
 80034c2:	0436      	lsls	r6, r6, #16
 80034c4:	b106      	cbz	r6, 80034c8 <coap_serialize_int_option+0x1a>
 80034c6:	3101      	adds	r1, #1
  if (0xFFFFFF00 & value) ++i;
 80034c8:	f034 08ff 	bics.w	r8, r4, #255	; 0xff
 80034cc:	d000      	beq.n	80034d0 <coap_serialize_int_option+0x22>
 80034ce:	3101      	adds	r1, #1
  if (0xFFFFFFFF & value) ++i;
 80034d0:	b104      	cbz	r4, 80034d4 <coap_serialize_int_option+0x26>
 80034d2:	3101      	adds	r1, #1

  PRINTF("OPTION %u (delta %u, len %u)\n", number, number - current_number, i);

  i = coap_set_option_header(number - current_number, i, buffer);
 80034d4:	462a      	mov	r2, r5
 80034d6:	eba0 000c 	sub.w	r0, r0, ip
 80034da:	f7ff ffbd 	bl	8003458 <coap_set_option_header>

  if (0xFF000000 & value) buffer[i++] = (uint8_t) (value>>24);
 80034de:	b117      	cbz	r7, 80034e6 <coap_serialize_int_option+0x38>
 80034e0:	0e23      	lsrs	r3, r4, #24
 80034e2:	542b      	strb	r3, [r5, r0]
 80034e4:	3001      	adds	r0, #1
  if (0xFFFF0000 & value) buffer[i++] = (uint8_t) (value>>16);
 80034e6:	b11e      	cbz	r6, 80034f0 <coap_serialize_int_option+0x42>
 80034e8:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80034ec:	542b      	strb	r3, [r5, r0]
 80034ee:	3001      	adds	r0, #1
  if (0xFFFFFF00 & value) buffer[i++] = (uint8_t) (value>>8);
 80034f0:	f1b8 0f00 	cmp.w	r8, #0
 80034f4:	d003      	beq.n	80034fe <coap_serialize_int_option+0x50>
 80034f6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80034fa:	542b      	strb	r3, [r5, r0]
 80034fc:	3001      	adds	r0, #1
  if (0xFFFFFFFF & value) buffer[i++] = (uint8_t) (value);
 80034fe:	b10c      	cbz	r4, 8003504 <coap_serialize_int_option+0x56>
 8003500:	542c      	strb	r4, [r5, r0]
 8003502:	3001      	adds	r0, #1

  return i;
}
 8003504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (0xFF000000 & value) ++i;
 8003508:	2101      	movs	r1, #1
 800350a:	e7d9      	b.n	80034c0 <coap_serialize_int_option+0x12>

0800350c <coap_serialize_multi_option>:
}
/*-----------------------------------------------------------------------------------*/
static
size_t
coap_serialize_multi_option(unsigned int number, unsigned int current_number, uint8_t *buffer, multi_option_t *array)
{
 800350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350e:	4607      	mov	r7, r0
 8003510:	4608      	mov	r0, r1
 8003512:	4616      	mov	r6, r2
 8003514:	461c      	mov	r4, r3
  size_t i = 0;
 8003516:	2500      	movs	r5, #0
  multi_option_t * j;

  for (j = array; j != NULL; j= j->next)
 8003518:	e00e      	b.n	8003538 <coap_serialize_multi_option+0x2c>
  {
     i += coap_set_option_header(number - current_number, j->len, &buffer[i]);
 800351a:	1972      	adds	r2, r6, r5
 800351c:	7961      	ldrb	r1, [r4, #5]
 800351e:	1a38      	subs	r0, r7, r0
 8003520:	f7ff ff9a 	bl	8003458 <coap_set_option_header>
 8003524:	4405      	add	r5, r0
     current_number = number;
     memcpy(&buffer[i], j->data, j->len);
 8003526:	7962      	ldrb	r2, [r4, #5]
 8003528:	68a1      	ldr	r1, [r4, #8]
 800352a:	1970      	adds	r0, r6, r5
 800352c:	f014 fe20 	bl	8018170 <memcpy>
     i += j->len;
 8003530:	7963      	ldrb	r3, [r4, #5]
 8003532:	441d      	add	r5, r3
  for (j = array; j != NULL; j= j->next)
 8003534:	6824      	ldr	r4, [r4, #0]
     current_number = number;
 8003536:	4638      	mov	r0, r7
  for (j = array; j != NULL; j= j->next)
 8003538:	2c00      	cmp	r4, #0
 800353a:	d1ee      	bne.n	800351a <coap_serialize_multi_option+0xe>
  } /* for */

  return i;
}
 800353c:	4628      	mov	r0, r5
 800353e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003540 <coap_serialize_array_option>:
{
 8003540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003544:	b083      	sub	sp, #12
 8003546:	9001      	str	r0, [sp, #4]
 8003548:	4608      	mov	r0, r1
 800354a:	4691      	mov	r9, r2
 800354c:	461f      	mov	r7, r3
 800354e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8003552:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
  if (split_char!='\0')
 8003556:	f1bb 0f00 	cmp.w	fp, #0
 800355a:	d022      	beq.n	80035a2 <coap_serialize_array_option+0x62>
    uint8_t *part_start = array;
 800355c:	469a      	mov	sl, r3
    for (j = 0; j<=length; ++j)
 800355e:	2400      	movs	r4, #0
  size_t i = 0;
 8003560:	4625      	mov	r5, r4
 8003562:	e015      	b.n	8003590 <coap_serialize_array_option+0x50>
        temp_length = part_end-part_start;
 8003564:	eba6 060a 	sub.w	r6, r6, sl
        i += coap_set_option_header(number - current_number, temp_length, &buffer[i]);
 8003568:	eb09 0205 	add.w	r2, r9, r5
 800356c:	4631      	mov	r1, r6
 800356e:	9b01      	ldr	r3, [sp, #4]
 8003570:	1a18      	subs	r0, r3, r0
 8003572:	f7ff ff71 	bl	8003458 <coap_set_option_header>
 8003576:	4405      	add	r5, r0
        memcpy(&buffer[i], part_start, temp_length);
 8003578:	4632      	mov	r2, r6
 800357a:	4651      	mov	r1, sl
 800357c:	eb09 0005 	add.w	r0, r9, r5
 8003580:	f014 fdf6 	bl	8018170 <memcpy>
        i += temp_length;
 8003584:	4435      	add	r5, r6
        ++j; /* skip the splitter */
 8003586:	3401      	adds	r4, #1
        part_start = array + j;
 8003588:	eb07 0a04 	add.w	sl, r7, r4
        current_number = number;
 800358c:	9801      	ldr	r0, [sp, #4]
    for (j = 0; j<=length; ++j)
 800358e:	3401      	adds	r4, #1
 8003590:	4544      	cmp	r4, r8
 8003592:	d812      	bhi.n	80035ba <coap_serialize_array_option+0x7a>
      if (array[j]==split_char || j==length)
 8003594:	193e      	adds	r6, r7, r4
 8003596:	5d3b      	ldrb	r3, [r7, r4]
 8003598:	455b      	cmp	r3, fp
 800359a:	d0e3      	beq.n	8003564 <coap_serialize_array_option+0x24>
 800359c:	4544      	cmp	r4, r8
 800359e:	d1f6      	bne.n	800358e <coap_serialize_array_option+0x4e>
 80035a0:	e7e0      	b.n	8003564 <coap_serialize_array_option+0x24>
    i += coap_set_option_header(number - current_number, length, &buffer[i]);
 80035a2:	4641      	mov	r1, r8
 80035a4:	9b01      	ldr	r3, [sp, #4]
 80035a6:	1a18      	subs	r0, r3, r0
 80035a8:	f7ff ff56 	bl	8003458 <coap_set_option_header>
 80035ac:	4605      	mov	r5, r0
    memcpy(&buffer[i], array, length);
 80035ae:	4642      	mov	r2, r8
 80035b0:	4639      	mov	r1, r7
 80035b2:	4448      	add	r0, r9
 80035b4:	f014 fddc 	bl	8018170 <memcpy>
    i += length;
 80035b8:	4445      	add	r5, r8
}
 80035ba:	4628      	mov	r0, r5
 80035bc:	b003      	add	sp, #12
 80035be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080035c2 <prv_coap_get_multi_option_as_string>:
}

static
char *
prv_coap_get_multi_option_as_string(multi_option_t * option, char prefix, char delimiter)
{
 80035c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035c6:	4605      	mov	r5, r0
 80035c8:	460e      	mov	r6, r1
 80035ca:	4617      	mov	r7, r2
    size_t len = 0;
    multi_option_t * opt;
    char * output;

    for (opt = option; opt != NULL; opt = opt->next)
 80035cc:	4603      	mov	r3, r0
    size_t len = 0;
 80035ce:	2000      	movs	r0, #0
    for (opt = option; opt != NULL; opt = opt->next)
 80035d0:	e003      	b.n	80035da <prv_coap_get_multi_option_as_string+0x18>
    {
       len += opt->len + 1;     // for separator
 80035d2:	795a      	ldrb	r2, [r3, #5]
 80035d4:	4410      	add	r0, r2
 80035d6:	3001      	adds	r0, #1
    for (opt = option; opt != NULL; opt = opt->next)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f9      	bne.n	80035d2 <prv_coap_get_multi_option_as_string+0x10>
    }

    output = (char*) lwm2m_malloc(len + 1); // for String terminator
 80035de:	3001      	adds	r0, #1
 80035e0:	f005 faba 	bl	8008b58 <lwm2m_malloc>
    if (output != NULL)
 80035e4:	4680      	mov	r8, r0
 80035e6:	b1b0      	cbz	r0, 8003616 <prv_coap_get_multi_option_as_string+0x54>
    {
        size_t i = 0;
 80035e8:	2400      	movs	r4, #0
 80035ea:	e00b      	b.n	8003604 <prv_coap_get_multi_option_as_string+0x42>
        for (opt = option; opt != NULL; opt = opt->next)
        {
            if (i == 0){
                output[i] = prefix;
            } else {
                output[i] = delimiter;
 80035ec:	f808 7004 	strb.w	r7, [r8, r4]
            }
            i += 1;
 80035f0:	3401      	adds	r4, #1

            memmove(output + i, opt->data, opt->len);
 80035f2:	796a      	ldrb	r2, [r5, #5]
 80035f4:	68a9      	ldr	r1, [r5, #8]
 80035f6:	eb08 0004 	add.w	r0, r8, r4
 80035fa:	f014 fdc7 	bl	801818c <memmove>
            i += opt->len;
 80035fe:	796b      	ldrb	r3, [r5, #5]
 8003600:	441c      	add	r4, r3
        for (opt = option; opt != NULL; opt = opt->next)
 8003602:	682d      	ldr	r5, [r5, #0]
 8003604:	b125      	cbz	r5, 8003610 <prv_coap_get_multi_option_as_string+0x4e>
            if (i == 0){
 8003606:	2c00      	cmp	r4, #0
 8003608:	d1f0      	bne.n	80035ec <prv_coap_get_multi_option_as_string+0x2a>
                output[i] = prefix;
 800360a:	f808 6004 	strb.w	r6, [r8, r4]
 800360e:	e7ef      	b.n	80035f0 <prv_coap_get_multi_option_as_string+0x2e>
        }
        output[i] = 0;
 8003610:	2200      	movs	r2, #0
 8003612:	f808 2004 	strb.w	r2, [r8, r4]
    }

    return output;
}
 8003616:	4640      	mov	r0, r8
 8003618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800361c <coap_add_multi_option>:
{
 800361c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003620:	4607      	mov	r7, r0
 8003622:	4688      	mov	r8, r1
 8003624:	4615      	mov	r5, r2
 8003626:	461e      	mov	r6, r3
  multi_option_t *opt = (multi_option_t *)lwm2m_malloc(sizeof(multi_option_t));
 8003628:	200c      	movs	r0, #12
 800362a:	f005 fa95 	bl	8008b58 <lwm2m_malloc>
  if (opt)
 800362e:	b178      	cbz	r0, 8003650 <coap_add_multi_option+0x34>
 8003630:	4604      	mov	r4, r0
    opt->next = NULL;
 8003632:	2300      	movs	r3, #0
 8003634:	6003      	str	r3, [r0, #0]
    opt->len = (uint8_t)option_len;
 8003636:	7145      	strb	r5, [r0, #5]
    if (is_static)
 8003638:	b166      	cbz	r6, 8003654 <coap_add_multi_option+0x38>
      opt->data = option;
 800363a:	f8c0 8008 	str.w	r8, [r0, #8]
      opt->is_static = 1;
 800363e:	2301      	movs	r3, #1
 8003640:	7103      	strb	r3, [r0, #4]
    if (*dst)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	b1b3      	cbz	r3, 8003674 <coap_add_multi_option+0x58>
      while (i->next)
 8003646:	461a      	mov	r2, r3
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1fb      	bne.n	8003646 <coap_add_multi_option+0x2a>
      i->next = opt;
 800364e:	6014      	str	r4, [r2, #0]
}
 8003650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        opt->is_static = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	7103      	strb	r3, [r0, #4]
        opt->data = (uint8_t *)lwm2m_malloc(option_len);
 8003658:	4628      	mov	r0, r5
 800365a:	f005 fa7d 	bl	8008b58 <lwm2m_malloc>
 800365e:	60a0      	str	r0, [r4, #8]
        if (opt->data == NULL)
 8003660:	b120      	cbz	r0, 800366c <coap_add_multi_option+0x50>
        memcpy(opt->data, option, option_len);
 8003662:	462a      	mov	r2, r5
 8003664:	4641      	mov	r1, r8
 8003666:	f014 fd83 	bl	8018170 <memcpy>
 800366a:	e7ea      	b.n	8003642 <coap_add_multi_option+0x26>
            lwm2m_free(opt);
 800366c:	4620      	mov	r0, r4
 800366e:	f005 fa77 	bl	8008b60 <lwm2m_free>
            return;
 8003672:	e7ed      	b.n	8003650 <coap_add_multi_option+0x34>
      *dst = opt;
 8003674:	603c      	str	r4, [r7, #0]
 8003676:	e7eb      	b.n	8003650 <coap_add_multi_option+0x34>

08003678 <free_multi_option>:
  if (dst)
 8003678:	b188      	cbz	r0, 800369e <free_multi_option+0x26>
{
 800367a:	b538      	push	{r3, r4, r5, lr}
 800367c:	4604      	mov	r4, r0
    multi_option_t *n = dst->next;
 800367e:	6805      	ldr	r5, [r0, #0]
    dst->next = NULL;
 8003680:	2300      	movs	r3, #0
 8003682:	6003      	str	r3, [r0, #0]
    if (dst->is_static == 0)
 8003684:	7903      	ldrb	r3, [r0, #4]
 8003686:	b133      	cbz	r3, 8003696 <free_multi_option+0x1e>
    lwm2m_free(dst);
 8003688:	4620      	mov	r0, r4
 800368a:	f005 fa69 	bl	8008b60 <lwm2m_free>
    free_multi_option(n);
 800368e:	4628      	mov	r0, r5
 8003690:	f7ff fff2 	bl	8003678 <free_multi_option>
}
 8003694:	bd38      	pop	{r3, r4, r5, pc}
        lwm2m_free(dst->data);
 8003696:	6880      	ldr	r0, [r0, #8]
 8003698:	f005 fa62 	bl	8008b60 <lwm2m_free>
 800369c:	e7f4      	b.n	8003688 <free_multi_option+0x10>
 800369e:	4770      	bx	lr

080036a0 <coap_get_multi_option_as_path_string>:

char * coap_get_multi_option_as_path_string(multi_option_t * option)
{
 80036a0:	b508      	push	{r3, lr}
    return prv_coap_get_multi_option_as_string(option, '/', '/');
 80036a2:	222f      	movs	r2, #47	; 0x2f
 80036a4:	4611      	mov	r1, r2
 80036a6:	f7ff ff8c 	bl	80035c2 <prv_coap_get_multi_option_as_string>
}
 80036aa:	bd08      	pop	{r3, pc}

080036ac <coap_init_message>:
/*-----------------------------------------------------------------------------------*/
/*- MEASSAGE PROCESSING -------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
void
coap_init_message(void *packet, coap_message_type_t type, uint8_t code, uint16_t mid)
{
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ae:	4604      	mov	r4, r0
 80036b0:	460f      	mov	r7, r1
 80036b2:	4616      	mov	r6, r2
 80036b4:	461d      	mov	r5, r3
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  /* Important thing */
  memset(coap_pkt, 0, sizeof(coap_packet_t));
 80036b6:	2290      	movs	r2, #144	; 0x90
 80036b8:	2100      	movs	r1, #0
 80036ba:	f014 fd81 	bl	80181c0 <memset>

  coap_pkt->type = type;
 80036be:	7167      	strb	r7, [r4, #5]
  coap_pkt->code = code;
 80036c0:	71a6      	strb	r6, [r4, #6]
  coap_pkt->mid = mid;
 80036c2:	8125      	strh	r5, [r4, #8]
}
 80036c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080036c6 <coap_free_header>:

void
coap_free_header(void *packet)
{
 80036c6:	b510      	push	{r4, lr}
 80036c8:	4604      	mov	r4, r0
    coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

    free_multi_option(coap_pkt->uri_path);
 80036ca:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80036cc:	f7ff ffd4 	bl	8003678 <free_multi_option>
    free_multi_option(coap_pkt->uri_query);
 80036d0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80036d4:	f7ff ffd0 	bl	8003678 <free_multi_option>
    free_multi_option(coap_pkt->location_path);
 80036d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80036da:	f7ff ffcd 	bl	8003678 <free_multi_option>
    coap_pkt->uri_path = NULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	6463      	str	r3, [r4, #68]	; 0x44
    coap_pkt->uri_query = NULL;
 80036e2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    coap_pkt->location_path = NULL;
 80036e6:	6363      	str	r3, [r4, #52]	; 0x34
}
 80036e8:	bd10      	pop	{r4, pc}

080036ea <coap_serialize_get_size>:

/*-----------------------------------------------------------------------------------*/
size_t coap_serialize_get_size(void *packet)
{
 80036ea:	b410      	push	{r4}
 80036ec:	4601      	mov	r1, r0
    coap_packet_t *const coap_pkt = (coap_packet_t *) packet;
    size_t length = 0;

    length = COAP_HEADER_LEN + coap_pkt->payload_len + coap_pkt->token_len;
 80036ee:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 80036f2:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
 80036f6:	4420      	add	r0, r4
 80036f8:	3004      	adds	r0, #4

    if (IS_OPTION(coap_pkt, COAP_OPTION_IF_MATCH))
 80036fa:	7a8b      	ldrb	r3, [r1, #10]
 80036fc:	f013 0f02 	tst.w	r3, #2
 8003700:	d003      	beq.n	800370a <coap_serialize_get_size+0x20>
    {
        length += COAP_MAX_OPTION_HEADER_LEN + coap_pkt->if_match_len;
 8003702:	f891 205a 	ldrb.w	r2, [r1, #90]	; 0x5a
 8003706:	4410      	add	r0, r2
 8003708:	3005      	adds	r0, #5
    }
    if (IS_OPTION(coap_pkt, COAP_OPTION_URI_HOST))
 800370a:	f013 0f08 	tst.w	r3, #8
 800370e:	d002      	beq.n	8003716 <coap_serialize_get_size+0x2c>
    {
        length += COAP_MAX_OPTION_HEADER_LEN + coap_pkt->uri_host_len;
 8003710:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003712:	4410      	add	r0, r2
 8003714:	3005      	adds	r0, #5
    }
    if (IS_OPTION(coap_pkt, COAP_OPTION_ETAG))
 8003716:	f013 0f10 	tst.w	r3, #16
 800371a:	d003      	beq.n	8003724 <coap_serialize_get_size+0x3a>
    {
        length += COAP_MAX_OPTION_HEADER_LEN + coap_pkt->etag_len;
 800371c:	f891 2020 	ldrb.w	r2, [r1, #32]
 8003720:	4410      	add	r0, r2
 8003722:	3005      	adds	r0, #5
    }
    if (IS_OPTION(coap_pkt, COAP_OPTION_IF_NONE_MATCH))
 8003724:	f013 0f20 	tst.w	r3, #32
 8003728:	d000      	beq.n	800372c <coap_serialize_get_size+0x42>
    {
        // can be stored in extended fields
        length += COAP_MAX_OPTION_HEADER_LEN;
 800372a:	3005      	adds	r0, #5
    }
    if (IS_OPTION(coap_pkt, COAP_OPTION_OBSERVE))
 800372c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003730:	d000      	beq.n	8003734 <coap_serialize_get_size+0x4a>
    {
        // can be stored in extended fields
        length += COAP_MAX_OPTION_HEADER_LEN;
 8003732:	3005      	adds	r0, #5
    }
    if (IS_OPTION(coap_pkt, COAP_OPTION_URI_PORT))
 8003734:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003738:	d106      	bne.n	8003748 <coap_serialize_get_size+0x5e>
    {
        // can be stored in extended fields
        length += COAP_MAX_OPTION_HEADER_LEN;
    }
    if (IS_OPTION(coap_pkt, COAP_OPTION_LOCATION_PATH))
 800373a:	f891 c00b 	ldrb.w	ip, [r1, #11]
 800373e:	f01c 0f01 	tst.w	ip, #1
 8003742:	d009      	beq.n	8003758 <coap_serialize_get_size+0x6e>
    {
        multi_option_t * optP;

        for (optP = coap_pkt->location_path ; optP != NULL ; optP = optP->next)
 8003744:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003746:	e005      	b.n	8003754 <coap_serialize_get_size+0x6a>
        length += COAP_MAX_OPTION_HEADER_LEN;
 8003748:	3005      	adds	r0, #5
 800374a:	e7f6      	b.n	800373a <coap_serialize_get_size+0x50>
        {
            length += COAP_MAX_OPTION_HEADER_LEN + optP->len;
 800374c:	795a      	ldrb	r2, [r3, #5]
 800374e:	4410      	add	r0, r2
 8003750:	3005      	adds	r0, #5
        for (optP = coap_pkt->location_path ; optP != NULL ; optP = optP->next)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f9      	bne.n	800374c <coap_serialize_get_size+0x62>
        }
    }
    if (IS_OPTION(coap_pkt, COAP_OPTION_URI_PATH))
 8003758:	f01c 0f08 	tst.w	ip, #8
 800375c:	d007      	beq.n	800376e <coap_serialize_get_size+0x84>
    {
        multi_option_t * optP;

        for (optP = coap_pkt->uri_path ; optP != NULL ; optP = optP->next)
 800375e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8003760:	e003      	b.n	800376a <coap_serialize_get_size+0x80>
        {
            length += COAP_MAX_OPTION_HEADER_LEN + optP->len;
 8003762:	795a      	ldrb	r2, [r3, #5]
 8003764:	4410      	add	r0, r2
 8003766:	3005      	adds	r0, #5
        for (optP = coap_pkt->uri_path ; optP != NULL ; optP = optP->next)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f9      	bne.n	8003762 <coap_serialize_get_size+0x78>
        }
    }
    if (IS_OPTION(coap_pkt, COAP_OPTION_CONTENT_TYPE))
 800376e:	f01c 0f10 	tst.w	ip, #16
 8003772:	d000      	beq.n	8003776 <coap_serialize_get_size+0x8c>
    {
        // can be stored in extended fields
        length += COAP_MAX_OPTION_HEADER_LEN;
 8003774:	3005      	adds	r0, #5
    }
    if (IS_OPTION(coap_pkt, COAP_OPTION_MAX_AGE))
 8003776:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800377a:	d000      	beq.n	800377e <coap_serialize_get_size+0x94>
    {
        // can be stored in extended fields
        length += COAP_MAX_OPTION_HEADER_LEN;
 800377c:	3005      	adds	r0, #5
    }
    if (IS_OPTION(coap_pkt, COAP_OPTION_URI_QUERY))
 800377e:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8003782:	d125      	bne.n	80037d0 <coap_serialize_get_size+0xe6>
        for (optP = coap_pkt->uri_query ; optP != NULL ; optP = optP->next)
        {
            length += COAP_MAX_OPTION_HEADER_LEN + optP->len;
        }
    }
    if (IS_OPTION(coap_pkt, COAP_OPTION_ACCEPT))
 8003784:	7b0b      	ldrb	r3, [r1, #12]
 8003786:	f013 0f02 	tst.w	r3, #2
 800378a:	d004      	beq.n	8003796 <coap_serialize_get_size+0xac>
    {
        length += coap_pkt->accept_num * COAP_MAX_OPTION_HEADER_LEN;
 800378c:	f891 2055 	ldrb.w	r2, [r1, #85]	; 0x55
 8003790:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003794:	4410      	add	r0, r2
    }
    if (IS_OPTION(coap_pkt, COAP_OPTION_LOCATION_QUERY))
 8003796:	f013 0f10 	tst.w	r3, #16
 800379a:	d002      	beq.n	80037a2 <coap_serialize_get_size+0xb8>
    {
        length += COAP_MAX_OPTION_HEADER_LEN + coap_pkt->location_query_len;
 800379c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800379e:	4410      	add	r0, r2
 80037a0:	3005      	adds	r0, #5
    }
    if (IS_OPTION(coap_pkt, COAP_OPTION_BLOCK2))
 80037a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80037a6:	d11d      	bne.n	80037e4 <coap_serialize_get_size+0xfa>
    {
        // can be stored in extended fields
        length += COAP_MAX_OPTION_HEADER_LEN;
    }
    if (IS_OPTION(coap_pkt, COAP_OPTION_BLOCK1))
 80037a8:	7b4b      	ldrb	r3, [r1, #13]
 80037aa:	f013 0f08 	tst.w	r3, #8
 80037ae:	d000      	beq.n	80037b2 <coap_serialize_get_size+0xc8>
    {
        // can be stored in extended fields
        length += COAP_MAX_OPTION_HEADER_LEN;
 80037b0:	3005      	adds	r0, #5
    }
    if (IS_OPTION(coap_pkt, COAP_OPTION_SIZE))
 80037b2:	f013 0f10 	tst.w	r3, #16
 80037b6:	d000      	beq.n	80037ba <coap_serialize_get_size+0xd0>
    {
        // can be stored in extended fields
        length += COAP_MAX_OPTION_HEADER_LEN;
 80037b8:	3005      	adds	r0, #5
    }
    if (IS_OPTION(coap_pkt, COAP_OPTION_PROXY_URI))
 80037ba:	7b8b      	ldrb	r3, [r1, #14]
 80037bc:	f013 0f08 	tst.w	r3, #8
 80037c0:	d002      	beq.n	80037c8 <coap_serialize_get_size+0xde>
    {
        length += COAP_MAX_OPTION_HEADER_LEN + coap_pkt->proxy_uri_len;
 80037c2:	698b      	ldr	r3, [r1, #24]
 80037c4:	4418      	add	r0, r3
 80037c6:	3005      	adds	r0, #5
    }

    if (coap_pkt->payload_len)
 80037c8:	b104      	cbz	r4, 80037cc <coap_serialize_get_size+0xe2>
    {
        // Account for the payload marker.
        length += 1;
 80037ca:	3001      	adds	r0, #1
    }

    return length;
}
 80037cc:	bc10      	pop	{r4}
 80037ce:	4770      	bx	lr
        for (optP = coap_pkt->uri_query ; optP != NULL ; optP = optP->next)
 80037d0:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 80037d4:	e003      	b.n	80037de <coap_serialize_get_size+0xf4>
            length += COAP_MAX_OPTION_HEADER_LEN + optP->len;
 80037d6:	795a      	ldrb	r2, [r3, #5]
 80037d8:	4410      	add	r0, r2
 80037da:	3005      	adds	r0, #5
        for (optP = coap_pkt->uri_query ; optP != NULL ; optP = optP->next)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f9      	bne.n	80037d6 <coap_serialize_get_size+0xec>
 80037e2:	e7cf      	b.n	8003784 <coap_serialize_get_size+0x9a>
        length += COAP_MAX_OPTION_HEADER_LEN;
 80037e4:	3005      	adds	r0, #5
 80037e6:	e7df      	b.n	80037a8 <coap_serialize_get_size+0xbe>

080037e8 <coap_serialize_message>:

/*-----------------------------------------------------------------------------------*/
size_t
coap_serialize_message(void *packet, uint8_t *buffer)
{
 80037e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	4604      	mov	r4, r0
 80037f0:	460e      	mov	r6, r1
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;
  uint8_t *option;
  unsigned int current_number = 0;

  /* Initialize */
  coap_pkt->buffer = buffer;
 80037f2:	6001      	str	r1, [r0, #0]
  coap_pkt->version = 1;
 80037f4:	2301      	movs	r3, #1
 80037f6:	7103      	strb	r3, [r0, #4]

  PRINTF("-Serializing MID %u to %p, ", coap_pkt->mid, coap_pkt->buffer);

  /* set header fields */
  coap_pkt->buffer[0]  = 0x00;
 80037f8:	2300      	movs	r3, #0
 80037fa:	700b      	strb	r3, [r1, #0]
  coap_pkt->buffer[0] |= COAP_HEADER_VERSION_MASK & (coap_pkt->version)<<COAP_HEADER_VERSION_POSITION;
 80037fc:	6801      	ldr	r1, [r0, #0]
 80037fe:	7900      	ldrb	r0, [r0, #4]
 8003800:	780a      	ldrb	r2, [r1, #0]
 8003802:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8003806:	700a      	strb	r2, [r1, #0]
  coap_pkt->buffer[0] |= COAP_HEADER_TYPE_MASK & (coap_pkt->type)<<COAP_HEADER_TYPE_POSITION;
 8003808:	6821      	ldr	r1, [r4, #0]
 800380a:	7962      	ldrb	r2, [r4, #5]
 800380c:	0112      	lsls	r2, r2, #4
 800380e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8003812:	7808      	ldrb	r0, [r1, #0]
 8003814:	4302      	orrs	r2, r0
 8003816:	700a      	strb	r2, [r1, #0]
  coap_pkt->buffer[0] |= COAP_HEADER_TOKEN_LEN_MASK & (coap_pkt->token_len)<<COAP_HEADER_TOKEN_LEN_POSITION;
 8003818:	6821      	ldr	r1, [r4, #0]
 800381a:	f994 204c 	ldrsb.w	r2, [r4, #76]	; 0x4c
 800381e:	f002 020f 	and.w	r2, r2, #15
 8003822:	7808      	ldrb	r0, [r1, #0]
 8003824:	4302      	orrs	r2, r0
 8003826:	700a      	strb	r2, [r1, #0]
  coap_pkt->buffer[1] = coap_pkt->code;
 8003828:	6822      	ldr	r2, [r4, #0]
 800382a:	79a1      	ldrb	r1, [r4, #6]
 800382c:	7051      	strb	r1, [r2, #1]
  coap_pkt->buffer[2] = (uint8_t) ((coap_pkt->mid)>>8);
 800382e:	8922      	ldrh	r2, [r4, #8]
 8003830:	6821      	ldr	r1, [r4, #0]
 8003832:	0a12      	lsrs	r2, r2, #8
 8003834:	708a      	strb	r2, [r1, #2]
  coap_pkt->buffer[3] = (uint8_t) (coap_pkt->mid);
 8003836:	6822      	ldr	r2, [r4, #0]
 8003838:	7a21      	ldrb	r1, [r4, #8]
 800383a:	70d1      	strb	r1, [r2, #3]

  /* set Token */
  PRINTF("Token (len %u)", coap_pkt->token_len);
  option = coap_pkt->buffer + COAP_HEADER_LEN;
 800383c:	6825      	ldr	r5, [r4, #0]
 800383e:	3504      	adds	r5, #4
  for (current_number=0; current_number<coap_pkt->token_len; ++current_number)
 8003840:	e005      	b.n	800384e <coap_serialize_message+0x66>
  {
    PRINTF(" %02X", coap_pkt->token[current_number]);
    *option = coap_pkt->token[current_number];
 8003842:	18e2      	adds	r2, r4, r3
 8003844:	f892 204d 	ldrb.w	r2, [r2, #77]	; 0x4d
 8003848:	f805 2b01 	strb.w	r2, [r5], #1
  for (current_number=0; current_number<coap_pkt->token_len; ++current_number)
 800384c:	3301      	adds	r3, #1
 800384e:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8003852:	429a      	cmp	r2, r3
 8003854:	d8f5      	bhi.n	8003842 <coap_serialize_message+0x5a>
  current_number = 0;

  PRINTF("-Serializing options at %p-\n", option);

  /* The options must be serialized in the order of their number */
  COAP_SERIALIZE_BYTE_OPTION(   COAP_OPTION_IF_MATCH,       if_match, "If-Match")
 8003856:	7aa3      	ldrb	r3, [r4, #10]
 8003858:	f013 0f02 	tst.w	r3, #2
 800385c:	f040 809f 	bne.w	800399e <coap_serialize_message+0x1b6>
  current_number = 0;
 8003860:	2700      	movs	r7, #0
  COAP_SERIALIZE_STRING_OPTION( COAP_OPTION_URI_HOST,       uri_host, '\0', "Uri-Host")
 8003862:	7aa3      	ldrb	r3, [r4, #10]
 8003864:	f013 0f08 	tst.w	r3, #8
 8003868:	f040 80a7 	bne.w	80039ba <coap_serialize_message+0x1d2>
  COAP_SERIALIZE_BYTE_OPTION(   COAP_OPTION_ETAG,           etag, "ETag")
 800386c:	7aa3      	ldrb	r3, [r4, #10]
 800386e:	f013 0f10 	tst.w	r3, #16
 8003872:	f040 80af 	bne.w	80039d4 <coap_serialize_message+0x1ec>
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_IF_NONE_MATCH,  content_type-coap_pkt->content_type, "If-None-Match") /* hack to get a zero field */
 8003876:	7aa3      	ldrb	r3, [r4, #10]
 8003878:	f013 0f20 	tst.w	r3, #32
 800387c:	f040 80b9 	bne.w	80039f2 <coap_serialize_message+0x20a>
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_OBSERVE,        observe, "Observe")
 8003880:	7aa3      	ldrb	r3, [r4, #10]
 8003882:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003886:	f040 80bd 	bne.w	8003a04 <coap_serialize_message+0x21c>
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_URI_PORT,       uri_port, "Uri-Port")
 800388a:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800388e:	2b00      	cmp	r3, #0
 8003890:	f2c0 80c1 	blt.w	8003a16 <coap_serialize_message+0x22e>
  COAP_SERIALIZE_MULTI_OPTION(  COAP_OPTION_LOCATION_PATH,  location_path, "Location-Path")
 8003894:	7ae3      	ldrb	r3, [r4, #11]
 8003896:	f013 0f01 	tst.w	r3, #1
 800389a:	f040 80c5 	bne.w	8003a28 <coap_serialize_message+0x240>
  COAP_SERIALIZE_MULTI_OPTION(  COAP_OPTION_URI_PATH,       uri_path, "Uri-Path")
 800389e:	7ae3      	ldrb	r3, [r4, #11]
 80038a0:	f013 0f08 	tst.w	r3, #8
 80038a4:	f040 80c9 	bne.w	8003a3a <coap_serialize_message+0x252>
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_CONTENT_TYPE,   content_type, "Content-Format")
 80038a8:	7ae3      	ldrb	r3, [r4, #11]
 80038aa:	f013 0f10 	tst.w	r3, #16
 80038ae:	f040 80cd 	bne.w	8003a4c <coap_serialize_message+0x264>
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_MAX_AGE,        max_age, "Max-Age")
 80038b2:	7ae3      	ldrb	r3, [r4, #11]
 80038b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80038b8:	f040 80d1 	bne.w	8003a5e <coap_serialize_message+0x276>
  COAP_SERIALIZE_MULTI_OPTION(  COAP_OPTION_URI_QUERY,      uri_query, "Uri-Query")
 80038bc:	f994 300b 	ldrsb.w	r3, [r4, #11]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f2c0 80d5 	blt.w	8003a70 <coap_serialize_message+0x288>
  COAP_SERIALIZE_ACCEPT_OPTION( COAP_OPTION_ACCEPT,         accept, "Accept")
 80038c6:	7b23      	ldrb	r3, [r4, #12]
 80038c8:	f013 0f02 	tst.w	r3, #2
 80038cc:	f040 80ed 	bne.w	8003aaa <coap_serialize_message+0x2c2>
  COAP_SERIALIZE_STRING_OPTION( COAP_OPTION_LOCATION_QUERY, location_query, '&', "Location-Query")
 80038d0:	7b23      	ldrb	r3, [r4, #12]
 80038d2:	f013 0f10 	tst.w	r3, #16
 80038d6:	f040 80eb 	bne.w	8003ab0 <coap_serialize_message+0x2c8>
  COAP_SERIALIZE_BLOCK_OPTION(  COAP_OPTION_BLOCK2,         block2, "Block2")
 80038da:	f994 300c 	ldrsb.w	r3, [r4, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f2c0 80f3 	blt.w	8003aca <coap_serialize_message+0x2e2>
  COAP_SERIALIZE_BLOCK_OPTION(  COAP_OPTION_BLOCK1,         block1, "Block1")
 80038e4:	7b63      	ldrb	r3, [r4, #13]
 80038e6:	f013 0f08 	tst.w	r3, #8
 80038ea:	d017      	beq.n	800391c <coap_serialize_message+0x134>
 80038ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80038ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038f2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80038f6:	b10b      	cbz	r3, 80038fc <coap_serialize_message+0x114>
 80038f8:	f048 0808 	orr.w	r8, r8, #8
 80038fc:	f8b4 0076 	ldrh.w	r0, [r4, #118]	; 0x76
 8003900:	0900      	lsrs	r0, r0, #4
 8003902:	f7ff fd94 	bl	800342e <coap_log_2>
 8003906:	f000 030f 	and.w	r3, r0, #15
 800390a:	ea43 0308 	orr.w	r3, r3, r8
 800390e:	462a      	mov	r2, r5
 8003910:	4639      	mov	r1, r7
 8003912:	201b      	movs	r0, #27
 8003914:	f7ff fdcb 	bl	80034ae <coap_serialize_int_option>
 8003918:	4405      	add	r5, r0
 800391a:	271b      	movs	r7, #27
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_SIZE,           size, "Size")
 800391c:	7b63      	ldrb	r3, [r4, #13]
 800391e:	f013 0f10 	tst.w	r3, #16
 8003922:	f040 80eb 	bne.w	8003afc <coap_serialize_message+0x314>
  COAP_SERIALIZE_STRING_OPTION( COAP_OPTION_PROXY_URI,      proxy_uri, '\0', "Proxy-Uri")
 8003926:	7ba3      	ldrb	r3, [r4, #14]
 8003928:	f013 0f08 	tst.w	r3, #8
 800392c:	f040 80ef 	bne.w	8003b0e <coap_serialize_message+0x326>

  PRINTF("-Done serializing at %p----\n", option);

  /* Free allocated header fields */
  coap_free_header(packet);
 8003930:	4620      	mov	r0, r4
 8003932:	f7ff fec8 	bl	80036c6 <coap_free_header>

  /* Pack payload */
  /* Payload marker */
  if (coap_pkt->payload_len)
 8003936:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800393a:	b113      	cbz	r3, 8003942 <coap_serialize_message+0x15a>
  {
    *option = 0xFF;
 800393c:	23ff      	movs	r3, #255	; 0xff
 800393e:	f805 3b01 	strb.w	r3, [r5], #1
    ++option;
  }

  memmove(option, coap_pkt->payload, coap_pkt->payload_len);
 8003942:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8003946:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800394a:	4628      	mov	r0, r5
 800394c:	f014 fc1e 	bl	801818c <memmove>
      coap_pkt->buffer[6],
      coap_pkt->buffer[7]
    );


  do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, "COAP VERSION %d \r\n", coap_pkt->version);} }while(0);
 8003950:	7923      	ldrb	r3, [r4, #4]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	4b74      	ldr	r3, [pc, #464]	; (8003b28 <coap_serialize_message+0x340>)
 8003956:	2201      	movs	r2, #1
 8003958:	2100      	movs	r1, #0
 800395a:	2002      	movs	r0, #2
 800395c:	f013 fd56 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
  //do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, "COAP TYPE %d \r\n", coap_pkt->type);} }while(0);
  do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, "COAP code %d \r\n", coap_pkt->code);} }while(0);
 8003960:	79a3      	ldrb	r3, [r4, #6]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	4b71      	ldr	r3, [pc, #452]	; (8003b2c <coap_serialize_message+0x344>)
 8003966:	2201      	movs	r2, #1
 8003968:	2100      	movs	r1, #0
 800396a:	2002      	movs	r0, #2
 800396c:	f013 fd4e 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
  do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, "COAP messageID %d \r\n", coap_pkt->mid);} }while(0);
 8003970:	8923      	ldrh	r3, [r4, #8]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	4b6e      	ldr	r3, [pc, #440]	; (8003b30 <coap_serialize_message+0x348>)
 8003976:	2201      	movs	r2, #1
 8003978:	2100      	movs	r1, #0
 800397a:	2002      	movs	r0, #2
 800397c:	f013 fd46 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
  //do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, "COAP token %d \r\n", coap_pkt->version);} }while(0);
  //do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, "COAP options %d \r\n", coap_pkt->version);} }while(0);
  do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, "COAP 255 %d \r\n", 255);} }while(0);
 8003980:	23ff      	movs	r3, #255	; 0xff
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	4b6b      	ldr	r3, [pc, #428]	; (8003b34 <coap_serialize_message+0x34c>)
 8003986:	2201      	movs	r2, #1
 8003988:	2100      	movs	r1, #0
 800398a:	2002      	movs	r0, #2
 800398c:	f013 fd3e 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>



  return (option - buffer) + coap_pkt->payload_len; /* packet length */
 8003990:	1bad      	subs	r5, r5, r6
 8003992:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
 8003996:	4428      	add	r0, r5
 8003998:	b002      	add	sp, #8
 800399a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  COAP_SERIALIZE_BYTE_OPTION(   COAP_OPTION_IF_MATCH,       if_match, "If-Match")
 800399e:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 80039a2:	2100      	movs	r1, #0
 80039a4:	9101      	str	r1, [sp, #4]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	f104 035b 	add.w	r3, r4, #91	; 0x5b
 80039ac:	462a      	mov	r2, r5
 80039ae:	2001      	movs	r0, #1
 80039b0:	f7ff fdc6 	bl	8003540 <coap_serialize_array_option>
 80039b4:	4405      	add	r5, r0
 80039b6:	2701      	movs	r7, #1
 80039b8:	e753      	b.n	8003862 <coap_serialize_message+0x7a>
  COAP_SERIALIZE_STRING_OPTION( COAP_OPTION_URI_HOST,       uri_host, '\0', "Uri-Host")
 80039ba:	2300      	movs	r3, #0
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039c4:	462a      	mov	r2, r5
 80039c6:	4639      	mov	r1, r7
 80039c8:	2003      	movs	r0, #3
 80039ca:	f7ff fdb9 	bl	8003540 <coap_serialize_array_option>
 80039ce:	4405      	add	r5, r0
 80039d0:	2703      	movs	r7, #3
 80039d2:	e74b      	b.n	800386c <coap_serialize_message+0x84>
  COAP_SERIALIZE_BYTE_OPTION(   COAP_OPTION_ETAG,           etag, "ETag")
 80039d4:	f894 3020 	ldrb.w	r3, [r4, #32]
 80039d8:	2200      	movs	r2, #0
 80039da:	9201      	str	r2, [sp, #4]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80039e2:	462a      	mov	r2, r5
 80039e4:	4639      	mov	r1, r7
 80039e6:	2004      	movs	r0, #4
 80039e8:	f7ff fdaa 	bl	8003540 <coap_serialize_array_option>
 80039ec:	4405      	add	r5, r0
 80039ee:	2704      	movs	r7, #4
 80039f0:	e741      	b.n	8003876 <coap_serialize_message+0x8e>
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_IF_NONE_MATCH,  content_type-coap_pkt->content_type, "If-None-Match") /* hack to get a zero field */
 80039f2:	2300      	movs	r3, #0
 80039f4:	462a      	mov	r2, r5
 80039f6:	4639      	mov	r1, r7
 80039f8:	2005      	movs	r0, #5
 80039fa:	f7ff fd58 	bl	80034ae <coap_serialize_int_option>
 80039fe:	4405      	add	r5, r0
 8003a00:	2705      	movs	r7, #5
 8003a02:	e73d      	b.n	8003880 <coap_serialize_message+0x98>
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_OBSERVE,        observe, "Observe")
 8003a04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003a06:	462a      	mov	r2, r5
 8003a08:	4639      	mov	r1, r7
 8003a0a:	2006      	movs	r0, #6
 8003a0c:	f7ff fd4f 	bl	80034ae <coap_serialize_int_option>
 8003a10:	4405      	add	r5, r0
 8003a12:	2706      	movs	r7, #6
 8003a14:	e739      	b.n	800388a <coap_serialize_message+0xa2>
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_URI_PORT,       uri_port, "Uri-Port")
 8003a16:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003a18:	462a      	mov	r2, r5
 8003a1a:	4639      	mov	r1, r7
 8003a1c:	2007      	movs	r0, #7
 8003a1e:	f7ff fd46 	bl	80034ae <coap_serialize_int_option>
 8003a22:	4405      	add	r5, r0
 8003a24:	2707      	movs	r7, #7
 8003a26:	e735      	b.n	8003894 <coap_serialize_message+0xac>
  COAP_SERIALIZE_MULTI_OPTION(  COAP_OPTION_LOCATION_PATH,  location_path, "Location-Path")
 8003a28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a2a:	462a      	mov	r2, r5
 8003a2c:	4639      	mov	r1, r7
 8003a2e:	2008      	movs	r0, #8
 8003a30:	f7ff fd6c 	bl	800350c <coap_serialize_multi_option>
 8003a34:	4405      	add	r5, r0
 8003a36:	2708      	movs	r7, #8
 8003a38:	e731      	b.n	800389e <coap_serialize_message+0xb6>
  COAP_SERIALIZE_MULTI_OPTION(  COAP_OPTION_URI_PATH,       uri_path, "Uri-Path")
 8003a3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a3c:	462a      	mov	r2, r5
 8003a3e:	4639      	mov	r1, r7
 8003a40:	200b      	movs	r0, #11
 8003a42:	f7ff fd63 	bl	800350c <coap_serialize_multi_option>
 8003a46:	4405      	add	r5, r0
 8003a48:	270b      	movs	r7, #11
 8003a4a:	e72d      	b.n	80038a8 <coap_serialize_message+0xc0>
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_CONTENT_TYPE,   content_type, "Content-Format")
 8003a4c:	8a23      	ldrh	r3, [r4, #16]
 8003a4e:	462a      	mov	r2, r5
 8003a50:	4639      	mov	r1, r7
 8003a52:	200c      	movs	r0, #12
 8003a54:	f7ff fd2b 	bl	80034ae <coap_serialize_int_option>
 8003a58:	4405      	add	r5, r0
 8003a5a:	270c      	movs	r7, #12
 8003a5c:	e729      	b.n	80038b2 <coap_serialize_message+0xca>
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_MAX_AGE,        max_age, "Max-Age")
 8003a5e:	6963      	ldr	r3, [r4, #20]
 8003a60:	462a      	mov	r2, r5
 8003a62:	4639      	mov	r1, r7
 8003a64:	200e      	movs	r0, #14
 8003a66:	f7ff fd22 	bl	80034ae <coap_serialize_int_option>
 8003a6a:	4405      	add	r5, r0
 8003a6c:	270e      	movs	r7, #14
 8003a6e:	e725      	b.n	80038bc <coap_serialize_message+0xd4>
  COAP_SERIALIZE_MULTI_OPTION(  COAP_OPTION_URI_QUERY,      uri_query, "Uri-Query")
 8003a70:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003a74:	462a      	mov	r2, r5
 8003a76:	4639      	mov	r1, r7
 8003a78:	200f      	movs	r0, #15
 8003a7a:	f7ff fd47 	bl	800350c <coap_serialize_multi_option>
 8003a7e:	4405      	add	r5, r0
 8003a80:	270f      	movs	r7, #15
 8003a82:	e720      	b.n	80038c6 <coap_serialize_message+0xde>
  COAP_SERIALIZE_ACCEPT_OPTION( COAP_OPTION_ACCEPT,         accept, "Accept")
 8003a84:	f108 0328 	add.w	r3, r8, #40	; 0x28
 8003a88:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003a8c:	88db      	ldrh	r3, [r3, #6]
 8003a8e:	462a      	mov	r2, r5
 8003a90:	4639      	mov	r1, r7
 8003a92:	2011      	movs	r0, #17
 8003a94:	f7ff fd0b 	bl	80034ae <coap_serialize_int_option>
 8003a98:	4405      	add	r5, r0
 8003a9a:	f108 0801 	add.w	r8, r8, #1
 8003a9e:	2711      	movs	r7, #17
 8003aa0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8003aa4:	4543      	cmp	r3, r8
 8003aa6:	dced      	bgt.n	8003a84 <coap_serialize_message+0x29c>
 8003aa8:	e712      	b.n	80038d0 <coap_serialize_message+0xe8>
 8003aaa:	f04f 0800 	mov.w	r8, #0
 8003aae:	e7f7      	b.n	8003aa0 <coap_serialize_message+0x2b8>
  COAP_SERIALIZE_STRING_OPTION( COAP_OPTION_LOCATION_QUERY, location_query, '&', "Location-Query")
 8003ab0:	2326      	movs	r3, #38	; 0x26
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003aba:	462a      	mov	r2, r5
 8003abc:	4639      	mov	r1, r7
 8003abe:	2014      	movs	r0, #20
 8003ac0:	f7ff fd3e 	bl	8003540 <coap_serialize_array_option>
 8003ac4:	4405      	add	r5, r0
 8003ac6:	2714      	movs	r7, #20
 8003ac8:	e707      	b.n	80038da <coap_serialize_message+0xf2>
  COAP_SERIALIZE_BLOCK_OPTION(  COAP_OPTION_BLOCK2,         block2, "Block2")
 8003aca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003acc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ad0:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8003ad4:	b10b      	cbz	r3, 8003ada <coap_serialize_message+0x2f2>
 8003ad6:	f048 0808 	orr.w	r8, r8, #8
 8003ada:	f8b4 006a 	ldrh.w	r0, [r4, #106]	; 0x6a
 8003ade:	0900      	lsrs	r0, r0, #4
 8003ae0:	f7ff fca5 	bl	800342e <coap_log_2>
 8003ae4:	f000 030f 	and.w	r3, r0, #15
 8003ae8:	ea43 0308 	orr.w	r3, r3, r8
 8003aec:	462a      	mov	r2, r5
 8003aee:	4639      	mov	r1, r7
 8003af0:	2017      	movs	r0, #23
 8003af2:	f7ff fcdc 	bl	80034ae <coap_serialize_int_option>
 8003af6:	4405      	add	r5, r0
 8003af8:	2717      	movs	r7, #23
 8003afa:	e6f3      	b.n	80038e4 <coap_serialize_message+0xfc>
  COAP_SERIALIZE_INT_OPTION(    COAP_OPTION_SIZE,           size, "Size")
 8003afc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003afe:	462a      	mov	r2, r5
 8003b00:	4639      	mov	r1, r7
 8003b02:	201c      	movs	r0, #28
 8003b04:	f7ff fcd3 	bl	80034ae <coap_serialize_int_option>
 8003b08:	4405      	add	r5, r0
 8003b0a:	271c      	movs	r7, #28
 8003b0c:	e70b      	b.n	8003926 <coap_serialize_message+0x13e>
  COAP_SERIALIZE_STRING_OPTION( COAP_OPTION_PROXY_URI,      proxy_uri, '\0', "Proxy-Uri")
 8003b0e:	2300      	movs	r3, #0
 8003b10:	9301      	str	r3, [sp, #4]
 8003b12:	69a3      	ldr	r3, [r4, #24]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	69e3      	ldr	r3, [r4, #28]
 8003b18:	462a      	mov	r2, r5
 8003b1a:	4639      	mov	r1, r7
 8003b1c:	2023      	movs	r0, #35	; 0x23
 8003b1e:	f7ff fd0f 	bl	8003540 <coap_serialize_array_option>
 8003b22:	4405      	add	r5, r0
 8003b24:	e704      	b.n	8003930 <coap_serialize_message+0x148>
 8003b26:	bf00      	nop
 8003b28:	0801b7a8 	.word	0x0801b7a8
 8003b2c:	0801b7bc 	.word	0x0801b7bc
 8003b30:	0801b7cc 	.word	0x0801b7cc
 8003b34:	0801b7e4 	.word	0x0801b7e4

08003b38 <coap_set_header_content_type>:
int
coap_set_header_content_type(void *packet, unsigned int content_type)
{
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  coap_pkt->content_type = (coap_content_type_t) content_type;
 8003b38:	8201      	strh	r1, [r0, #16]
  SET_OPTION(coap_pkt, COAP_OPTION_CONTENT_TYPE);
 8003b3a:	7ac3      	ldrb	r3, [r0, #11]
 8003b3c:	f043 0310 	orr.w	r3, r3, #16
 8003b40:	72c3      	strb	r3, [r0, #11]
  return 1;
}
 8003b42:	2001      	movs	r0, #1
 8003b44:	4770      	bx	lr

08003b46 <coap_set_header_token>:
  return coap_pkt->token_len;
}

int
coap_set_header_token(void *packet, const uint8_t *token, size_t token_len)
{
 8003b46:	b538      	push	{r3, r4, r5, lr}
 8003b48:	4605      	mov	r5, r0
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  coap_pkt->token_len = (uint8_t)(MIN(COAP_TOKEN_LEN, token_len));
 8003b4a:	2a08      	cmp	r2, #8
 8003b4c:	d80d      	bhi.n	8003b6a <coap_set_header_token+0x24>
 8003b4e:	b2d4      	uxtb	r4, r2
 8003b50:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
  memcpy(coap_pkt->token, token, coap_pkt->token_len);
 8003b54:	4622      	mov	r2, r4
 8003b56:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8003b5a:	f014 fb09 	bl	8018170 <memcpy>

  SET_OPTION(coap_pkt, COAP_OPTION_TOKEN);
 8003b5e:	7b2b      	ldrb	r3, [r5, #12]
 8003b60:	f043 0308 	orr.w	r3, r3, #8
 8003b64:	732b      	strb	r3, [r5, #12]
  return coap_pkt->token_len;
}
 8003b66:	4620      	mov	r0, r4
 8003b68:	bd38      	pop	{r3, r4, r5, pc}
  coap_pkt->token_len = (uint8_t)(MIN(COAP_TOKEN_LEN, token_len));
 8003b6a:	2408      	movs	r4, #8
 8003b6c:	e7f0      	b.n	8003b50 <coap_set_header_token+0xa>

08003b6e <coap_set_header_uri_path>:
  return 0; //coap_pkt->uri_path_len;
}

int
coap_set_header_uri_path(void *packet, const char *path)
{
 8003b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b72:	4680      	mov	r8, r0
 8003b74:	460d      	mov	r5, r1
  coap_packet_t *coap_pkt = (coap_packet_t *) packet;
  int length = 0;

  free_multi_option(coap_pkt->uri_path);
 8003b76:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8003b78:	f7ff fd7e 	bl	8003678 <free_multi_option>
  coap_pkt->uri_path = NULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44

  if (path[0]=='/') ++path;
 8003b82:	782b      	ldrb	r3, [r5, #0]
 8003b84:	2b2f      	cmp	r3, #47	; 0x2f
 8003b86:	d001      	beq.n	8003b8c <coap_set_header_uri_path+0x1e>
{
 8003b88:	2700      	movs	r7, #0
 8003b8a:	e015      	b.n	8003bb8 <coap_set_header_uri_path+0x4a>
  if (path[0]=='/') ++path;
 8003b8c:	3501      	adds	r5, #1
 8003b8e:	e7fb      	b.n	8003b88 <coap_set_header_uri_path+0x1a>

  do
  {
      int i = 0;

      while (path[i] != 0 && path[i] != '/') i++;
 8003b90:	3401      	adds	r4, #1
 8003b92:	4622      	mov	r2, r4
 8003b94:	192e      	adds	r6, r5, r4
 8003b96:	5d2b      	ldrb	r3, [r5, r4]
 8003b98:	b10b      	cbz	r3, 8003b9e <coap_set_header_uri_path+0x30>
 8003b9a:	2b2f      	cmp	r3, #47	; 0x2f
 8003b9c:	d1f8      	bne.n	8003b90 <coap_set_header_uri_path+0x22>
      coap_add_multi_option(&(coap_pkt->uri_path), (uint8_t *)path, i, 0);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	f108 0044 	add.w	r0, r8, #68	; 0x44
 8003ba6:	f7ff fd39 	bl	800361c <coap_add_multi_option>

      if (path[i] == '/') i++;
 8003baa:	7833      	ldrb	r3, [r6, #0]
 8003bac:	2b2f      	cmp	r3, #47	; 0x2f
 8003bae:	d005      	beq.n	8003bbc <coap_set_header_uri_path+0x4e>
      path += i;
 8003bb0:	4425      	add	r5, r4
      length += i;
 8003bb2:	4427      	add	r7, r4
  } while (path[0] != 0);
 8003bb4:	782b      	ldrb	r3, [r5, #0]
 8003bb6:	b11b      	cbz	r3, 8003bc0 <coap_set_header_uri_path+0x52>
      int i = 0;
 8003bb8:	2400      	movs	r4, #0
      while (path[i] != 0 && path[i] != '/') i++;
 8003bba:	e7ea      	b.n	8003b92 <coap_set_header_uri_path+0x24>
      if (path[i] == '/') i++;
 8003bbc:	3401      	adds	r4, #1
 8003bbe:	e7f7      	b.n	8003bb0 <coap_set_header_uri_path+0x42>

  SET_OPTION(coap_pkt, COAP_OPTION_URI_PATH);
 8003bc0:	f898 300b 	ldrb.w	r3, [r8, #11]
 8003bc4:	f043 0308 	orr.w	r3, r3, #8
 8003bc8:	f888 300b 	strb.w	r3, [r8, #11]
  return length;
}
 8003bcc:	4638      	mov	r0, r7
 8003bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003bd2 <coap_set_header_uri_path_segment>:

int
coap_set_header_uri_path_segment(void *packet, const char *segment)
{
 8003bd2:	b570      	push	{r4, r5, r6, lr}
 8003bd4:	4604      	mov	r4, r0
  coap_packet_t *coap_pkt = (coap_packet_t *) packet;
  int length;

  if (segment == NULL || segment[0] == 0)
 8003bd6:	b111      	cbz	r1, 8003bde <coap_set_header_uri_path_segment+0xc>
 8003bd8:	460d      	mov	r5, r1
 8003bda:	780b      	ldrb	r3, [r1, #0]
 8003bdc:	b96b      	cbnz	r3, 8003bfa <coap_set_header_uri_path_segment+0x28>
  {
      coap_add_multi_option(&(coap_pkt->uri_path), NULL, 0, 1);
 8003bde:	2301      	movs	r3, #1
 8003be0:	2200      	movs	r2, #0
 8003be2:	4611      	mov	r1, r2
 8003be4:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8003be8:	f7ff fd18 	bl	800361c <coap_add_multi_option>
      length = 0;
 8003bec:	2600      	movs	r6, #0
  {
      length = strlen(segment);
      coap_add_multi_option(&(coap_pkt->uri_path), (uint8_t *)segment, length, 0);
  }

  SET_OPTION(coap_pkt, COAP_OPTION_URI_PATH);
 8003bee:	7ae3      	ldrb	r3, [r4, #11]
 8003bf0:	f043 0308 	orr.w	r3, r3, #8
 8003bf4:	72e3      	strb	r3, [r4, #11]
  return length;
}
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	bd70      	pop	{r4, r5, r6, pc}
      length = strlen(segment);
 8003bfa:	4608      	mov	r0, r1
 8003bfc:	f7fc fb10 	bl	8000220 <strlen>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4606      	mov	r6, r0
      coap_add_multi_option(&(coap_pkt->uri_path), (uint8_t *)segment, length, 0);
 8003c04:	2300      	movs	r3, #0
 8003c06:	4629      	mov	r1, r5
 8003c08:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8003c0c:	f7ff fd06 	bl	800361c <coap_add_multi_option>
 8003c10:	e7ed      	b.n	8003bee <coap_set_header_uri_path_segment+0x1c>

08003c12 <coap_set_header_uri_query>:
  return 0; //coap_pkt->uri_query_len;
}

int
coap_set_header_uri_query(void *packet, const char *query)
{
 8003c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c16:	4680      	mov	r8, r0
 8003c18:	460d      	mov	r5, r1
    int length = 0;
    coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

    free_multi_option(coap_pkt->uri_query);
 8003c1a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8003c1e:	f7ff fd2b 	bl	8003678 <free_multi_option>
    coap_pkt->uri_query = NULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80

    if (query[0]=='?') ++query;
 8003c28:	782b      	ldrb	r3, [r5, #0]
 8003c2a:	2b3f      	cmp	r3, #63	; 0x3f
 8003c2c:	d001      	beq.n	8003c32 <coap_set_header_uri_query+0x20>
{
 8003c2e:	2700      	movs	r7, #0
 8003c30:	e015      	b.n	8003c5e <coap_set_header_uri_query+0x4c>
    if (query[0]=='?') ++query;
 8003c32:	3501      	adds	r5, #1
 8003c34:	e7fb      	b.n	8003c2e <coap_set_header_uri_query+0x1c>

    do
    {
        int i = 0;

        while (query[i] != 0 && query[i] != '&') i++;
 8003c36:	3401      	adds	r4, #1
 8003c38:	4622      	mov	r2, r4
 8003c3a:	192e      	adds	r6, r5, r4
 8003c3c:	5d2b      	ldrb	r3, [r5, r4]
 8003c3e:	b10b      	cbz	r3, 8003c44 <coap_set_header_uri_query+0x32>
 8003c40:	2b26      	cmp	r3, #38	; 0x26
 8003c42:	d1f8      	bne.n	8003c36 <coap_set_header_uri_query+0x24>
        coap_add_multi_option(&(coap_pkt->uri_query), (uint8_t *)query, i, 0);
 8003c44:	2300      	movs	r3, #0
 8003c46:	4629      	mov	r1, r5
 8003c48:	f108 0080 	add.w	r0, r8, #128	; 0x80
 8003c4c:	f7ff fce6 	bl	800361c <coap_add_multi_option>

        if (query[i] == '&') i++;
 8003c50:	7833      	ldrb	r3, [r6, #0]
 8003c52:	2b26      	cmp	r3, #38	; 0x26
 8003c54:	d005      	beq.n	8003c62 <coap_set_header_uri_query+0x50>
        query += i;
 8003c56:	4425      	add	r5, r4
        length += i;
 8003c58:	4427      	add	r7, r4
    } while (query[0] != 0);
 8003c5a:	782b      	ldrb	r3, [r5, #0]
 8003c5c:	b11b      	cbz	r3, 8003c66 <coap_set_header_uri_query+0x54>
        int i = 0;
 8003c5e:	2400      	movs	r4, #0
        while (query[i] != 0 && query[i] != '&') i++;
 8003c60:	e7ea      	b.n	8003c38 <coap_set_header_uri_query+0x26>
        if (query[i] == '&') i++;
 8003c62:	3401      	adds	r4, #1
 8003c64:	e7f7      	b.n	8003c56 <coap_set_header_uri_query+0x44>

    SET_OPTION(coap_pkt, COAP_OPTION_URI_QUERY);
 8003c66:	f898 300b 	ldrb.w	r3, [r8, #11]
 8003c6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c6e:	f888 300b 	strb.w	r3, [r8, #11]
    return length;
 }
 8003c72:	4638      	mov	r0, r7
 8003c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003c78 <coap_set_header_observe>:
int
coap_set_header_observe(void *packet, uint32_t observe)
{
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  coap_pkt->observe = 0x00FFFFFF & observe;
 8003c78:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8003c7c:	6481      	str	r1, [r0, #72]	; 0x48
  SET_OPTION(coap_pkt, COAP_OPTION_OBSERVE);
 8003c7e:	7a83      	ldrb	r3, [r0, #10]
 8003c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c84:	7283      	strb	r3, [r0, #10]
  return 1;
}
 8003c86:	2001      	movs	r0, #1
 8003c88:	4770      	bx	lr

08003c8a <coap_set_header_block1>:
int
coap_set_header_block1(void *packet, uint32_t num, uint8_t more, uint16_t size)
{
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  if (size<16) return 0;
 8003c8a:	2b0f      	cmp	r3, #15
 8003c8c:	d910      	bls.n	8003cb0 <coap_set_header_block1+0x26>
  if (size>2048) return 0;
 8003c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c92:	d80f      	bhi.n	8003cb4 <coap_set_header_block1+0x2a>
  if (num>0x0FFFFF) return 0;
 8003c94:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003c98:	d20e      	bcs.n	8003cb8 <coap_set_header_block1+0x2e>

  coap_pkt->block1_num = num;
 8003c9a:	6701      	str	r1, [r0, #112]	; 0x70
  coap_pkt->block1_more = more;
 8003c9c:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
  coap_pkt->block1_size = size;
 8003ca0:	f8a0 3076 	strh.w	r3, [r0, #118]	; 0x76

  SET_OPTION(coap_pkt, COAP_OPTION_BLOCK1);
 8003ca4:	7b43      	ldrb	r3, [r0, #13]
 8003ca6:	f043 0308 	orr.w	r3, r3, #8
 8003caa:	7343      	strb	r3, [r0, #13]
  return 1;
 8003cac:	2001      	movs	r0, #1
 8003cae:	4770      	bx	lr
  if (size<16) return 0;
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	4770      	bx	lr
  if (size>2048) return 0;
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	4770      	bx	lr
  if (num>0x0FFFFF) return 0;
 8003cb8:	2000      	movs	r0, #0
}
 8003cba:	4770      	bx	lr

08003cbc <coap_set_payload>:
    return 0;
  }
}

size_t coap_set_payload(void *packet, const void *payload, size_t length)
{
 8003cbc:	4603      	mov	r3, r0
  coap_packet_t *const coap_pkt = (coap_packet_t *) packet;

  coap_pkt->payload = (uint8_t *) payload;
 8003cbe:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  coap_pkt->payload_len = (uint16_t)(length);
 8003cc2:	b290      	uxth	r0, r2
 8003cc4:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88

  return coap_pkt->payload_len;
}
 8003cc8:	4770      	bx	lr

08003cca <prv_findAttributes>:
    lwm2m_watcher_t * watcherP;
    lwm2m_attributes_t * paramP;

    paramP = NULL;

    if (contextP == NULL) return NULL;
 8003cca:	b180      	cbz	r0, 8003cee <prv_findAttributes+0x24>
{
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	4614      	mov	r4, r2
    if (serverP == NULL) return NULL;
 8003cd0:	b172      	cbz	r2, 8003cf0 <prv_findAttributes+0x26>

    observedP = observe_findByUri(contextP, uriP);
 8003cd2:	f001 f8cb 	bl	8004e6c <observe_findByUri>
    if (observedP == NULL || observedP->watcherList == NULL) return NULL;
 8003cd6:	b160      	cbz	r0, 8003cf2 <prv_findAttributes+0x28>
 8003cd8:	68c3      	ldr	r3, [r0, #12]
 8003cda:	b15b      	cbz	r3, 8003cf4 <prv_findAttributes+0x2a>
    paramP = NULL;
 8003cdc:	2000      	movs	r0, #0
 8003cde:	e000      	b.n	8003ce2 <prv_findAttributes+0x18>

    for (watcherP = observedP->watcherList; watcherP != NULL; watcherP = watcherP->next)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	b133      	cbz	r3, 8003cf2 <prv_findAttributes+0x28>
    {
        if (watcherP->server == serverP)
 8003ce4:	6899      	ldr	r1, [r3, #8]
 8003ce6:	42a1      	cmp	r1, r4
 8003ce8:	d1fa      	bne.n	8003ce0 <prv_findAttributes+0x16>
        {
            paramP = watcherP->parameters;
 8003cea:	68d8      	ldr	r0, [r3, #12]
 8003cec:	e7f8      	b.n	8003ce0 <prv_findAttributes+0x16>
        }
    }

    return paramP;
}
 8003cee:	4770      	bx	lr
    if (serverP == NULL) return NULL;
 8003cf0:	4610      	mov	r0, r2
}
 8003cf2:	bd10      	pop	{r4, pc}
    if (observedP == NULL || observedP->watcherList == NULL) return NULL;
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	e7fc      	b.n	8003cf2 <prv_findAttributes+0x28>

08003cf8 <prv_serializeAttributes>:
                                   lwm2m_server_t * serverP,
                                   lwm2m_attributes_t * objectParamP,
                                   uint8_t * buffer,
                                   size_t uriLen,
                                   size_t bufferLen)
{
 8003cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	461f      	mov	r7, r3
 8003d00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003d02:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8003d06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int res;
    lwm2m_attributes_t * paramP;

    head = 0;

    paramP = prv_findAttributes(contextP, uriP, serverP);
 8003d08:	f7ff ffdf 	bl	8003cca <prv_findAttributes>
    if (paramP == NULL) paramP = objectParamP;
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	f000 80bb 	beq.w	8003e8a <prv_serializeAttributes+0x192>

    if (paramP != NULL)
 8003d14:	2e00      	cmp	r6, #0
 8003d16:	f000 8108 	beq.w	8003f2a <prv_serializeAttributes+0x232>
    {
        head = uriLen;
 8003d1a:	4642      	mov	r2, r8

        if (paramP->toSet & LWM2M_ATTR_FLAG_MIN_PERIOD)
 8003d1c:	7833      	ldrb	r3, [r6, #0]
 8003d1e:	f013 0f01 	tst.w	r3, #1
 8003d22:	f000 80b4 	beq.w	8003e8e <prv_serializeAttributes+0x196>
        {
            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
 8003d26:	45a8      	cmp	r8, r5
 8003d28:	f000 8101 	beq.w	8003f2e <prv_serializeAttributes+0x236>
 8003d2c:	233b      	movs	r3, #59	; 0x3b
 8003d2e:	f804 3008 	strb.w	r3, [r4, r8]
 8003d32:	f108 0301 	add.w	r3, r8, #1
            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_MIN_PERIOD_STR, ATTR_MIN_PERIOD_LEN);
 8003d36:	1aea      	subs	r2, r5, r3
 8003d38:	2a04      	cmp	r2, #4
 8003d3a:	f240 80fb 	bls.w	8003f34 <prv_serializeAttributes+0x23c>
 8003d3e:	18e1      	adds	r1, r4, r3
 8003d40:	4a9c      	ldr	r2, [pc, #624]	; (8003fb4 <prv_serializeAttributes+0x2bc>)
 8003d42:	6810      	ldr	r0, [r2, #0]
 8003d44:	50e0      	str	r0, [r4, r3]
 8003d46:	7913      	ldrb	r3, [r2, #4]
 8003d48:	710b      	strb	r3, [r1, #4]
 8003d4a:	f108 0906 	add.w	r9, r8, #6

            res = utils_intToText(paramP->minPeriod, buffer + head, bufferLen - head);
 8003d4e:	eba5 0309 	sub.w	r3, r5, r9
 8003d52:	eb04 0209 	add.w	r2, r4, r9
 8003d56:	6870      	ldr	r0, [r6, #4]
 8003d58:	2100      	movs	r1, #0
 8003d5a:	f002 fc25 	bl	80065a8 <utils_intToText>
            if (res <= 0) return -1;
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	f340 80eb 	ble.w	8003f3a <prv_serializeAttributes+0x242>
            head += res;
 8003d64:	eb09 0200 	add.w	r2, r9, r0
                res = utils_intToText(objectParamP->minPeriod, buffer + head, bufferLen - head);
                if (res <= 0) return -1;
                head += res;
            }
        }
        if (paramP->toSet & LWM2M_ATTR_FLAG_MAX_PERIOD)
 8003d68:	7833      	ldrb	r3, [r6, #0]
 8003d6a:	f013 0f02 	tst.w	r3, #2
 8003d6e:	f000 80b5 	beq.w	8003edc <prv_serializeAttributes+0x1e4>
        {
            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
 8003d72:	42aa      	cmp	r2, r5
 8003d74:	f000 80ed 	beq.w	8003f52 <prv_serializeAttributes+0x25a>
 8003d78:	233b      	movs	r3, #59	; 0x3b
 8003d7a:	54a3      	strb	r3, [r4, r2]
 8003d7c:	1c53      	adds	r3, r2, #1
            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_MAX_PERIOD_STR, ATTR_MAX_PERIOD_LEN);
 8003d7e:	1ae9      	subs	r1, r5, r3
 8003d80:	2904      	cmp	r1, #4
 8003d82:	f240 80e9 	bls.w	8003f58 <prv_serializeAttributes+0x260>
 8003d86:	18e7      	adds	r7, r4, r3
 8003d88:	498b      	ldr	r1, [pc, #556]	; (8003fb8 <prv_serializeAttributes+0x2c0>)
 8003d8a:	6808      	ldr	r0, [r1, #0]
 8003d8c:	50e0      	str	r0, [r4, r3]
 8003d8e:	790b      	ldrb	r3, [r1, #4]
 8003d90:	713b      	strb	r3, [r7, #4]
 8003d92:	1d97      	adds	r7, r2, #6

            res = utils_intToText(paramP->maxPeriod, buffer + head, bufferLen - head);
 8003d94:	1beb      	subs	r3, r5, r7
 8003d96:	19e2      	adds	r2, r4, r7
 8003d98:	68b0      	ldr	r0, [r6, #8]
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	f002 fc04 	bl	80065a8 <utils_intToText>
            if (res <= 0) return -1;
 8003da0:	2800      	cmp	r0, #0
 8003da2:	f340 80dc 	ble.w	8003f5e <prv_serializeAttributes+0x266>
            head += res;
 8003da6:	183a      	adds	r2, r7, r0
                res = utils_intToText(objectParamP->maxPeriod, buffer + head, bufferLen - head);
                if (res <= 0) return -1;
                head += res;
            }
        }
        if (paramP->toSet & LWM2M_ATTR_FLAG_GREATER_THAN)
 8003da8:	7833      	ldrb	r3, [r6, #0]
 8003daa:	f013 0f04 	tst.w	r3, #4
 8003dae:	d01c      	beq.n	8003dea <prv_serializeAttributes+0xf2>
        {
            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
 8003db0:	42aa      	cmp	r2, r5
 8003db2:	f000 80e0 	beq.w	8003f76 <prv_serializeAttributes+0x27e>
 8003db6:	233b      	movs	r3, #59	; 0x3b
 8003db8:	54a3      	strb	r3, [r4, r2]
 8003dba:	1c53      	adds	r3, r2, #1
            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_GREATER_THAN_STR, ATTR_GREATER_THAN_LEN);
 8003dbc:	1ae9      	subs	r1, r5, r3
 8003dbe:	2902      	cmp	r1, #2
 8003dc0:	f240 80dc 	bls.w	8003f7c <prv_serializeAttributes+0x284>
 8003dc4:	18e0      	adds	r0, r4, r3
 8003dc6:	497d      	ldr	r1, [pc, #500]	; (8003fbc <prv_serializeAttributes+0x2c4>)
 8003dc8:	880f      	ldrh	r7, [r1, #0]
 8003dca:	7889      	ldrb	r1, [r1, #2]
 8003dcc:	52e7      	strh	r7, [r4, r3]
 8003dce:	7081      	strb	r1, [r0, #2]
 8003dd0:	1d17      	adds	r7, r2, #4

            res = utils_floatToText(paramP->greaterThan, buffer + head, bufferLen - head, false);
 8003dd2:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	1beb      	subs	r3, r5, r7
 8003ddc:	19e2      	adds	r2, r4, r7
 8003dde:	f002 fc1f 	bl	8006620 <utils_floatToText>
            if (res <= 0) return -1;
 8003de2:	2800      	cmp	r0, #0
 8003de4:	f340 80cd 	ble.w	8003f82 <prv_serializeAttributes+0x28a>
            head += res;
 8003de8:	183a      	adds	r2, r7, r0
        }
        if (paramP->toSet & LWM2M_ATTR_FLAG_LESS_THAN)
 8003dea:	7833      	ldrb	r3, [r6, #0]
 8003dec:	f013 0f08 	tst.w	r3, #8
 8003df0:	d01c      	beq.n	8003e2c <prv_serializeAttributes+0x134>
        {
            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
 8003df2:	42aa      	cmp	r2, r5
 8003df4:	f000 80c8 	beq.w	8003f88 <prv_serializeAttributes+0x290>
 8003df8:	233b      	movs	r3, #59	; 0x3b
 8003dfa:	54a3      	strb	r3, [r4, r2]
 8003dfc:	1c53      	adds	r3, r2, #1
            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_LESS_THAN_STR, ATTR_LESS_THAN_LEN);
 8003dfe:	1ae9      	subs	r1, r5, r3
 8003e00:	2902      	cmp	r1, #2
 8003e02:	f240 80c4 	bls.w	8003f8e <prv_serializeAttributes+0x296>
 8003e06:	18e0      	adds	r0, r4, r3
 8003e08:	496d      	ldr	r1, [pc, #436]	; (8003fc0 <prv_serializeAttributes+0x2c8>)
 8003e0a:	880f      	ldrh	r7, [r1, #0]
 8003e0c:	7889      	ldrb	r1, [r1, #2]
 8003e0e:	52e7      	strh	r7, [r4, r3]
 8003e10:	7081      	strb	r1, [r0, #2]
 8003e12:	1d17      	adds	r7, r2, #4

            res = utils_floatToText(paramP->lessThan, buffer + head, bufferLen - head, false);
 8003e14:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	1beb      	subs	r3, r5, r7
 8003e1e:	19e2      	adds	r2, r4, r7
 8003e20:	f002 fbfe 	bl	8006620 <utils_floatToText>
            if (res <= 0) return -1;
 8003e24:	2800      	cmp	r0, #0
 8003e26:	f340 80b5 	ble.w	8003f94 <prv_serializeAttributes+0x29c>
            head += res;
 8003e2a:	183a      	adds	r2, r7, r0
        }
        if (paramP->toSet & LWM2M_ATTR_FLAG_STEP)
 8003e2c:	7833      	ldrb	r3, [r6, #0]
 8003e2e:	f013 0f10 	tst.w	r3, #16
 8003e32:	d01c      	beq.n	8003e6e <prv_serializeAttributes+0x176>
        {
            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
 8003e34:	42aa      	cmp	r2, r5
 8003e36:	f000 80b0 	beq.w	8003f9a <prv_serializeAttributes+0x2a2>
 8003e3a:	233b      	movs	r3, #59	; 0x3b
 8003e3c:	54a3      	strb	r3, [r4, r2]
 8003e3e:	1c53      	adds	r3, r2, #1
            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_STEP_STR, ATTR_STEP_LEN);
 8003e40:	1ae9      	subs	r1, r5, r3
 8003e42:	2902      	cmp	r1, #2
 8003e44:	f240 80ac 	bls.w	8003fa0 <prv_serializeAttributes+0x2a8>
 8003e48:	18e0      	adds	r0, r4, r3
 8003e4a:	495e      	ldr	r1, [pc, #376]	; (8003fc4 <prv_serializeAttributes+0x2cc>)
 8003e4c:	880f      	ldrh	r7, [r1, #0]
 8003e4e:	7889      	ldrb	r1, [r1, #2]
 8003e50:	52e7      	strh	r7, [r4, r3]
 8003e52:	7081      	strb	r1, [r0, #2]
 8003e54:	1d17      	adds	r7, r2, #4

            res = utils_floatToText(paramP->step, buffer + head, bufferLen - head, false);
 8003e56:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	1beb      	subs	r3, r5, r7
 8003e60:	19e2      	adds	r2, r4, r7
 8003e62:	f002 fbdd 	bl	8006620 <utils_floatToText>
            if (res <= 0) return -1;
 8003e66:	2800      	cmp	r0, #0
 8003e68:	f340 809d 	ble.w	8003fa6 <prv_serializeAttributes+0x2ae>
            head += res;
 8003e6c:	183a      	adds	r2, r7, r0
        }
        PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ITEM_ATTR_END, LINK_ITEM_ATTR_END_SIZE);
 8003e6e:	42aa      	cmp	r2, r5
 8003e70:	f000 809c 	beq.w	8003fac <prv_serializeAttributes+0x2b4>
 8003e74:	232c      	movs	r3, #44	; 0x2c
 8003e76:	54a3      	strb	r3, [r4, r2]
 8003e78:	1c50      	adds	r0, r2, #1
    }

    if (head > 0) head -= uriLen + 1;
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	dd02      	ble.n	8003e84 <prv_serializeAttributes+0x18c>
 8003e7e:	eba0 0008 	sub.w	r0, r0, r8
 8003e82:	3801      	subs	r0, #1

    return head;
}
 8003e84:	b003      	add	sp, #12
 8003e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (paramP == NULL) paramP = objectParamP;
 8003e8a:	463e      	mov	r6, r7
 8003e8c:	e742      	b.n	8003d14 <prv_serializeAttributes+0x1c>
        else if (objectParamP != NULL)
 8003e8e:	2f00      	cmp	r7, #0
 8003e90:	f43f af6a 	beq.w	8003d68 <prv_serializeAttributes+0x70>
            if (objectParamP->toSet & LWM2M_ATTR_FLAG_MIN_PERIOD)
 8003e94:	783b      	ldrb	r3, [r7, #0]
 8003e96:	f013 0f01 	tst.w	r3, #1
 8003e9a:	f43f af65 	beq.w	8003d68 <prv_serializeAttributes+0x70>
                PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
 8003e9e:	45a8      	cmp	r8, r5
 8003ea0:	d04e      	beq.n	8003f40 <prv_serializeAttributes+0x248>
 8003ea2:	233b      	movs	r3, #59	; 0x3b
 8003ea4:	f804 3008 	strb.w	r3, [r4, r8]
 8003ea8:	f108 0301 	add.w	r3, r8, #1
                PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_MIN_PERIOD_STR, ATTR_MIN_PERIOD_LEN);
 8003eac:	1aea      	subs	r2, r5, r3
 8003eae:	2a04      	cmp	r2, #4
 8003eb0:	d949      	bls.n	8003f46 <prv_serializeAttributes+0x24e>
 8003eb2:	18e1      	adds	r1, r4, r3
 8003eb4:	4a3f      	ldr	r2, [pc, #252]	; (8003fb4 <prv_serializeAttributes+0x2bc>)
 8003eb6:	6810      	ldr	r0, [r2, #0]
 8003eb8:	50e0      	str	r0, [r4, r3]
 8003eba:	7913      	ldrb	r3, [r2, #4]
 8003ebc:	710b      	strb	r3, [r1, #4]
 8003ebe:	f108 0906 	add.w	r9, r8, #6
                res = utils_intToText(objectParamP->minPeriod, buffer + head, bufferLen - head);
 8003ec2:	eba5 0309 	sub.w	r3, r5, r9
 8003ec6:	eb04 0209 	add.w	r2, r4, r9
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	2100      	movs	r1, #0
 8003ece:	f002 fb6b 	bl	80065a8 <utils_intToText>
                if (res <= 0) return -1;
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	dd3a      	ble.n	8003f4c <prv_serializeAttributes+0x254>
                head += res;
 8003ed6:	eb09 0200 	add.w	r2, r9, r0
 8003eda:	e745      	b.n	8003d68 <prv_serializeAttributes+0x70>
        else if (objectParamP != NULL)
 8003edc:	2f00      	cmp	r7, #0
 8003ede:	f43f af63 	beq.w	8003da8 <prv_serializeAttributes+0xb0>
            if (objectParamP->toSet & LWM2M_ATTR_FLAG_MAX_PERIOD)
 8003ee2:	783b      	ldrb	r3, [r7, #0]
 8003ee4:	f013 0f02 	tst.w	r3, #2
 8003ee8:	f43f af5e 	beq.w	8003da8 <prv_serializeAttributes+0xb0>
                PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
 8003eec:	42aa      	cmp	r2, r5
 8003eee:	d039      	beq.n	8003f64 <prv_serializeAttributes+0x26c>
 8003ef0:	233b      	movs	r3, #59	; 0x3b
 8003ef2:	54a3      	strb	r3, [r4, r2]
 8003ef4:	1c53      	adds	r3, r2, #1
                PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_MAX_PERIOD_STR, ATTR_MAX_PERIOD_LEN);
 8003ef6:	1ae9      	subs	r1, r5, r3
 8003ef8:	2904      	cmp	r1, #4
 8003efa:	d936      	bls.n	8003f6a <prv_serializeAttributes+0x272>
 8003efc:	eb04 0c03 	add.w	ip, r4, r3
 8003f00:	492d      	ldr	r1, [pc, #180]	; (8003fb8 <prv_serializeAttributes+0x2c0>)
 8003f02:	6808      	ldr	r0, [r1, #0]
 8003f04:	50e0      	str	r0, [r4, r3]
 8003f06:	790b      	ldrb	r3, [r1, #4]
 8003f08:	f88c 3004 	strb.w	r3, [ip, #4]
 8003f0c:	f102 0906 	add.w	r9, r2, #6
                res = utils_intToText(objectParamP->maxPeriod, buffer + head, bufferLen - head);
 8003f10:	eba5 0309 	sub.w	r3, r5, r9
 8003f14:	eb04 0209 	add.w	r2, r4, r9
 8003f18:	68b8      	ldr	r0, [r7, #8]
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	f002 fb44 	bl	80065a8 <utils_intToText>
                if (res <= 0) return -1;
 8003f20:	2800      	cmp	r0, #0
 8003f22:	dd25      	ble.n	8003f70 <prv_serializeAttributes+0x278>
                head += res;
 8003f24:	eb09 0200 	add.w	r2, r9, r0
 8003f28:	e73e      	b.n	8003da8 <prv_serializeAttributes+0xb0>
    head = 0;
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	e7aa      	b.n	8003e84 <prv_serializeAttributes+0x18c>
            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
 8003f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f32:	e7a7      	b.n	8003e84 <prv_serializeAttributes+0x18c>
            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_MIN_PERIOD_STR, ATTR_MIN_PERIOD_LEN);
 8003f34:	f04f 30ff 	mov.w	r0, #4294967295
 8003f38:	e7a4      	b.n	8003e84 <prv_serializeAttributes+0x18c>
            if (res <= 0) return -1;
 8003f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3e:	e7a1      	b.n	8003e84 <prv_serializeAttributes+0x18c>
                PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
 8003f40:	f04f 30ff 	mov.w	r0, #4294967295
 8003f44:	e79e      	b.n	8003e84 <prv_serializeAttributes+0x18c>
                PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_MIN_PERIOD_STR, ATTR_MIN_PERIOD_LEN);
 8003f46:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4a:	e79b      	b.n	8003e84 <prv_serializeAttributes+0x18c>
                if (res <= 0) return -1;
 8003f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f50:	e798      	b.n	8003e84 <prv_serializeAttributes+0x18c>
            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
 8003f52:	f04f 30ff 	mov.w	r0, #4294967295
 8003f56:	e795      	b.n	8003e84 <prv_serializeAttributes+0x18c>
            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_MAX_PERIOD_STR, ATTR_MAX_PERIOD_LEN);
 8003f58:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5c:	e792      	b.n	8003e84 <prv_serializeAttributes+0x18c>
            if (res <= 0) return -1;
 8003f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f62:	e78f      	b.n	8003e84 <prv_serializeAttributes+0x18c>
                PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	e78c      	b.n	8003e84 <prv_serializeAttributes+0x18c>
                PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_MAX_PERIOD_STR, ATTR_MAX_PERIOD_LEN);
 8003f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6e:	e789      	b.n	8003e84 <prv_serializeAttributes+0x18c>
                if (res <= 0) return -1;
 8003f70:	f04f 30ff 	mov.w	r0, #4294967295
 8003f74:	e786      	b.n	8003e84 <prv_serializeAttributes+0x18c>
            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
 8003f76:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7a:	e783      	b.n	8003e84 <prv_serializeAttributes+0x18c>
            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_GREATER_THAN_STR, ATTR_GREATER_THAN_LEN);
 8003f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f80:	e780      	b.n	8003e84 <prv_serializeAttributes+0x18c>
            if (res <= 0) return -1;
 8003f82:	f04f 30ff 	mov.w	r0, #4294967295
 8003f86:	e77d      	b.n	8003e84 <prv_serializeAttributes+0x18c>
            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
 8003f88:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8c:	e77a      	b.n	8003e84 <prv_serializeAttributes+0x18c>
            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_LESS_THAN_STR, ATTR_LESS_THAN_LEN);
 8003f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f92:	e777      	b.n	8003e84 <prv_serializeAttributes+0x18c>
            if (res <= 0) return -1;
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295
 8003f98:	e774      	b.n	8003e84 <prv_serializeAttributes+0x18c>
            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
 8003f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9e:	e771      	b.n	8003e84 <prv_serializeAttributes+0x18c>
            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_STEP_STR, ATTR_STEP_LEN);
 8003fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa4:	e76e      	b.n	8003e84 <prv_serializeAttributes+0x18c>
            if (res <= 0) return -1;
 8003fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8003faa:	e76b      	b.n	8003e84 <prv_serializeAttributes+0x18c>
        PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ITEM_ATTR_END, LINK_ITEM_ATTR_END_SIZE);
 8003fac:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb0:	e768      	b.n	8003e84 <prv_serializeAttributes+0x18c>
 8003fb2:	bf00      	nop
 8003fb4:	0801b7f4 	.word	0x0801b7f4
 8003fb8:	0801b7fc 	.word	0x0801b7fc
 8003fbc:	0801b804 	.word	0x0801b804
 8003fc0:	0801b808 	.word	0x0801b808
 8003fc4:	0801b80c 	.word	0x0801b80c

08003fc8 <prv_serializeLinkData>:
                                 lwm2m_uri_t * parentUriP,
                                 uint8_t * parentUriStr,
                                 size_t parentUriLen,
                                 uint8_t * buffer,
                                 size_t bufferLen)
{
 8003fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fcc:	b091      	sub	sp, #68	; 0x44
 8003fce:	4683      	mov	fp, r0
 8003fd0:	460d      	mov	r5, r1
 8003fd2:	4690      	mov	r8, r2
 8003fd4:	9307      	str	r3, [sp, #28]
 8003fd6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8003fd8:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8003fda:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
    int res;
    lwm2m_uri_t uri;

    head = 0;

    switch (tlvP->type)
 8003fde:	780b      	ldrb	r3, [r1, #0]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d078      	beq.n	80040d6 <prv_serializeLinkData+0x10e>
 8003fe4:	d917      	bls.n	8004016 <prv_serializeLinkData+0x4e>
 8003fe6:	3b03      	subs	r3, #3
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	f200 80e6 	bhi.w	80041bc <prv_serializeLinkData+0x1f4>
    case LWM2M_TYPE_FLOAT:
    case LWM2M_TYPE_BOOLEAN:
    case LWM2M_TYPE_OBJECT_LINK:
    case LWM2M_TYPE_CORE_LINK:
    case LWM2M_TYPE_MULTIPLE_RESOURCE:
        if (bufferLen < LINK_ITEM_START_SIZE) return -1;
 8003ff0:	f1b9 0f00 	cmp.w	r9, #0
 8003ff4:	f000 80e5 	beq.w	80041c2 <prv_serializeLinkData+0x1fa>
        memcpy(buffer + head, LINK_ITEM_START, LINK_ITEM_START_SIZE);
 8003ff8:	233c      	movs	r3, #60	; 0x3c
 8003ffa:	703b      	strb	r3, [r7, #0]
        head = LINK_ITEM_START_SIZE;

        if (parentUriLen > 0)
 8003ffc:	b19c      	cbz	r4, 8004026 <prv_serializeLinkData+0x5e>
        {
            if (bufferLen - head < parentUriLen) return -1;
 8003ffe:	f109 33ff 	add.w	r3, r9, #4294967295
 8004002:	42a3      	cmp	r3, r4
 8004004:	f0c0 80e0 	bcc.w	80041c8 <prv_serializeLinkData+0x200>
            memcpy(buffer + head, parentUriStr, parentUriLen);
 8004008:	4622      	mov	r2, r4
 800400a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800400c:	1c78      	adds	r0, r7, #1
 800400e:	f014 f8af 	bl	8018170 <memcpy>
            head += parentUriLen;
 8004012:	3401      	adds	r4, #1
 8004014:	e008      	b.n	8004028 <prv_serializeLinkData+0x60>
    switch (tlvP->type)
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0ea      	beq.n	8003ff0 <prv_serializeLinkData+0x28>
 800401a:	f04f 34ff 	mov.w	r4, #4294967295
    default:
        return -1;
    }

    return head;
}
 800401e:	4620      	mov	r0, r4
 8004020:	b011      	add	sp, #68	; 0x44
 8004022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        head = LINK_ITEM_START_SIZE;
 8004026:	2401      	movs	r4, #1
        if (bufferLen - head < LINK_URI_SEPARATOR_SIZE) return -1;
 8004028:	454c      	cmp	r4, r9
 800402a:	f000 80d0 	beq.w	80041ce <prv_serializeLinkData+0x206>
        memcpy(buffer + head, LINK_URI_SEPARATOR, LINK_URI_SEPARATOR_SIZE);
 800402e:	232f      	movs	r3, #47	; 0x2f
 8004030:	553b      	strb	r3, [r7, r4]
        head += LINK_URI_SEPARATOR_SIZE;
 8004032:	1c66      	adds	r6, r4, #1
        res = utils_intToText(tlvP->id, buffer + head, bufferLen - head);
 8004034:	eba9 0306 	sub.w	r3, r9, r6
 8004038:	19ba      	adds	r2, r7, r6
 800403a:	8868      	ldrh	r0, [r5, #2]
 800403c:	2100      	movs	r1, #0
 800403e:	f002 fab3 	bl	80065a8 <utils_intToText>
        if (res <= 0) return -1;
 8004042:	1e04      	subs	r4, r0, #0
 8004044:	f340 80c6 	ble.w	80041d4 <prv_serializeLinkData+0x20c>
        head += res;
 8004048:	4434      	add	r4, r6
        if (tlvP->type == LWM2M_TYPE_MULTIPLE_RESOURCE)
 800404a:	782b      	ldrb	r3, [r5, #0]
 800404c:	2b03      	cmp	r3, #3
 800404e:	d024      	beq.n	800409a <prv_serializeLinkData+0xd2>
            if (bufferLen - head < LINK_ITEM_END_SIZE) return -1;
 8004050:	eba9 0304 	sub.w	r3, r9, r4
 8004054:	2b01      	cmp	r3, #1
 8004056:	f240 80c9 	bls.w	80041ec <prv_serializeLinkData+0x224>
            memcpy(buffer + head, LINK_ITEM_END, LINK_ITEM_END_SIZE);
 800405a:	4b67      	ldr	r3, [pc, #412]	; (80041f8 <prv_serializeLinkData+0x230>)
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	533b      	strh	r3, [r7, r4]
            head += LINK_ITEM_END_SIZE;
 8004060:	3402      	adds	r4, #2
        if (serverP != NULL)
 8004062:	f1b8 0f00 	cmp.w	r8, #0
 8004066:	d0da      	beq.n	800401e <prv_serializeLinkData+0x56>
            memcpy(&uri, parentUriP, sizeof(lwm2m_uri_t));
 8004068:	ab0e      	add	r3, sp, #56	; 0x38
 800406a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800406c:	6810      	ldr	r0, [r2, #0]
 800406e:	6851      	ldr	r1, [r2, #4]
 8004070:	c303      	stmia	r3!, {r0, r1}
            uri.resourceId = tlvP->id;
 8004072:	886b      	ldrh	r3, [r5, #2]
 8004074:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            res = prv_serializeAttributes(contextP, &uri, serverP, objectParamP, buffer, head - 1, bufferLen);
 8004078:	1e63      	subs	r3, r4, #1
 800407a:	f8cd 9008 	str.w	r9, [sp, #8]
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	9700      	str	r7, [sp, #0]
 8004082:	9b07      	ldr	r3, [sp, #28]
 8004084:	4642      	mov	r2, r8
 8004086:	a90e      	add	r1, sp, #56	; 0x38
 8004088:	4658      	mov	r0, fp
 800408a:	f7ff fe35 	bl	8003cf8 <prv_serializeAttributes>
            if (res < 0) return -1;    // careful, 0 is valid
 800408e:	2800      	cmp	r0, #0
 8004090:	f2c0 80af 	blt.w	80041f2 <prv_serializeLinkData+0x22a>
            if (res > 0) head += res;
 8004094:	ddc3      	ble.n	800401e <prv_serializeLinkData+0x56>
 8004096:	4404      	add	r4, r0
 8004098:	e7c1      	b.n	800401e <prv_serializeLinkData+0x56>
            if (bufferLen - head < LINK_ITEM_DIM_START_SIZE) return -1;
 800409a:	eba9 0304 	sub.w	r3, r9, r4
 800409e:	2b05      	cmp	r3, #5
 80040a0:	f240 809b 	bls.w	80041da <prv_serializeLinkData+0x212>
            memcpy(buffer + head, LINK_ITEM_DIM_START, LINK_ITEM_DIM_START_SIZE);
 80040a4:	193a      	adds	r2, r7, r4
 80040a6:	4b55      	ldr	r3, [pc, #340]	; (80041fc <prv_serializeLinkData+0x234>)
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	5138      	str	r0, [r7, r4]
 80040ac:	889b      	ldrh	r3, [r3, #4]
 80040ae:	8093      	strh	r3, [r2, #4]
            head += LINK_ITEM_DIM_START_SIZE;
 80040b0:	3406      	adds	r4, #6
            res = utils_intToText(tlvP->value.asChildren.count, buffer + head, bufferLen - head);
 80040b2:	eba9 0304 	sub.w	r3, r9, r4
 80040b6:	193a      	adds	r2, r7, r4
 80040b8:	68a8      	ldr	r0, [r5, #8]
 80040ba:	2100      	movs	r1, #0
 80040bc:	f002 fa74 	bl	80065a8 <utils_intToText>
            if (res <= 0) return -1;
 80040c0:	2800      	cmp	r0, #0
 80040c2:	f340 808d 	ble.w	80041e0 <prv_serializeLinkData+0x218>
            head += res;
 80040c6:	4404      	add	r4, r0
            if (bufferLen - head < LINK_ITEM_ATTR_END_SIZE) return -1;
 80040c8:	454c      	cmp	r4, r9
 80040ca:	f000 808c 	beq.w	80041e6 <prv_serializeLinkData+0x21e>
            memcpy(buffer + head, LINK_ITEM_ATTR_END, LINK_ITEM_ATTR_END_SIZE);
 80040ce:	232c      	movs	r3, #44	; 0x2c
 80040d0:	553b      	strb	r3, [r7, r4]
            head += LINK_ITEM_ATTR_END_SIZE;
 80040d2:	3401      	adds	r4, #1
 80040d4:	e7c5      	b.n	8004062 <prv_serializeLinkData+0x9a>
        if (parentUriLen > 0)
 80040d6:	b144      	cbz	r4, 80040ea <prv_serializeLinkData+0x122>
            if (URI_MAX_STRING_LEN < parentUriLen) return -1;
 80040d8:	2c18      	cmp	r4, #24
 80040da:	d86c      	bhi.n	80041b6 <prv_serializeLinkData+0x1ee>
            memcpy(uriStr, parentUriStr, parentUriLen);
 80040dc:	4622      	mov	r2, r4
 80040de:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80040e0:	a808      	add	r0, sp, #32
 80040e2:	f014 f845 	bl	8018170 <memcpy>
        if (URI_MAX_STRING_LEN - uriLen < LINK_URI_SEPARATOR_SIZE) return -1;
 80040e6:	2c18      	cmp	r4, #24
 80040e8:	d065      	beq.n	80041b6 <prv_serializeLinkData+0x1ee>
        memcpy(uriStr + uriLen, LINK_URI_SEPARATOR, LINK_URI_SEPARATOR_SIZE);
 80040ea:	aa08      	add	r2, sp, #32
 80040ec:	232f      	movs	r3, #47	; 0x2f
 80040ee:	5513      	strb	r3, [r2, r4]
        uriLen += LINK_URI_SEPARATOR_SIZE;
 80040f0:	f104 0a01 	add.w	sl, r4, #1
        res = utils_intToText(tlvP->id, uriStr + uriLen, URI_MAX_STRING_LEN - uriLen);
 80040f4:	f1c4 0317 	rsb	r3, r4, #23
 80040f8:	4452      	add	r2, sl
 80040fa:	8868      	ldrh	r0, [r5, #2]
 80040fc:	2100      	movs	r1, #0
 80040fe:	f002 fa53 	bl	80065a8 <utils_intToText>
        if (res <= 0) return -1;
 8004102:	2800      	cmp	r0, #0
 8004104:	dd57      	ble.n	80041b6 <prv_serializeLinkData+0x1ee>
        uriLen += res;
 8004106:	4482      	add	sl, r0
        memcpy(&uri, parentUriP, sizeof(lwm2m_uri_t));
 8004108:	ab0e      	add	r3, sp, #56	; 0x38
 800410a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800410c:	6810      	ldr	r0, [r2, #0]
 800410e:	6851      	ldr	r1, [r2, #4]
 8004110:	c303      	stmia	r3!, {r0, r1}
        uri.instanceId = tlvP->id;
 8004112:	886b      	ldrh	r3, [r5, #2]
 8004114:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ITEM_START, LINK_ITEM_START_SIZE);
 8004118:	f1b9 0f00 	cmp.w	r9, #0
 800411c:	d04b      	beq.n	80041b6 <prv_serializeLinkData+0x1ee>
 800411e:	233c      	movs	r3, #60	; 0x3c
 8004120:	703b      	strb	r3, [r7, #0]
        PRV_CONCAT_STR(buffer, bufferLen, head, uriStr, uriLen);
 8004122:	f109 33ff 	add.w	r3, r9, #4294967295
 8004126:	4553      	cmp	r3, sl
 8004128:	d345      	bcc.n	80041b6 <prv_serializeLinkData+0x1ee>
 800412a:	4652      	mov	r2, sl
 800412c:	a908      	add	r1, sp, #32
 800412e:	1c78      	adds	r0, r7, #1
 8004130:	f014 f81e 	bl	8018170 <memcpy>
 8004134:	f10a 0301 	add.w	r3, sl, #1
        PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ITEM_END, LINK_ITEM_END_SIZE);
 8004138:	eba9 0203 	sub.w	r2, r9, r3
 800413c:	2a01      	cmp	r2, #1
 800413e:	d93a      	bls.n	80041b6 <prv_serializeLinkData+0x1ee>
 8004140:	4a2d      	ldr	r2, [pc, #180]	; (80041f8 <prv_serializeLinkData+0x230>)
 8004142:	8812      	ldrh	r2, [r2, #0]
 8004144:	52fa      	strh	r2, [r7, r3]
 8004146:	f10a 0403 	add.w	r4, sl, #3
        if (serverP != NULL)
 800414a:	f1b8 0f00 	cmp.w	r8, #0
 800414e:	d00f      	beq.n	8004170 <prv_serializeLinkData+0x1a8>
            res = prv_serializeAttributes(contextP, &uri, serverP, NULL, buffer, head - 1, bufferLen);
 8004150:	f8cd 9008 	str.w	r9, [sp, #8]
 8004154:	f10a 0302 	add.w	r3, sl, #2
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	9700      	str	r7, [sp, #0]
 800415c:	2300      	movs	r3, #0
 800415e:	4642      	mov	r2, r8
 8004160:	a90e      	add	r1, sp, #56	; 0x38
 8004162:	4658      	mov	r0, fp
 8004164:	f7ff fdc8 	bl	8003cf8 <prv_serializeAttributes>
            if (res < 0) return -1;    // careful, 0 is valid
 8004168:	2800      	cmp	r0, #0
 800416a:	db24      	blt.n	80041b6 <prv_serializeLinkData+0x1ee>
            if (res == 0) head = 0;    // rewind
 800416c:	b308      	cbz	r0, 80041b2 <prv_serializeLinkData+0x1ea>
            else head += res;
 800416e:	4404      	add	r4, r0
            if (res == 0) head = 0;    // rewind
 8004170:	2600      	movs	r6, #0
 8004172:	971d      	str	r7, [sp, #116]	; 0x74
 8004174:	4657      	mov	r7, sl
 8004176:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
        for (index = 0; index < tlvP->value.asChildren.count; index++)
 800417a:	68ab      	ldr	r3, [r5, #8]
 800417c:	42b3      	cmp	r3, r6
 800417e:	f67f af4e 	bls.w	800401e <prv_serializeLinkData+0x56>
            res = prv_serializeLinkData(contextP, tlvP->value.asChildren.array + index, serverP, objectParamP, &uri, uriStr, uriLen, buffer + head, bufferLen - head);
 8004182:	68e9      	ldr	r1, [r5, #12]
 8004184:	eba9 0304 	sub.w	r3, r9, r4
 8004188:	9304      	str	r3, [sp, #16]
 800418a:	eb0a 0304 	add.w	r3, sl, r4
 800418e:	9303      	str	r3, [sp, #12]
 8004190:	9702      	str	r7, [sp, #8]
 8004192:	ab08      	add	r3, sp, #32
 8004194:	9301      	str	r3, [sp, #4]
 8004196:	ab0e      	add	r3, sp, #56	; 0x38
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	9b07      	ldr	r3, [sp, #28]
 800419c:	4642      	mov	r2, r8
 800419e:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80041a2:	4658      	mov	r0, fp
 80041a4:	f7ff ff10 	bl	8003fc8 <prv_serializeLinkData>
            if (res < 0) return -1;
 80041a8:	2800      	cmp	r0, #0
 80041aa:	db04      	blt.n	80041b6 <prv_serializeLinkData+0x1ee>
            head += res;
 80041ac:	4404      	add	r4, r0
        for (index = 0; index < tlvP->value.asChildren.count; index++)
 80041ae:	3601      	adds	r6, #1
 80041b0:	e7e3      	b.n	800417a <prv_serializeLinkData+0x1b2>
            if (res == 0) head = 0;    // rewind
 80041b2:	4604      	mov	r4, r0
 80041b4:	e7dc      	b.n	8004170 <prv_serializeLinkData+0x1a8>
            if (URI_MAX_STRING_LEN < parentUriLen) return -1;
 80041b6:	f04f 34ff 	mov.w	r4, #4294967295
 80041ba:	e730      	b.n	800401e <prv_serializeLinkData+0x56>
    switch (tlvP->type)
 80041bc:	f04f 34ff 	mov.w	r4, #4294967295
 80041c0:	e72d      	b.n	800401e <prv_serializeLinkData+0x56>
        if (bufferLen < LINK_ITEM_START_SIZE) return -1;
 80041c2:	f04f 34ff 	mov.w	r4, #4294967295
 80041c6:	e72a      	b.n	800401e <prv_serializeLinkData+0x56>
            if (bufferLen - head < parentUriLen) return -1;
 80041c8:	f04f 34ff 	mov.w	r4, #4294967295
 80041cc:	e727      	b.n	800401e <prv_serializeLinkData+0x56>
        if (bufferLen - head < LINK_URI_SEPARATOR_SIZE) return -1;
 80041ce:	f04f 34ff 	mov.w	r4, #4294967295
 80041d2:	e724      	b.n	800401e <prv_serializeLinkData+0x56>
        if (res <= 0) return -1;
 80041d4:	f04f 34ff 	mov.w	r4, #4294967295
 80041d8:	e721      	b.n	800401e <prv_serializeLinkData+0x56>
            if (bufferLen - head < LINK_ITEM_DIM_START_SIZE) return -1;
 80041da:	f04f 34ff 	mov.w	r4, #4294967295
 80041de:	e71e      	b.n	800401e <prv_serializeLinkData+0x56>
            if (res <= 0) return -1;
 80041e0:	f04f 34ff 	mov.w	r4, #4294967295
 80041e4:	e71b      	b.n	800401e <prv_serializeLinkData+0x56>
            if (bufferLen - head < LINK_ITEM_ATTR_END_SIZE) return -1;
 80041e6:	f04f 34ff 	mov.w	r4, #4294967295
 80041ea:	e718      	b.n	800401e <prv_serializeLinkData+0x56>
            if (bufferLen - head < LINK_ITEM_END_SIZE) return -1;
 80041ec:	f04f 34ff 	mov.w	r4, #4294967295
 80041f0:	e715      	b.n	800401e <prv_serializeLinkData+0x56>
            if (res < 0) return -1;    // careful, 0 is valid
 80041f2:	f04f 34ff 	mov.w	r4, #4294967295
 80041f6:	e712      	b.n	800401e <prv_serializeLinkData+0x56>
 80041f8:	0801b818 	.word	0x0801b818
 80041fc:	0801b810 	.word	0x0801b810

08004200 <discover_serialize>:
                       lwm2m_uri_t * uriP,
                       lwm2m_server_t * serverP,
                       int size,
                       lwm2m_data_t * dataP,
                       uint8_t ** bufferP)
{
 8004200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004204:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
 8004208:	4680      	mov	r8, r0
 800420a:	460e      	mov	r6, r1
 800420c:	4617      	mov	r7, r2
 800420e:	469a      	mov	sl, r3

    LOG_ARG("size: %d", size);
    LOG_URI(uriP);

    head = 0;
    LWM2M_URI_RESET(&parentUri);
 8004210:	f04f 33ff 	mov.w	r3, #4294967295
 8004214:	9314      	str	r3, [sp, #80]	; 0x50
 8004216:	9315      	str	r3, [sp, #84]	; 0x54
    parentUri.objectId = uriP->objectId;
 8004218:	880b      	ldrh	r3, [r1, #0]
 800421a:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50

    if (LWM2M_URI_IS_SET_RESOURCE(uriP))
 800421e:	888a      	ldrh	r2, [r1, #4]
 8004220:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004224:	429a      	cmp	r2, r3
 8004226:	d14e      	bne.n	80042c6 <discover_serialize+0xc6>
    }
    else
    {
        paramP = NULL;

        if (LWM2M_URI_IS_SET_INSTANCE(uriP))
 8004228:	884a      	ldrh	r2, [r1, #2]
 800422a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800422e:	429a      	cmp	r2, r3
 8004230:	f000 80c9 	beq.w	80043c6 <discover_serialize+0x1c6>
        {
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_ITEM_START, LINK_ITEM_START_SIZE);
 8004234:	233c      	movs	r3, #60	; 0x3c
 8004236:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_URI_SEPARATOR, LINK_URI_SEPARATOR_SIZE);
 800423a:	232f      	movs	r3, #47	; 0x2f
 800423c:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
            res = utils_intToText(uriP->objectId, bufferLink + head, PRV_LINK_BUFFER_SIZE - head);
 8004240:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8004244:	f10d 0272 	add.w	r2, sp, #114	; 0x72
 8004248:	8808      	ldrh	r0, [r1, #0]
 800424a:	2100      	movs	r1, #0
 800424c:	f002 f9ac 	bl	80065a8 <utils_intToText>
            if (res <= 0) return -1;
 8004250:	1e03      	subs	r3, r0, #0
 8004252:	f340 80fa 	ble.w	800444a <discover_serialize+0x24a>
            head += res;
 8004256:	1c99      	adds	r1, r3, #2
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_URI_SEPARATOR, LINK_URI_SEPARATOR_SIZE);
 8004258:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800425c:	f000 80f8 	beq.w	8004450 <discover_serialize+0x250>
 8004260:	aa1c      	add	r2, sp, #112	; 0x70
 8004262:	202f      	movs	r0, #47	; 0x2f
 8004264:	5450      	strb	r0, [r2, r1]
 8004266:	1cdc      	adds	r4, r3, #3
            res = utils_intToText(uriP->instanceId, bufferLink + head, PRV_LINK_BUFFER_SIZE - head);
 8004268:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 800426c:	4422      	add	r2, r4
 800426e:	8870      	ldrh	r0, [r6, #2]
 8004270:	2100      	movs	r1, #0
 8004272:	f002 f999 	bl	80065a8 <utils_intToText>
            if (res <= 0) return -1;
 8004276:	1e03      	subs	r3, r0, #0
 8004278:	f340 80ed 	ble.w	8004456 <discover_serialize+0x256>
            head += res;
 800427c:	4423      	add	r3, r4
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_ITEM_END, LINK_ITEM_END_SIZE);
 800427e:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8004282:	2a01      	cmp	r2, #1
 8004284:	f240 80ea 	bls.w	800445c <discover_serialize+0x25c>
 8004288:	4a80      	ldr	r2, [pc, #512]	; (800448c <discover_serialize+0x28c>)
 800428a:	8811      	ldrh	r1, [r2, #0]
 800428c:	aa1c      	add	r2, sp, #112	; 0x70
 800428e:	52d1      	strh	r1, [r2, r3]
 8004290:	1c9d      	adds	r5, r3, #2
            parentUri.instanceId = uriP->instanceId;
 8004292:	8872      	ldrh	r2, [r6, #2]
 8004294:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
            if (serverP != NULL)
 8004298:	2f00      	cmp	r7, #0
 800429a:	f000 8092 	beq.w	80043c2 <discover_serialize+0x1c2>
            {
                res = prv_serializeAttributes(contextP, &parentUri, serverP, NULL, bufferLink, head - 1, PRV_LINK_BUFFER_SIZE);
 800429e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042a2:	9202      	str	r2, [sp, #8]
 80042a4:	3301      	adds	r3, #1
 80042a6:	9301      	str	r3, [sp, #4]
 80042a8:	ab1c      	add	r3, sp, #112	; 0x70
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	2300      	movs	r3, #0
 80042ae:	463a      	mov	r2, r7
 80042b0:	a914      	add	r1, sp, #80	; 0x50
 80042b2:	4640      	mov	r0, r8
 80042b4:	f7ff fd20 	bl	8003cf8 <prv_serializeAttributes>
                if (res < 0) return -1;    // careful, 0 is valid
 80042b8:	1e04      	subs	r4, r0, #0
 80042ba:	f2c0 80d2 	blt.w	8004462 <discover_serialize+0x262>
            }
            else
            {
                res = 0;
            }
            head += res;
 80042be:	442c      	add	r4, r5
        paramP = NULL;
 80042c0:	f04f 0b00 	mov.w	fp, #0
 80042c4:	e04e      	b.n	8004364 <discover_serialize+0x164>
        LWM2M_URI_RESET(&parentUri);
 80042c6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ca:	9314      	str	r3, [sp, #80]	; 0x50
        LWM2M_URI_RESET(&tempUri);
 80042cc:	9306      	str	r3, [sp, #24]
 80042ce:	9307      	str	r3, [sp, #28]
        tempUri.objectId = uriP->objectId;
 80042d0:	880b      	ldrh	r3, [r1, #0]
 80042d2:	f8ad 3018 	strh.w	r3, [sp, #24]
        objParamP = prv_findAttributes(contextP, &tempUri, serverP);
 80042d6:	463a      	mov	r2, r7
 80042d8:	a906      	add	r1, sp, #24
 80042da:	f7ff fcf6 	bl	8003cca <prv_findAttributes>
 80042de:	4683      	mov	fp, r0
        tempUri.instanceId = uriP->instanceId;
 80042e0:	8873      	ldrh	r3, [r6, #2]
 80042e2:	f8ad 301a 	strh.w	r3, [sp, #26]
        instParamP = prv_findAttributes(contextP, &tempUri, serverP);
 80042e6:	463a      	mov	r2, r7
 80042e8:	a906      	add	r1, sp, #24
 80042ea:	4640      	mov	r0, r8
 80042ec:	f7ff fced 	bl	8003cca <prv_findAttributes>
 80042f0:	4604      	mov	r4, r0
        if (objParamP != NULL)
 80042f2:	f1bb 0f00 	cmp.w	fp, #0
 80042f6:	d02a      	beq.n	800434e <discover_serialize+0x14e>
            if (instParamP != NULL)
 80042f8:	b350      	cbz	r0, 8004350 <discover_serialize+0x150>
                memset(&mergedParam, 0, sizeof(lwm2m_attributes_t));
 80042fa:	2228      	movs	r2, #40	; 0x28
 80042fc:	2100      	movs	r1, #0
 80042fe:	a808      	add	r0, sp, #32
 8004300:	f013 ff5e 	bl	80181c0 <memset>
                mergedParam.toSet = objParamP->toSet | instParamP->toSet;
 8004304:	f89b 3000 	ldrb.w	r3, [fp]
 8004308:	7822      	ldrb	r2, [r4, #0]
 800430a:	4313      	orrs	r3, r2
 800430c:	f88d 3020 	strb.w	r3, [sp, #32]
                if (mergedParam.toSet & LWM2M_ATTR_FLAG_MIN_PERIOD)
 8004310:	f013 0f01 	tst.w	r3, #1
 8004314:	d005      	beq.n	8004322 <discover_serialize+0x122>
                    if (instParamP->toSet & LWM2M_ATTR_FLAG_MIN_PERIOD)
 8004316:	7822      	ldrb	r2, [r4, #0]
 8004318:	f012 0f01 	tst.w	r2, #1
 800431c:	d00d      	beq.n	800433a <discover_serialize+0x13a>
                        mergedParam.minPeriod = instParamP->minPeriod;
 800431e:	6862      	ldr	r2, [r4, #4]
 8004320:	9209      	str	r2, [sp, #36]	; 0x24
                if (mergedParam.toSet & LWM2M_ATTR_FLAG_MAX_PERIOD)
 8004322:	f013 0f02 	tst.w	r3, #2
 8004326:	d049      	beq.n	80043bc <discover_serialize+0x1bc>
                    if (instParamP->toSet & LWM2M_ATTR_FLAG_MAX_PERIOD)
 8004328:	7823      	ldrb	r3, [r4, #0]
 800432a:	f013 0f02 	tst.w	r3, #2
 800432e:	d008      	beq.n	8004342 <discover_serialize+0x142>
                        mergedParam.maxPeriod = instParamP->maxPeriod;
 8004330:	68a3      	ldr	r3, [r4, #8]
 8004332:	930a      	str	r3, [sp, #40]	; 0x28
                paramP = &mergedParam;
 8004334:	f10d 0b20 	add.w	fp, sp, #32
 8004338:	e00a      	b.n	8004350 <discover_serialize+0x150>
                        mergedParam.minPeriod = objParamP->minPeriod;
 800433a:	f8db 2004 	ldr.w	r2, [fp, #4]
 800433e:	9209      	str	r2, [sp, #36]	; 0x24
 8004340:	e7ef      	b.n	8004322 <discover_serialize+0x122>
                        mergedParam.maxPeriod = objParamP->maxPeriod;
 8004342:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004346:	930a      	str	r3, [sp, #40]	; 0x28
                paramP = &mergedParam;
 8004348:	f10d 0b20 	add.w	fp, sp, #32
 800434c:	e000      	b.n	8004350 <discover_serialize+0x150>
            paramP = instParamP;
 800434e:	4683      	mov	fp, r0
        memcpy(&baseUri, uriP, sizeof(baseUri));
 8004350:	ab12      	add	r3, sp, #72	; 0x48
 8004352:	6830      	ldr	r0, [r6, #0]
 8004354:	6871      	ldr	r1, [r6, #4]
 8004356:	c303      	stmia	r3!, {r0, r1}
        baseUri.resourceId = LWM2M_MAX_ID;
 8004358:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800435c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    head = 0;
 8004360:	2400      	movs	r4, #0
        uriP = &baseUri;
 8004362:	ae12      	add	r6, sp, #72	; 0x48
                head += res;
            }
        }
    }

    baseUriLen = uri_toString(uriP, baseUriStr, URI_MAX_STRING_LEN, NULL);
 8004364:	2300      	movs	r3, #0
 8004366:	2218      	movs	r2, #24
 8004368:	a916      	add	r1, sp, #88	; 0x58
 800436a:	4630      	mov	r0, r6
 800436c:	f001 ff6a 	bl	8006244 <uri_toString>
    if (baseUriLen < 0) return -1;
 8004370:	f1b0 0900 	subs.w	r9, r0, #0
 8004374:	f2c0 8081 	blt.w	800447a <discover_serialize+0x27a>

    for (index = 0; index < size && head < PRV_LINK_BUFFER_SIZE; index++)
 8004378:	2500      	movs	r5, #0
 800437a:	463b      	mov	r3, r7
 800437c:	4637      	mov	r7, r6
 800437e:	464e      	mov	r6, r9
 8004380:	4699      	mov	r9, r3
 8004382:	4555      	cmp	r5, sl
 8004384:	da4e      	bge.n	8004424 <discover_serialize+0x224>
 8004386:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800438a:	d24b      	bcs.n	8004424 <discover_serialize+0x224>
    {
        res = prv_serializeLinkData(contextP, dataP + index, serverP, paramP, uriP, baseUriStr, baseUriLen, bufferLink + head, PRV_LINK_BUFFER_SIZE - head);
 800438c:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 8004390:	9304      	str	r3, [sp, #16]
 8004392:	ab1c      	add	r3, sp, #112	; 0x70
 8004394:	4423      	add	r3, r4
 8004396:	9303      	str	r3, [sp, #12]
 8004398:	9602      	str	r6, [sp, #8]
 800439a:	ab16      	add	r3, sp, #88	; 0x58
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	9700      	str	r7, [sp, #0]
 80043a0:	465b      	mov	r3, fp
 80043a2:	464a      	mov	r2, r9
 80043a4:	f8dd 1498 	ldr.w	r1, [sp, #1176]	; 0x498
 80043a8:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80043ac:	4640      	mov	r0, r8
 80043ae:	f7ff fe0b 	bl	8003fc8 <prv_serializeLinkData>
        if (res < 0) return -1;
 80043b2:	2800      	cmp	r0, #0
 80043b4:	db64      	blt.n	8004480 <discover_serialize+0x280>
        head += res;
 80043b6:	4404      	add	r4, r0
    for (index = 0; index < size && head < PRV_LINK_BUFFER_SIZE; index++)
 80043b8:	3501      	adds	r5, #1
 80043ba:	e7e2      	b.n	8004382 <discover_serialize+0x182>
                paramP = &mergedParam;
 80043bc:	f10d 0b20 	add.w	fp, sp, #32
 80043c0:	e7c6      	b.n	8004350 <discover_serialize+0x150>
                res = 0;
 80043c2:	2400      	movs	r4, #0
 80043c4:	e77b      	b.n	80042be <discover_serialize+0xbe>
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_ITEM_START, LINK_ITEM_START_SIZE);
 80043c6:	233c      	movs	r3, #60	; 0x3c
 80043c8:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_URI_SEPARATOR, LINK_URI_SEPARATOR_SIZE);
 80043cc:	232f      	movs	r3, #47	; 0x2f
 80043ce:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
            res = utils_intToText(uriP->objectId, bufferLink + head, PRV_LINK_BUFFER_SIZE - head);
 80043d2:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80043d6:	f10d 0272 	add.w	r2, sp, #114	; 0x72
 80043da:	8808      	ldrh	r0, [r1, #0]
 80043dc:	2100      	movs	r1, #0
 80043de:	f002 f8e3 	bl	80065a8 <utils_intToText>
            if (res <= 0) return -1;
 80043e2:	2800      	cmp	r0, #0
 80043e4:	dd40      	ble.n	8004468 <discover_serialize+0x268>
            head += res;
 80043e6:	1c83      	adds	r3, r0, #2
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_ITEM_END, LINK_ITEM_END_SIZE);
 80043e8:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 80043ec:	2a01      	cmp	r2, #1
 80043ee:	d93e      	bls.n	800446e <discover_serialize+0x26e>
 80043f0:	4a26      	ldr	r2, [pc, #152]	; (800448c <discover_serialize+0x28c>)
 80043f2:	8811      	ldrh	r1, [r2, #0]
 80043f4:	aa1c      	add	r2, sp, #112	; 0x70
 80043f6:	52d1      	strh	r1, [r2, r3]
 80043f8:	1d04      	adds	r4, r0, #4
            if (serverP != NULL)
 80043fa:	b18f      	cbz	r7, 8004420 <discover_serialize+0x220>
                res = prv_serializeAttributes(contextP, &parentUri, serverP, NULL, bufferLink, head - 1, PRV_LINK_BUFFER_SIZE);
 80043fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004400:	9302      	str	r3, [sp, #8]
 8004402:	3003      	adds	r0, #3
 8004404:	9001      	str	r0, [sp, #4]
 8004406:	9200      	str	r2, [sp, #0]
 8004408:	2300      	movs	r3, #0
 800440a:	463a      	mov	r2, r7
 800440c:	a914      	add	r1, sp, #80	; 0x50
 800440e:	4640      	mov	r0, r8
 8004410:	f7ff fc72 	bl	8003cf8 <prv_serializeAttributes>
                if (res < 0) return -1;    // careful, 0 is valid
 8004414:	2800      	cmp	r0, #0
 8004416:	db2d      	blt.n	8004474 <discover_serialize+0x274>
                head += res;
 8004418:	4404      	add	r4, r0
        paramP = NULL;
 800441a:	f04f 0b00 	mov.w	fp, #0
 800441e:	e7a1      	b.n	8004364 <discover_serialize+0x164>
 8004420:	46bb      	mov	fp, r7
 8004422:	e79f      	b.n	8004364 <discover_serialize+0x164>
    }

    if (head > 0)
 8004424:	b924      	cbnz	r4, 8004430 <discover_serialize+0x230>
        *bufferP = (uint8_t *)lwm2m_malloc(head);
        if (*bufferP == NULL) return 0;
        memcpy(*bufferP, bufferLink, head);
    }

    return (int)head;
 8004426:	4620      	mov	r0, r4
}
 8004428:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
 800442c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        head -= 1;
 8004430:	3c01      	subs	r4, #1
        *bufferP = (uint8_t *)lwm2m_malloc(head);
 8004432:	4620      	mov	r0, r4
 8004434:	f004 fb90 	bl	8008b58 <lwm2m_malloc>
 8004438:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
 800443c:	6018      	str	r0, [r3, #0]
        if (*bufferP == NULL) return 0;
 800443e:	b310      	cbz	r0, 8004486 <discover_serialize+0x286>
        memcpy(*bufferP, bufferLink, head);
 8004440:	4622      	mov	r2, r4
 8004442:	a91c      	add	r1, sp, #112	; 0x70
 8004444:	f013 fe94 	bl	8018170 <memcpy>
 8004448:	e7ed      	b.n	8004426 <discover_serialize+0x226>
            if (res <= 0) return -1;
 800444a:	f04f 30ff 	mov.w	r0, #4294967295
 800444e:	e7eb      	b.n	8004428 <discover_serialize+0x228>
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_URI_SEPARATOR, LINK_URI_SEPARATOR_SIZE);
 8004450:	f04f 30ff 	mov.w	r0, #4294967295
 8004454:	e7e8      	b.n	8004428 <discover_serialize+0x228>
            if (res <= 0) return -1;
 8004456:	f04f 30ff 	mov.w	r0, #4294967295
 800445a:	e7e5      	b.n	8004428 <discover_serialize+0x228>
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_ITEM_END, LINK_ITEM_END_SIZE);
 800445c:	f04f 30ff 	mov.w	r0, #4294967295
 8004460:	e7e2      	b.n	8004428 <discover_serialize+0x228>
                if (res < 0) return -1;    // careful, 0 is valid
 8004462:	f04f 30ff 	mov.w	r0, #4294967295
 8004466:	e7df      	b.n	8004428 <discover_serialize+0x228>
            if (res <= 0) return -1;
 8004468:	f04f 30ff 	mov.w	r0, #4294967295
 800446c:	e7dc      	b.n	8004428 <discover_serialize+0x228>
            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_ITEM_END, LINK_ITEM_END_SIZE);
 800446e:	f04f 30ff 	mov.w	r0, #4294967295
 8004472:	e7d9      	b.n	8004428 <discover_serialize+0x228>
                if (res < 0) return -1;    // careful, 0 is valid
 8004474:	f04f 30ff 	mov.w	r0, #4294967295
 8004478:	e7d6      	b.n	8004428 <discover_serialize+0x228>
    if (baseUriLen < 0) return -1;
 800447a:	f04f 30ff 	mov.w	r0, #4294967295
 800447e:	e7d3      	b.n	8004428 <discover_serialize+0x228>
        if (res < 0) return -1;
 8004480:	f04f 30ff 	mov.w	r0, #4294967295
 8004484:	e7d0      	b.n	8004428 <discover_serialize+0x228>
        if (*bufferP == NULL) return 0;
 8004486:	2000      	movs	r0, #0
 8004488:	e7ce      	b.n	8004428 <discover_serialize+0x228>
 800448a:	bf00      	nop
 800448c:	0801b818 	.word	0x0801b818

08004490 <prv_deleteServer>:
        server = server->next;
    }
}

static void prv_deleteServer(lwm2m_server_t * serverP, void *userData)
{
 8004490:	b510      	push	{r4, lr}
 8004492:	4604      	mov	r4, r0
    // TODO parse transaction and observation to remove the ones related to this server
    if (serverP->sessionH != NULL)
 8004494:	69c0      	ldr	r0, [r0, #28]
 8004496:	b108      	cbz	r0, 800449c <prv_deleteServer+0xc>
    {
         lwm2m_close_connection(serverP->sessionH, userData);
 8004498:	f004 fb84 	bl	8008ba4 <lwm2m_close_connection>
    }
    if (NULL != serverP->location)
 800449c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800449e:	b130      	cbz	r0, 80044ae <prv_deleteServer+0x1e>
    {
        lwm2m_free(serverP->location);
 80044a0:	f004 fb5e 	bl	8008b60 <lwm2m_free>
 80044a4:	e003      	b.n	80044ae <prv_deleteServer+0x1e>

    while(serverP->blockData != NULL)
    {
        lwm2m_block_data_t * targetP;
        targetP = serverP->blockData;
        serverP->blockData = serverP->blockData->next;
 80044a6:	6803      	ldr	r3, [r0, #0]
 80044a8:	62e3      	str	r3, [r4, #44]	; 0x2c
        free_block_data(targetP);
 80044aa:	f7fe fdf0 	bl	800308e <free_block_data>
    while(serverP->blockData != NULL)
 80044ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d1f8      	bne.n	80044a6 <prv_deleteServer+0x16>
    }
    
    lwm2m_free(serverP);
 80044b4:	4620      	mov	r0, r4
 80044b6:	f004 fb53 	bl	8008b60 <lwm2m_free>
}
 80044ba:	bd10      	pop	{r4, pc}

080044bc <prv_refreshServerList>:
    lwm2m_free(contextP);
}

#ifdef LWM2M_CLIENT_MODE
static int prv_refreshServerList(lwm2m_context_t * contextP)
{
 80044bc:	b538      	push	{r3, r4, r5, lr}
 80044be:	4604      	mov	r4, r0
    lwm2m_server_t * targetP;
    lwm2m_server_t * nextP;

    // Remove all servers marked as dirty
    targetP = contextP->bootstrapServerList;
 80044c0:	6900      	ldr	r0, [r0, #16]
    contextP->bootstrapServerList = NULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	6123      	str	r3, [r4, #16]
    while (targetP != NULL)
 80044c6:	e003      	b.n	80044d0 <prv_refreshServerList+0x14>
            targetP->status = STATE_DEREGISTERED;
            contextP->bootstrapServerList = (lwm2m_server_t *)LWM2M_LIST_ADD(contextP->bootstrapServerList, targetP);
        }
        else
        {
            prv_deleteServer(targetP, contextP->userData);
 80044c8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80044ca:	f7ff ffe1 	bl	8004490 <prv_deleteServer>
{
 80044ce:	4628      	mov	r0, r5
    while (targetP != NULL)
 80044d0:	b170      	cbz	r0, 80044f0 <prv_refreshServerList+0x34>
        nextP = targetP->next;
 80044d2:	6805      	ldr	r5, [r0, #0]
        targetP->next = NULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	6003      	str	r3, [r0, #0]
        if (!targetP->dirty)
 80044d8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f3      	bne.n	80044c8 <prv_refreshServerList+0xc>
            targetP->status = STATE_DEREGISTERED;
 80044e0:	f880 3020 	strb.w	r3, [r0, #32]
            contextP->bootstrapServerList = (lwm2m_server_t *)LWM2M_LIST_ADD(contextP->bootstrapServerList, targetP);
 80044e4:	4601      	mov	r1, r0
 80044e6:	6920      	ldr	r0, [r4, #16]
 80044e8:	f000 f8e2 	bl	80046b0 <lwm2m_list_add>
 80044ec:	6120      	str	r0, [r4, #16]
 80044ee:	e7ee      	b.n	80044ce <prv_refreshServerList+0x12>
        }
        targetP = nextP;
    }
    targetP = contextP->serverList;
 80044f0:	6960      	ldr	r0, [r4, #20]
    contextP->serverList = NULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	6163      	str	r3, [r4, #20]
    while (targetP != NULL)
 80044f6:	e003      	b.n	8004500 <prv_refreshServerList+0x44>
            // TODO: Should we revert the status to STATE_DEREGISTERED ?
            contextP->serverList = (lwm2m_server_t *)LWM2M_LIST_ADD(contextP->serverList, targetP);
        }
        else
        {
            prv_deleteServer(targetP, contextP->userData);
 80044f8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80044fa:	f7ff ffc9 	bl	8004490 <prv_deleteServer>
{
 80044fe:	4628      	mov	r0, r5
    while (targetP != NULL)
 8004500:	b160      	cbz	r0, 800451c <prv_refreshServerList+0x60>
        nextP = targetP->next;
 8004502:	6805      	ldr	r5, [r0, #0]
        targetP->next = NULL;
 8004504:	2300      	movs	r3, #0
 8004506:	6003      	str	r3, [r0, #0]
        if (!targetP->dirty)
 8004508:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f3      	bne.n	80044f8 <prv_refreshServerList+0x3c>
            contextP->serverList = (lwm2m_server_t *)LWM2M_LIST_ADD(contextP->serverList, targetP);
 8004510:	4601      	mov	r1, r0
 8004512:	6960      	ldr	r0, [r4, #20]
 8004514:	f000 f8cc 	bl	80046b0 <lwm2m_list_add>
 8004518:	6160      	str	r0, [r4, #20]
 800451a:	e7f0      	b.n	80044fe <prv_refreshServerList+0x42>
        }
        targetP = nextP;
    }

    return object_getServers(contextP, false);
 800451c:	2100      	movs	r1, #0
 800451e:	4620      	mov	r0, r4
 8004520:	f000 fb72 	bl	8004c08 <object_getServers>
}
 8004524:	bd38      	pop	{r3, r4, r5, pc}

08004526 <lwm2m_configure>:
                    const char * endpointName,
                    const char * msisdn,
                    const char * altPath,
                    uint16_t numObject,
                    lwm2m_object_t * objectList[])
{
 8004526:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800452a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800452e:	9d09      	ldr	r5, [sp, #36]	; 0x24
            STR_NULL2EMPTY(altPath),
            numObject);

    // This API can be called only once for now
    //if (contextP->endpointName != NULL || contextP->objectList != NULL) return COAP_400_BAD_REQUEST;
    if (contextP->objectList != NULL) return COAP_400_BAD_REQUEST;
 8004530:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8004534:	f1ba 0f00 	cmp.w	sl, #0
 8004538:	d14e      	bne.n	80045d8 <lwm2m_configure+0xb2>
 800453a:	4604      	mov	r4, r0
 800453c:	4688      	mov	r8, r1
 800453e:	4691      	mov	r9, r2
 8004540:	461f      	mov	r7, r3

    if (endpointName == NULL) return COAP_400_BAD_REQUEST;
 8004542:	2900      	cmp	r1, #0
 8004544:	d04b      	beq.n	80045de <lwm2m_configure+0xb8>
    if (numObject < 3) return COAP_400_BAD_REQUEST;
 8004546:	2e02      	cmp	r6, #2
 8004548:	d94b      	bls.n	80045e2 <lwm2m_configure+0xbc>
    // Check that mandatory objects are present
    found = 0;
 800454a:	2200      	movs	r2, #0
    for (i = 0 ; i < numObject ; i++)
 800454c:	4694      	mov	ip, r2
 800454e:	e005      	b.n	800455c <lwm2m_configure+0x36>
    {
        if (objectList[i]->objID == LWM2M_SECURITY_OBJECT_ID) found |= 0x01;
        if (objectList[i]->objID == LWM2M_SERVER_OBJECT_ID) found |= 0x02;
 8004550:	2b01      	cmp	r3, #1
 8004552:	d00d      	beq.n	8004570 <lwm2m_configure+0x4a>
        if (objectList[i]->objID == LWM2M_DEVICE_OBJECT_ID) found |= 0x04;
 8004554:	2b03      	cmp	r3, #3
 8004556:	d00e      	beq.n	8004576 <lwm2m_configure+0x50>
    for (i = 0 ; i < numObject ; i++)
 8004558:	f10c 0c01 	add.w	ip, ip, #1
 800455c:	4566      	cmp	r6, ip
 800455e:	dd0d      	ble.n	800457c <lwm2m_configure+0x56>
        if (objectList[i]->objID == LWM2M_SECURITY_OBJECT_ID) found |= 0x01;
 8004560:	f855 302c 	ldr.w	r3, [r5, ip, lsl #2]
 8004564:	889b      	ldrh	r3, [r3, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f2      	bne.n	8004550 <lwm2m_configure+0x2a>
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	e7ef      	b.n	8004550 <lwm2m_configure+0x2a>
        if (objectList[i]->objID == LWM2M_SERVER_OBJECT_ID) found |= 0x02;
 8004570:	f042 0202 	orr.w	r2, r2, #2
 8004574:	e7ee      	b.n	8004554 <lwm2m_configure+0x2e>
        if (objectList[i]->objID == LWM2M_DEVICE_OBJECT_ID) found |= 0x04;
 8004576:	f042 0204 	orr.w	r2, r2, #4
 800457a:	e7ed      	b.n	8004558 <lwm2m_configure+0x32>
    }
    if (found != 0x07) return COAP_400_BAD_REQUEST;
 800457c:	2a07      	cmp	r2, #7
 800457e:	d132      	bne.n	80045e6 <lwm2m_configure+0xc0>
    if (altPath != NULL)
 8004580:	b137      	cbz	r7, 8004590 <lwm2m_configure+0x6a>
    {
        if (0 == utils_isAltPathValid(altPath))
 8004582:	4638      	mov	r0, r7
 8004584:	f002 fc31 	bl	8006dea <utils_isAltPathValid>
 8004588:	b378      	cbz	r0, 80045ea <lwm2m_configure+0xc4>
        {
            return COAP_400_BAD_REQUEST;
        }
        if (altPath[1] == 0)
 800458a:	787b      	ldrb	r3, [r7, #1]
 800458c:	b903      	cbnz	r3, 8004590 <lwm2m_configure+0x6a>
        {
            altPath = NULL;
 800458e:	4657      	mov	r7, sl
        }
    }
    contextP->endpointName = lwm2m_strdup(endpointName);
 8004590:	4640      	mov	r0, r8
 8004592:	f004 fae9 	bl	8008b68 <lwm2m_strdup>
 8004596:	6060      	str	r0, [r4, #4]
    if (contextP->endpointName == NULL)
 8004598:	b348      	cbz	r0, 80045ee <lwm2m_configure+0xc8>
    {
        return COAP_500_INTERNAL_SERVER_ERROR;
    }

    if (msisdn != NULL)
 800459a:	f1b9 0f00 	cmp.w	r9, #0
 800459e:	d004      	beq.n	80045aa <lwm2m_configure+0x84>
    {
        contextP->msisdn = lwm2m_strdup(msisdn);
 80045a0:	4648      	mov	r0, r9
 80045a2:	f004 fae1 	bl	8008b68 <lwm2m_strdup>
 80045a6:	60a0      	str	r0, [r4, #8]
        if (contextP->msisdn == NULL)
 80045a8:	b318      	cbz	r0, 80045f2 <lwm2m_configure+0xcc>
        {
            return COAP_500_INTERNAL_SERVER_ERROR;
        }
    }

    if (altPath != NULL)
 80045aa:	b127      	cbz	r7, 80045b6 <lwm2m_configure+0x90>
    {
        contextP->altPath = lwm2m_strdup(altPath);
 80045ac:	4638      	mov	r0, r7
 80045ae:	f004 fadb 	bl	8008b68 <lwm2m_strdup>
 80045b2:	60e0      	str	r0, [r4, #12]
        if (contextP->altPath == NULL)
 80045b4:	b1f8      	cbz	r0, 80045f6 <lwm2m_configure+0xd0>
            altPath = NULL;
 80045b6:	2700      	movs	r7, #0
 80045b8:	e00a      	b.n	80045d0 <lwm2m_configure+0xaa>
        }
    }

    for (i = 0; i < numObject; i++)
    {
        objectList[i]->next = NULL;
 80045ba:	f855 3027 	ldr.w	r3, [r5, r7, lsl #2]
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
        contextP->objectList = (lwm2m_object_t *)LWM2M_LIST_ADD(contextP->objectList, objectList[i]);
 80045c2:	f855 1027 	ldr.w	r1, [r5, r7, lsl #2]
 80045c6:	69a0      	ldr	r0, [r4, #24]
 80045c8:	f000 f872 	bl	80046b0 <lwm2m_list_add>
 80045cc:	61a0      	str	r0, [r4, #24]
    for (i = 0; i < numObject; i++)
 80045ce:	3701      	adds	r7, #1
 80045d0:	42be      	cmp	r6, r7
 80045d2:	dcf2      	bgt.n	80045ba <lwm2m_configure+0x94>
    }

    return COAP_NO_ERROR;
 80045d4:	2000      	movs	r0, #0
 80045d6:	e000      	b.n	80045da <lwm2m_configure+0xb4>
    if (contextP->objectList != NULL) return COAP_400_BAD_REQUEST;
 80045d8:	2080      	movs	r0, #128	; 0x80
}
 80045da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (endpointName == NULL) return COAP_400_BAD_REQUEST;
 80045de:	2080      	movs	r0, #128	; 0x80
 80045e0:	e7fb      	b.n	80045da <lwm2m_configure+0xb4>
    if (numObject < 3) return COAP_400_BAD_REQUEST;
 80045e2:	2080      	movs	r0, #128	; 0x80
 80045e4:	e7f9      	b.n	80045da <lwm2m_configure+0xb4>
    if (found != 0x07) return COAP_400_BAD_REQUEST;
 80045e6:	2080      	movs	r0, #128	; 0x80
 80045e8:	e7f7      	b.n	80045da <lwm2m_configure+0xb4>
            return COAP_400_BAD_REQUEST;
 80045ea:	2080      	movs	r0, #128	; 0x80
 80045ec:	e7f5      	b.n	80045da <lwm2m_configure+0xb4>
        return COAP_500_INTERNAL_SERVER_ERROR;
 80045ee:	20a0      	movs	r0, #160	; 0xa0
 80045f0:	e7f3      	b.n	80045da <lwm2m_configure+0xb4>
            return COAP_500_INTERNAL_SERVER_ERROR;
 80045f2:	20a0      	movs	r0, #160	; 0xa0
 80045f4:	e7f1      	b.n	80045da <lwm2m_configure+0xb4>
            return COAP_500_INTERNAL_SERVER_ERROR;
 80045f6:	20a0      	movs	r0, #160	; 0xa0
 80045f8:	e7ef      	b.n	80045da <lwm2m_configure+0xb4>
	...

080045fc <lwm2m_step>:
#endif


int lwm2m_step(lwm2m_context_t * contextP,
               time_t * timeoutP)
{
 80045fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045fe:	b083      	sub	sp, #12
 8004600:	4604      	mov	r4, r0
 8004602:	460f      	mov	r7, r1
	do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, "\r\n Before donex %d\r\n ");} }while(0);
 8004604:	4b29      	ldr	r3, [pc, #164]	; (80046ac <lwm2m_step+0xb0>)
 8004606:	2201      	movs	r2, #1
 8004608:	2100      	movs	r1, #0
 800460a:	2002      	movs	r0, #2
 800460c:	f012 fefe 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
    time_t tv_sec;

    LOG_ARG("timeoutP: %d", (int) *timeoutP);
    tv_sec = lwm2m_gettime();
 8004610:	f004 fac3 	bl	8008b9a <lwm2m_gettime>
 8004614:	4606      	mov	r6, r0
 8004616:	460d      	mov	r5, r1
#ifdef LWM2M_CLIENT_MODE
    //LOG_ARG("State: %s", STR_STATE(contextP->state));
    // state can also be modified in bootstrap_handleCommand().

next_step:
    switch (contextP->state)
 8004618:	7823      	ldrb	r3, [r4, #0]
 800461a:	2b05      	cmp	r3, #5
 800461c:	d817      	bhi.n	800464e <lwm2m_step+0x52>
 800461e:	e8df f003 	tbb	[pc, r3]
 8004622:	4003      	.short	0x4003
 8004624:	382b0f16 	.word	0x382b0f16
    {
    case STATE_INITIAL:
        if (0 != prv_refreshServerList(contextP)) return COAP_503_SERVICE_UNAVAILABLE;
 8004628:	4620      	mov	r0, r4
 800462a:	f7ff ff47 	bl	80044bc <prv_refreshServerList>
 800462e:	bbd0      	cbnz	r0, 80046a6 <lwm2m_step+0xaa>
        if (contextP->serverList != NULL)
 8004630:	6963      	ldr	r3, [r4, #20]
 8004632:	b113      	cbz	r3, 800463a <lwm2m_step+0x3e>
        {
            contextP->state = STATE_REGISTER_REQUIRED;
 8004634:	2303      	movs	r3, #3
 8004636:	7023      	strb	r3, [r4, #0]
 8004638:	e7ee      	b.n	8004618 <lwm2m_step+0x1c>
        }
        else
        {
            // Bootstrapping
            contextP->state = STATE_BOOTSTRAP_REQUIRED;
 800463a:	2301      	movs	r3, #1
 800463c:	7023      	strb	r3, [r4, #0]
        }
        goto next_step;
 800463e:	e7eb      	b.n	8004618 <lwm2m_step+0x1c>
        }
        break;
#endif
    case STATE_REGISTER_REQUIRED:
    {
        int result = registration_start(contextP, true);
 8004640:	2101      	movs	r1, #1
 8004642:	4620      	mov	r0, r4
 8004644:	f001 fbb4 	bl	8005db0 <registration_start>
        if (COAP_NO_ERROR != result) return result;
 8004648:	b9a0      	cbnz	r0, 8004674 <lwm2m_step+0x78>
        contextP->state = STATE_REGISTERING;
 800464a:	2304      	movs	r3, #4
 800464c:	7023      	strb	r3, [r4, #0]
        // do nothing
        break;
    }


    observe_step(contextP, tv_sec, timeoutP);
 800464e:	9700      	str	r7, [sp, #0]
 8004650:	4632      	mov	r2, r6
 8004652:	462b      	mov	r3, r5
 8004654:	4620      	mov	r0, r4
 8004656:	f000 fc51 	bl	8004efc <observe_step>
#endif

    registration_step(contextP, tv_sec, timeoutP);
 800465a:	9700      	str	r7, [sp, #0]
 800465c:	4632      	mov	r2, r6
 800465e:	462b      	mov	r3, r5
 8004660:	4620      	mov	r0, r4
 8004662:	f001 fd5b 	bl	800611c <registration_step>
    transaction_step(contextP, tv_sec, timeoutP);
 8004666:	9700      	str	r7, [sp, #0]
 8004668:	4632      	mov	r2, r6
 800466a:	462b      	mov	r3, r5
 800466c:	4620      	mov	r0, r4
 800466e:	f7fe fe70 	bl	8003352 <transaction_step>

    LOG_ARG("Final timeoutP: %d", (int) *timeoutP);
#ifdef LWM2M_CLIENT_MODE
    LOG_ARG("Final state: %s", STR_STATE(contextP->state));
#endif
    return 0;
 8004672:	2000      	movs	r0, #0
}
 8004674:	b003      	add	sp, #12
 8004676:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch (registration_getStatus(contextP))
 8004678:	4620      	mov	r0, r4
 800467a:	f001 fd36 	bl	80060ea <registration_getStatus>
 800467e:	2803      	cmp	r0, #3
 8004680:	d004      	beq.n	800468c <lwm2m_step+0x90>
 8004682:	2804      	cmp	r0, #4
 8004684:	d1e3      	bne.n	800464e <lwm2m_step+0x52>
            contextP->state = STATE_BOOTSTRAP_REQUIRED;
 8004686:	2301      	movs	r3, #1
 8004688:	7023      	strb	r3, [r4, #0]
            goto next_step;
 800468a:	e7c5      	b.n	8004618 <lwm2m_step+0x1c>
            contextP->state = STATE_READY;
 800468c:	2305      	movs	r3, #5
 800468e:	7023      	strb	r3, [r4, #0]
            break;
 8004690:	e7dd      	b.n	800464e <lwm2m_step+0x52>
        if (registration_getStatus(contextP) == STATE_REG_FAILED)
 8004692:	4620      	mov	r0, r4
 8004694:	f001 fd29 	bl	80060ea <registration_getStatus>
 8004698:	2804      	cmp	r0, #4
 800469a:	d1d8      	bne.n	800464e <lwm2m_step+0x52>
            contextP->state = STATE_BOOTSTRAP_REQUIRED;
 800469c:	2301      	movs	r3, #1
 800469e:	7023      	strb	r3, [r4, #0]
            goto next_step;
 80046a0:	e7ba      	b.n	8004618 <lwm2m_step+0x1c>
    switch (contextP->state)
 80046a2:	20a3      	movs	r0, #163	; 0xa3
 80046a4:	e7e6      	b.n	8004674 <lwm2m_step+0x78>
        if (0 != prv_refreshServerList(contextP)) return COAP_503_SERVICE_UNAVAILABLE;
 80046a6:	20a3      	movs	r0, #163	; 0xa3
 80046a8:	e7e4      	b.n	8004674 <lwm2m_step+0x78>
 80046aa:	bf00      	nop
 80046ac:	0801b81c 	.word	0x0801b81c

080046b0 <lwm2m_list_add>:
lwm2m_list_t * lwm2m_list_add(lwm2m_list_t * head,
                              lwm2m_list_t * node)
{
    lwm2m_list_t * target;

    if (NULL == head) return node;
 80046b0:	b1a8      	cbz	r0, 80046de <lwm2m_list_add+0x2e>
{
 80046b2:	b510      	push	{r4, lr}
 80046b4:	4604      	mov	r4, r0

    if (head->id > node->id)
 80046b6:	8883      	ldrh	r3, [r0, #4]
 80046b8:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 80046bc:	4563      	cmp	r3, ip
 80046be:	d80b      	bhi.n	80046d8 <lwm2m_list_add+0x28>
    {
        node->next = head;
        return node;
    }

    target = head;
 80046c0:	4603      	mov	r3, r0
    while (NULL != target->next && target->next->id < node->id)
 80046c2:	469e      	mov	lr, r3
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	b113      	cbz	r3, 80046ce <lwm2m_list_add+0x1e>
 80046c8:	889a      	ldrh	r2, [r3, #4]
 80046ca:	4594      	cmp	ip, r2
 80046cc:	d8f9      	bhi.n	80046c2 <lwm2m_list_add+0x12>
    {
        target = target->next;
    }

    node->next = target->next;
 80046ce:	600b      	str	r3, [r1, #0]
    target->next = node;
 80046d0:	f8ce 1000 	str.w	r1, [lr]

    return head;
 80046d4:	4620      	mov	r0, r4
}
 80046d6:	bd10      	pop	{r4, pc}
        node->next = head;
 80046d8:	6008      	str	r0, [r1, #0]
        return node;
 80046da:	4608      	mov	r0, r1
 80046dc:	e7fb      	b.n	80046d6 <lwm2m_list_add+0x26>
    if (NULL == head) return node;
 80046de:	4608      	mov	r0, r1
}
 80046e0:	4770      	bx	lr

080046e2 <lwm2m_list_find>:


lwm2m_list_t * lwm2m_list_find(lwm2m_list_t * head,
                               uint16_t id)
{
    while (NULL != head && head->id < id)
 80046e2:	e000      	b.n	80046e6 <lwm2m_list_find+0x4>
    {
        head = head->next;
 80046e4:	6800      	ldr	r0, [r0, #0]
    while (NULL != head && head->id < id)
 80046e6:	b110      	cbz	r0, 80046ee <lwm2m_list_find+0xc>
 80046e8:	8883      	ldrh	r3, [r0, #4]
 80046ea:	428b      	cmp	r3, r1
 80046ec:	d3fa      	bcc.n	80046e4 <lwm2m_list_find+0x2>
    }

    if (NULL != head && head->id == id) return head;
 80046ee:	b118      	cbz	r0, 80046f8 <lwm2m_list_find+0x16>
 80046f0:	8883      	ldrh	r3, [r0, #4]
 80046f2:	428b      	cmp	r3, r1
 80046f4:	d000      	beq.n	80046f8 <lwm2m_list_find+0x16>

    return NULL;
 80046f6:	2000      	movs	r0, #0
}
 80046f8:	4770      	bx	lr

080046fa <lwm2m_list_remove>:


lwm2m_list_t * lwm2m_list_remove(lwm2m_list_t * head,
                                 uint16_t id,
                                 lwm2m_list_t ** nodeP)
{
 80046fa:	b510      	push	{r4, lr}
    lwm2m_list_t * target;

    if (head == NULL)
 80046fc:	4604      	mov	r4, r0
 80046fe:	b198      	cbz	r0, 8004728 <lwm2m_list_remove+0x2e>
    {
        if (nodeP) *nodeP = NULL;
        return NULL;
    }

    if (head->id == id)
 8004700:	8883      	ldrh	r3, [r0, #4]
 8004702:	428b      	cmp	r3, r1
 8004704:	d015      	beq.n	8004732 <lwm2m_list_remove+0x38>
    {
        if (nodeP) *nodeP = head;
        return head->next;
    }

    target = head;
 8004706:	4603      	mov	r3, r0
    while (NULL != target->next && target->next->id < id)
 8004708:	469e      	mov	lr, r3
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	b11b      	cbz	r3, 8004716 <lwm2m_list_remove+0x1c>
 800470e:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 8004712:	458c      	cmp	ip, r1
 8004714:	d3f8      	bcc.n	8004708 <lwm2m_list_remove+0xe>
    {
        target = target->next;
    }

    if (NULL != target->next && target->next->id == id)
 8004716:	b113      	cbz	r3, 800471e <lwm2m_list_remove+0x24>
 8004718:	8898      	ldrh	r0, [r3, #4]
 800471a:	4288      	cmp	r0, r1
 800471c:	d00d      	beq.n	800473a <lwm2m_list_remove+0x40>
        if (nodeP) *nodeP = target->next;
        target->next = target->next->next;
    }
    else
    {
        if (nodeP) *nodeP = NULL;
 800471e:	b1aa      	cbz	r2, 800474c <lwm2m_list_remove+0x52>
 8004720:	2300      	movs	r3, #0
 8004722:	6013      	str	r3, [r2, #0]
    }

    return head;
 8004724:	4620      	mov	r0, r4
}
 8004726:	bd10      	pop	{r4, pc}
        if (nodeP) *nodeP = NULL;
 8004728:	b10a      	cbz	r2, 800472e <lwm2m_list_remove+0x34>
 800472a:	2300      	movs	r3, #0
 800472c:	6013      	str	r3, [r2, #0]
        return NULL;
 800472e:	4620      	mov	r0, r4
 8004730:	e7f9      	b.n	8004726 <lwm2m_list_remove+0x2c>
        if (nodeP) *nodeP = head;
 8004732:	b102      	cbz	r2, 8004736 <lwm2m_list_remove+0x3c>
 8004734:	6010      	str	r0, [r2, #0]
        return head->next;
 8004736:	6820      	ldr	r0, [r4, #0]
 8004738:	e7f5      	b.n	8004726 <lwm2m_list_remove+0x2c>
        if (nodeP) *nodeP = target->next;
 800473a:	b102      	cbz	r2, 800473e <lwm2m_list_remove+0x44>
 800473c:	6013      	str	r3, [r2, #0]
        target->next = target->next->next;
 800473e:	f8de 3000 	ldr.w	r3, [lr]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f8ce 3000 	str.w	r3, [lr]
    return head;
 8004748:	4620      	mov	r0, r4
        target->next = target->next->next;
 800474a:	e7ec      	b.n	8004726 <lwm2m_list_remove+0x2c>
    return head;
 800474c:	4620      	mov	r0, r4
 800474e:	e7ea      	b.n	8004726 <lwm2m_list_remove+0x2c>

08004750 <prv_findServerInstance>:
}

static lwm2m_list_t * prv_findServerInstance(lwm2m_context_t *contextP,
                                             lwm2m_object_t * objectP,
                                             uint16_t shortID)
{
 8004750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004752:	b087      	sub	sp, #28
 8004754:	4606      	mov	r6, r0
 8004756:	460d      	mov	r5, r1
 8004758:	4617      	mov	r7, r2
    lwm2m_list_t * instanceP;

    instanceP = objectP->instanceList;
 800475a:	688c      	ldr	r4, [r1, #8]
    while (NULL != instanceP)
 800475c:	e00c      	b.n	8004778 <prv_findServerInstance+0x28>
        if (dataP == NULL) return NULL;
        dataP->id = LWM2M_SERVER_SHORT_ID_ID;

        if (objectP->readFunc(contextP, instanceP->id, &size, &dataP, objectP) != COAP_205_CONTENT)
        {
            lwm2m_data_free(size, dataP);
 800475e:	9902      	ldr	r1, [sp, #8]
 8004760:	9803      	ldr	r0, [sp, #12]
 8004762:	f002 fcd1 	bl	8007108 <lwm2m_data_free>
        if (dataP == NULL) return NULL;
 8004766:	2400      	movs	r4, #0
        lwm2m_data_free(size, dataP);
        instanceP = instanceP->next;
    }

    return instanceP;
}
 8004768:	4620      	mov	r0, r4
 800476a:	b007      	add	sp, #28
 800476c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lwm2m_data_free(size, dataP);
 800476e:	9902      	ldr	r1, [sp, #8]
 8004770:	9803      	ldr	r0, [sp, #12]
 8004772:	f002 fcc9 	bl	8007108 <lwm2m_data_free>
        instanceP = instanceP->next;
 8004776:	6824      	ldr	r4, [r4, #0]
    while (NULL != instanceP)
 8004778:	2c00      	cmp	r4, #0
 800477a:	d0f5      	beq.n	8004768 <prv_findServerInstance+0x18>
        size = 1;
 800477c:	2001      	movs	r0, #1
 800477e:	9003      	str	r0, [sp, #12]
        dataP = lwm2m_data_new(size);
 8004780:	f002 fcb1 	bl	80070e6 <lwm2m_data_new>
 8004784:	9002      	str	r0, [sp, #8]
        if (dataP == NULL) return NULL;
 8004786:	2800      	cmp	r0, #0
 8004788:	d0ed      	beq.n	8004766 <prv_findServerInstance+0x16>
        dataP->id = LWM2M_SERVER_SHORT_ID_ID;
 800478a:	2300      	movs	r3, #0
 800478c:	8043      	strh	r3, [r0, #2]
        if (objectP->readFunc(contextP, instanceP->id, &size, &dataP, objectP) != COAP_205_CONTENT)
 800478e:	88a1      	ldrh	r1, [r4, #4]
 8004790:	9500      	str	r5, [sp, #0]
 8004792:	ab02      	add	r3, sp, #8
 8004794:	aa03      	add	r2, sp, #12
 8004796:	4630      	mov	r0, r6
 8004798:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800479c:	47e0      	blx	ip
 800479e:	2845      	cmp	r0, #69	; 0x45
 80047a0:	d1dd      	bne.n	800475e <prv_findServerInstance+0xe>
        if (1 == lwm2m_data_decode_int(dataP, &value))
 80047a2:	a904      	add	r1, sp, #16
 80047a4:	9802      	ldr	r0, [sp, #8]
 80047a6:	f002 fd08 	bl	80071ba <lwm2m_data_decode_int>
 80047aa:	2801      	cmp	r0, #1
 80047ac:	d1df      	bne.n	800476e <prv_findServerInstance+0x1e>
            if (value == shortID)
 80047ae:	9a04      	ldr	r2, [sp, #16]
 80047b0:	9b05      	ldr	r3, [sp, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bf08      	it	eq
 80047b6:	4297      	cmpeq	r7, r2
 80047b8:	d1d9      	bne.n	800476e <prv_findServerInstance+0x1e>
                lwm2m_data_free(size, dataP);
 80047ba:	9902      	ldr	r1, [sp, #8]
 80047bc:	9803      	ldr	r0, [sp, #12]
 80047be:	f002 fca3 	bl	8007108 <lwm2m_data_free>
                break;
 80047c2:	e7d1      	b.n	8004768 <prv_findServerInstance+0x18>

080047c4 <prv_getMandatoryInfo>:
{
 80047c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	4606      	mov	r6, r0
 80047cc:	460d      	mov	r5, r1
 80047ce:	4617      	mov	r7, r2
 80047d0:	461c      	mov	r4, r3
    size = 2;
 80047d2:	2002      	movs	r0, #2
 80047d4:	9004      	str	r0, [sp, #16]
    dataP = lwm2m_data_new(size);
 80047d6:	f002 fc86 	bl	80070e6 <lwm2m_data_new>
 80047da:	9005      	str	r0, [sp, #20]
    if (dataP == NULL) return -1;
 80047dc:	2800      	cmp	r0, #0
 80047de:	d045      	beq.n	800486c <prv_getMandatoryInfo+0xa8>
    dataP[0].id = LWM2M_SERVER_LIFETIME_ID;
 80047e0:	2301      	movs	r3, #1
 80047e2:	8043      	strh	r3, [r0, #2]
    dataP[1].id = LWM2M_SERVER_BINDING_ID;
 80047e4:	9b05      	ldr	r3, [sp, #20]
 80047e6:	2207      	movs	r2, #7
 80047e8:	825a      	strh	r2, [r3, #18]
    if (objectP->readFunc(contextP, instanceID, &size, &dataP, objectP) != COAP_205_CONTENT)
 80047ea:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80047ee:	9500      	str	r5, [sp, #0]
 80047f0:	ab05      	add	r3, sp, #20
 80047f2:	aa04      	add	r2, sp, #16
 80047f4:	4639      	mov	r1, r7
 80047f6:	4630      	mov	r0, r6
 80047f8:	47c0      	blx	r8
 80047fa:	2845      	cmp	r0, #69	; 0x45
 80047fc:	d122      	bne.n	8004844 <prv_getMandatoryInfo+0x80>
    if (0 == lwm2m_data_decode_int(dataP, &value)
 80047fe:	a902      	add	r1, sp, #8
 8004800:	9805      	ldr	r0, [sp, #20]
 8004802:	f002 fcda 	bl	80071ba <lwm2m_data_decode_int>
 8004806:	b320      	cbz	r0, 8004852 <prv_getMandatoryInfo+0x8e>
        || value < 0 || value >0xFFFFFFFF)             // This is an implementation limit
 8004808:	9a02      	ldr	r2, [sp, #8]
 800480a:	9b03      	ldr	r3, [sp, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	db20      	blt.n	8004852 <prv_getMandatoryInfo+0x8e>
 8004810:	f04f 31ff 	mov.w	r1, #4294967295
 8004814:	4291      	cmp	r1, r2
 8004816:	f04f 0100 	mov.w	r1, #0
 800481a:	4199      	sbcs	r1, r3
 800481c:	db19      	blt.n	8004852 <prv_getMandatoryInfo+0x8e>
    targetP->lifetime = value;
 800481e:	60a2      	str	r2, [r4, #8]
 8004820:	60e3      	str	r3, [r4, #12]
    if (dataP[1].type == LWM2M_TYPE_STRING)
 8004822:	9b05      	ldr	r3, [sp, #20]
 8004824:	7c1a      	ldrb	r2, [r3, #16]
 8004826:	2a04      	cmp	r2, #4
 8004828:	d01a      	beq.n	8004860 <prv_getMandatoryInfo+0x9c>
        targetP->binding = BINDING_UNKNOWN;
 800482a:	2301      	movs	r3, #1
 800482c:	7623      	strb	r3, [r4, #24]
    lwm2m_data_free(size, dataP);
 800482e:	9905      	ldr	r1, [sp, #20]
 8004830:	9804      	ldr	r0, [sp, #16]
 8004832:	f002 fc69 	bl	8007108 <lwm2m_data_free>
    if (targetP->binding == BINDING_UNKNOWN)
 8004836:	7e23      	ldrb	r3, [r4, #24]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d01a      	beq.n	8004872 <prv_getMandatoryInfo+0xae>
    return 0;
 800483c:	2000      	movs	r0, #0
}
 800483e:	b006      	add	sp, #24
 8004840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lwm2m_data_free(size, dataP);
 8004844:	9905      	ldr	r1, [sp, #20]
 8004846:	9804      	ldr	r0, [sp, #16]
 8004848:	f002 fc5e 	bl	8007108 <lwm2m_data_free>
        return -1;
 800484c:	f04f 30ff 	mov.w	r0, #4294967295
 8004850:	e7f5      	b.n	800483e <prv_getMandatoryInfo+0x7a>
        lwm2m_data_free(size, dataP);
 8004852:	9905      	ldr	r1, [sp, #20]
 8004854:	9804      	ldr	r0, [sp, #16]
 8004856:	f002 fc57 	bl	8007108 <lwm2m_data_free>
        return -1;
 800485a:	f04f 30ff 	mov.w	r0, #4294967295
 800485e:	e7ee      	b.n	800483e <prv_getMandatoryInfo+0x7a>
        targetP->binding = utils_stringToBinding(dataP[1].value.asBuffer.buffer, dataP[1].value.asBuffer.length);
 8004860:	6999      	ldr	r1, [r3, #24]
 8004862:	69d8      	ldr	r0, [r3, #28]
 8004864:	f002 fa52 	bl	8006d0c <utils_stringToBinding>
 8004868:	7620      	strb	r0, [r4, #24]
 800486a:	e7e0      	b.n	800482e <prv_getMandatoryInfo+0x6a>
    if (dataP == NULL) return -1;
 800486c:	f04f 30ff 	mov.w	r0, #4294967295
 8004870:	e7e5      	b.n	800483e <prv_getMandatoryInfo+0x7a>
        return -1;
 8004872:	f04f 30ff 	mov.w	r0, #4294967295
 8004876:	e7e2      	b.n	800483e <prv_getMandatoryInfo+0x7a>

08004878 <prv_getObjectTemplate>:
    if (length < REG_OBJECT_MIN_LEN) return -1;
 8004878:	2904      	cmp	r1, #4
 800487a:	d915      	bls.n	80048a8 <prv_getObjectTemplate+0x30>
{
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	4605      	mov	r5, r0
 8004880:	460c      	mov	r4, r1
 8004882:	4610      	mov	r0, r2
    buffer[0] = '<';
 8004884:	233c      	movs	r3, #60	; 0x3c
 8004886:	702b      	strb	r3, [r5, #0]
    buffer[1] = '/';
 8004888:	232f      	movs	r3, #47	; 0x2f
 800488a:	706b      	strb	r3, [r5, #1]
    result = utils_intToText(id, buffer + index, length - index);
 800488c:	1e8b      	subs	r3, r1, #2
 800488e:	1caa      	adds	r2, r5, #2
 8004890:	2100      	movs	r1, #0
 8004892:	f001 fe89 	bl	80065a8 <utils_intToText>
    if (result == 0) return -1;
 8004896:	b150      	cbz	r0, 80048ae <prv_getObjectTemplate+0x36>
    index += result;
 8004898:	1c82      	adds	r2, r0, #2
    if (length - index < REG_OBJECT_MIN_LEN - 3) return -1;
 800489a:	1aa4      	subs	r4, r4, r2
 800489c:	2c01      	cmp	r4, #1
 800489e:	d909      	bls.n	80048b4 <prv_getObjectTemplate+0x3c>
    buffer[index] = '/';
 80048a0:	212f      	movs	r1, #47	; 0x2f
 80048a2:	54a9      	strb	r1, [r5, r2]
    index++;
 80048a4:	3003      	adds	r0, #3
}
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
    if (length < REG_OBJECT_MIN_LEN) return -1;
 80048a8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80048ac:	4770      	bx	lr
    if (result == 0) return -1;
 80048ae:	f04f 30ff 	mov.w	r0, #4294967295
 80048b2:	e7f8      	b.n	80048a6 <prv_getObjectTemplate+0x2e>
    if (length - index < REG_OBJECT_MIN_LEN - 3) return -1;
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295
 80048b8:	e7f5      	b.n	80048a6 <prv_getObjectTemplate+0x2e>

080048ba <object_readData>:
{
 80048ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	4604      	mov	r4, r0
 80048c2:	460d      	mov	r5, r1
 80048c4:	4616      	mov	r6, r2
 80048c6:	461f      	mov	r7, r3
    targetP = (lwm2m_object_t *) get_test_object();
 80048c8:	f004 f8e4 	bl	8008a94 <get_test_object>
    if (NULL == targetP) return COAP_404_NOT_FOUND;
 80048cc:	b168      	cbz	r0, 80048ea <object_readData+0x30>
    if (NULL == targetP->readFunc) return COAP_405_METHOD_NOT_ALLOWED;
 80048ce:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80048d2:	f1b8 0f00 	cmp.w	r8, #0
 80048d6:	d00a      	beq.n	80048ee <object_readData+0x34>
    result = targetP->readFunc(contextP, uriP->instanceId, sizeP, dataP, targetP);
 80048d8:	9000      	str	r0, [sp, #0]
 80048da:	463b      	mov	r3, r7
 80048dc:	4632      	mov	r2, r6
 80048de:	8869      	ldrh	r1, [r5, #2]
 80048e0:	4620      	mov	r0, r4
 80048e2:	47c0      	blx	r8
}
 80048e4:	b002      	add	sp, #8
 80048e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (NULL == targetP) return COAP_404_NOT_FOUND;
 80048ea:	2084      	movs	r0, #132	; 0x84
 80048ec:	e7fa      	b.n	80048e4 <object_readData+0x2a>
    if (NULL == targetP->readFunc) return COAP_405_METHOD_NOT_ALLOWED;
 80048ee:	2085      	movs	r0, #133	; 0x85
 80048f0:	e7f8      	b.n	80048e4 <object_readData+0x2a>

080048f2 <object_read>:
{
 80048f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f4:	b085      	sub	sp, #20
 80048f6:	460e      	mov	r6, r1
 80048f8:	4617      	mov	r7, r2
 80048fa:	461d      	mov	r5, r3
    lwm2m_data_t * dataP = NULL;
 80048fc:	2400      	movs	r4, #0
 80048fe:	9403      	str	r4, [sp, #12]
    int size = 0;
 8004900:	9402      	str	r4, [sp, #8]
    result = object_readData(contextP, uriP, &size, &dataP);
 8004902:	ab03      	add	r3, sp, #12
 8004904:	aa02      	add	r2, sp, #8
 8004906:	f7ff ffd8 	bl	80048ba <object_readData>
 800490a:	4604      	mov	r4, r0
    if (result == COAP_205_CONTENT)
 800490c:	2845      	cmp	r0, #69	; 0x45
 800490e:	d006      	beq.n	800491e <object_read+0x2c>
    lwm2m_data_free(size, dataP);
 8004910:	9903      	ldr	r1, [sp, #12]
 8004912:	9802      	ldr	r0, [sp, #8]
 8004914:	f002 fbf8 	bl	8007108 <lwm2m_data_free>
}
 8004918:	4620      	mov	r0, r4
 800491a:	b005      	add	sp, #20
 800491c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (acceptNum > 0)
 800491e:	b975      	cbnz	r5, 800493e <object_read+0x4c>
        if (result == COAP_205_CONTENT)
 8004920:	2c45      	cmp	r4, #69	; 0x45
 8004922:	d1f5      	bne.n	8004910 <object_read+0x1e>
            res = lwm2m_data_serialize(uriP, size, dataP, formatP, bufferP);
 8004924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800492a:	9a03      	ldr	r2, [sp, #12]
 800492c:	9902      	ldr	r1, [sp, #8]
 800492e:	4630      	mov	r0, r6
 8004930:	f002 fd6a 	bl	8007408 <lwm2m_data_serialize>
            if (res < 0)
 8004934:	2800      	cmp	r0, #0
 8004936:	db13      	blt.n	8004960 <object_read+0x6e>
                *lengthP = (size_t)res;
 8004938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800493a:	6018      	str	r0, [r3, #0]
 800493c:	e7e8      	b.n	8004910 <object_read+0x1e>
                                             LWM2M_URI_IS_SET_RESOURCE(uriP),
 800493e:	88b3      	ldrh	r3, [r6, #4]
            result = utils_getResponseFormat(acceptNum,
 8004940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004942:	9201      	str	r2, [sp, #4]
 8004944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004948:	1a9b      	subs	r3, r3, r2
 800494a:	bf18      	it	ne
 800494c:	2301      	movne	r3, #1
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	9b03      	ldr	r3, [sp, #12]
 8004952:	9a02      	ldr	r2, [sp, #8]
 8004954:	4639      	mov	r1, r7
 8004956:	4628      	mov	r0, r5
 8004958:	f002 fa0e 	bl	8006d78 <utils_getResponseFormat>
 800495c:	4604      	mov	r4, r0
 800495e:	e7df      	b.n	8004920 <object_read+0x2e>
                result = COAP_500_INTERNAL_SERVER_ERROR;
 8004960:	24a0      	movs	r4, #160	; 0xa0
 8004962:	e7d5      	b.n	8004910 <object_read+0x1e>

08004964 <object_getRegisterPayloadBufferLength>:
{
 8004964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	4604      	mov	r4, r0
    if ((contextP->altPath != NULL)
 800496c:	68c0      	ldr	r0, [r0, #12]
 800496e:	b148      	cbz	r0, 8004984 <object_getRegisterPayloadBufferLength+0x20>
     && (contextP->altPath[0] != 0))
 8004970:	7803      	ldrb	r3, [r0, #0]
 8004972:	b153      	cbz	r3, 800498a <object_getRegisterPayloadBufferLength+0x26>
        index += strlen(contextP->altPath);
 8004974:	f7fb fc54 	bl	8000220 <strlen>
 8004978:	f100 0801 	add.w	r8, r0, #1
    index += strlen(REG_LWM2M_RESOURCE_TYPE);
 800497c:	f108 081a 	add.w	r8, r8, #26
    for (objectP = contextP->objectList; objectP != NULL; objectP = objectP->next)
 8004980:	69a6      	ldr	r6, [r4, #24]
 8004982:	e022      	b.n	80049ca <object_getRegisterPayloadBufferLength+0x66>
        index += strlen(REG_DEFAULT_PATH);
 8004984:	f04f 0802 	mov.w	r8, #2
 8004988:	e7f8      	b.n	800497c <object_getRegisterPayloadBufferLength+0x18>
 800498a:	f04f 0802 	mov.w	r8, #2
 800498e:	e7f5      	b.n	800497c <object_getRegisterPayloadBufferLength+0x18>
            index += strlen(REG_VERSION_START);
 8004990:	3405      	adds	r4, #5
            result = utils_uintToText(objectP->versionMajor, buffer, sizeof(buffer));
 8004992:	230a      	movs	r3, #10
 8004994:	aa01      	add	r2, sp, #4
 8004996:	79b0      	ldrb	r0, [r6, #6]
 8004998:	2100      	movs	r1, #0
 800499a:	f001 fdc7 	bl	800652c <utils_uintToText>
            if (result < 0) return 0;
 800499e:	2800      	cmp	r0, #0
 80049a0:	db43      	blt.n	8004a2a <object_getRegisterPayloadBufferLength+0xc6>
            index += result;
 80049a2:	4420      	add	r0, r4
            index += 1;
 80049a4:	1c44      	adds	r4, r0, #1
            result = utils_uintToText(objectP->versionMinor, buffer, sizeof(buffer));
 80049a6:	230a      	movs	r3, #10
 80049a8:	aa01      	add	r2, sp, #4
 80049aa:	79f0      	ldrb	r0, [r6, #7]
 80049ac:	2100      	movs	r1, #0
 80049ae:	f001 fdbd 	bl	800652c <utils_uintToText>
            if (result < 0) return 0;
 80049b2:	2800      	cmp	r0, #0
 80049b4:	db3b      	blt.n	8004a2e <object_getRegisterPayloadBufferLength+0xca>
            index += result;
 80049b6:	4420      	add	r0, r4
            index += 1;
 80049b8:	3001      	adds	r0, #1
            if(objectP->instanceList != NULL)
 80049ba:	68b3      	ldr	r3, [r6, #8]
 80049bc:	b1db      	cbz	r3, 80049f6 <object_getRegisterPayloadBufferLength+0x92>
                index += length;
 80049be:	183c      	adds	r4, r7, r0
                start = index;
 80049c0:	4680      	mov	r8, r0
        if (objectP->instanceList != NULL)
 80049c2:	68b5      	ldr	r5, [r6, #8]
 80049c4:	bb1d      	cbnz	r5, 8004a0e <object_getRegisterPayloadBufferLength+0xaa>
 80049c6:	46a0      	mov	r8, r4
    for (objectP = contextP->objectList; objectP != NULL; objectP = objectP->next)
 80049c8:	6836      	ldr	r6, [r6, #0]
 80049ca:	b34e      	cbz	r6, 8004a20 <object_getRegisterPayloadBufferLength+0xbc>
        if (objectP->objID == LWM2M_SECURITY_OBJECT_ID) continue;
 80049cc:	88b2      	ldrh	r2, [r6, #4]
 80049ce:	2a00      	cmp	r2, #0
 80049d0:	d0fa      	beq.n	80049c8 <object_getRegisterPayloadBufferLength+0x64>
        if (objectP->objID == LWM2M_OSCORE_OBJECT_ID) continue;
 80049d2:	2a15      	cmp	r2, #21
 80049d4:	d0f8      	beq.n	80049c8 <object_getRegisterPayloadBufferLength+0x64>
        result = prv_getObjectTemplate(buffer, sizeof(buffer), objectP->objID);
 80049d6:	210a      	movs	r1, #10
 80049d8:	a801      	add	r0, sp, #4
 80049da:	f7ff ff4d 	bl	8004878 <prv_getObjectTemplate>
        if (result < 0) return 0;
 80049de:	1e07      	subs	r7, r0, #0
 80049e0:	db21      	blt.n	8004a26 <object_getRegisterPayloadBufferLength+0xc2>
        index += length;
 80049e2:	eb08 0407 	add.w	r4, r8, r7
        if (objectP->versionMajor != 0 || objectP->versionMinor != 0)
 80049e6:	88f3      	ldrh	r3, [r6, #6]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1d1      	bne.n	8004990 <object_getRegisterPayloadBufferLength+0x2c>
        else if(objectP->instanceList == NULL)
 80049ec:	68b3      	ldr	r3, [r6, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e7      	bne.n	80049c2 <object_getRegisterPayloadBufferLength+0x5e>
            index += strlen(REG_PATH_END);
 80049f2:	3401      	adds	r4, #1
 80049f4:	e7e5      	b.n	80049c2 <object_getRegisterPayloadBufferLength+0x5e>
            index += 1;
 80049f6:	4604      	mov	r4, r0
 80049f8:	e7e3      	b.n	80049c2 <object_getRegisterPayloadBufferLength+0x5e>
                result = utils_intToText(targetP->id, buffer, sizeof(buffer));
 80049fa:	230a      	movs	r3, #10
 80049fc:	aa01      	add	r2, sp, #4
 80049fe:	88a8      	ldrh	r0, [r5, #4]
 8004a00:	2100      	movs	r1, #0
 8004a02:	f001 fdd1 	bl	80065a8 <utils_intToText>
                if (result == 0) return 0;
 8004a06:	b1a0      	cbz	r0, 8004a32 <object_getRegisterPayloadBufferLength+0xce>
                index += result;
 8004a08:	4404      	add	r4, r0
                index += strlen(REG_PATH_END);
 8004a0a:	3402      	adds	r4, #2
            for (targetP = objectP->instanceList ; targetP != NULL ; targetP = targetP->next)
 8004a0c:	682d      	ldr	r5, [r5, #0]
 8004a0e:	b12d      	cbz	r5, 8004a1c <object_getRegisterPayloadBufferLength+0xb8>
                if (index != start + length)
 8004a10:	eb08 0307 	add.w	r3, r8, r7
 8004a14:	42a3      	cmp	r3, r4
 8004a16:	d0f0      	beq.n	80049fa <object_getRegisterPayloadBufferLength+0x96>
                    index += length;
 8004a18:	443c      	add	r4, r7
 8004a1a:	e7ee      	b.n	80049fa <object_getRegisterPayloadBufferLength+0x96>
 8004a1c:	46a0      	mov	r8, r4
 8004a1e:	e7d3      	b.n	80049c8 <object_getRegisterPayloadBufferLength+0x64>
    index += 1;  // account for trailing null
 8004a20:	f108 0001 	add.w	r0, r8, #1
    return index;
 8004a24:	e006      	b.n	8004a34 <object_getRegisterPayloadBufferLength+0xd0>
        if (result < 0) return 0;
 8004a26:	2000      	movs	r0, #0
 8004a28:	e004      	b.n	8004a34 <object_getRegisterPayloadBufferLength+0xd0>
            if (result < 0) return 0;
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e002      	b.n	8004a34 <object_getRegisterPayloadBufferLength+0xd0>
            if (result < 0) return 0;
 8004a2e:	2000      	movs	r0, #0
 8004a30:	e000      	b.n	8004a34 <object_getRegisterPayloadBufferLength+0xd0>
                if (result == 0) return 0;
 8004a32:	2000      	movs	r0, #0
}
 8004a34:	b004      	add	sp, #16
 8004a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004a3c <object_getRegisterPayload>:
{
 8004a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a40:	4607      	mov	r7, r0
 8004a42:	460d      	mov	r5, r1
 8004a44:	4616      	mov	r6, r2
    result = utils_stringCopy((char *)buffer, bufferLen, REG_START);
 8004a46:	4a6b      	ldr	r2, [pc, #428]	; (8004bf4 <object_getRegisterPayload+0x1b8>)
 8004a48:	4631      	mov	r1, r6
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f002 f9fd 	bl	8006e4a <utils_stringCopy>
    if (result < 0) return 0;
 8004a50:	1e04      	subs	r4, r0, #0
 8004a52:	f2c0 80b4 	blt.w	8004bbe <object_getRegisterPayload+0x182>
    if ((contextP->altPath != NULL)
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	b10a      	cbz	r2, 8004a5e <object_getRegisterPayload+0x22>
     && (contextP->altPath[0] != 0))
 8004a5a:	7813      	ldrb	r3, [r2, #0]
 8004a5c:	b9ab      	cbnz	r3, 8004a8a <object_getRegisterPayload+0x4e>
        result = utils_stringCopy((char *)buffer + index, bufferLen - index, REG_DEFAULT_PATH);
 8004a5e:	4a66      	ldr	r2, [pc, #408]	; (8004bf8 <object_getRegisterPayload+0x1bc>)
 8004a60:	1b31      	subs	r1, r6, r4
 8004a62:	1928      	adds	r0, r5, r4
 8004a64:	f002 f9f1 	bl	8006e4a <utils_stringCopy>
    if (result < 0) return 0;
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	f2c0 80aa 	blt.w	8004bc2 <object_getRegisterPayload+0x186>
    index += result;
 8004a6e:	4404      	add	r4, r0
    result = utils_stringCopy((char *)buffer + index, bufferLen - index, REG_LWM2M_RESOURCE_TYPE);
 8004a70:	4a62      	ldr	r2, [pc, #392]	; (8004bfc <object_getRegisterPayload+0x1c0>)
 8004a72:	1b31      	subs	r1, r6, r4
 8004a74:	1928      	adds	r0, r5, r4
 8004a76:	f002 f9e8 	bl	8006e4a <utils_stringCopy>
    if (result < 0) return 0;
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	f2c0 80a4 	blt.w	8004bc8 <object_getRegisterPayload+0x18c>
    index += result;
 8004a80:	eb00 0804 	add.w	r8, r0, r4
    for (objectP = contextP->objectList; objectP != NULL; objectP = objectP->next)
 8004a84:	f8d7 a018 	ldr.w	sl, [r7, #24]
 8004a88:	e06e      	b.n	8004b68 <object_getRegisterPayload+0x12c>
        result = utils_stringCopy((char *)buffer + index, bufferLen - index, contextP->altPath);
 8004a8a:	1b31      	subs	r1, r6, r4
 8004a8c:	1928      	adds	r0, r5, r4
 8004a8e:	f002 f9dc 	bl	8006e4a <utils_stringCopy>
 8004a92:	e7e9      	b.n	8004a68 <object_getRegisterPayload+0x2c>
            index--;
 8004a94:	3c01      	subs	r4, #1
            result = utils_stringCopy((char *)buffer + index, bufferLen - index, REG_VERSION_START);
 8004a96:	4a5a      	ldr	r2, [pc, #360]	; (8004c00 <object_getRegisterPayload+0x1c4>)
 8004a98:	1b31      	subs	r1, r6, r4
 8004a9a:	1928      	adds	r0, r5, r4
 8004a9c:	f002 f9d5 	bl	8006e4a <utils_stringCopy>
            if (result < 0) return 0;
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	f2c0 8095 	blt.w	8004bd0 <object_getRegisterPayload+0x194>
            index += result;
 8004aa6:	4404      	add	r4, r0
            result = utils_uintToText(objectP->versionMajor, buffer + index, bufferLen - index);
 8004aa8:	1b33      	subs	r3, r6, r4
 8004aaa:	192a      	adds	r2, r5, r4
 8004aac:	f89a 0006 	ldrb.w	r0, [sl, #6]
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	f001 fd3b 	bl	800652c <utils_uintToText>
            if (result < 0) return 0;
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	f2c0 808c 	blt.w	8004bd4 <object_getRegisterPayload+0x198>
            index += result;
 8004abc:	4404      	add	r4, r0
            if( index >= bufferLen) return 0;
 8004abe:	42a6      	cmp	r6, r4
 8004ac0:	f240 808a 	bls.w	8004bd8 <object_getRegisterPayload+0x19c>
            buffer[index++] = '.';
 8004ac4:	1c67      	adds	r7, r4, #1
 8004ac6:	232e      	movs	r3, #46	; 0x2e
 8004ac8:	552b      	strb	r3, [r5, r4]
            result = utils_uintToText(objectP->versionMinor, buffer + index, bufferLen - index);
 8004aca:	1bf3      	subs	r3, r6, r7
 8004acc:	19ea      	adds	r2, r5, r7
 8004ace:	f89a 0007 	ldrb.w	r0, [sl, #7]
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	f001 fd2a 	bl	800652c <utils_uintToText>
            if (result < 0) return 0;
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	db7f      	blt.n	8004bdc <object_getRegisterPayload+0x1a0>
            index += result;
 8004adc:	4438      	add	r0, r7
            if( index >= bufferLen) return 0;
 8004ade:	4286      	cmp	r6, r0
 8004ae0:	d97e      	bls.n	8004be0 <object_getRegisterPayload+0x1a4>
            buffer[index++] = REG_DELIMITER;
 8004ae2:	1c44      	adds	r4, r0, #1
 8004ae4:	232c      	movs	r3, #44	; 0x2c
 8004ae6:	542b      	strb	r3, [r5, r0]
            if(objectP->instanceList != NULL)
 8004ae8:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d056      	beq.n	8004b9e <object_getRegisterPayload+0x162>
                result = prv_getObjectTemplate(buffer + index, bufferLen - index, objectP->objID);
 8004af0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8004af4:	1b31      	subs	r1, r6, r4
 8004af6:	1928      	adds	r0, r5, r4
 8004af8:	f7ff febe 	bl	8004878 <prv_getObjectTemplate>
                if (result < 0) return 0;
 8004afc:	2800      	cmp	r0, #0
 8004afe:	db71      	blt.n	8004be4 <object_getRegisterPayload+0x1a8>
                length = result;
 8004b00:	4681      	mov	r9, r0
                start = index;
 8004b02:	46a0      	mov	r8, r4
                index += length;
 8004b04:	4404      	add	r4, r0
 8004b06:	e04a      	b.n	8004b9e <object_getRegisterPayload+0x162>
            index--;
 8004b08:	3c01      	subs	r4, #1
            result = utils_stringCopy((char *)buffer + index, bufferLen - index, REG_PATH_END);
 8004b0a:	4a3e      	ldr	r2, [pc, #248]	; (8004c04 <object_getRegisterPayload+0x1c8>)
 8004b0c:	1b31      	subs	r1, r6, r4
 8004b0e:	1928      	adds	r0, r5, r4
 8004b10:	f002 f99b 	bl	8006e4a <utils_stringCopy>
            if (result < 0) return 0;
 8004b14:	2800      	cmp	r0, #0
 8004b16:	db67      	blt.n	8004be8 <object_getRegisterPayload+0x1ac>
            index += result;
 8004b18:	4404      	add	r4, r0
 8004b1a:	e040      	b.n	8004b9e <object_getRegisterPayload+0x162>
                    memcpy(buffer + index, buffer + start, length);
 8004b1c:	464a      	mov	r2, r9
 8004b1e:	eb05 0108 	add.w	r1, r5, r8
 8004b22:	1928      	adds	r0, r5, r4
 8004b24:	f013 fb24 	bl	8018170 <memcpy>
                    index += length;
 8004b28:	444c      	add	r4, r9
                result = utils_intToText(targetP->id, buffer + index, bufferLen - index);
 8004b2a:	1b33      	subs	r3, r6, r4
 8004b2c:	192a      	adds	r2, r5, r4
 8004b2e:	88b8      	ldrh	r0, [r7, #4]
 8004b30:	2100      	movs	r1, #0
 8004b32:	f001 fd39 	bl	80065a8 <utils_intToText>
                if (result == 0) return 0;
 8004b36:	2800      	cmp	r0, #0
 8004b38:	d058      	beq.n	8004bec <object_getRegisterPayload+0x1b0>
                index += result;
 8004b3a:	4404      	add	r4, r0
                result = utils_stringCopy((char *)buffer + index, bufferLen - index, REG_PATH_END);
 8004b3c:	4a31      	ldr	r2, [pc, #196]	; (8004c04 <object_getRegisterPayload+0x1c8>)
 8004b3e:	1b31      	subs	r1, r6, r4
 8004b40:	1928      	adds	r0, r5, r4
 8004b42:	f002 f982 	bl	8006e4a <utils_stringCopy>
                if (result < 0) return 0;
 8004b46:	2800      	cmp	r0, #0
 8004b48:	db52      	blt.n	8004bf0 <object_getRegisterPayload+0x1b4>
                index += result;
 8004b4a:	4404      	add	r4, r0
            for (targetP = objectP->instanceList ; targetP != NULL ; targetP = targetP->next)
 8004b4c:	683f      	ldr	r7, [r7, #0]
 8004b4e:	b147      	cbz	r7, 8004b62 <object_getRegisterPayload+0x126>
                if (index != start + length)
 8004b50:	eb08 0309 	add.w	r3, r8, r9
 8004b54:	42a3      	cmp	r3, r4
 8004b56:	d0e8      	beq.n	8004b2a <object_getRegisterPayload+0xee>
                    if (bufferLen - index <= length) return 0;
 8004b58:	1b33      	subs	r3, r6, r4
 8004b5a:	454b      	cmp	r3, r9
 8004b5c:	d8de      	bhi.n	8004b1c <object_getRegisterPayload+0xe0>
 8004b5e:	2000      	movs	r0, #0
 8004b60:	e030      	b.n	8004bc4 <object_getRegisterPayload+0x188>
 8004b62:	46a0      	mov	r8, r4
    for (objectP = contextP->objectList; objectP != NULL; objectP = objectP->next)
 8004b64:	f8da a000 	ldr.w	sl, [sl]
 8004b68:	f1ba 0f00 	cmp.w	sl, #0
 8004b6c:	d01d      	beq.n	8004baa <object_getRegisterPayload+0x16e>
        if (objectP->objID == LWM2M_SECURITY_OBJECT_ID) continue;
 8004b6e:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8004b72:	2a00      	cmp	r2, #0
 8004b74:	d0f6      	beq.n	8004b64 <object_getRegisterPayload+0x128>
        result = prv_getObjectTemplate(buffer + index, bufferLen - index, objectP->objID);
 8004b76:	eba6 0108 	sub.w	r1, r6, r8
 8004b7a:	eb05 0008 	add.w	r0, r5, r8
 8004b7e:	f7ff fe7b 	bl	8004878 <prv_getObjectTemplate>
        if (result < 0) return 0;
 8004b82:	2800      	cmp	r0, #0
 8004b84:	db22      	blt.n	8004bcc <object_getRegisterPayload+0x190>
        length = result;
 8004b86:	4681      	mov	r9, r0
        index += length;
 8004b88:	eb08 0400 	add.w	r4, r8, r0
        if (objectP->versionMajor != 0 || objectP->versionMinor != 0)
 8004b8c:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f47f af7f 	bne.w	8004a94 <object_getRegisterPayload+0x58>
        else if(objectP->instanceList == NULL)
 8004b96:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0b4      	beq.n	8004b08 <object_getRegisterPayload+0xcc>
        if (objectP->instanceList != NULL)
 8004b9e:	f8da 7008 	ldr.w	r7, [sl, #8]
 8004ba2:	2f00      	cmp	r7, #0
 8004ba4:	d1d3      	bne.n	8004b4e <object_getRegisterPayload+0x112>
 8004ba6:	46a0      	mov	r8, r4
 8004ba8:	e7dc      	b.n	8004b64 <object_getRegisterPayload+0x128>
    if (index > 0)
 8004baa:	f1b8 0f00 	cmp.w	r8, #0
 8004bae:	d001      	beq.n	8004bb4 <object_getRegisterPayload+0x178>
        index = index - 1;  // remove trailing ','
 8004bb0:	f108 38ff 	add.w	r8, r8, #4294967295
    buffer[index] = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f805 3008 	strb.w	r3, [r5, r8]
    return index;
 8004bba:	4640      	mov	r0, r8
 8004bbc:	e002      	b.n	8004bc4 <object_getRegisterPayload+0x188>
    if (result < 0) return 0;
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	e000      	b.n	8004bc4 <object_getRegisterPayload+0x188>
    if (result < 0) return 0;
 8004bc2:	2000      	movs	r0, #0
}
 8004bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (result < 0) return 0;
 8004bc8:	2000      	movs	r0, #0
 8004bca:	e7fb      	b.n	8004bc4 <object_getRegisterPayload+0x188>
        if (result < 0) return 0;
 8004bcc:	2000      	movs	r0, #0
 8004bce:	e7f9      	b.n	8004bc4 <object_getRegisterPayload+0x188>
            if (result < 0) return 0;
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	e7f7      	b.n	8004bc4 <object_getRegisterPayload+0x188>
            if (result < 0) return 0;
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	e7f5      	b.n	8004bc4 <object_getRegisterPayload+0x188>
            if( index >= bufferLen) return 0;
 8004bd8:	2000      	movs	r0, #0
 8004bda:	e7f3      	b.n	8004bc4 <object_getRegisterPayload+0x188>
            if (result < 0) return 0;
 8004bdc:	2000      	movs	r0, #0
 8004bde:	e7f1      	b.n	8004bc4 <object_getRegisterPayload+0x188>
            if( index >= bufferLen) return 0;
 8004be0:	2000      	movs	r0, #0
 8004be2:	e7ef      	b.n	8004bc4 <object_getRegisterPayload+0x188>
                if (result < 0) return 0;
 8004be4:	2000      	movs	r0, #0
 8004be6:	e7ed      	b.n	8004bc4 <object_getRegisterPayload+0x188>
            if (result < 0) return 0;
 8004be8:	2000      	movs	r0, #0
 8004bea:	e7eb      	b.n	8004bc4 <object_getRegisterPayload+0x188>
                if (result == 0) return 0;
 8004bec:	2000      	movs	r0, #0
 8004bee:	e7e9      	b.n	8004bc4 <object_getRegisterPayload+0x188>
                if (result < 0) return 0;
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	e7e7      	b.n	8004bc4 <object_getRegisterPayload+0x188>
 8004bf4:	0801b834 	.word	0x0801b834
 8004bf8:	0801b838 	.word	0x0801b838
 8004bfc:	0801b83c 	.word	0x0801b83c
 8004c00:	0801b858 	.word	0x0801b858
 8004c04:	0801b818 	.word	0x0801b818

08004c08 <object_getServers>:

int object_getServers(lwm2m_context_t * contextP, bool checkOnly)
{
 8004c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c0c:	b088      	sub	sp, #32
 8004c0e:	4605      	mov	r5, r0
 8004c10:	4688      	mov	r8, r1
    lwm2m_object_t * serverObjP = NULL;
    lwm2m_list_t * securityInstP;   // instanceID of the server in the LWM2M Security Object

    LOG("Entering");

    for (objectP = contextP->objectList; objectP != NULL; objectP = objectP->next)
 8004c12:	6983      	ldr	r3, [r0, #24]
    lwm2m_object_t * serverObjP = NULL;
 8004c14:	2700      	movs	r7, #0
    lwm2m_object_t * securityObjP = NULL;
 8004c16:	463e      	mov	r6, r7
    for (objectP = contextP->objectList; objectP != NULL; objectP = objectP->next)
 8004c18:	e001      	b.n	8004c1e <object_getServers+0x16>
    {
        if (objectP->objID == LWM2M_SECURITY_OBJECT_ID)
        {
            securityObjP = objectP;
 8004c1a:	461e      	mov	r6, r3
    for (objectP = contextP->objectList; objectP != NULL; objectP = objectP->next)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	b133      	cbz	r3, 8004c2e <object_getServers+0x26>
        if (objectP->objID == LWM2M_SECURITY_OBJECT_ID)
 8004c20:	889a      	ldrh	r2, [r3, #4]
 8004c22:	2a00      	cmp	r2, #0
 8004c24:	d0f9      	beq.n	8004c1a <object_getServers+0x12>
        }
        else if (objectP->objID == LWM2M_SERVER_OBJECT_ID)
 8004c26:	2a01      	cmp	r2, #1
 8004c28:	d1f8      	bne.n	8004c1c <object_getServers+0x14>
        {
            serverObjP = objectP;
 8004c2a:	461f      	mov	r7, r3
 8004c2c:	e7f6      	b.n	8004c1c <object_getServers+0x14>
        }
    }

    if (NULL == securityObjP) return -1;
 8004c2e:	2e00      	cmp	r6, #0
 8004c30:	f000 8119 	beq.w	8004e66 <object_getServers+0x25e>

    securityInstP = securityObjP->instanceList;
 8004c34:	68b4      	ldr	r4, [r6, #8]
    while (securityInstP != NULL)
 8004c36:	e031      	b.n	8004c9c <object_getServers+0x94>
            if (dataP == NULL) return -1;
            dataP[0].id = LWM2M_SECURITY_BOOTSTRAP_ID;

            if (securityObjP->readFunc(contextP, securityInstP->id, &size, &dataP, securityObjP) != COAP_205_CONTENT)
            {
                lwm2m_data_free(size, dataP);
 8004c38:	9904      	ldr	r1, [sp, #16]
 8004c3a:	9805      	ldr	r0, [sp, #20]
 8004c3c:	f002 fa64 	bl	8007108 <lwm2m_data_free>
                return -1;
 8004c40:	e01f      	b.n	8004c82 <object_getServers+0x7a>
            }

            targetP = (lwm2m_server_t *)lwm2m_malloc(sizeof(lwm2m_server_t));
            if (targetP == NULL) {
                lwm2m_data_free(size, dataP);
 8004c42:	9904      	ldr	r1, [sp, #16]
 8004c44:	9805      	ldr	r0, [sp, #20]
 8004c46:	f002 fa5f 	bl	8007108 <lwm2m_data_free>
                return -1;
 8004c4a:	e01a      	b.n	8004c82 <object_getServers+0x7a>
            memset(targetP, 0, sizeof(lwm2m_server_t));
            targetP->secObjInstID = securityInstP->id;

            if (0 == lwm2m_data_decode_bool(dataP, &isBootstrap))
            {
                lwm2m_free(targetP);
 8004c4c:	4648      	mov	r0, r9
 8004c4e:	f003 ff87 	bl	8008b60 <lwm2m_free>
                lwm2m_data_free(size, dataP);
 8004c52:	9904      	ldr	r1, [sp, #16]
 8004c54:	9805      	ldr	r0, [sp, #20]
 8004c56:	f002 fa57 	bl	8007108 <lwm2m_data_free>
                return -1;
 8004c5a:	e012      	b.n	8004c82 <object_getServers+0x7a>
                lwm2m_data_free(size, dataP);
                size = 1;
                dataP = lwm2m_data_new(size);
                if (dataP == NULL)
                {
                    lwm2m_free(targetP);
 8004c5c:	4648      	mov	r0, r9
 8004c5e:	f003 ff7f 	bl	8008b60 <lwm2m_free>
                    return -1;
 8004c62:	e00e      	b.n	8004c82 <object_getServers+0x7a>
                }
                dataP[0].id = LWM2M_SECURITY_HOLD_OFF_ID;
                if (securityObjP->readFunc(contextP, securityInstP->id, &size, &dataP, securityObjP) != COAP_205_CONTENT)
                {
                    lwm2m_free(targetP);
 8004c64:	4648      	mov	r0, r9
 8004c66:	f003 ff7b 	bl	8008b60 <lwm2m_free>
                    lwm2m_data_free(size, dataP);
 8004c6a:	9904      	ldr	r1, [sp, #16]
 8004c6c:	9805      	ldr	r0, [sp, #20]
 8004c6e:	f002 fa4b 	bl	8007108 <lwm2m_data_free>
                    return -1;
 8004c72:	e006      	b.n	8004c82 <object_getServers+0x7a>
                }
                if (0 == lwm2m_data_decode_int(dataP, &value)
                 || value < 0 || value > 0xFFFFFFFF)             // This is an implementation limit
                {
                    lwm2m_free(targetP);
 8004c74:	4648      	mov	r0, r9
 8004c76:	f003 ff73 	bl	8008b60 <lwm2m_free>
                    lwm2m_data_free(size, dataP);
 8004c7a:	9904      	ldr	r1, [sp, #16]
 8004c7c:	9805      	ldr	r0, [sp, #20]
 8004c7e:	f002 fa43 	bl	8007108 <lwm2m_data_free>
            if (dataP == NULL) return -1;
 8004c82:	f04f 30ff 	mov.w	r0, #4294967295
 8004c86:	e0eb      	b.n	8004e60 <object_getServers+0x258>
                {
                    lwm2m_free(targetP);
                }
                else
                {
                    contextP->bootstrapServerList = (lwm2m_server_t*)LWM2M_LIST_ADD(contextP->bootstrapServerList, targetP);
 8004c88:	4649      	mov	r1, r9
 8004c8a:	6928      	ldr	r0, [r5, #16]
 8004c8c:	f7ff fd10 	bl	80046b0 <lwm2m_list_add>
 8004c90:	6128      	str	r0, [r5, #16]
                    {
                        contextP->serverList = (lwm2m_server_t*)LWM2M_LIST_ADD(contextP->serverList, targetP);
                    }
                }
            }
            lwm2m_data_free(size, dataP);
 8004c92:	9904      	ldr	r1, [sp, #16]
 8004c94:	9805      	ldr	r0, [sp, #20]
 8004c96:	f002 fa37 	bl	8007108 <lwm2m_data_free>
        }
        securityInstP = securityInstP->next;
 8004c9a:	6824      	ldr	r4, [r4, #0]
    while (securityInstP != NULL)
 8004c9c:	2c00      	cmp	r4, #0
 8004c9e:	f000 80de 	beq.w	8004e5e <object_getServers+0x256>
        if (LWM2M_LIST_FIND(contextP->bootstrapServerList, securityInstP->id) == NULL
 8004ca2:	88a1      	ldrh	r1, [r4, #4]
 8004ca4:	6928      	ldr	r0, [r5, #16]
 8004ca6:	f7ff fd1c 	bl	80046e2 <lwm2m_list_find>
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d1f5      	bne.n	8004c9a <object_getServers+0x92>
         && LWM2M_LIST_FIND(contextP->serverList, securityInstP->id) == NULL)
 8004cae:	88a1      	ldrh	r1, [r4, #4]
 8004cb0:	6968      	ldr	r0, [r5, #20]
 8004cb2:	f7ff fd16 	bl	80046e2 <lwm2m_list_find>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	d1ef      	bne.n	8004c9a <object_getServers+0x92>
            int64_t value = 0;
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e9cd 2306 	strd	r2, r3, [sp, #24]
            size = 1;
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	9005      	str	r0, [sp, #20]
            dataP = lwm2m_data_new(size);
 8004cc6:	f002 fa0e 	bl	80070e6 <lwm2m_data_new>
 8004cca:	9004      	str	r0, [sp, #16]
            if (dataP == NULL) return -1;
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d0d8      	beq.n	8004c82 <object_getServers+0x7a>
            dataP[0].id = LWM2M_SECURITY_BOOTSTRAP_ID;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	8043      	strh	r3, [r0, #2]
            if (securityObjP->readFunc(contextP, securityInstP->id, &size, &dataP, securityObjP) != COAP_205_CONTENT)
 8004cd4:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8004cd8:	88a1      	ldrh	r1, [r4, #4]
 8004cda:	9600      	str	r6, [sp, #0]
 8004cdc:	ab04      	add	r3, sp, #16
 8004cde:	aa05      	add	r2, sp, #20
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	47c8      	blx	r9
 8004ce4:	2845      	cmp	r0, #69	; 0x45
 8004ce6:	d1a7      	bne.n	8004c38 <object_getServers+0x30>
            targetP = (lwm2m_server_t *)lwm2m_malloc(sizeof(lwm2m_server_t));
 8004ce8:	2038      	movs	r0, #56	; 0x38
 8004cea:	f003 ff35 	bl	8008b58 <lwm2m_malloc>
            if (targetP == NULL) {
 8004cee:	4681      	mov	r9, r0
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	d0a6      	beq.n	8004c42 <object_getServers+0x3a>
            memset(targetP, 0, sizeof(lwm2m_server_t));
 8004cf4:	2238      	movs	r2, #56	; 0x38
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	f013 fa62 	bl	80181c0 <memset>
            targetP->secObjInstID = securityInstP->id;
 8004cfc:	88a3      	ldrh	r3, [r4, #4]
 8004cfe:	f8a9 3004 	strh.w	r3, [r9, #4]
            if (0 == lwm2m_data_decode_bool(dataP, &isBootstrap))
 8004d02:	f10d 010f 	add.w	r1, sp, #15
 8004d06:	9804      	ldr	r0, [sp, #16]
 8004d08:	f002 fb49 	bl	800739e <lwm2m_data_decode_bool>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	d09d      	beq.n	8004c4c <object_getServers+0x44>
            if (isBootstrap)
 8004d10:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d03a      	beq.n	8004d8e <object_getServers+0x186>
                targetP->shortID = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f8a9 3006 	strh.w	r3, [r9, #6]
                targetP->servObjInstID = LWM2M_MAX_ID;
 8004d1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d22:	f8a9 3030 	strh.w	r3, [r9, #48]	; 0x30
                lwm2m_data_free(size, dataP);
 8004d26:	9904      	ldr	r1, [sp, #16]
 8004d28:	9805      	ldr	r0, [sp, #20]
 8004d2a:	f002 f9ed 	bl	8007108 <lwm2m_data_free>
                size = 1;
 8004d2e:	2001      	movs	r0, #1
 8004d30:	9005      	str	r0, [sp, #20]
                dataP = lwm2m_data_new(size);
 8004d32:	f002 f9d8 	bl	80070e6 <lwm2m_data_new>
 8004d36:	9004      	str	r0, [sp, #16]
                if (dataP == NULL)
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	d08f      	beq.n	8004c5c <object_getServers+0x54>
                dataP[0].id = LWM2M_SECURITY_HOLD_OFF_ID;
 8004d3c:	230b      	movs	r3, #11
 8004d3e:	8043      	strh	r3, [r0, #2]
                if (securityObjP->readFunc(contextP, securityInstP->id, &size, &dataP, securityObjP) != COAP_205_CONTENT)
 8004d40:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8004d44:	88a1      	ldrh	r1, [r4, #4]
 8004d46:	9600      	str	r6, [sp, #0]
 8004d48:	ab04      	add	r3, sp, #16
 8004d4a:	aa05      	add	r2, sp, #20
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	47d0      	blx	sl
 8004d50:	2845      	cmp	r0, #69	; 0x45
 8004d52:	d187      	bne.n	8004c64 <object_getServers+0x5c>
                if (0 == lwm2m_data_decode_int(dataP, &value)
 8004d54:	a906      	add	r1, sp, #24
 8004d56:	9804      	ldr	r0, [sp, #16]
 8004d58:	f002 fa2f 	bl	80071ba <lwm2m_data_decode_int>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d089      	beq.n	8004c74 <object_getServers+0x6c>
                 || value < 0 || value > 0xFFFFFFFF)             // This is an implementation limit
 8004d60:	9a06      	ldr	r2, [sp, #24]
 8004d62:	9b07      	ldr	r3, [sp, #28]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	db85      	blt.n	8004c74 <object_getServers+0x6c>
 8004d68:	f04f 31ff 	mov.w	r1, #4294967295
 8004d6c:	4291      	cmp	r1, r2
 8004d6e:	f04f 0100 	mov.w	r1, #0
 8004d72:	4199      	sbcs	r1, r3
 8004d74:	f6ff af7e 	blt.w	8004c74 <object_getServers+0x6c>
                targetP->lifetime = value;
 8004d78:	f8c9 2008 	str.w	r2, [r9, #8]
 8004d7c:	f8c9 300c 	str.w	r3, [r9, #12]
                if (checkOnly)
 8004d80:	f1b8 0f00 	cmp.w	r8, #0
 8004d84:	d080      	beq.n	8004c88 <object_getServers+0x80>
                    lwm2m_free(targetP);
 8004d86:	4648      	mov	r0, r9
 8004d88:	f003 feea 	bl	8008b60 <lwm2m_free>
 8004d8c:	e781      	b.n	8004c92 <object_getServers+0x8a>
                lwm2m_data_free(size, dataP);
 8004d8e:	9904      	ldr	r1, [sp, #16]
 8004d90:	9805      	ldr	r0, [sp, #20]
 8004d92:	f002 f9b9 	bl	8007108 <lwm2m_data_free>
                size = 1;
 8004d96:	2001      	movs	r0, #1
 8004d98:	9005      	str	r0, [sp, #20]
                dataP = lwm2m_data_new(size);
 8004d9a:	f002 f9a4 	bl	80070e6 <lwm2m_data_new>
 8004d9e:	9004      	str	r0, [sp, #16]
                if (dataP == NULL)
 8004da0:	2800      	cmp	r0, #0
 8004da2:	d036      	beq.n	8004e12 <object_getServers+0x20a>
                dataP[0].id = LWM2M_SECURITY_SHORT_SERVER_ID;
 8004da4:	230a      	movs	r3, #10
 8004da6:	8043      	strh	r3, [r0, #2]
                if (securityObjP->readFunc(contextP, securityInstP->id, &size, &dataP, securityObjP) != COAP_205_CONTENT)
 8004da8:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8004dac:	88a1      	ldrh	r1, [r4, #4]
 8004dae:	9600      	str	r6, [sp, #0]
 8004db0:	ab04      	add	r3, sp, #16
 8004db2:	aa05      	add	r2, sp, #20
 8004db4:	4628      	mov	r0, r5
 8004db6:	47d0      	blx	sl
 8004db8:	2845      	cmp	r0, #69	; 0x45
 8004dba:	d12e      	bne.n	8004e1a <object_getServers+0x212>
                if (0 == lwm2m_data_decode_int(dataP, &value)
 8004dbc:	a906      	add	r1, sp, #24
 8004dbe:	9804      	ldr	r0, [sp, #16]
 8004dc0:	f002 f9fb 	bl	80071ba <lwm2m_data_decode_int>
 8004dc4:	b388      	cbz	r0, 8004e2a <object_getServers+0x222>
                 || value < 1 || value > 0xFFFF)                // 0 is forbidden as a Short Server ID
 8004dc6:	9b06      	ldr	r3, [sp, #24]
 8004dc8:	9a07      	ldr	r2, [sp, #28]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	f172 0100 	sbcs.w	r1, r2, #0
 8004dd0:	db2b      	blt.n	8004e2a <object_getServers+0x222>
 8004dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd6:	f172 0200 	sbcs.w	r2, r2, #0
 8004dda:	da26      	bge.n	8004e2a <object_getServers+0x222>
                targetP->shortID = value;
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	f8a9 2006 	strh.w	r2, [r9, #6]
                serverInstP = prv_findServerInstance(contextP, serverObjP, targetP->shortID);
 8004de2:	4639      	mov	r1, r7
 8004de4:	4628      	mov	r0, r5
 8004de6:	f7ff fcb3 	bl	8004750 <prv_findServerInstance>
                if (serverInstP == NULL)
 8004dea:	b330      	cbz	r0, 8004e3a <object_getServers+0x232>
                    targetP->servObjInstID = serverInstP->id;
 8004dec:	8882      	ldrh	r2, [r0, #4]
 8004dee:	f8a9 2030 	strh.w	r2, [r9, #48]	; 0x30
                    if (0 != prv_getMandatoryInfo(contextP, serverObjP, serverInstP->id, targetP))
 8004df2:	464b      	mov	r3, r9
 8004df4:	4639      	mov	r1, r7
 8004df6:	4628      	mov	r0, r5
 8004df8:	f7ff fce4 	bl	80047c4 <prv_getMandatoryInfo>
 8004dfc:	bb08      	cbnz	r0, 8004e42 <object_getServers+0x23a>
                    targetP->status = STATE_DEREGISTERED;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f889 3020 	strb.w	r3, [r9, #32]
                    if (checkOnly)
 8004e04:	f1b8 0f00 	cmp.w	r8, #0
 8004e08:	d023      	beq.n	8004e52 <object_getServers+0x24a>
                        lwm2m_free(targetP);
 8004e0a:	4648      	mov	r0, r9
 8004e0c:	f003 fea8 	bl	8008b60 <lwm2m_free>
 8004e10:	e73f      	b.n	8004c92 <object_getServers+0x8a>
                    lwm2m_free(targetP);
 8004e12:	4648      	mov	r0, r9
 8004e14:	f003 fea4 	bl	8008b60 <lwm2m_free>
                    return -1;
 8004e18:	e733      	b.n	8004c82 <object_getServers+0x7a>
                    lwm2m_free(targetP);
 8004e1a:	4648      	mov	r0, r9
 8004e1c:	f003 fea0 	bl	8008b60 <lwm2m_free>
                    lwm2m_data_free(size, dataP);
 8004e20:	9904      	ldr	r1, [sp, #16]
 8004e22:	9805      	ldr	r0, [sp, #20]
 8004e24:	f002 f970 	bl	8007108 <lwm2m_data_free>
                    return -1;
 8004e28:	e72b      	b.n	8004c82 <object_getServers+0x7a>
                    lwm2m_free(targetP);
 8004e2a:	4648      	mov	r0, r9
 8004e2c:	f003 fe98 	bl	8008b60 <lwm2m_free>
                    lwm2m_data_free(size, dataP);
 8004e30:	9904      	ldr	r1, [sp, #16]
 8004e32:	9805      	ldr	r0, [sp, #20]
 8004e34:	f002 f968 	bl	8007108 <lwm2m_data_free>
                    return -1;
 8004e38:	e723      	b.n	8004c82 <object_getServers+0x7a>
                    lwm2m_free(targetP);
 8004e3a:	4648      	mov	r0, r9
 8004e3c:	f003 fe90 	bl	8008b60 <lwm2m_free>
 8004e40:	e727      	b.n	8004c92 <object_getServers+0x8a>
                        lwm2m_free(targetP);
 8004e42:	4648      	mov	r0, r9
 8004e44:	f003 fe8c 	bl	8008b60 <lwm2m_free>
                        lwm2m_data_free(size, dataP);
 8004e48:	9904      	ldr	r1, [sp, #16]
 8004e4a:	9805      	ldr	r0, [sp, #20]
 8004e4c:	f002 f95c 	bl	8007108 <lwm2m_data_free>
                        return -1;
 8004e50:	e717      	b.n	8004c82 <object_getServers+0x7a>
                        contextP->serverList = (lwm2m_server_t*)LWM2M_LIST_ADD(contextP->serverList, targetP);
 8004e52:	4649      	mov	r1, r9
 8004e54:	6968      	ldr	r0, [r5, #20]
 8004e56:	f7ff fc2b 	bl	80046b0 <lwm2m_list_add>
 8004e5a:	6168      	str	r0, [r5, #20]
 8004e5c:	e719      	b.n	8004c92 <object_getServers+0x8a>
    }

    return 0;
 8004e5e:	2000      	movs	r0, #0
}
 8004e60:	b008      	add	sp, #32
 8004e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (NULL == securityObjP) return -1;
 8004e66:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6a:	e7f9      	b.n	8004e60 <object_getServers+0x258>

08004e6c <observe_findByUri>:
                                     lwm2m_uri_t * uriP)
{
    lwm2m_observed_t * targetP;

    LOG_URI(uriP);
    targetP = contextP->observedList;
 8004e6c:	69c0      	ldr	r0, [r0, #28]
    while (targetP != NULL)
 8004e6e:	e00f      	b.n	8004e90 <observe_findByUri+0x24>
    {
        if (targetP->uri.objectId == uriP->objectId)
        {
            if ((!LWM2M_URI_IS_SET_INSTANCE(uriP) && !LWM2M_URI_IS_SET_INSTANCE(&(targetP->uri)))
 8004e70:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8004e74:	4594      	cmp	ip, r2
 8004e76:	d115      	bne.n	8004ea4 <observe_findByUri+0x38>
 8004e78:	e01f      	b.n	8004eba <observe_findByUri+0x4e>
             || (LWM2M_URI_IS_SET_INSTANCE(uriP) && LWM2M_URI_IS_SET_INSTANCE(&(targetP->uri)) && (uriP->instanceId == targetP->uri.instanceId)))
             {
                 if ((!LWM2M_URI_IS_SET_RESOURCE(uriP) && !LWM2M_URI_IS_SET_RESOURCE(&(targetP->uri)))
 8004e7a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8004e7e:	4594      	cmp	ip, r2
 8004e80:	d120      	bne.n	8004ec4 <observe_findByUri+0x58>
 8004e82:	e02a      	b.n	8004eda <observe_findByUri+0x6e>
                     || (LWM2M_URI_IS_SET_RESOURCE(uriP) && LWM2M_URI_IS_SET_RESOURCE(&(targetP->uri)) && (uriP->resourceId == targetP->uri.resourceId)))
                 {
#ifndef LWM2M_VERSION_1_0
                     if ((!LWM2M_URI_IS_SET_RESOURCE_INSTANCE(uriP) && !LWM2M_URI_IS_SET_RESOURCE_INSTANCE(&(targetP->uri)))
 8004e84:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
 8004e88:	4594      	cmp	ip, r2
 8004e8a:	d12b      	bne.n	8004ee4 <observe_findByUri+0x78>
 8004e8c:	e035      	b.n	8004efa <observe_findByUri+0x8e>
                         return targetP;
                     }
                 }
             }
        }
        targetP = targetP->next;
 8004e8e:	6800      	ldr	r0, [r0, #0]
    while (targetP != NULL)
 8004e90:	b398      	cbz	r0, 8004efa <observe_findByUri+0x8e>
        if (targetP->uri.objectId == uriP->objectId)
 8004e92:	8882      	ldrh	r2, [r0, #4]
 8004e94:	880b      	ldrh	r3, [r1, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d1f9      	bne.n	8004e8e <observe_findByUri+0x22>
            if ((!LWM2M_URI_IS_SET_INSTANCE(uriP) && !LWM2M_URI_IS_SET_INSTANCE(&(targetP->uri)))
 8004e9a:	884b      	ldrh	r3, [r1, #2]
 8004e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d0e5      	beq.n	8004e70 <observe_findByUri+0x4>
             || (LWM2M_URI_IS_SET_INSTANCE(uriP) && LWM2M_URI_IS_SET_INSTANCE(&(targetP->uri)) && (uriP->instanceId == targetP->uri.instanceId)))
 8004ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d0f0      	beq.n	8004e8e <observe_findByUri+0x22>
 8004eac:	88c2      	ldrh	r2, [r0, #6]
 8004eae:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8004eb2:	4562      	cmp	r2, ip
 8004eb4:	d0eb      	beq.n	8004e8e <observe_findByUri+0x22>
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d1e9      	bne.n	8004e8e <observe_findByUri+0x22>
                 if ((!LWM2M_URI_IS_SET_RESOURCE(uriP) && !LWM2M_URI_IS_SET_RESOURCE(&(targetP->uri)))
 8004eba:	888b      	ldrh	r3, [r1, #4]
 8004ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d0da      	beq.n	8004e7a <observe_findByUri+0xe>
                     || (LWM2M_URI_IS_SET_RESOURCE(uriP) && LWM2M_URI_IS_SET_RESOURCE(&(targetP->uri)) && (uriP->resourceId == targetP->uri.resourceId)))
 8004ec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d0e0      	beq.n	8004e8e <observe_findByUri+0x22>
 8004ecc:	8902      	ldrh	r2, [r0, #8]
 8004ece:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8004ed2:	4562      	cmp	r2, ip
 8004ed4:	d0db      	beq.n	8004e8e <observe_findByUri+0x22>
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d1d9      	bne.n	8004e8e <observe_findByUri+0x22>
                     if ((!LWM2M_URI_IS_SET_RESOURCE_INSTANCE(uriP) && !LWM2M_URI_IS_SET_RESOURCE_INSTANCE(&(targetP->uri)))
 8004eda:	88cb      	ldrh	r3, [r1, #6]
 8004edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d0cf      	beq.n	8004e84 <observe_findByUri+0x18>
                      || (LWM2M_URI_IS_SET_RESOURCE_INSTANCE(uriP) && LWM2M_URI_IS_SET_RESOURCE_INSTANCE(&(targetP->uri)) && (uriP->resourceInstanceId == targetP->uri.resourceInstanceId)))
 8004ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d0d0      	beq.n	8004e8e <observe_findByUri+0x22>
 8004eec:	8942      	ldrh	r2, [r0, #10]
 8004eee:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8004ef2:	4562      	cmp	r2, ip
 8004ef4:	d0cb      	beq.n	8004e8e <observe_findByUri+0x22>
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d1c9      	bne.n	8004e8e <observe_findByUri+0x22>
    }

    LOG("Found nothing");
    return NULL;
}
 8004efa:	4770      	bx	lr

08004efc <observe_step>:
}

void observe_step(lwm2m_context_t * contextP,
                  time_t currentTime,
                  time_t * timeoutP)
{
 8004efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f00:	b0bf      	sub	sp, #252	; 0xfc
 8004f02:	9205      	str	r2, [sp, #20]
 8004f04:	469b      	mov	fp, r3
 8004f06:	f8dd 9120 	ldr.w	r9, [sp, #288]	; 0x120
    lwm2m_observed_t * targetP;

    LOG("Entering");
    for (targetP = contextP->observedList ; targetP != NULL ; targetP = targetP->next)
 8004f0a:	69c3      	ldr	r3, [r0, #28]
 8004f0c:	9308      	str	r3, [sp, #32]
 8004f0e:	4680      	mov	r8, r0
 8004f10:	465b      	mov	r3, fp
 8004f12:	46cb      	mov	fp, r9
 8004f14:	4699      	mov	r9, r3
 8004f16:	e2eb      	b.n	80054f0 <observe_step+0x5f4>
            if (COAP_205_CONTENT != object_readData(contextP, &targetP->uri, &size, &dataP)) continue;
            valueP = dataP;
#ifndef LWM2M_VERSION_1_0
            if (LWM2M_URI_IS_SET_RESOURCE_INSTANCE(&targetP->uri)
             && dataP->type == LWM2M_TYPE_MULTIPLE_RESOURCE
             && dataP->value.asChildren.count == 1)
 8004f18:	6883      	ldr	r3, [r0, #8]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	f040 8313 	bne.w	8005546 <observe_step+0x64a>
            {
                valueP = dataP->value.asChildren.array;
 8004f20:	68c0      	ldr	r0, [r0, #12]
 8004f22:	e310      	b.n	8005546 <observe_step+0x64a>
#endif
            dataType = valueP->type;
            switch (dataType)
            {
            case LWM2M_TYPE_INTEGER:
                if (1 != lwm2m_data_decode_int(valueP, &integerValue))
 8004f24:	a916      	add	r1, sp, #88	; 0x58
 8004f26:	f002 f948 	bl	80071ba <lwm2m_data_decode_int>
 8004f2a:	2801      	cmp	r0, #1
 8004f2c:	d01e      	beq.n	8004f6c <observe_step+0x70>
                {
                    lwm2m_data_free(size, dataP);
 8004f2e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004f30:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004f32:	f002 f8e9 	bl	8007108 <lwm2m_data_free>
                    continue;
 8004f36:	e2d8      	b.n	80054ea <observe_step+0x5ee>
                }
                storeValue = true;
                break;
            case LWM2M_TYPE_UNSIGNED_INTEGER:
                if (1 != lwm2m_data_decode_uint(valueP, &unsignedValue))
 8004f38:	a918      	add	r1, sp, #96	; 0x60
 8004f3a:	f002 f991 	bl	8007260 <lwm2m_data_decode_uint>
 8004f3e:	2801      	cmp	r0, #1
 8004f40:	d017      	beq.n	8004f72 <observe_step+0x76>
                {
                    lwm2m_data_free(size, dataP);
 8004f42:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004f44:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004f46:	f002 f8df 	bl	8007108 <lwm2m_data_free>
                    continue;
 8004f4a:	e2ce      	b.n	80054ea <observe_step+0x5ee>
                }
                storeValue = true;
                break;
            case LWM2M_TYPE_FLOAT:
                if (1 != lwm2m_data_decode_float(valueP, &floatValue))
 8004f4c:	a914      	add	r1, sp, #80	; 0x50
 8004f4e:	f002 f9de 	bl	800730e <lwm2m_data_decode_float>
 8004f52:	2801      	cmp	r0, #1
 8004f54:	d010      	beq.n	8004f78 <observe_step+0x7c>
                {
                    lwm2m_data_free(size, dataP);
 8004f56:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004f58:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004f5a:	f002 f8d5 	bl	8007108 <lwm2m_data_free>
                    continue;
 8004f5e:	e2c4      	b.n	80054ea <observe_step+0x5ee>
        bool storeValue = false;
 8004f60:	2300      	movs	r3, #0
 8004f62:	9309      	str	r3, [sp, #36]	; 0x24
        lwm2m_data_type_t dataType = LWM2M_TYPE_UNDEFINED;
 8004f64:	469a      	mov	sl, r3
                break;
            default:
                break;
            }
        }
        for (watcherP = targetP->watcherList ; watcherP != NULL ; watcherP = watcherP->next)
 8004f66:	9b08      	ldr	r3, [sp, #32]
 8004f68:	68dc      	ldr	r4, [r3, #12]
 8004f6a:	e25e      	b.n	800542a <observe_step+0x52e>
                storeValue = true;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f70:	e7f9      	b.n	8004f66 <observe_step+0x6a>
                storeValue = true;
 8004f72:	2301      	movs	r3, #1
 8004f74:	9309      	str	r3, [sp, #36]	; 0x24
 8004f76:	e7f6      	b.n	8004f66 <observe_step+0x6a>
                storeValue = true;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f7c:	e7f3      	b.n	8004f66 <observe_step+0x6a>
                            LOG("Checking lower threshold");
                            // Did we cross the lower threshold ?
                            switch (dataType)
                            {
                            case LWM2M_TYPE_INTEGER:
                                if ((integerValue < watcherP->parameters->lessThan
 8004f7e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8004f82:	f7fb fb97 	bl	80006b4 <__aeabi_l2d>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004f8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f96:	f7fb fe2d 	bl	8000bf4 <__aeabi_dcmplt>
 8004f9a:	b160      	cbz	r0, 8004fb6 <observe_step+0xba>
                                  && watcherP->lastValue.asInteger > watcherP->parameters->lessThan)
 8004f9c:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8004fa0:	f7fb fb88 	bl	80006b4 <__aeabi_l2d>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fac:	f7fb fe22 	bl	8000bf4 <__aeabi_dcmplt>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	f040 80b1 	bne.w	8005118 <observe_step+0x21c>
                                 || (integerValue > watcherP->parameters->lessThan
 8004fb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004fba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fbe:	f7fb fe37 	bl	8000c30 <__aeabi_dcmpgt>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	f000 80aa 	beq.w	800511c <observe_step+0x220>
                                  && watcherP->lastValue.asInteger < watcherP->parameters->lessThan))
 8004fc8:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8004fcc:	f7fb fb72 	bl	80006b4 <__aeabi_l2d>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fd8:	f7fb fe2a 	bl	8000c30 <__aeabi_dcmpgt>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	f040 80a0 	bne.w	8005122 <observe_step+0x226>
                bool notify = false;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	9306      	str	r3, [sp, #24]
 8004fe6:	e05a      	b.n	800509e <observe_step+0x1a2>
                                    LOG("Notify on lower threshold crossing");
                                    notify = true;
                                }
                                break;
                            case LWM2M_TYPE_UNSIGNED_INTEGER:
                                if ((unsignedValue < watcherP->parameters->lessThan
 8004fe8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8004fec:	f7fb fb5a 	bl	80006a4 <__aeabi_ul2d>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004ff8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ffc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005000:	f7fb fdf8 	bl	8000bf4 <__aeabi_dcmplt>
 8005004:	b160      	cbz	r0, 8005020 <observe_step+0x124>
                                  && watcherP->lastValue.asUnsigned > watcherP->parameters->lessThan)
 8005006:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 800500a:	f7fb fb4b 	bl	80006a4 <__aeabi_ul2d>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005016:	f7fb fded 	bl	8000bf4 <__aeabi_dcmplt>
 800501a:	2800      	cmp	r0, #0
 800501c:	f040 8083 	bne.w	8005126 <observe_step+0x22a>
                                 || (unsignedValue > watcherP->parameters->lessThan
 8005020:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005024:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005028:	f7fb fe02 	bl	8000c30 <__aeabi_dcmpgt>
 800502c:	2800      	cmp	r0, #0
 800502e:	d07c      	beq.n	800512a <observe_step+0x22e>
                                  && watcherP->lastValue.asUnsigned < watcherP->parameters->lessThan))
 8005030:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8005034:	f7fb fb36 	bl	80006a4 <__aeabi_ul2d>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005040:	f7fb fdf6 	bl	8000c30 <__aeabi_dcmpgt>
 8005044:	2800      	cmp	r0, #0
 8005046:	d173      	bne.n	8005130 <observe_step+0x234>
                bool notify = false;
 8005048:	2300      	movs	r3, #0
 800504a:	9306      	str	r3, [sp, #24]
 800504c:	e027      	b.n	800509e <observe_step+0x1a2>
                                    LOG("Notify on lower threshold crossing");
                                    notify = true;
                                }
                                break;
                            case LWM2M_TYPE_FLOAT:
                                if ((floatValue < watcherP->parameters->lessThan
 800504e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005052:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005056:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800505a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800505e:	f7fb fde7 	bl	8000c30 <__aeabi_dcmpgt>
 8005062:	b138      	cbz	r0, 8005074 <observe_step+0x178>
                                  && watcherP->lastValue.asFloat > watcherP->parameters->lessThan)
 8005064:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8005068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800506c:	f7fb fdc2 	bl	8000bf4 <__aeabi_dcmplt>
 8005070:	2800      	cmp	r0, #0
 8005072:	d15f      	bne.n	8005134 <observe_step+0x238>
                                 || (floatValue > watcherP->parameters->lessThan
 8005074:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800507c:	f7fb fdba 	bl	8000bf4 <__aeabi_dcmplt>
 8005080:	2800      	cmp	r0, #0
 8005082:	d059      	beq.n	8005138 <observe_step+0x23c>
                                  && watcherP->lastValue.asFloat < watcherP->parameters->lessThan))
 8005084:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8005088:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800508c:	f7fb fdd0 	bl	8000c30 <__aeabi_dcmpgt>
 8005090:	2800      	cmp	r0, #0
 8005092:	d154      	bne.n	800513e <observe_step+0x242>
                bool notify = false;
 8005094:	2300      	movs	r3, #0
 8005096:	9306      	str	r3, [sp, #24]
 8005098:	e001      	b.n	800509e <observe_step+0x1a2>
 800509a:	2300      	movs	r3, #0
 800509c:	9306      	str	r3, [sp, #24]
                                break;
                            default:
                                break;
                            }
                        }
                        if ((watcherP->parameters->toSet & LWM2M_ATTR_FLAG_GREATER_THAN) != 0)
 800509e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050a0:	f013 0f04 	tst.w	r3, #4
 80050a4:	d009      	beq.n	80050ba <observe_step+0x1be>
                        {
                            LOG("Checking upper threshold");
                            // Did we cross the upper threshold ?
                            switch (dataType)
 80050a6:	f1ba 0f07 	cmp.w	sl, #7
 80050aa:	d07b      	beq.n	80051a4 <observe_step+0x2a8>
 80050ac:	f1ba 0f08 	cmp.w	sl, #8
 80050b0:	f000 80ab 	beq.w	800520a <observe_step+0x30e>
 80050b4:	f1ba 0f06 	cmp.w	sl, #6
 80050b8:	d043      	beq.n	8005142 <observe_step+0x246>
                                break;
                            default:
                                break;
                            }
                        }
                        if ((watcherP->parameters->toSet & LWM2M_ATTR_FLAG_STEP) != 0)
 80050ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050bc:	f013 0f10 	tst.w	r3, #16
 80050c0:	f000 8127 	beq.w	8005312 <observe_step+0x416>
                        {
                            LOG("Checking step");

                            switch (dataType)
 80050c4:	f1ba 0f07 	cmp.w	sl, #7
 80050c8:	f000 80da 	beq.w	8005280 <observe_step+0x384>
 80050cc:	f1ba 0f08 	cmp.w	sl, #8
 80050d0:	f000 80ef 	beq.w	80052b2 <observe_step+0x3b6>
 80050d4:	f1ba 0f06 	cmp.w	sl, #6
 80050d8:	f040 811b 	bne.w	8005312 <observe_step+0x416>
                            {
                            case LWM2M_TYPE_INTEGER:
                            {
                                int64_t diff;

                                diff = integerValue - watcherP->lastValue.asInteger;
 80050dc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80050de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80050e0:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
 80050e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050e6:	ebb0 030c 	subs.w	r3, r0, ip
 80050ea:	930c      	str	r3, [sp, #48]	; 0x30
 80050ec:	eb62 0301 	sbc.w	r3, r2, r1
 80050f0:	930a      	str	r3, [sp, #40]	; 0x28
                                if ((diff < 0 && (0 - diff) >= watcherP->parameters->step)
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f2c0 80b5 	blt.w	8005262 <observe_step+0x366>
                                 || (diff >= 0 && diff >= watcherP->parameters->step))
 80050f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80050fa:	2900      	cmp	r1, #0
 80050fc:	f2c0 8109 	blt.w	8005312 <observe_step+0x416>
 8005100:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005102:	f7fb fad7 	bl	80006b4 <__aeabi_l2d>
 8005106:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800510a:	f7fb fd87 	bl	8000c1c <__aeabi_dcmpge>
 800510e:	2800      	cmp	r0, #0
 8005110:	f000 80ff 	beq.w	8005312 <observe_step+0x416>
                                {
                                    LOG("Notify on step condition");
                                    notify = true;
 8005114:	9506      	str	r5, [sp, #24]
 8005116:	e0fc      	b.n	8005312 <observe_step+0x416>
                                    notify = true;
 8005118:	9506      	str	r5, [sp, #24]
 800511a:	e7c0      	b.n	800509e <observe_step+0x1a2>
                bool notify = false;
 800511c:	2300      	movs	r3, #0
 800511e:	9306      	str	r3, [sp, #24]
 8005120:	e7bd      	b.n	800509e <observe_step+0x1a2>
                                    notify = true;
 8005122:	9506      	str	r5, [sp, #24]
 8005124:	e7bb      	b.n	800509e <observe_step+0x1a2>
                                    notify = true;
 8005126:	9506      	str	r5, [sp, #24]
 8005128:	e7b9      	b.n	800509e <observe_step+0x1a2>
                bool notify = false;
 800512a:	2300      	movs	r3, #0
 800512c:	9306      	str	r3, [sp, #24]
 800512e:	e7b6      	b.n	800509e <observe_step+0x1a2>
                                    notify = true;
 8005130:	9506      	str	r5, [sp, #24]
 8005132:	e7b4      	b.n	800509e <observe_step+0x1a2>
                                    notify = true;
 8005134:	9506      	str	r5, [sp, #24]
 8005136:	e7b2      	b.n	800509e <observe_step+0x1a2>
                bool notify = false;
 8005138:	2300      	movs	r3, #0
 800513a:	9306      	str	r3, [sp, #24]
 800513c:	e7af      	b.n	800509e <observe_step+0x1a2>
                                    notify = true;
 800513e:	9506      	str	r5, [sp, #24]
 8005140:	e7ad      	b.n	800509e <observe_step+0x1a2>
                                if ((integerValue < watcherP->parameters->greaterThan
 8005142:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8005146:	f7fb fab5 	bl	80006b4 <__aeabi_l2d>
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005152:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005156:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800515a:	f7fb fd4b 	bl	8000bf4 <__aeabi_dcmplt>
 800515e:	b158      	cbz	r0, 8005178 <observe_step+0x27c>
                                  && watcherP->lastValue.asInteger > watcherP->parameters->greaterThan)
 8005160:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8005164:	f7fb faa6 	bl	80006b4 <__aeabi_l2d>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005170:	f7fb fd40 	bl	8000bf4 <__aeabi_dcmplt>
 8005174:	2800      	cmp	r0, #0
 8005176:	d16e      	bne.n	8005256 <observe_step+0x35a>
                                 || (integerValue > watcherP->parameters->greaterThan
 8005178:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800517c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005180:	f7fb fd56 	bl	8000c30 <__aeabi_dcmpgt>
 8005184:	2800      	cmp	r0, #0
 8005186:	d098      	beq.n	80050ba <observe_step+0x1be>
                                  && watcherP->lastValue.asInteger < watcherP->parameters->greaterThan))
 8005188:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 800518c:	f7fb fa92 	bl	80006b4 <__aeabi_l2d>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005198:	f7fb fd4a 	bl	8000c30 <__aeabi_dcmpgt>
 800519c:	2800      	cmp	r0, #0
 800519e:	d08c      	beq.n	80050ba <observe_step+0x1be>
                                    notify = true;
 80051a0:	9506      	str	r5, [sp, #24]
 80051a2:	e78a      	b.n	80050ba <observe_step+0x1be>
                                if ((unsignedValue < watcherP->parameters->greaterThan
 80051a4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80051a8:	f7fb fa7c 	bl	80006a4 <__aeabi_ul2d>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80051b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80051bc:	f7fb fd1a 	bl	8000bf4 <__aeabi_dcmplt>
 80051c0:	b158      	cbz	r0, 80051da <observe_step+0x2de>
                                  && watcherP->lastValue.asUnsigned > watcherP->parameters->greaterThan)
 80051c2:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 80051c6:	f7fb fa6d 	bl	80006a4 <__aeabi_ul2d>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051d2:	f7fb fd0f 	bl	8000bf4 <__aeabi_dcmplt>
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d13f      	bne.n	800525a <observe_step+0x35e>
                                 || (unsignedValue > watcherP->parameters->greaterThan
 80051da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80051e2:	f7fb fd25 	bl	8000c30 <__aeabi_dcmpgt>
 80051e6:	2800      	cmp	r0, #0
 80051e8:	f43f af67 	beq.w	80050ba <observe_step+0x1be>
                                  && watcherP->lastValue.asUnsigned < watcherP->parameters->greaterThan))
 80051ec:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 80051f0:	f7fb fa58 	bl	80006a4 <__aeabi_ul2d>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051fc:	f7fb fd18 	bl	8000c30 <__aeabi_dcmpgt>
 8005200:	2800      	cmp	r0, #0
 8005202:	f43f af5a 	beq.w	80050ba <observe_step+0x1be>
                                    notify = true;
 8005206:	9506      	str	r5, [sp, #24]
 8005208:	e757      	b.n	80050ba <observe_step+0x1be>
                                if ((floatValue < watcherP->parameters->greaterThan
 800520a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800520e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005212:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005216:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800521a:	f7fb fd09 	bl	8000c30 <__aeabi_dcmpgt>
 800521e:	b130      	cbz	r0, 800522e <observe_step+0x332>
                                  && watcherP->lastValue.asFloat > watcherP->parameters->greaterThan)
 8005220:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8005224:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005228:	f7fb fce4 	bl	8000bf4 <__aeabi_dcmplt>
 800522c:	b9b8      	cbnz	r0, 800525e <observe_step+0x362>
                                 || (floatValue > watcherP->parameters->greaterThan
 800522e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005232:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005236:	f7fb fcdd 	bl	8000bf4 <__aeabi_dcmplt>
 800523a:	2800      	cmp	r0, #0
 800523c:	f43f af3d 	beq.w	80050ba <observe_step+0x1be>
                                  && watcherP->lastValue.asFloat < watcherP->parameters->greaterThan))
 8005240:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8005244:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005248:	f7fb fcf2 	bl	8000c30 <__aeabi_dcmpgt>
 800524c:	2800      	cmp	r0, #0
 800524e:	f43f af34 	beq.w	80050ba <observe_step+0x1be>
                                    notify = true;
 8005252:	9506      	str	r5, [sp, #24]
 8005254:	e731      	b.n	80050ba <observe_step+0x1be>
                                    notify = true;
 8005256:	9506      	str	r5, [sp, #24]
 8005258:	e72f      	b.n	80050ba <observe_step+0x1be>
                                    notify = true;
 800525a:	9506      	str	r5, [sp, #24]
 800525c:	e72d      	b.n	80050ba <observe_step+0x1be>
                                    notify = true;
 800525e:	9506      	str	r5, [sp, #24]
 8005260:	e72b      	b.n	80050ba <observe_step+0x1be>
                                if ((diff < 0 && (0 - diff) >= watcherP->parameters->step)
 8005262:	ebbc 0000 	subs.w	r0, ip, r0
 8005266:	eb61 0102 	sbc.w	r1, r1, r2
 800526a:	f7fb fa23 	bl	80006b4 <__aeabi_l2d>
 800526e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005272:	f7fb fcd3 	bl	8000c1c <__aeabi_dcmpge>
 8005276:	2800      	cmp	r0, #0
 8005278:	f43f af3e 	beq.w	80050f8 <observe_step+0x1fc>
                                    notify = true;
 800527c:	9506      	str	r5, [sp, #24]
 800527e:	e048      	b.n	8005312 <observe_step+0x416>
                                break;
                            case LWM2M_TYPE_UNSIGNED_INTEGER:
                            {
                                uint64_t diff;

                                if (unsignedValue >= watcherP->lastValue.asUnsigned)
 8005280:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005282:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005284:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005286:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005288:	4283      	cmp	r3, r0
 800528a:	eb72 0c01 	sbcs.w	ip, r2, r1
 800528e:	d30c      	bcc.n	80052aa <observe_step+0x3ae>
                                {
                                    diff = unsignedValue - watcherP->lastValue.asUnsigned;
 8005290:	1a18      	subs	r0, r3, r0
 8005292:	eb62 0101 	sbc.w	r1, r2, r1
                                }
                                else
                                {
                                    diff = watcherP->lastValue.asUnsigned - unsignedValue;
                                }
                                if (diff >= watcherP->parameters->step)
 8005296:	f7fb fa05 	bl	80006a4 <__aeabi_ul2d>
 800529a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800529e:	f7fb fcbd 	bl	8000c1c <__aeabi_dcmpge>
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d035      	beq.n	8005312 <observe_step+0x416>
                                {
                                    LOG("Notify on step condition");
                                    notify = true;
 80052a6:	9506      	str	r5, [sp, #24]
 80052a8:	e033      	b.n	8005312 <observe_step+0x416>
                                    diff = watcherP->lastValue.asUnsigned - unsignedValue;
 80052aa:	1ac0      	subs	r0, r0, r3
 80052ac:	eb61 0102 	sbc.w	r1, r1, r2
 80052b0:	e7f1      	b.n	8005296 <observe_step+0x39a>
                                break;
                            case LWM2M_TYPE_FLOAT:
                            {
                                double diff;

                                diff = floatValue - watcherP->lastValue.asFloat;
 80052b2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80052b6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80052ba:	f7fb f871 	bl	80003a0 <__aeabi_dsub>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
                                if ((diff < 0 && (0 - diff) >= watcherP->parameters->step)
 80052c6:	2200      	movs	r2, #0
 80052c8:	2300      	movs	r3, #0
 80052ca:	f7fb fc93 	bl	8000bf4 <__aeabi_dcmplt>
 80052ce:	b978      	cbnz	r0, 80052f0 <observe_step+0x3f4>
                                 || (diff >= 0 && diff >= watcherP->parameters->step))
 80052d0:	2200      	movs	r2, #0
 80052d2:	2300      	movs	r3, #0
 80052d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052d8:	f7fb fca0 	bl	8000c1c <__aeabi_dcmpge>
 80052dc:	b1c8      	cbz	r0, 8005312 <observe_step+0x416>
 80052de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80052e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80052e6:	f7fb fc8f 	bl	8000c08 <__aeabi_dcmple>
 80052ea:	b190      	cbz	r0, 8005312 <observe_step+0x416>
                                {
                                    LOG("Notify on step condition");
                                    notify = true;
 80052ec:	9506      	str	r5, [sp, #24]
 80052ee:	e010      	b.n	8005312 <observe_step+0x416>
                                if ((diff < 0 && (0 - diff) >= watcherP->parameters->step)
 80052f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80052f4:	2000      	movs	r0, #0
 80052f6:	2100      	movs	r1, #0
 80052f8:	f7fb f852 	bl	80003a0 <__aeabi_dsub>
 80052fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005300:	f7fb fc8c 	bl	8000c1c <__aeabi_dcmpge>
 8005304:	2800      	cmp	r0, #0
 8005306:	d0e3      	beq.n	80052d0 <observe_step+0x3d4>
                                    notify = true;
 8005308:	9506      	str	r5, [sp, #24]
 800530a:	e002      	b.n	8005312 <observe_step+0x416>
                        notify = true;
 800530c:	9506      	str	r5, [sp, #24]
 800530e:	e000      	b.n	8005312 <observe_step+0x416>
 8005310:	9506      	str	r5, [sp, #24]
                                break;
                            }
                        }
                    }

                    if (watcherP->parameters != NULL
 8005312:	b317      	cbz	r7, 800535a <observe_step+0x45e>
                     && (watcherP->parameters->toSet & LWM2M_ATTR_FLAG_MIN_PERIOD) != 0)
 8005314:	783b      	ldrb	r3, [r7, #0]
 8005316:	f013 0f01 	tst.w	r3, #1
 800531a:	d01e      	beq.n	800535a <observe_step+0x45e>
                    {
                        LOG_ARG("Checking minimal period (%d s)", watcherP->parameters->minPeriod);

                        if (watcherP->lastTime + watcherP->parameters->minPeriod > currentTime)
 800531c:	6a23      	ldr	r3, [r4, #32]
 800531e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	185b      	adds	r3, r3, r1
 8005324:	f142 0200 	adc.w	r2, r2, #0
 8005328:	9905      	ldr	r1, [sp, #20]
 800532a:	4299      	cmp	r1, r3
 800532c:	eb79 0002 	sbcs.w	r0, r9, r2
 8005330:	da2b      	bge.n	800538a <observe_step+0x48e>
                        {
                            // Minimum Period did not elapse yet
                            interval = watcherP->lastTime + watcherP->parameters->minPeriod - currentTime;
 8005332:	1a5b      	subs	r3, r3, r1
 8005334:	eb62 0209 	sbc.w	r2, r2, r9
                            if (*timeoutP > interval) *timeoutP = interval;
 8005338:	f8db 0000 	ldr.w	r0, [fp]
 800533c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005340:	4283      	cmp	r3, r0
 8005342:	eb72 0101 	sbcs.w	r1, r2, r1
 8005346:	da1d      	bge.n	8005384 <observe_step+0x488>
 8005348:	f8cb 3000 	str.w	r3, [fp]
 800534c:	f8cb 2004 	str.w	r2, [fp, #4]
                            notify = false;
 8005350:	2500      	movs	r5, #0
 8005352:	e004      	b.n	800535e <observe_step+0x462>
                bool notify = false;
 8005354:	2300      	movs	r3, #0
 8005356:	9306      	str	r3, [sp, #24]
 8005358:	e7db      	b.n	8005312 <observe_step+0x416>
                        }
                    }
                }

                // Is the Maximum Period reached ?
                if (notify == false
 800535a:	9d06      	ldr	r5, [sp, #24]
 800535c:	b9a5      	cbnz	r5, 8005388 <observe_step+0x48c>
                 && watcherP->parameters != NULL
 800535e:	68e3      	ldr	r3, [r4, #12]
 8005360:	b19b      	cbz	r3, 800538a <observe_step+0x48e>
                 && (watcherP->parameters->toSet & LWM2M_ATTR_FLAG_MAX_PERIOD) != 0)
 8005362:	781a      	ldrb	r2, [r3, #0]
 8005364:	f012 0f02 	tst.w	r2, #2
 8005368:	d00f      	beq.n	800538a <observe_step+0x48e>
                {
                    LOG_ARG("Checking maximal period (%d s)", watcherP->parameters->maxPeriod);

                    if (watcherP->lastTime + watcherP->parameters->maxPeriod <= currentTime)
 800536a:	6a22      	ldr	r2, [r4, #32]
 800536c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	18d2      	adds	r2, r2, r3
 8005372:	f141 0100 	adc.w	r1, r1, #0
 8005376:	9b05      	ldr	r3, [sp, #20]
 8005378:	4293      	cmp	r3, r2
 800537a:	eb79 0301 	sbcs.w	r3, r9, r1
 800537e:	db04      	blt.n	800538a <observe_step+0x48e>
                    {
                        LOG("Notify on maximal period");
                        notify = true;
 8005380:	4635      	mov	r5, r6
 8005382:	e003      	b.n	800538c <observe_step+0x490>
                            notify = false;
 8005384:	2500      	movs	r5, #0
 8005386:	e7ea      	b.n	800535e <observe_step+0x462>
 8005388:	9d06      	ldr	r5, [sp, #24]
                    }
                }

                if (notify == true)
 800538a:	b315      	cbz	r5, 80053d2 <observe_step+0x4d6>
                {
                    if (buffer == NULL)
 800538c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d072      	beq.n	8005478 <observe_step+0x57c>
                        }
                        coap_init_message(message, COAP_TYPE_NON, COAP_205_CONTENT, 0);
                        coap_set_header_content_type(message, watcherP->format);
                        coap_set_payload(message, buffer, length);
                    }
                    watcherP->lastTime = currentTime;
 8005392:	9b05      	ldr	r3, [sp, #20]
 8005394:	6223      	str	r3, [r4, #32]
 8005396:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
                    watcherP->lastMid = contextP->nextMID++;
 800539a:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	f8a8 2020 	strh.w	r2, [r8, #32]
 80053a4:	85a3      	strh	r3, [r4, #44]	; 0x2c
                    message->mid = watcherP->lastMid;
 80053a6:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
                    coap_set_header_token(message, watcherP->token, watcherP->tokenLen);
 80053aa:	69e2      	ldr	r2, [r4, #28]
 80053ac:	f104 0112 	add.w	r1, r4, #18
 80053b0:	a81a      	add	r0, sp, #104	; 0x68
 80053b2:	f7fe fbc8 	bl	8003b46 <coap_set_header_token>
                    coap_set_header_observe(message, watcherP->counter++);
 80053b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80053b8:	1c4b      	adds	r3, r1, #1
 80053ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80053bc:	a81a      	add	r0, sp, #104	; 0x68
 80053be:	f7fe fc5b 	bl	8003c78 <coap_set_header_observe>
                    (void)message_send(contextP, message, watcherP->server->sessionH);
 80053c2:	68a3      	ldr	r3, [r4, #8]
 80053c4:	69da      	ldr	r2, [r3, #28]
 80053c6:	a91a      	add	r1, sp, #104	; 0x68
 80053c8:	4640      	mov	r0, r8
 80053ca:	f000 f8e5 	bl	8005598 <message_send>
                    watcherP->update = false;
 80053ce:	2300      	movs	r3, #0
 80053d0:	7163      	strb	r3, [r4, #5]
                }

                // Store this value
                if (notify == true && storeValue == true)
 80053d2:	b16d      	cbz	r5, 80053f0 <observe_step+0x4f4>
 80053d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d6:	b15b      	cbz	r3, 80053f0 <observe_step+0x4f4>
                {
                    switch (dataType)
 80053d8:	f1ba 0f07 	cmp.w	sl, #7
 80053dc:	f000 80c9 	beq.w	8005572 <observe_step+0x676>
 80053e0:	f1ba 0f08 	cmp.w	sl, #8
 80053e4:	f000 80ca 	beq.w	800557c <observe_step+0x680>
 80053e8:	f1ba 0f06 	cmp.w	sl, #6
 80053ec:	f000 80bc 	beq.w	8005568 <observe_step+0x66c>
                    default:
                        break;
                    }
                }

                if (watcherP->parameters != NULL && (watcherP->parameters->toSet & LWM2M_ATTR_FLAG_MAX_PERIOD) != 0)
 80053f0:	68e2      	ldr	r2, [r4, #12]
 80053f2:	b1ca      	cbz	r2, 8005428 <observe_step+0x52c>
 80053f4:	7813      	ldrb	r3, [r2, #0]
 80053f6:	f013 0f02 	tst.w	r3, #2
 80053fa:	d015      	beq.n	8005428 <observe_step+0x52c>
                {
                    // update timers
                    interval = watcherP->lastTime + watcherP->parameters->maxPeriod - currentTime;
 80053fc:	6a23      	ldr	r3, [r4, #32]
 80053fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005400:	6892      	ldr	r2, [r2, #8]
 8005402:	189b      	adds	r3, r3, r2
 8005404:	f141 0200 	adc.w	r2, r1, #0
 8005408:	9905      	ldr	r1, [sp, #20]
 800540a:	1a5b      	subs	r3, r3, r1
 800540c:	eb62 0209 	sbc.w	r2, r2, r9
                    if (*timeoutP > interval) *timeoutP = interval;
 8005410:	f8db 0000 	ldr.w	r0, [fp]
 8005414:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005418:	4283      	cmp	r3, r0
 800541a:	eb72 0101 	sbcs.w	r1, r2, r1
 800541e:	da03      	bge.n	8005428 <observe_step+0x52c>
 8005420:	f8cb 3000 	str.w	r3, [fp]
 8005424:	f8cb 2004 	str.w	r2, [fp, #4]
        for (watcherP = targetP->watcherList ; watcherP != NULL ; watcherP = watcherP->next)
 8005428:	6824      	ldr	r4, [r4, #0]
 800542a:	2c00      	cmp	r4, #0
 800542c:	d054      	beq.n	80054d8 <observe_step+0x5dc>
            if (watcherP->active == true)
 800542e:	7926      	ldrb	r6, [r4, #4]
 8005430:	2e00      	cmp	r6, #0
 8005432:	d0f9      	beq.n	8005428 <observe_step+0x52c>
                if (watcherP->update == true)
 8005434:	7965      	ldrb	r5, [r4, #5]
 8005436:	2d00      	cmp	r5, #0
 8005438:	d091      	beq.n	800535e <observe_step+0x462>
                    if (watcherP->parameters == NULL || watcherP->parameters->toSet == 0)
 800543a:	68e7      	ldr	r7, [r4, #12]
 800543c:	2f00      	cmp	r7, #0
 800543e:	f43f af65 	beq.w	800530c <observe_step+0x410>
 8005442:	783b      	ldrb	r3, [r7, #0]
 8005444:	930a      	str	r3, [sp, #40]	; 0x28
 8005446:	2b00      	cmp	r3, #0
 8005448:	f43f af62 	beq.w	8005310 <observe_step+0x414>
                     && (watcherP->parameters->toSet & ATTR_FLAG_NUMERIC) != 0)
 800544c:	f013 0f1c 	tst.w	r3, #28
 8005450:	d080      	beq.n	8005354 <observe_step+0x458>
                        if ((watcherP->parameters->toSet & LWM2M_ATTR_FLAG_LESS_THAN) != 0)
 8005452:	f013 0f08 	tst.w	r3, #8
 8005456:	f43f ae20 	beq.w	800509a <observe_step+0x19e>
                            switch (dataType)
 800545a:	f1ba 0f07 	cmp.w	sl, #7
 800545e:	f43f adc3 	beq.w	8004fe8 <observe_step+0xec>
 8005462:	f1ba 0f08 	cmp.w	sl, #8
 8005466:	f43f adf2 	beq.w	800504e <observe_step+0x152>
 800546a:	f1ba 0f06 	cmp.w	sl, #6
 800546e:	f43f ad86 	beq.w	8004f7e <observe_step+0x82>
 8005472:	2300      	movs	r3, #0
 8005474:	9306      	str	r3, [sp, #24]
 8005476:	e612      	b.n	800509e <observe_step+0x1a2>
                        if (dataP != NULL)
 8005478:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800547a:	b1da      	cbz	r2, 80054b4 <observe_step+0x5b8>
                            res = lwm2m_data_serialize(&targetP->uri, size, dataP, &(watcherP->format), &buffer);
 800547c:	ab10      	add	r3, sp, #64	; 0x40
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	f104 0310 	add.w	r3, r4, #16
 8005484:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005486:	9808      	ldr	r0, [sp, #32]
 8005488:	3004      	adds	r0, #4
 800548a:	f001 ffbd 	bl	8007408 <lwm2m_data_serialize>
                            if (res < 0)
 800548e:	2800      	cmp	r0, #0
 8005490:	db22      	blt.n	80054d8 <observe_step+0x5dc>
                                length = (size_t)res;
 8005492:	9011      	str	r0, [sp, #68]	; 0x44
                        coap_init_message(message, COAP_TYPE_NON, COAP_205_CONTENT, 0);
 8005494:	2300      	movs	r3, #0
 8005496:	2245      	movs	r2, #69	; 0x45
 8005498:	2101      	movs	r1, #1
 800549a:	a81a      	add	r0, sp, #104	; 0x68
 800549c:	f7fe f906 	bl	80036ac <coap_init_message>
                        coap_set_header_content_type(message, watcherP->format);
 80054a0:	8a21      	ldrh	r1, [r4, #16]
 80054a2:	a81a      	add	r0, sp, #104	; 0x68
 80054a4:	f7fe fb48 	bl	8003b38 <coap_set_header_content_type>
                        coap_set_payload(message, buffer, length);
 80054a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80054aa:	9910      	ldr	r1, [sp, #64]	; 0x40
 80054ac:	a81a      	add	r0, sp, #104	; 0x68
 80054ae:	f7fe fc05 	bl	8003cbc <coap_set_payload>
 80054b2:	e76e      	b.n	8005392 <observe_step+0x496>
                            if (COAP_205_CONTENT != object_read(contextP, &targetP->uri, NULL, 0, &(watcherP->format), &buffer, &length))
 80054b4:	ab11      	add	r3, sp, #68	; 0x44
 80054b6:	9302      	str	r3, [sp, #8]
 80054b8:	ab10      	add	r3, sp, #64	; 0x40
 80054ba:	9301      	str	r3, [sp, #4]
 80054bc:	f104 0310 	add.w	r3, r4, #16
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	2300      	movs	r3, #0
 80054c4:	461a      	mov	r2, r3
 80054c6:	9908      	ldr	r1, [sp, #32]
 80054c8:	3104      	adds	r1, #4
 80054ca:	4640      	mov	r0, r8
 80054cc:	f7ff fa11 	bl	80048f2 <object_read>
 80054d0:	2845      	cmp	r0, #69	; 0x45
 80054d2:	d0df      	beq.n	8005494 <observe_step+0x598>
                                buffer = NULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	9310      	str	r3, [sp, #64]	; 0x40
                }
            }
        }
        if (dataP != NULL) lwm2m_data_free(size, dataP);
 80054d8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80054da:	b111      	cbz	r1, 80054e2 <observe_step+0x5e6>
 80054dc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80054de:	f001 fe13 	bl	8007108 <lwm2m_data_free>
        if (buffer != NULL) lwm2m_free(buffer);
 80054e2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80054e4:	b108      	cbz	r0, 80054ea <observe_step+0x5ee>
 80054e6:	f003 fb3b 	bl	8008b60 <lwm2m_free>
    for (targetP = contextP->observedList ; targetP != NULL ; targetP = targetP->next)
 80054ea:	9b08      	ldr	r3, [sp, #32]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	9308      	str	r3, [sp, #32]
 80054f0:	9b08      	ldr	r3, [sp, #32]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d047      	beq.n	8005586 <observe_step+0x68a>
        uint8_t * buffer = NULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	9310      	str	r3, [sp, #64]	; 0x40
        size_t length = 0;
 80054fa:	9311      	str	r3, [sp, #68]	; 0x44
        lwm2m_data_t * dataP = NULL;
 80054fc:	9312      	str	r3, [sp, #72]	; 0x48
        int size = 0;
 80054fe:	9313      	str	r3, [sp, #76]	; 0x4c
        double floatValue = 0;
 8005500:	2200      	movs	r2, #0
 8005502:	2300      	movs	r3, #0
 8005504:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
        int64_t integerValue = 0;
 8005508:	2200      	movs	r2, #0
 800550a:	2300      	movs	r3, #0
 800550c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
        uint64_t unsignedValue = 0;
 8005510:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
        if (LWM2M_URI_IS_SET_RESOURCE(&targetP->uri))
 8005514:	9c08      	ldr	r4, [sp, #32]
 8005516:	8922      	ldrh	r2, [r4, #8]
 8005518:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800551c:	429a      	cmp	r2, r3
 800551e:	f43f ad1f 	beq.w	8004f60 <observe_step+0x64>
            if (COAP_205_CONTENT != object_readData(contextP, &targetP->uri, &size, &dataP)) continue;
 8005522:	ab12      	add	r3, sp, #72	; 0x48
 8005524:	aa13      	add	r2, sp, #76	; 0x4c
 8005526:	1d21      	adds	r1, r4, #4
 8005528:	4640      	mov	r0, r8
 800552a:	f7ff f9c6 	bl	80048ba <object_readData>
 800552e:	2845      	cmp	r0, #69	; 0x45
 8005530:	d1db      	bne.n	80054ea <observe_step+0x5ee>
            valueP = dataP;
 8005532:	9812      	ldr	r0, [sp, #72]	; 0x48
            if (LWM2M_URI_IS_SET_RESOURCE_INSTANCE(&targetP->uri)
 8005534:	8962      	ldrh	r2, [r4, #10]
 8005536:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800553a:	429a      	cmp	r2, r3
 800553c:	d003      	beq.n	8005546 <observe_step+0x64a>
             && dataP->type == LWM2M_TYPE_MULTIPLE_RESOURCE
 800553e:	7803      	ldrb	r3, [r0, #0]
 8005540:	2b03      	cmp	r3, #3
 8005542:	f43f ace9 	beq.w	8004f18 <observe_step+0x1c>
            dataType = valueP->type;
 8005546:	f890 a000 	ldrb.w	sl, [r0]
            switch (dataType)
 800554a:	f1ba 0f07 	cmp.w	sl, #7
 800554e:	f43f acf3 	beq.w	8004f38 <observe_step+0x3c>
 8005552:	f1ba 0f08 	cmp.w	sl, #8
 8005556:	f43f acf9 	beq.w	8004f4c <observe_step+0x50>
 800555a:	f1ba 0f06 	cmp.w	sl, #6
 800555e:	f43f ace1 	beq.w	8004f24 <observe_step+0x28>
 8005562:	2300      	movs	r3, #0
 8005564:	9309      	str	r3, [sp, #36]	; 0x24
 8005566:	e4fe      	b.n	8004f66 <observe_step+0x6a>
                        watcherP->lastValue.asInteger = integerValue;
 8005568:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800556c:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
                        break;
 8005570:	e73e      	b.n	80053f0 <observe_step+0x4f4>
                        watcherP->lastValue.asUnsigned = unsignedValue;
 8005572:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005576:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
                        break;
 800557a:	e739      	b.n	80053f0 <observe_step+0x4f4>
                        watcherP->lastValue.asFloat = floatValue;
 800557c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005580:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
                        break;
 8005584:	e734      	b.n	80053f0 <observe_step+0x4f4>
    }
}
 8005586:	b03f      	add	sp, #252	; 0xfc
 8005588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800558c <lwm2m_get_coap_block_size>:
        return true;
    }
    return false;
}

uint16_t lwm2m_get_coap_block_size() { return coap_block_size; }
 800558c:	4b01      	ldr	r3, [pc, #4]	; (8005594 <lwm2m_get_coap_block_size+0x8>)
 800558e:	8818      	ldrh	r0, [r3, #0]
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	20000074 	.word	0x20000074

08005598 <message_send>:
}

uint8_t message_send(lwm2m_context_t * contextP,
                     coap_packet_t * message,
                     void * sessionH)
{
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	4606      	mov	r6, r0
 800559c:	460c      	mov	r4, r1
 800559e:	4615      	mov	r5, r2
    uint8_t * pktBuffer;
    size_t pktBufferLen = 0;
    size_t allocLen;

    LOG("Entering");
    allocLen = coap_serialize_get_size(message);
 80055a0:	4608      	mov	r0, r1
 80055a2:	f7fe f8a2 	bl	80036ea <coap_serialize_get_size>
    LOG_ARG("Size to allocate: %d", allocLen);
    if (allocLen == 0) return COAP_500_INTERNAL_SERVER_ERROR;
 80055a6:	b1b0      	cbz	r0, 80055d6 <message_send+0x3e>

    pktBuffer = (uint8_t *)lwm2m_malloc(allocLen);
 80055a8:	f003 fad6 	bl	8008b58 <lwm2m_malloc>
    if (pktBuffer != NULL)
 80055ac:	4607      	mov	r7, r0
 80055ae:	b1a0      	cbz	r0, 80055da <message_send+0x42>
    {
        pktBufferLen = coap_serialize_message(message, pktBuffer);
 80055b0:	4601      	mov	r1, r0
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7fe f918 	bl	80037e8 <coap_serialize_message>
        LOG_ARG("coap_serialize_message() returned %d", pktBufferLen);
        if (0 != pktBufferLen)
 80055b8:	4602      	mov	r2, r0
 80055ba:	b928      	cbnz	r0, 80055c8 <message_send+0x30>
    uint8_t result = COAP_500_INTERNAL_SERVER_ERROR;
 80055bc:	24a0      	movs	r4, #160	; 0xa0
        {
            result = lwm2m_buffer_send(sessionH, pktBuffer, pktBufferLen, contextP->userData);
        }
        lwm2m_free(pktBuffer);
 80055be:	4638      	mov	r0, r7
 80055c0:	f003 face 	bl	8008b60 <lwm2m_free>
    }

    return result;
}
 80055c4:	4620      	mov	r0, r4
 80055c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            result = lwm2m_buffer_send(sessionH, pktBuffer, pktBufferLen, contextP->userData);
 80055c8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80055ca:	4639      	mov	r1, r7
 80055cc:	4628      	mov	r0, r5
 80055ce:	f003 faff 	bl	8008bd0 <lwm2m_buffer_send>
 80055d2:	4604      	mov	r4, r0
 80055d4:	e7f3      	b.n	80055be <message_send+0x26>
    if (allocLen == 0) return COAP_500_INTERNAL_SERVER_ERROR;
 80055d6:	24a0      	movs	r4, #160	; 0xa0
 80055d8:	e7f4      	b.n	80055c4 <message_send+0x2c>
    uint8_t result = COAP_500_INTERNAL_SERVER_ERROR;
 80055da:	24a0      	movs	r4, #160	; 0xa0
 80055dc:	e7f2      	b.n	80055c4 <message_send+0x2c>

080055de <prv_readUint>:
static uint8_t prv_readUint(lwm2m_context_t *contextP,
                            lwm2m_object_t *objP,
                            uint16_t instanceId,
                            uint16_t resourceId,
                            uint64_t *valueP)
{
 80055de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055e0:	b085      	sub	sp, #20
 80055e2:	4605      	mov	r5, r0
 80055e4:	460c      	mov	r4, r1
 80055e6:	4617      	mov	r7, r2
 80055e8:	461e      	mov	r6, r3
    uint8_t result = COAP_NO_ERROR;
    int size = 1;
 80055ea:	2001      	movs	r0, #1
 80055ec:	9003      	str	r0, [sp, #12]
    lwm2m_data_t * dataP = lwm2m_data_new(size);
 80055ee:	f001 fd7a 	bl	80070e6 <lwm2m_data_new>
 80055f2:	9002      	str	r0, [sp, #8]
    if (dataP == NULL)
 80055f4:	b1d0      	cbz	r0, 800562c <prv_readUint+0x4e>
    {
        return COAP_500_INTERNAL_SERVER_ERROR;
    }
    dataP[0].id = resourceId;
 80055f6:	8046      	strh	r6, [r0, #2]
    result = objP->readFunc(contextP, instanceId, &size, &dataP, objP);
 80055f8:	68e6      	ldr	r6, [r4, #12]
 80055fa:	9400      	str	r4, [sp, #0]
 80055fc:	ab02      	add	r3, sp, #8
 80055fe:	aa03      	add	r2, sp, #12
 8005600:	4639      	mov	r1, r7
 8005602:	4628      	mov	r0, r5
 8005604:	47b0      	blx	r6
 8005606:	4604      	mov	r4, r0
    if (result == COAP_205_CONTENT)
 8005608:	2845      	cmp	r0, #69	; 0x45
 800560a:	d006      	beq.n	800561a <prv_readUint+0x3c>
        else
        {
            result = COAP_400_BAD_REQUEST;
        }
    }
    lwm2m_data_free(size, dataP);
 800560c:	9902      	ldr	r1, [sp, #8]
 800560e:	9803      	ldr	r0, [sp, #12]
 8005610:	f001 fd7a 	bl	8007108 <lwm2m_data_free>
    return result;
}
 8005614:	4620      	mov	r0, r4
 8005616:	b005      	add	sp, #20
 8005618:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (lwm2m_data_decode_uint(dataP, valueP))
 800561a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800561c:	9802      	ldr	r0, [sp, #8]
 800561e:	f001 fe1f 	bl	8007260 <lwm2m_data_decode_uint>
 8005622:	b108      	cbz	r0, 8005628 <prv_readUint+0x4a>
            result = COAP_NO_ERROR;
 8005624:	2400      	movs	r4, #0
 8005626:	e7f1      	b.n	800560c <prv_readUint+0x2e>
            result = COAP_400_BAD_REQUEST;
 8005628:	2480      	movs	r4, #128	; 0x80
 800562a:	e7ef      	b.n	800560c <prv_readUint+0x2e>
        return COAP_500_INTERNAL_SERVER_ERROR;
 800562c:	24a0      	movs	r4, #160	; 0xa0
 800562e:	e7f1      	b.n	8005614 <prv_readUint+0x36>

08005630 <prv_getRegistrationOrder>:
static uint8_t prv_getRegistrationOrder(lwm2m_context_t *contextP,
                                        lwm2m_server_t *targetP,
                                        lwm2m_object_t *serverObjP,
                                        bool *orderedP,
                                        uint64_t *orderP)
{
 8005630:	b510      	push	{r4, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	468c      	mov	ip, r1
 8005636:	4611      	mov	r1, r2
 8005638:	461c      	mov	r4, r3
    uint64_t order;
    uint8_t result = prv_readUint(contextP,
 800563a:	f8bc 2030 	ldrh.w	r2, [ip, #48]	; 0x30
 800563e:	ab02      	add	r3, sp, #8
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	230d      	movs	r3, #13
 8005644:	f7ff ffcb 	bl	80055de <prv_readUint>
                                  serverObjP,
                                  targetP->servObjInstID,
                                  LWM2M_SERVER_REG_ORDER_ID,
                                  &order);
    if (result == COAP_NO_ERROR)
 8005648:	4603      	mov	r3, r0
 800564a:	b958      	cbnz	r0, 8005664 <prv_getRegistrationOrder+0x34>
    {
        if (orderedP)
 800564c:	b10c      	cbz	r4, 8005652 <prv_getRegistrationOrder+0x22>
        {
            *orderedP = true;
 800564e:	2201      	movs	r2, #1
 8005650:	7022      	strb	r2, [r4, #0]
        }
        if (orderP)
 8005652:	9a06      	ldr	r2, [sp, #24]
 8005654:	b11a      	cbz	r2, 800565e <prv_getRegistrationOrder+0x2e>
        {
            *orderP = order;
 8005656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800565a:	e9c2 0100 	strd	r0, r1, [r2]
        {
            *orderedP = false;
        }
    }
    return result;
}
 800565e:	4618      	mov	r0, r3
 8005660:	b004      	add	sp, #16
 8005662:	bd10      	pop	{r4, pc}
    else if (result == COAP_404_NOT_FOUND)
 8005664:	2884      	cmp	r0, #132	; 0x84
 8005666:	d1fa      	bne.n	800565e <prv_getRegistrationOrder+0x2e>
        if (orderedP)
 8005668:	b114      	cbz	r4, 8005670 <prv_getRegistrationOrder+0x40>
            *orderedP = false;
 800566a:	2300      	movs	r3, #0
 800566c:	7023      	strb	r3, [r4, #0]
 800566e:	e7f6      	b.n	800565e <prv_getRegistrationOrder+0x2e>
        result = COAP_NO_ERROR;
 8005670:	2300      	movs	r3, #0
 8005672:	e7f4      	b.n	800565e <prv_getRegistrationOrder+0x2e>

08005674 <prv_getRegistrationAttemptLimit>:
static uint8_t prv_getRegistrationAttemptLimit(lwm2m_context_t *contextP,
                                               lwm2m_server_t *targetP,
                                               lwm2m_object_t *serverObjP,
                                               uint8_t *attemptLimitP,
                                               uint64_t *attemptDelayP)
{
 8005674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005676:	b087      	sub	sp, #28
 8005678:	4607      	mov	r7, r0
 800567a:	460d      	mov	r5, r1
 800567c:	4614      	mov	r4, r2
 800567e:	461e      	mov	r6, r3
    uint64_t attemptLimit;
    uint64_t attemptDelay;
    uint8_t result = prv_readUint(contextP,
 8005680:	aa04      	add	r2, sp, #16
 8005682:	9200      	str	r2, [sp, #0]
 8005684:	2311      	movs	r3, #17
 8005686:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8005688:	4621      	mov	r1, r4
 800568a:	f7ff ffa8 	bl	80055de <prv_readUint>
                                  serverObjP,
                                  targetP->servObjInstID,
                                  LWM2M_SERVER_COMM_RETRY_COUNT_ID,
                                  &attemptLimit);
    if (result == COAP_404_NOT_FOUND)
 800568e:	2884      	cmp	r0, #132	; 0x84
 8005690:	d002      	beq.n	8005698 <prv_getRegistrationAttemptLimit+0x24>
    {
        attemptLimit = 5;
        result = COAP_NO_ERROR;
    }
    if (result == COAP_NO_ERROR)
 8005692:	b128      	cbz	r0, 80056a0 <prv_getRegistrationAttemptLimit+0x2c>
                *attemptDelayP = attemptDelay;
            }
        }
    }
    return result;
}
 8005694:	b007      	add	sp, #28
 8005696:	bdf0      	pop	{r4, r5, r6, r7, pc}
        attemptLimit = 5;
 8005698:	2205      	movs	r2, #5
 800569a:	2300      	movs	r3, #0
 800569c:	e9cd 2304 	strd	r2, r3, [sp, #16]
        result = prv_readUint(contextP,
 80056a0:	ab02      	add	r3, sp, #8
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	2312      	movs	r3, #18
 80056a6:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 80056a8:	4621      	mov	r1, r4
 80056aa:	4638      	mov	r0, r7
 80056ac:	f7ff ff97 	bl	80055de <prv_readUint>
        if (result == COAP_404_NOT_FOUND)
 80056b0:	2884      	cmp	r0, #132	; 0x84
 80056b2:	d002      	beq.n	80056ba <prv_getRegistrationAttemptLimit+0x46>
        if (result == COAP_NO_ERROR)
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d1ed      	bne.n	8005694 <prv_getRegistrationAttemptLimit+0x20>
 80056b8:	e004      	b.n	80056c4 <prv_getRegistrationAttemptLimit+0x50>
            attemptDelay = 60;
 80056ba:	223c      	movs	r2, #60	; 0x3c
 80056bc:	2300      	movs	r3, #0
 80056be:	e9cd 2302 	strd	r2, r3, [sp, #8]
            result = COAP_NO_ERROR;
 80056c2:	2000      	movs	r0, #0
            if (attemptLimit > 254) /* Implementation limit */
 80056c4:	9b04      	ldr	r3, [sp, #16]
 80056c6:	2bff      	cmp	r3, #255	; 0xff
 80056c8:	9b05      	ldr	r3, [sp, #20]
 80056ca:	f173 0300 	sbcs.w	r3, r3, #0
 80056ce:	d303      	bcc.n	80056d8 <prv_getRegistrationAttemptLimit+0x64>
                attemptLimit = 254;
 80056d0:	22fe      	movs	r2, #254	; 0xfe
 80056d2:	2300      	movs	r3, #0
 80056d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
            if (attemptLimitP)
 80056d8:	b10e      	cbz	r6, 80056de <prv_getRegistrationAttemptLimit+0x6a>
                *attemptLimitP = attemptLimit;
 80056da:	9b04      	ldr	r3, [sp, #16]
 80056dc:	7033      	strb	r3, [r6, #0]
            if (attemptDelayP)
 80056de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0d7      	beq.n	8005694 <prv_getRegistrationAttemptLimit+0x20>
                *attemptDelayP = attemptDelay;
 80056e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80056ea:	e9c1 2300 	strd	r2, r3, [r1]
 80056ee:	e7d1      	b.n	8005694 <prv_getRegistrationAttemptLimit+0x20>

080056f0 <prv_getRegistrationSequenceLimit>:
static uint8_t prv_getRegistrationSequenceLimit(lwm2m_context_t *contextP,
                                                lwm2m_server_t *targetP,
                                                lwm2m_object_t *serverObjP,
                                                uint8_t *sequenceLimitP,
                                                uint64_t *sequenceDelayP)
{
 80056f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056f2:	b087      	sub	sp, #28
 80056f4:	4607      	mov	r7, r0
 80056f6:	460d      	mov	r5, r1
 80056f8:	4614      	mov	r4, r2
 80056fa:	461e      	mov	r6, r3
    uint64_t sequenceLimit;
    uint64_t sequenceDelay;
    uint8_t result = prv_readUint(contextP,
 80056fc:	aa04      	add	r2, sp, #16
 80056fe:	9200      	str	r2, [sp, #0]
 8005700:	2314      	movs	r3, #20
 8005702:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8005704:	4621      	mov	r1, r4
 8005706:	f7ff ff6a 	bl	80055de <prv_readUint>
                                  serverObjP,
                                  targetP->servObjInstID,
                                  LWM2M_SERVER_SEQ_RETRY_COUNT_ID,
                                  &sequenceLimit);
    if (result == COAP_404_NOT_FOUND)
 800570a:	2884      	cmp	r0, #132	; 0x84
 800570c:	d002      	beq.n	8005714 <prv_getRegistrationSequenceLimit+0x24>
    {
        sequenceLimit = 1;
        result = COAP_NO_ERROR;
    }
    if (result == COAP_NO_ERROR)
 800570e:	b128      	cbz	r0, 800571c <prv_getRegistrationSequenceLimit+0x2c>
                *sequenceDelayP = sequenceDelay;
            }
        }
    }
    return result;
}
 8005710:	b007      	add	sp, #28
 8005712:	bdf0      	pop	{r4, r5, r6, r7, pc}
        sequenceLimit = 1;
 8005714:	2201      	movs	r2, #1
 8005716:	2300      	movs	r3, #0
 8005718:	e9cd 2304 	strd	r2, r3, [sp, #16]
        result = prv_readUint(contextP,
 800571c:	ab02      	add	r3, sp, #8
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	2313      	movs	r3, #19
 8005722:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 8005724:	4621      	mov	r1, r4
 8005726:	4638      	mov	r0, r7
 8005728:	f7ff ff59 	bl	80055de <prv_readUint>
        if (result == COAP_404_NOT_FOUND)
 800572c:	2884      	cmp	r0, #132	; 0x84
 800572e:	d002      	beq.n	8005736 <prv_getRegistrationSequenceLimit+0x46>
        if (result == COAP_NO_ERROR)
 8005730:	2800      	cmp	r0, #0
 8005732:	d1ed      	bne.n	8005710 <prv_getRegistrationSequenceLimit+0x20>
 8005734:	e004      	b.n	8005740 <prv_getRegistrationSequenceLimit+0x50>
            sequenceDelay = 86400;
 8005736:	4a0d      	ldr	r2, [pc, #52]	; (800576c <prv_getRegistrationSequenceLimit+0x7c>)
 8005738:	2300      	movs	r3, #0
 800573a:	e9cd 2302 	strd	r2, r3, [sp, #8]
            result = COAP_NO_ERROR;
 800573e:	2000      	movs	r0, #0
            if (sequenceLimit > 254) /* Implementation limit */
 8005740:	9b04      	ldr	r3, [sp, #16]
 8005742:	2bff      	cmp	r3, #255	; 0xff
 8005744:	9b05      	ldr	r3, [sp, #20]
 8005746:	f173 0300 	sbcs.w	r3, r3, #0
 800574a:	d303      	bcc.n	8005754 <prv_getRegistrationSequenceLimit+0x64>
                sequenceLimit = 254;
 800574c:	22fe      	movs	r2, #254	; 0xfe
 800574e:	2300      	movs	r3, #0
 8005750:	e9cd 2304 	strd	r2, r3, [sp, #16]
            if (sequenceLimitP)
 8005754:	b10e      	cbz	r6, 800575a <prv_getRegistrationSequenceLimit+0x6a>
                *sequenceLimitP = sequenceLimit;
 8005756:	9b04      	ldr	r3, [sp, #16]
 8005758:	7033      	strb	r3, [r6, #0]
            if (sequenceDelayP)
 800575a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0d7      	beq.n	8005710 <prv_getRegistrationSequenceLimit+0x20>
                *sequenceDelayP = sequenceDelay;
 8005760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005764:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005766:	e9c1 2300 	strd	r2, r3, [r1]
 800576a:	e7d1      	b.n	8005710 <prv_getRegistrationSequenceLimit+0x20>
 800576c:	00015180 	.word	0x00015180

08005770 <prv_startRegistration>:
}

static uint8_t prv_startRegistration(lwm2m_context_t *contextP,
                                     lwm2m_server_t* targetP,
                                     lwm2m_object_t* serverObjP)
{
 8005770:	b530      	push	{r4, r5, lr}
 8005772:	b085      	sub	sp, #20
 8005774:	460c      	mov	r4, r1
 8005776:	4611      	mov	r1, r2
    uint64_t delay;
    uint8_t result = prv_readUint(contextP,
 8005778:	ab02      	add	r3, sp, #8
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	230e      	movs	r3, #14
 800577e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8005780:	f7ff ff2d 	bl	80055de <prv_readUint>
                                  serverObjP,
                                  targetP->servObjInstID,
                                  LWM2M_SERVER_INITIAL_REG_DELAY_ID,
                                  &delay);
    if (result == COAP_404_NOT_FOUND)
 8005784:	2884      	cmp	r0, #132	; 0x84
 8005786:	d002      	beq.n	800578e <prv_startRegistration+0x1e>
 8005788:	4605      	mov	r5, r0
    {
        delay = 0;
        result = COAP_NO_ERROR;
    }
    if (result == COAP_NO_ERROR)
 800578a:	b988      	cbnz	r0, 80057b0 <prv_startRegistration+0x40>
 800578c:	e004      	b.n	8005798 <prv_startRegistration+0x28>
        delay = 0;
 800578e:	2200      	movs	r2, #0
 8005790:	2300      	movs	r3, #0
 8005792:	e9cd 2302 	strd	r2, r3, [sp, #8]
        result = COAP_NO_ERROR;
 8005796:	2500      	movs	r5, #0
    {
        targetP->registration = lwm2m_gettime() + delay;
 8005798:	f003 f9ff 	bl	8008b9a <lwm2m_gettime>
 800579c:	9b02      	ldr	r3, [sp, #8]
 800579e:	181b      	adds	r3, r3, r0
 80057a0:	9a03      	ldr	r2, [sp, #12]
 80057a2:	eb42 0201 	adc.w	r2, r2, r1
 80057a6:	6123      	str	r3, [r4, #16]
 80057a8:	6162      	str	r2, [r4, #20]
        targetP->status = STATE_REG_HOLD_OFF;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f884 3020 	strb.w	r3, [r4, #32]
    }

    return result;
}
 80057b0:	4628      	mov	r0, r5
 80057b2:	b005      	add	sp, #20
 80057b4:	bd30      	pop	{r4, r5, pc}
	...

080057b8 <prv_updateRegistration>:
}

static int prv_updateRegistration(lwm2m_context_t * contextP,
                                  lwm2m_server_t * server,
                                  bool withObjects)
{
 80057b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	4604      	mov	r4, r0
 80057c0:	460d      	mov	r5, r1
 80057c2:	4617      	mov	r7, r2
    lwm2m_transaction_t * transaction;
    uint8_t * payload = NULL;
    int payload_length;

    transaction = transaction_new(server->sessionH, COAP_POST, NULL, NULL, contextP->nextMID++, 4, NULL);
 80057c4:	69c8      	ldr	r0, [r1, #28]
 80057c6:	8c23      	ldrh	r3, [r4, #32]
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	8422      	strh	r2, [r4, #32]
 80057cc:	2200      	movs	r2, #0
 80057ce:	9202      	str	r2, [sp, #8]
 80057d0:	2104      	movs	r1, #4
 80057d2:	9101      	str	r1, [sp, #4]
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	4613      	mov	r3, r2
 80057d8:	2102      	movs	r1, #2
 80057da:	f7fd fc69 	bl	80030b0 <transaction_new>
    if (transaction == NULL) return COAP_500_INTERNAL_SERVER_ERROR;
 80057de:	2800      	cmp	r0, #0
 80057e0:	d054      	beq.n	800588c <prv_updateRegistration+0xd4>
 80057e2:	4606      	mov	r6, r0

    coap_set_header_uri_path(transaction->message, server->location);
 80057e4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80057e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80057e8:	f7fe f9c1 	bl	8003b6e <coap_set_header_uri_path>

    if (withObjects == true)
 80057ec:	b377      	cbz	r7, 800584c <prv_updateRegistration+0x94>
    {
        payload_length = object_getRegisterPayloadBufferLength(contextP);
 80057ee:	4620      	mov	r0, r4
 80057f0:	f7ff f8b8 	bl	8004964 <object_getRegisterPayloadBufferLength>
        if(payload_length == 0)
 80057f4:	4680      	mov	r8, r0
 80057f6:	b1b8      	cbz	r0, 8005828 <prv_updateRegistration+0x70>
        {
            transaction_free(transaction);
            return COAP_500_INTERNAL_SERVER_ERROR;
        }

        payload = (uint8_t*) lwm2m_malloc(payload_length);
 80057f8:	f003 f9ae 	bl	8008b58 <lwm2m_malloc>
        if(!payload)
 80057fc:	4607      	mov	r7, r0
 80057fe:	b1c0      	cbz	r0, 8005832 <prv_updateRegistration+0x7a>
        {
            transaction_free(transaction);
            return COAP_500_INTERNAL_SERVER_ERROR;
        }

        payload_length = object_getRegisterPayload(contextP, payload, payload_length);
 8005800:	4642      	mov	r2, r8
 8005802:	4601      	mov	r1, r0
 8005804:	4620      	mov	r0, r4
 8005806:	f7ff f919 	bl	8004a3c <object_getRegisterPayload>
        if(payload_length == 0)
 800580a:	4602      	mov	r2, r0
 800580c:	b1b0      	cbz	r0, 800583c <prv_updateRegistration+0x84>
            transaction_free(transaction);
            lwm2m_free(payload);
            return COAP_500_INTERNAL_SERVER_ERROR;
        }

        if (!transaction_set_payload(transaction, payload, (size_t)payload_length)) {
 800580e:	4639      	mov	r1, r7
 8005810:	4630      	mov	r0, r6
 8005812:	f7fd fdd0 	bl	80033b6 <transaction_set_payload>
 8005816:	b9d0      	cbnz	r0, 800584e <prv_updateRegistration+0x96>
            transaction_free(transaction);
 8005818:	4630      	mov	r0, r6
 800581a:	f7fd fd05 	bl	8003228 <transaction_free>
            lwm2m_free(payload);
 800581e:	4638      	mov	r0, r7
 8005820:	f003 f99e 	bl	8008b60 <lwm2m_free>
            return COAP_500_INTERNAL_SERVER_ERROR;
 8005824:	20a0      	movs	r0, #160	; 0xa0
 8005826:	e034      	b.n	8005892 <prv_updateRegistration+0xda>
            transaction_free(transaction);
 8005828:	4630      	mov	r0, r6
 800582a:	f7fd fcfd 	bl	8003228 <transaction_free>
            return COAP_500_INTERNAL_SERVER_ERROR;
 800582e:	20a0      	movs	r0, #160	; 0xa0
 8005830:	e02f      	b.n	8005892 <prv_updateRegistration+0xda>
            transaction_free(transaction);
 8005832:	4630      	mov	r0, r6
 8005834:	f7fd fcf8 	bl	8003228 <transaction_free>
            return COAP_500_INTERNAL_SERVER_ERROR;
 8005838:	20a0      	movs	r0, #160	; 0xa0
 800583a:	e02a      	b.n	8005892 <prv_updateRegistration+0xda>
            transaction_free(transaction);
 800583c:	4630      	mov	r0, r6
 800583e:	f7fd fcf3 	bl	8003228 <transaction_free>
            lwm2m_free(payload);
 8005842:	4638      	mov	r0, r7
 8005844:	f003 f98c 	bl	8008b60 <lwm2m_free>
            return COAP_500_INTERNAL_SERVER_ERROR;
 8005848:	20a0      	movs	r0, #160	; 0xa0
 800584a:	e022      	b.n	8005892 <prv_updateRegistration+0xda>
    uint8_t * payload = NULL;
 800584c:	2700      	movs	r7, #0
        }
    }

    registration_data_t * dataP = (registration_data_t *) lwm2m_malloc(sizeof(registration_data_t));
 800584e:	200c      	movs	r0, #12
 8005850:	f003 f982 	bl	8008b58 <lwm2m_malloc>
    if (dataP == NULL){
 8005854:	b190      	cbz	r0, 800587c <prv_updateRegistration+0xc4>
        transaction_free(transaction);
        lwm2m_free(payload);
        return COAP_500_INTERNAL_SERVER_ERROR;
    }

    dataP->payload = payload;
 8005856:	6087      	str	r7, [r0, #8]
    dataP->server = server;
 8005858:	6005      	str	r5, [r0, #0]

    transaction->callback = prv_handleRegistrationUpdateReply;
 800585a:	4a0f      	ldr	r2, [pc, #60]	; (8005898 <prv_updateRegistration+0xe0>)
 800585c:	63f2      	str	r2, [r6, #60]	; 0x3c
    transaction->userData = (void *) dataP;
 800585e:	6430      	str	r0, [r6, #64]	; 0x40

    contextP->transactionList = (lwm2m_transaction_t *)LWM2M_LIST_ADD(contextP->transactionList, transaction);
 8005860:	4631      	mov	r1, r6
 8005862:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005864:	f7fe ff24 	bl	80046b0 <lwm2m_list_add>
 8005868:	6260      	str	r0, [r4, #36]	; 0x24

    if (transaction_send(contextP, transaction) == 0) {
 800586a:	4631      	mov	r1, r6
 800586c:	4620      	mov	r0, r4
 800586e:	f7fd fd03 	bl	8003278 <transaction_send>
 8005872:	b968      	cbnz	r0, 8005890 <prv_updateRegistration+0xd8>
        server->status = STATE_REG_UPDATE_PENDING;
 8005874:	2305      	movs	r3, #5
 8005876:	f885 3020 	strb.w	r3, [r5, #32]
 800587a:	e00a      	b.n	8005892 <prv_updateRegistration+0xda>
        transaction_free(transaction);
 800587c:	4630      	mov	r0, r6
 800587e:	f7fd fcd3 	bl	8003228 <transaction_free>
        lwm2m_free(payload);
 8005882:	4638      	mov	r0, r7
 8005884:	f003 f96c 	bl	8008b60 <lwm2m_free>
        return COAP_500_INTERNAL_SERVER_ERROR;
 8005888:	20a0      	movs	r0, #160	; 0xa0
 800588a:	e002      	b.n	8005892 <prv_updateRegistration+0xda>
    if (transaction == NULL) return COAP_500_INTERNAL_SERVER_ERROR;
 800588c:	20a0      	movs	r0, #160	; 0xa0
 800588e:	e000      	b.n	8005892 <prv_updateRegistration+0xda>
    }
    
    return COAP_NO_ERROR;
 8005890:	2000      	movs	r0, #0
}
 8005892:	b004      	add	sp, #16
 8005894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005898:	0800589d 	.word	0x0800589d

0800589c <prv_handleRegistrationUpdateReply>:
{
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	4607      	mov	r7, r0
 80058a0:	460d      	mov	r5, r1
 80058a2:	4614      	mov	r4, r2
    registration_data_t * dataP = (registration_data_t *)(transacP->userData);
 80058a4:	6c0e      	ldr	r6, [r1, #64]	; 0x40
    if (dataP->server->status == STATE_REG_UPDATE_PENDING)
 80058a6:	6833      	ldr	r3, [r6, #0]
 80058a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058ac:	2b05      	cmp	r3, #5
 80058ae:	d004      	beq.n	80058ba <prv_handleRegistrationUpdateReply+0x1e>
    if (packet != NULL && packet->code != COAP_231_CONTINUE)
 80058b0:	b114      	cbz	r4, 80058b8 <prv_handleRegistrationUpdateReply+0x1c>
 80058b2:	79a3      	ldrb	r3, [r4, #6]
 80058b4:	2b5f      	cmp	r3, #95	; 0x5f
 80058b6:	d127      	bne.n	8005908 <prv_handleRegistrationUpdateReply+0x6c>
}
 80058b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        time_t tv_sec = lwm2m_gettime();
 80058ba:	f003 f96e 	bl	8008b9a <lwm2m_gettime>
        if (tv_sec >= 0)
 80058be:	2900      	cmp	r1, #0
 80058c0:	db02      	blt.n	80058c8 <prv_handleRegistrationUpdateReply+0x2c>
            dataP->server->registration = tv_sec;
 80058c2:	6833      	ldr	r3, [r6, #0]
 80058c4:	6118      	str	r0, [r3, #16]
 80058c6:	6159      	str	r1, [r3, #20]
        if (packet != NULL && (packet->code == COAP_231_CONTINUE || (packet->code == COAP_413_ENTITY_TOO_LARGE && (!IS_OPTION(packet, COAP_OPTION_BLOCK1) || packet->block1_num == 0))))
 80058c8:	b124      	cbz	r4, 80058d4 <prv_handleRegistrationUpdateReply+0x38>
 80058ca:	79a3      	ldrb	r3, [r4, #6]
 80058cc:	2b5f      	cmp	r3, #95	; 0x5f
 80058ce:	d011      	beq.n	80058f4 <prv_handleRegistrationUpdateReply+0x58>
 80058d0:	2b8d      	cmp	r3, #141	; 0x8d
 80058d2:	d008      	beq.n	80058e6 <prv_handleRegistrationUpdateReply+0x4a>
        if (packet != NULL && packet->code == COAP_204_CHANGED)
 80058d4:	b114      	cbz	r4, 80058dc <prv_handleRegistrationUpdateReply+0x40>
 80058d6:	79a3      	ldrb	r3, [r4, #6]
 80058d8:	2b44      	cmp	r3, #68	; 0x44
 80058da:	d010      	beq.n	80058fe <prv_handleRegistrationUpdateReply+0x62>
            dataP->server->status = STATE_REG_FAILED;
 80058dc:	6833      	ldr	r3, [r6, #0]
 80058de:	2204      	movs	r2, #4
 80058e0:	f883 2020 	strb.w	r2, [r3, #32]
 80058e4:	e7e4      	b.n	80058b0 <prv_handleRegistrationUpdateReply+0x14>
        if (packet != NULL && (packet->code == COAP_231_CONTINUE || (packet->code == COAP_413_ENTITY_TOO_LARGE && (!IS_OPTION(packet, COAP_OPTION_BLOCK1) || packet->block1_num == 0))))
 80058e6:	7b63      	ldrb	r3, [r4, #13]
 80058e8:	f013 0f08 	tst.w	r3, #8
 80058ec:	d002      	beq.n	80058f4 <prv_handleRegistrationUpdateReply+0x58>
 80058ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1ef      	bne.n	80058d4 <prv_handleRegistrationUpdateReply+0x38>
            transaction_free_userData(contextP, transacP);
 80058f4:	4629      	mov	r1, r5
 80058f6:	4638      	mov	r0, r7
 80058f8:	f7fd fd84 	bl	8003404 <transaction_free_userData>
            return;
 80058fc:	e7dc      	b.n	80058b8 <prv_handleRegistrationUpdateReply+0x1c>
            dataP->server->status = STATE_REGISTERED;
 80058fe:	6833      	ldr	r3, [r6, #0]
 8005900:	2203      	movs	r2, #3
 8005902:	f883 2020 	strb.w	r2, [r3, #32]
 8005906:	e7d3      	b.n	80058b0 <prv_handleRegistrationUpdateReply+0x14>
        lwm2m_free(dataP->payload);
 8005908:	68b0      	ldr	r0, [r6, #8]
 800590a:	f003 f929 	bl	8008b60 <lwm2m_free>
        transaction_free_userData(contextP, transacP);
 800590e:	4629      	mov	r1, r5
 8005910:	4638      	mov	r0, r7
 8005912:	f7fd fd77 	bl	8003404 <transaction_free_userData>
 8005916:	e7cf      	b.n	80058b8 <prv_handleRegistrationUpdateReply+0x1c>

08005918 <prv_readBoolean>:
{
 8005918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591a:	b085      	sub	sp, #20
 800591c:	4605      	mov	r5, r0
 800591e:	460c      	mov	r4, r1
 8005920:	4617      	mov	r7, r2
 8005922:	461e      	mov	r6, r3
    int size = 1;
 8005924:	2001      	movs	r0, #1
 8005926:	9003      	str	r0, [sp, #12]
    lwm2m_data_t * dataP = lwm2m_data_new(size);
 8005928:	f001 fbdd 	bl	80070e6 <lwm2m_data_new>
 800592c:	9002      	str	r0, [sp, #8]
    if (dataP == NULL)
 800592e:	b1d0      	cbz	r0, 8005966 <prv_readBoolean+0x4e>
    dataP[0].id = resourceId;
 8005930:	8046      	strh	r6, [r0, #2]
    result = objP->readFunc(contextP, instanceId, &size, &dataP, objP);
 8005932:	68e6      	ldr	r6, [r4, #12]
 8005934:	9400      	str	r4, [sp, #0]
 8005936:	ab02      	add	r3, sp, #8
 8005938:	aa03      	add	r2, sp, #12
 800593a:	4639      	mov	r1, r7
 800593c:	4628      	mov	r0, r5
 800593e:	47b0      	blx	r6
 8005940:	4604      	mov	r4, r0
    if (result == COAP_205_CONTENT)
 8005942:	2845      	cmp	r0, #69	; 0x45
 8005944:	d006      	beq.n	8005954 <prv_readBoolean+0x3c>
    lwm2m_data_free(size, dataP);
 8005946:	9902      	ldr	r1, [sp, #8]
 8005948:	9803      	ldr	r0, [sp, #12]
 800594a:	f001 fbdd 	bl	8007108 <lwm2m_data_free>
}
 800594e:	4620      	mov	r0, r4
 8005950:	b005      	add	sp, #20
 8005952:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (lwm2m_data_decode_bool(dataP, valueP))
 8005954:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005956:	9802      	ldr	r0, [sp, #8]
 8005958:	f001 fd21 	bl	800739e <lwm2m_data_decode_bool>
 800595c:	b108      	cbz	r0, 8005962 <prv_readBoolean+0x4a>
            result = COAP_NO_ERROR;
 800595e:	2400      	movs	r4, #0
 8005960:	e7f1      	b.n	8005946 <prv_readBoolean+0x2e>
            result = COAP_400_BAD_REQUEST;
 8005962:	2480      	movs	r4, #128	; 0x80
 8005964:	e7ef      	b.n	8005946 <prv_readBoolean+0x2e>
        return COAP_500_INTERNAL_SERVER_ERROR;
 8005966:	24a0      	movs	r4, #160	; 0xa0
 8005968:	e7f1      	b.n	800594e <prv_readBoolean+0x36>

0800596a <prv_getRegistrationFailureBlocking>:
{
 800596a:	b510      	push	{r4, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	468c      	mov	ip, r1
 8005970:	4611      	mov	r1, r2
 8005972:	461c      	mov	r4, r3
    uint8_t result = prv_readBoolean(contextP,
 8005974:	f8bc 2030 	ldrh.w	r2, [ip, #48]	; 0x30
 8005978:	f10d 030f 	add.w	r3, sp, #15
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	230f      	movs	r3, #15
 8005980:	f7ff ffca 	bl	8005918 <prv_readBoolean>
    if (result == COAP_NO_ERROR)
 8005984:	4603      	mov	r3, r0
 8005986:	b930      	cbnz	r0, 8005996 <prv_getRegistrationFailureBlocking+0x2c>
        if (blockingP)
 8005988:	b114      	cbz	r4, 8005990 <prv_getRegistrationFailureBlocking+0x26>
            *blockingP = blocking;
 800598a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800598e:	7022      	strb	r2, [r4, #0]
}
 8005990:	4618      	mov	r0, r3
 8005992:	b004      	add	sp, #16
 8005994:	bd10      	pop	{r4, pc}
    else if (result == COAP_404_NOT_FOUND)
 8005996:	2884      	cmp	r0, #132	; 0x84
 8005998:	d1fa      	bne.n	8005990 <prv_getRegistrationFailureBlocking+0x26>
        if (blockingP)
 800599a:	b114      	cbz	r4, 80059a2 <prv_getRegistrationFailureBlocking+0x38>
            *blockingP = false;
 800599c:	2300      	movs	r3, #0
 800599e:	7023      	strb	r3, [r4, #0]
 80059a0:	e7f6      	b.n	8005990 <prv_getRegistrationFailureBlocking+0x26>
        result = COAP_NO_ERROR;
 80059a2:	2300      	movs	r3, #0
 80059a4:	e7f4      	b.n	8005990 <prv_getRegistrationFailureBlocking+0x26>

080059a6 <prv_getBootstrapOnRegistrationFailure>:
{
 80059a6:	b510      	push	{r4, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	468c      	mov	ip, r1
 80059ac:	4611      	mov	r1, r2
 80059ae:	461c      	mov	r4, r3
    uint8_t result = prv_readBoolean(contextP,
 80059b0:	f8bc 2030 	ldrh.w	r2, [ip, #48]	; 0x30
 80059b4:	f10d 030f 	add.w	r3, sp, #15
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	2310      	movs	r3, #16
 80059bc:	f7ff ffac 	bl	8005918 <prv_readBoolean>
    if (result == COAP_NO_ERROR)
 80059c0:	b928      	cbnz	r0, 80059ce <prv_getBootstrapOnRegistrationFailure+0x28>
        if (bootstrapP)
 80059c2:	b114      	cbz	r4, 80059ca <prv_getBootstrapOnRegistrationFailure+0x24>
            *bootstrapP = bootstrap;
 80059c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80059c8:	7023      	strb	r3, [r4, #0]
}
 80059ca:	b004      	add	sp, #16
 80059cc:	bd10      	pop	{r4, pc}
    else if (result == COAP_404_NOT_FOUND)
 80059ce:	2884      	cmp	r0, #132	; 0x84
 80059d0:	d1fb      	bne.n	80059ca <prv_getBootstrapOnRegistrationFailure+0x24>
        if (bootstrapP)
 80059d2:	b11c      	cbz	r4, 80059dc <prv_getBootstrapOnRegistrationFailure+0x36>
            *bootstrapP = true;
 80059d4:	2301      	movs	r3, #1
 80059d6:	7023      	strb	r3, [r4, #0]
        result = COAP_NO_ERROR;
 80059d8:	2000      	movs	r0, #0
 80059da:	e7f6      	b.n	80059ca <prv_getBootstrapOnRegistrationFailure+0x24>
 80059dc:	2000      	movs	r0, #0
 80059de:	e7f4      	b.n	80059ca <prv_getBootstrapOnRegistrationFailure+0x24>

080059e0 <prv_getRegistrationQueryLength>:
{
 80059e0:	b530      	push	{r4, r5, lr}
 80059e2:	b087      	sub	sp, #28
 80059e4:	4604      	mov	r4, r0
 80059e6:	460d      	mov	r5, r1
    index += strlen(contextP->endpointName);
 80059e8:	6840      	ldr	r0, [r0, #4]
 80059ea:	f7fa fc19 	bl	8000220 <strlen>
 80059ee:	4602      	mov	r2, r0
 80059f0:	f100 030e 	add.w	r3, r0, #14
    if (NULL != contextP->msisdn)
 80059f4:	68a0      	ldr	r0, [r4, #8]
 80059f6:	b120      	cbz	r0, 8005a02 <prv_getRegistrationQueryLength+0x22>
        index += strlen(QUERY_DELIMITER QUERY_SMS);
 80059f8:	f102 0413 	add.w	r4, r2, #19
        index += strlen(contextP->msisdn);
 80059fc:	f7fa fc10 	bl	8000220 <strlen>
 8005a00:	1823      	adds	r3, r4, r0
    if ((server->binding & ~(BINDING_UNKNOWN|BINDING_Q)) != 0)
 8005a02:	7e2a      	ldrb	r2, [r5, #24]
 8005a04:	f032 0121 	bics.w	r1, r2, #33	; 0x21
 8005a08:	d012      	beq.n	8005a30 <prv_getRegistrationQueryLength+0x50>
        index += QUERY_DELIMITER_LEN + QUERY_BINDING_LEN;
 8005a0a:	1cd9      	adds	r1, r3, #3
        if ((server->binding & BINDING_U) != 0)
 8005a0c:	f012 0f02 	tst.w	r2, #2
 8005a10:	d000      	beq.n	8005a14 <prv_getRegistrationQueryLength+0x34>
            index += 1;
 8005a12:	1d19      	adds	r1, r3, #4
        if ((server->binding & BINDING_T) != 0)
 8005a14:	f012 0f04 	tst.w	r2, #4
 8005a18:	d000      	beq.n	8005a1c <prv_getRegistrationQueryLength+0x3c>
            index += 1;
 8005a1a:	3101      	adds	r1, #1
        if ((server->binding & BINDING_S) != 0)
 8005a1c:	f012 0f08 	tst.w	r2, #8
 8005a20:	d000      	beq.n	8005a24 <prv_getRegistrationQueryLength+0x44>
            index += 1;
 8005a22:	3101      	adds	r1, #1
        if ((server->binding & BINDING_N) != 0)
 8005a24:	f012 0f10 	tst.w	r2, #16
 8005a28:	d001      	beq.n	8005a2e <prv_getRegistrationQueryLength+0x4e>
            index += 1;
 8005a2a:	1c4b      	adds	r3, r1, #1
 8005a2c:	e000      	b.n	8005a30 <prv_getRegistrationQueryLength+0x50>
 8005a2e:	460b      	mov	r3, r1
    if ((server->binding & BINDING_Q) != 0)
 8005a30:	f012 0f20 	tst.w	r2, #32
 8005a34:	d000      	beq.n	8005a38 <prv_getRegistrationQueryLength+0x58>
        index += QUERY_DELIMITER_LEN + QUERY_QUEUE_MODE_LEN;
 8005a36:	3302      	adds	r3, #2
    if (0 != server->lifetime)
 8005a38:	68a8      	ldr	r0, [r5, #8]
 8005a3a:	68e9      	ldr	r1, [r5, #12]
 8005a3c:	ea50 0201 	orrs.w	r2, r0, r1
 8005a40:	d102      	bne.n	8005a48 <prv_getRegistrationQueryLength+0x68>
    return index + 1;
 8005a42:	1c58      	adds	r0, r3, #1
}
 8005a44:	b007      	add	sp, #28
 8005a46:	bd30      	pop	{r4, r5, pc}
        index += strlen(QUERY_DELIMITER QUERY_LIFETIME);
 8005a48:	1d1c      	adds	r4, r3, #4
        res = utils_intToText(server->lifetime, buffer, sizeof(buffer));
 8005a4a:	2315      	movs	r3, #21
 8005a4c:	466a      	mov	r2, sp
 8005a4e:	f000 fdab 	bl	80065a8 <utils_intToText>
        if (res == 0) return 0;
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d0f6      	beq.n	8005a44 <prv_getRegistrationQueryLength+0x64>
        index += res;
 8005a56:	1823      	adds	r3, r4, r0
 8005a58:	e7f3      	b.n	8005a42 <prv_getRegistrationQueryLength+0x62>
	...

08005a5c <prv_getRegistrationQuery>:
{
 8005a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a60:	4680      	mov	r8, r0
 8005a62:	460f      	mov	r7, r1
 8005a64:	4616      	mov	r6, r2
 8005a66:	461d      	mov	r5, r3
    res = utils_stringCopy(buffer, length, QUERY_STARTER QUERY_VERSION_FULL QUERY_DELIMITER QUERY_NAME);
 8005a68:	4a4b      	ldr	r2, [pc, #300]	; (8005b98 <prv_getRegistrationQuery+0x13c>)
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	f001 f9ec 	bl	8006e4a <utils_stringCopy>
    if (res < 0) return 0;
 8005a72:	1e04      	subs	r4, r0, #0
 8005a74:	db75      	blt.n	8005b62 <prv_getRegistrationQuery+0x106>
    res = utils_stringCopy(buffer + index, length - index, contextP->endpointName);
 8005a76:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005a7a:	1b29      	subs	r1, r5, r4
 8005a7c:	1930      	adds	r0, r6, r4
 8005a7e:	f001 f9e4 	bl	8006e4a <utils_stringCopy>
    if (res < 0) return 0;
 8005a82:	2800      	cmp	r0, #0
 8005a84:	db70      	blt.n	8005b68 <prv_getRegistrationQuery+0x10c>
    index += res;
 8005a86:	4404      	add	r4, r0
    if (NULL != contextP->msisdn)
 8005a88:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a8c:	b183      	cbz	r3, 8005ab0 <prv_getRegistrationQuery+0x54>
        res = utils_stringCopy(buffer + index, length - index, QUERY_DELIMITER QUERY_SMS);
 8005a8e:	4a43      	ldr	r2, [pc, #268]	; (8005b9c <prv_getRegistrationQuery+0x140>)
 8005a90:	1b29      	subs	r1, r5, r4
 8005a92:	1930      	adds	r0, r6, r4
 8005a94:	f001 f9d9 	bl	8006e4a <utils_stringCopy>
        if (res < 0) return 0;
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	db67      	blt.n	8005b6c <prv_getRegistrationQuery+0x110>
        index += res;
 8005a9c:	4404      	add	r4, r0
        res = utils_stringCopy(buffer + index, length - index, contextP->msisdn);
 8005a9e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8005aa2:	1b29      	subs	r1, r5, r4
 8005aa4:	1930      	adds	r0, r6, r4
 8005aa6:	f001 f9d0 	bl	8006e4a <utils_stringCopy>
        if (res < 0) return 0;
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	db60      	blt.n	8005b70 <prv_getRegistrationQuery+0x114>
        index += res;
 8005aae:	4404      	add	r4, r0
    if ((server->binding & ~(BINDING_UNKNOWN|BINDING_Q)) != 0)
 8005ab0:	7e3b      	ldrb	r3, [r7, #24]
 8005ab2:	f033 0321 	bics.w	r3, r3, #33	; 0x21
 8005ab6:	d10d      	bne.n	8005ad4 <prv_getRegistrationQuery+0x78>
    if ((server->binding & BINDING_Q) != 0)
 8005ab8:	7e3b      	ldrb	r3, [r7, #24]
 8005aba:	f013 0f20 	tst.w	r3, #32
 8005abe:	d136      	bne.n	8005b2e <prv_getRegistrationQuery+0xd2>
    if (0 != server->lifetime)
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	d13b      	bne.n	8005b40 <prv_getRegistrationQuery+0xe4>
    if(index < length)
 8005ac8:	42ac      	cmp	r4, r5
 8005aca:	d263      	bcs.n	8005b94 <prv_getRegistrationQuery+0x138>
        buffer[index++] = '\0';
 8005acc:	2300      	movs	r3, #0
 8005ace:	5533      	strb	r3, [r6, r4]
    return index;
 8005ad0:	1c60      	adds	r0, r4, #1
 8005ad2:	e047      	b.n	8005b64 <prv_getRegistrationQuery+0x108>
        res = utils_stringCopy(buffer + index, length - index, QUERY_DELIMITER QUERY_BINDING);
 8005ad4:	4a32      	ldr	r2, [pc, #200]	; (8005ba0 <prv_getRegistrationQuery+0x144>)
 8005ad6:	1b29      	subs	r1, r5, r4
 8005ad8:	1930      	adds	r0, r6, r4
 8005ada:	f001 f9b6 	bl	8006e4a <utils_stringCopy>
        if (res < 0) return 0;
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	db48      	blt.n	8005b74 <prv_getRegistrationQuery+0x118>
        index += res;
 8005ae2:	4404      	add	r4, r0
        if ((server->binding & BINDING_U) != 0)
 8005ae4:	7e3b      	ldrb	r3, [r7, #24]
 8005ae6:	f013 0f02 	tst.w	r3, #2
 8005aea:	d004      	beq.n	8005af6 <prv_getRegistrationQuery+0x9a>
            if (index >= length) return 0;
 8005aec:	42a5      	cmp	r5, r4
 8005aee:	d943      	bls.n	8005b78 <prv_getRegistrationQuery+0x11c>
            buffer[index++] = 'U';
 8005af0:	2355      	movs	r3, #85	; 0x55
 8005af2:	5533      	strb	r3, [r6, r4]
 8005af4:	3401      	adds	r4, #1
        if ((server->binding & BINDING_T) != 0)
 8005af6:	7e3b      	ldrb	r3, [r7, #24]
 8005af8:	f013 0f04 	tst.w	r3, #4
 8005afc:	d004      	beq.n	8005b08 <prv_getRegistrationQuery+0xac>
            if (index >= length) return 0;
 8005afe:	42ac      	cmp	r4, r5
 8005b00:	d23c      	bcs.n	8005b7c <prv_getRegistrationQuery+0x120>
            buffer[index++] = 'T';
 8005b02:	2354      	movs	r3, #84	; 0x54
 8005b04:	5533      	strb	r3, [r6, r4]
 8005b06:	3401      	adds	r4, #1
        if ((server->binding & BINDING_S) != 0)
 8005b08:	7e3b      	ldrb	r3, [r7, #24]
 8005b0a:	f013 0f08 	tst.w	r3, #8
 8005b0e:	d004      	beq.n	8005b1a <prv_getRegistrationQuery+0xbe>
            if (index >= length) return 0;
 8005b10:	42ac      	cmp	r4, r5
 8005b12:	d235      	bcs.n	8005b80 <prv_getRegistrationQuery+0x124>
            buffer[index++] = 'S';
 8005b14:	2353      	movs	r3, #83	; 0x53
 8005b16:	5533      	strb	r3, [r6, r4]
 8005b18:	3401      	adds	r4, #1
        if ((server->binding & BINDING_N) != 0)
 8005b1a:	7e3b      	ldrb	r3, [r7, #24]
 8005b1c:	f013 0f10 	tst.w	r3, #16
 8005b20:	d0ca      	beq.n	8005ab8 <prv_getRegistrationQuery+0x5c>
            if (index >= length) return 0;
 8005b22:	42ac      	cmp	r4, r5
 8005b24:	d22e      	bcs.n	8005b84 <prv_getRegistrationQuery+0x128>
            buffer[index++] = 'N';
 8005b26:	234e      	movs	r3, #78	; 0x4e
 8005b28:	5533      	strb	r3, [r6, r4]
 8005b2a:	3401      	adds	r4, #1
 8005b2c:	e7c4      	b.n	8005ab8 <prv_getRegistrationQuery+0x5c>
        res = utils_stringCopy(buffer + index, length - index, QUERY_DELIMITER QUERY_QUEUE_MODE);
 8005b2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ba4 <prv_getRegistrationQuery+0x148>)
 8005b30:	1b29      	subs	r1, r5, r4
 8005b32:	1930      	adds	r0, r6, r4
 8005b34:	f001 f989 	bl	8006e4a <utils_stringCopy>
        if (res < 0) return 0;
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	db25      	blt.n	8005b88 <prv_getRegistrationQuery+0x12c>
        index += res;
 8005b3c:	4404      	add	r4, r0
 8005b3e:	e7bf      	b.n	8005ac0 <prv_getRegistrationQuery+0x64>
        res = utils_stringCopy(buffer + index, length - index, QUERY_DELIMITER QUERY_LIFETIME);
 8005b40:	4a19      	ldr	r2, [pc, #100]	; (8005ba8 <prv_getRegistrationQuery+0x14c>)
 8005b42:	1b29      	subs	r1, r5, r4
 8005b44:	1930      	adds	r0, r6, r4
 8005b46:	f001 f980 	bl	8006e4a <utils_stringCopy>
        if (res < 0) return 0;
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	db1e      	blt.n	8005b8c <prv_getRegistrationQuery+0x130>
        index += res;
 8005b4e:	4404      	add	r4, r0
        res = utils_intToText(server->lifetime, (uint8_t *)buffer + index, length - index);
 8005b50:	1b2b      	subs	r3, r5, r4
 8005b52:	1932      	adds	r2, r6, r4
 8005b54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b58:	f000 fd26 	bl	80065a8 <utils_intToText>
        if (res == 0) return 0;
 8005b5c:	b1c0      	cbz	r0, 8005b90 <prv_getRegistrationQuery+0x134>
        index += res;
 8005b5e:	4404      	add	r4, r0
 8005b60:	e7b2      	b.n	8005ac8 <prv_getRegistrationQuery+0x6c>
    if (res < 0) return 0;
 8005b62:	2000      	movs	r0, #0
}
 8005b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (res < 0) return 0;
 8005b68:	2000      	movs	r0, #0
 8005b6a:	e7fb      	b.n	8005b64 <prv_getRegistrationQuery+0x108>
        if (res < 0) return 0;
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	e7f9      	b.n	8005b64 <prv_getRegistrationQuery+0x108>
        if (res < 0) return 0;
 8005b70:	2000      	movs	r0, #0
 8005b72:	e7f7      	b.n	8005b64 <prv_getRegistrationQuery+0x108>
        if (res < 0) return 0;
 8005b74:	2000      	movs	r0, #0
 8005b76:	e7f5      	b.n	8005b64 <prv_getRegistrationQuery+0x108>
            if (index >= length) return 0;
 8005b78:	2000      	movs	r0, #0
 8005b7a:	e7f3      	b.n	8005b64 <prv_getRegistrationQuery+0x108>
            if (index >= length) return 0;
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	e7f1      	b.n	8005b64 <prv_getRegistrationQuery+0x108>
            if (index >= length) return 0;
 8005b80:	2000      	movs	r0, #0
 8005b82:	e7ef      	b.n	8005b64 <prv_getRegistrationQuery+0x108>
            if (index >= length) return 0;
 8005b84:	2000      	movs	r0, #0
 8005b86:	e7ed      	b.n	8005b64 <prv_getRegistrationQuery+0x108>
        if (res < 0) return 0;
 8005b88:	2000      	movs	r0, #0
 8005b8a:	e7eb      	b.n	8005b64 <prv_getRegistrationQuery+0x108>
        if (res < 0) return 0;
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	e7e9      	b.n	8005b64 <prv_getRegistrationQuery+0x108>
        if (res == 0) return 0;
 8005b90:	2000      	movs	r0, #0
 8005b92:	e7e7      	b.n	8005b64 <prv_getRegistrationQuery+0x108>
        return 0;
 8005b94:	2000      	movs	r0, #0
 8005b96:	e7e5      	b.n	8005b64 <prv_getRegistrationQuery+0x108>
 8005b98:	0801b860 	.word	0x0801b860
 8005b9c:	0801b870 	.word	0x0801b870
 8005ba0:	0801b878 	.word	0x0801b878
 8005ba4:	0801b87c 	.word	0x0801b87c
 8005ba8:	0801b880 	.word	0x0801b880

08005bac <prv_register>:
{
 8005bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb0:	b08d      	sub	sp, #52	; 0x34
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	460e      	mov	r6, r1
    payload_length = object_getRegisterPayloadBufferLength(contextP);
 8005bb6:	f7fe fed5 	bl	8004964 <object_getRegisterPayloadBufferLength>
    if(payload_length == 0) return COAP_500_INTERNAL_SERVER_ERROR;
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	f000 80e8 	beq.w	8005d90 <prv_register+0x1e4>
 8005bc0:	4604      	mov	r4, r0
    payload = (uint8_t*) lwm2m_malloc(payload_length);
 8005bc2:	f002 ffc9 	bl	8008b58 <lwm2m_malloc>
    if(!payload) return COAP_500_INTERNAL_SERVER_ERROR;
 8005bc6:	4601      	mov	r1, r0
 8005bc8:	900a      	str	r0, [sp, #40]	; 0x28
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	f000 80e4 	beq.w	8005d98 <prv_register+0x1ec>
    payload_length = object_getRegisterPayload(contextP, payload, payload_length);
 8005bd0:	4622      	mov	r2, r4
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f7fe ff32 	bl	8004a3c <object_getRegisterPayload>
    if(payload_length == 0)
 8005bd8:	4680      	mov	r8, r0
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d043      	beq.n	8005c66 <prv_register+0xba>
    query_length = prv_getRegistrationQueryLength(contextP, server);
 8005bde:	4631      	mov	r1, r6
 8005be0:	4628      	mov	r0, r5
 8005be2:	f7ff fefd 	bl	80059e0 <prv_getRegistrationQueryLength>
    if(query_length == 0)
 8005be6:	4604      	mov	r4, r0
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d041      	beq.n	8005c70 <prv_register+0xc4>
    query = (char*) lwm2m_malloc(query_length);
 8005bec:	f002 ffb4 	bl	8008b58 <lwm2m_malloc>
    if(!query)
 8005bf0:	900b      	str	r0, [sp, #44]	; 0x2c
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d041      	beq.n	8005c7a <prv_register+0xce>
    if(prv_getRegistrationQuery(contextP, server, query, query_length) != query_length)
 8005bf6:	4623      	mov	r3, r4
 8005bf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f7ff ff2d 	bl	8005a5c <prv_getRegistrationQuery>
 8005c02:	42a0      	cmp	r0, r4
 8005c04:	d13e      	bne.n	8005c84 <prv_register+0xd8>
    if (server->sessionH == NULL)
 8005c06:	69f3      	ldr	r3, [r6, #28]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d043      	beq.n	8005c94 <prv_register+0xe8>
    if (NULL == server->sessionH)
 8005c0c:	69f3      	ldr	r3, [r6, #28]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d046      	beq.n	8005ca0 <prv_register+0xf4>
    do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, "\r\n server session done\r\n ");} }while(0);
 8005c12:	4b63      	ldr	r3, [pc, #396]	; (8005da0 <prv_register+0x1f4>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	2100      	movs	r1, #0
 8005c18:	2002      	movs	r0, #2
 8005c1a:	f011 fbf7 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
    transaction = transaction_new(server->sessionH, COAP_POST, NULL, NULL, contextP->nextMID++, 4, NULL);
 8005c1e:	69f0      	ldr	r0, [r6, #28]
 8005c20:	8c2b      	ldrh	r3, [r5, #32]
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	842a      	strh	r2, [r5, #32]
 8005c26:	2200      	movs	r2, #0
 8005c28:	9202      	str	r2, [sp, #8]
 8005c2a:	2104      	movs	r1, #4
 8005c2c:	9101      	str	r1, [sp, #4]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	4613      	mov	r3, r2
 8005c32:	2102      	movs	r1, #2
 8005c34:	f7fd fa3c 	bl	80030b0 <transaction_new>
    if (transaction == NULL)
 8005c38:	4607      	mov	r7, r0
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d038      	beq.n	8005cb0 <prv_register+0x104>
    coap_set_header_uri_path(transaction->message, "/"URI_REGISTRATION_SEGMENT);
 8005c3e:	4959      	ldr	r1, [pc, #356]	; (8005da4 <prv_register+0x1f8>)
 8005c40:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005c42:	f7fd ff94 	bl	8003b6e <coap_set_header_uri_path>
    coap_set_header_uri_query(transaction->message, query);
 8005c46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c4a:	f7fd ffe2 	bl	8003c12 <coap_set_header_uri_query>
    coap_set_header_content_type(transaction->message, LWM2M_CONTENT_LINK);
 8005c4e:	2128      	movs	r1, #40	; 0x28
 8005c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c52:	f7fd ff71 	bl	8003b38 <coap_set_header_content_type>
    if (!transaction_set_payload(transaction, payload, (size_t)payload_length)) {
 8005c56:	4642      	mov	r2, r8
 8005c58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	f7fd fbab 	bl	80033b6 <transaction_set_payload>
 8005c60:	b370      	cbz	r0, 8005cc0 <prv_register+0x114>
   for(int _iter = 0; _iter<transaction->payload_len; _iter += 10){
 8005c62:	2400      	movs	r4, #0
 8005c64:	e060      	b.n	8005d28 <prv_register+0x17c>
        lwm2m_free(payload);
 8005c66:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005c68:	f002 ff7a 	bl	8008b60 <lwm2m_free>
        return COAP_500_INTERNAL_SERVER_ERROR;
 8005c6c:	20a0      	movs	r0, #160	; 0xa0
 8005c6e:	e090      	b.n	8005d92 <prv_register+0x1e6>
        lwm2m_free(payload);
 8005c70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005c72:	f002 ff75 	bl	8008b60 <lwm2m_free>
        return COAP_500_INTERNAL_SERVER_ERROR;
 8005c76:	20a0      	movs	r0, #160	; 0xa0
 8005c78:	e08b      	b.n	8005d92 <prv_register+0x1e6>
        lwm2m_free(payload);
 8005c7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005c7c:	f002 ff70 	bl	8008b60 <lwm2m_free>
        return COAP_500_INTERNAL_SERVER_ERROR;
 8005c80:	20a0      	movs	r0, #160	; 0xa0
 8005c82:	e086      	b.n	8005d92 <prv_register+0x1e6>
        lwm2m_free(payload);
 8005c84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005c86:	f002 ff6b 	bl	8008b60 <lwm2m_free>
        lwm2m_free(query);
 8005c8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005c8c:	f002 ff68 	bl	8008b60 <lwm2m_free>
        return COAP_500_INTERNAL_SERVER_ERROR;
 8005c90:	20a0      	movs	r0, #160	; 0xa0
 8005c92:	e07e      	b.n	8005d92 <prv_register+0x1e6>
       server->sessionH = lwm2m_connect_server(server->secObjInstID, contextP->userData);
 8005c94:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8005c96:	88b0      	ldrh	r0, [r6, #4]
 8005c98:	f002 ffbc 	bl	8008c14 <lwm2m_connect_server>
 8005c9c:	61f0      	str	r0, [r6, #28]
 8005c9e:	e7b5      	b.n	8005c0c <prv_register+0x60>
        lwm2m_free(payload);
 8005ca0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005ca2:	f002 ff5d 	bl	8008b60 <lwm2m_free>
        lwm2m_free(query);
 8005ca6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005ca8:	f002 ff5a 	bl	8008b60 <lwm2m_free>
        return COAP_503_SERVICE_UNAVAILABLE;
 8005cac:	20a3      	movs	r0, #163	; 0xa3
 8005cae:	e070      	b.n	8005d92 <prv_register+0x1e6>
        lwm2m_free(payload);
 8005cb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005cb2:	f002 ff55 	bl	8008b60 <lwm2m_free>
        lwm2m_free(query);
 8005cb6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005cb8:	f002 ff52 	bl	8008b60 <lwm2m_free>
        return COAP_503_SERVICE_UNAVAILABLE;
 8005cbc:	20a3      	movs	r0, #163	; 0xa3
 8005cbe:	e068      	b.n	8005d92 <prv_register+0x1e6>
        lwm2m_free(payload);
 8005cc0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005cc2:	f002 ff4d 	bl	8008b60 <lwm2m_free>
        lwm2m_free(query);
 8005cc6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005cc8:	f002 ff4a 	bl	8008b60 <lwm2m_free>
        transaction_free(transaction);
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f7fd faab 	bl	8003228 <transaction_free>
        return COAP_503_SERVICE_UNAVAILABLE;
 8005cd2:	20a3      	movs	r0, #163	; 0xa3
 8005cd4:	e05d      	b.n	8005d92 <prv_register+0x1e6>
				transaction->payload[_iter],
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	5d1a      	ldrb	r2, [r3, r4]
				transaction->payload[_iter + 1],
 8005cda:	4423      	add	r3, r4
 8005cdc:	7859      	ldrb	r1, [r3, #1]
				transaction->payload[_iter + 2],
 8005cde:	7898      	ldrb	r0, [r3, #2]
				transaction->payload[_iter + 3],
 8005ce0:	f893 c003 	ldrb.w	ip, [r3, #3]
				transaction->payload[_iter + 4],
 8005ce4:	f893 e004 	ldrb.w	lr, [r3, #4]
				transaction->payload[_iter + 5],
 8005ce8:	f893 8005 	ldrb.w	r8, [r3, #5]
				transaction->payload[_iter + 6],
 8005cec:	f893 9006 	ldrb.w	r9, [r3, #6]
				transaction->payload[_iter + 7],
 8005cf0:	f893 a007 	ldrb.w	sl, [r3, #7]
				transaction->payload[_iter + 8],
 8005cf4:	f893 b008 	ldrb.w	fp, [r3, #8]
				transaction->payload[_iter + 9]
 8005cf8:	7a5b      	ldrb	r3, [r3, #9]
	   do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, "\r\n %d %d %d %d %d %d %d %d %d %d \r\n ",
 8005cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfc:	f8cd b020 	str.w	fp, [sp, #32]
 8005d00:	f8cd a01c 	str.w	sl, [sp, #28]
 8005d04:	f8cd 9018 	str.w	r9, [sp, #24]
 8005d08:	f8cd 8014 	str.w	r8, [sp, #20]
 8005d0c:	f8cd e010 	str.w	lr, [sp, #16]
 8005d10:	f8cd c00c 	str.w	ip, [sp, #12]
 8005d14:	9002      	str	r0, [sp, #8]
 8005d16:	9101      	str	r1, [sp, #4]
 8005d18:	9200      	str	r2, [sp, #0]
 8005d1a:	4b23      	ldr	r3, [pc, #140]	; (8005da8 <prv_register+0x1fc>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	2100      	movs	r1, #0
 8005d20:	2002      	movs	r0, #2
 8005d22:	f011 fb73 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
   for(int _iter = 0; _iter<transaction->payload_len; _iter += 10){
 8005d26:	340a      	adds	r4, #10
 8005d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2a:	42a3      	cmp	r3, r4
 8005d2c:	d8d3      	bhi.n	8005cd6 <prv_register+0x12a>
    registration_data_t * dataP = (registration_data_t *) lwm2m_malloc(sizeof(registration_data_t));
 8005d2e:	200c      	movs	r0, #12
 8005d30:	f002 ff12 	bl	8008b58 <lwm2m_malloc>
    if (dataP == NULL){
 8005d34:	b308      	cbz	r0, 8005d7a <prv_register+0x1ce>
    dataP->payload = payload;
 8005d36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d38:	6082      	str	r2, [r0, #8]
    dataP->query = query;
 8005d3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d3c:	6042      	str	r2, [r0, #4]
    dataP->server = server;
 8005d3e:	6006      	str	r6, [r0, #0]
    transaction->callback = prv_handleRegistrationReply;
 8005d40:	4a1a      	ldr	r2, [pc, #104]	; (8005dac <prv_register+0x200>)
 8005d42:	63fa      	str	r2, [r7, #60]	; 0x3c
    transaction->userData = (void *) dataP;
 8005d44:	6438      	str	r0, [r7, #64]	; 0x40
    contextP->transactionList = (lwm2m_transaction_t *)LWM2M_LIST_ADD(contextP->transactionList, transaction);
 8005d46:	4639      	mov	r1, r7
 8005d48:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005d4a:	f7fe fcb1 	bl	80046b0 <lwm2m_list_add>
 8005d4e:	6268      	str	r0, [r5, #36]	; 0x24
    if (transaction_send(contextP, transaction) != 0)
 8005d50:	4639      	mov	r1, r7
 8005d52:	4628      	mov	r0, r5
 8005d54:	f7fd fa90 	bl	8003278 <transaction_send>
 8005d58:	bb00      	cbnz	r0, 8005d9c <prv_register+0x1f0>
    if (0 == server->attempt)
 8005d5a:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
 8005d5e:	b923      	cbnz	r3, 8005d6a <prv_register+0x1be>
        server->sequence++;
 8005d60:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
 8005d64:	3201      	adds	r2, #1
 8005d66:	f886 2033 	strb.w	r2, [r6, #51]	; 0x33
    server->attempt++;
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
    server->status = STATE_REG_PENDING;
 8005d70:	2302      	movs	r3, #2
 8005d72:	f886 3020 	strb.w	r3, [r6, #32]
    return COAP_NO_ERROR;
 8005d76:	2000      	movs	r0, #0
 8005d78:	e00b      	b.n	8005d92 <prv_register+0x1e6>
        lwm2m_free(payload);
 8005d7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d7c:	f002 fef0 	bl	8008b60 <lwm2m_free>
        lwm2m_free(query);
 8005d80:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005d82:	f002 feed 	bl	8008b60 <lwm2m_free>
        transaction_free(transaction);
 8005d86:	4638      	mov	r0, r7
 8005d88:	f7fd fa4e 	bl	8003228 <transaction_free>
        return COAP_503_SERVICE_UNAVAILABLE;
 8005d8c:	20a3      	movs	r0, #163	; 0xa3
 8005d8e:	e000      	b.n	8005d92 <prv_register+0x1e6>
    if(payload_length == 0) return COAP_500_INTERNAL_SERVER_ERROR;
 8005d90:	20a0      	movs	r0, #160	; 0xa0
}
 8005d92:	b00d      	add	sp, #52	; 0x34
 8005d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(!payload) return COAP_500_INTERNAL_SERVER_ERROR;
 8005d98:	20a0      	movs	r0, #160	; 0xa0
 8005d9a:	e7fa      	b.n	8005d92 <prv_register+0x1e6>
        return COAP_503_SERVICE_UNAVAILABLE;
 8005d9c:	20a3      	movs	r0, #163	; 0xa3
 8005d9e:	e7f8      	b.n	8005d92 <prv_register+0x1e6>
 8005da0:	0801b888 	.word	0x0801b888
 8005da4:	0801b8a4 	.word	0x0801b8a4
 8005da8:	0801b8a8 	.word	0x0801b8a8
 8005dac:	08005fe9 	.word	0x08005fe9

08005db0 <registration_start>:

    return result;
}

uint8_t registration_start(lwm2m_context_t * contextP, bool restartFailed)
{
 8005db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db4:	b086      	sub	sp, #24
 8005db6:	4605      	mov	r5, r0
 8005db8:	460e      	mov	r6, r1
#endif

    LOG_ARG("State: %s", STR_STATE(contextP->state));

#ifndef LWM2M_VERSION_1_0
    serverObjP = (lwm2m_object_t*)LWM2M_LIST_FIND(contextP->objectList, LWM2M_SERVER_OBJECT_ID);
 8005dba:	2101      	movs	r1, #1
 8005dbc:	6980      	ldr	r0, [r0, #24]
 8005dbe:	f7fe fc90 	bl	80046e2 <lwm2m_list_find>
    if (!serverObjP)
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d048      	beq.n	8005e58 <registration_start+0xa8>
 8005dc6:	4607      	mov	r7, r0
    {
        return COAP_500_INTERNAL_SERVER_ERROR;
    }
#endif

    targetP = contextP->serverList;
 8005dc8:	696c      	ldr	r4, [r5, #20]
    uint64_t firstOrder = 0;
 8005dca:	f04f 0800 	mov.w	r8, #0
 8005dce:	46c2      	mov	sl, r8
    lwm2m_server_t * firstOrdered = NULL;
 8005dd0:	46c1      	mov	r9, r8
    uint8_t result = COAP_NO_ERROR;
 8005dd2:	4642      	mov	r2, r8
    while (targetP != NULL && result == COAP_NO_ERROR)
 8005dd4:	e005      	b.n	8005de2 <registration_start+0x32>
            {
                if (ordered)
                {
                    if (!firstOrdered || order < firstOrder)
                    {
                        firstOrder = order;
 8005dd6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005dda:	f8dd a014 	ldr.w	sl, [sp, #20]
                        firstOrdered = targetP;
 8005dde:	46a1      	mov	r9, r4
            }
#else
            result = prv_register(contextP, targetP);
#endif
        }
        targetP = targetP->next;
 8005de0:	6824      	ldr	r4, [r4, #0]
    while (targetP != NULL && result == COAP_NO_ERROR)
 8005de2:	b364      	cbz	r4, 8005e3e <registration_start+0x8e>
 8005de4:	bb5a      	cbnz	r2, 8005e3e <registration_start+0x8e>
        if (targetP->status == STATE_DEREGISTERED
 8005de6:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005dea:	b11b      	cbz	r3, 8005df4 <registration_start+0x44>
         || (restartFailed && targetP->status == STATE_REG_FAILED))
 8005dec:	2e00      	cmp	r6, #0
 8005dee:	d0f7      	beq.n	8005de0 <registration_start+0x30>
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d1f5      	bne.n	8005de0 <registration_start+0x30>
            targetP->attempt = 0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
            targetP->sequence = 0;
 8005dfa:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
            result = prv_getRegistrationOrder(contextP, targetP, serverObjP, &ordered, &order);
 8005dfe:	ab04      	add	r3, sp, #16
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	f10d 030f 	add.w	r3, sp, #15
 8005e06:	463a      	mov	r2, r7
 8005e08:	4621      	mov	r1, r4
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f7ff fc10 	bl	8005630 <prv_getRegistrationOrder>
            if (result == COAP_NO_ERROR)
 8005e10:	4602      	mov	r2, r0
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d1e4      	bne.n	8005de0 <registration_start+0x30>
                if (ordered)
 8005e16:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005e1a:	b14b      	cbz	r3, 8005e30 <registration_start+0x80>
                    if (!firstOrdered || order < firstOrder)
 8005e1c:	f1b9 0f00 	cmp.w	r9, #0
 8005e20:	d0d9      	beq.n	8005dd6 <registration_start+0x26>
 8005e22:	9b04      	ldr	r3, [sp, #16]
 8005e24:	4543      	cmp	r3, r8
 8005e26:	9b05      	ldr	r3, [sp, #20]
 8005e28:	eb73 030a 	sbcs.w	r3, r3, sl
 8005e2c:	d2d8      	bcs.n	8005de0 <registration_start+0x30>
 8005e2e:	e7d2      	b.n	8005dd6 <registration_start+0x26>
                    result = prv_startRegistration(contextP, targetP, serverObjP);
 8005e30:	463a      	mov	r2, r7
 8005e32:	4621      	mov	r1, r4
 8005e34:	4628      	mov	r0, r5
 8005e36:	f7ff fc9b 	bl	8005770 <prv_startRegistration>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	e7d0      	b.n	8005de0 <registration_start+0x30>
    }

#ifndef LWM2M_VERSION_1_0
    if (firstOrdered)
 8005e3e:	f1b9 0f00 	cmp.w	r9, #0
 8005e42:	d005      	beq.n	8005e50 <registration_start+0xa0>
    {
        result = prv_startRegistration(contextP, firstOrdered, serverObjP);
 8005e44:	463a      	mov	r2, r7
 8005e46:	4649      	mov	r1, r9
 8005e48:	4628      	mov	r0, r5
 8005e4a:	f7ff fc91 	bl	8005770 <prv_startRegistration>
 8005e4e:	4602      	mov	r2, r0
    }
#endif

    return result;
}
 8005e50:	4610      	mov	r0, r2
 8005e52:	b006      	add	sp, #24
 8005e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return COAP_500_INTERNAL_SERVER_ERROR;
 8005e58:	22a0      	movs	r2, #160	; 0xa0
 8005e5a:	e7f9      	b.n	8005e50 <registration_start+0xa0>

08005e5c <prv_handleRegistrationSequenceFailure>:
{
 8005e5c:	b570      	push	{r4, r5, r6, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	4606      	mov	r6, r0
 8005e62:	460d      	mov	r5, r1
 8005e64:	4614      	mov	r4, r2
    bool ordered = false;
 8005e66:	2300      	movs	r3, #0
 8005e68:	f88d 301f 	strb.w	r3, [sp, #31]
    bool blocking = false;
 8005e6c:	f88d 301e 	strb.w	r3, [sp, #30]
    uint8_t result = prv_getRegistrationOrder(contextP, targetP, serverObjP, &ordered, NULL);
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	f10d 031f 	add.w	r3, sp, #31
 8005e76:	460a      	mov	r2, r1
 8005e78:	4621      	mov	r1, r4
 8005e7a:	f7ff fbd9 	bl	8005630 <prv_getRegistrationOrder>
    if (result == COAP_NO_ERROR && ordered)
 8005e7e:	b910      	cbnz	r0, 8005e86 <prv_handleRegistrationSequenceFailure+0x2a>
 8005e80:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8005e84:	bb0b      	cbnz	r3, 8005eca <prv_handleRegistrationSequenceFailure+0x6e>
    result = prv_getRegistrationSequenceLimit(contextP, targetP, serverObjP, &sequenceLimit, &sequenceDelay);
 8005e86:	ab04      	add	r3, sp, #16
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	f10d 031d 	add.w	r3, sp, #29
 8005e8e:	462a      	mov	r2, r5
 8005e90:	4621      	mov	r1, r4
 8005e92:	4630      	mov	r0, r6
 8005e94:	f7ff fc2c 	bl	80056f0 <prv_getRegistrationSequenceLimit>
    if (result == COAP_NO_ERROR)
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d15c      	bne.n	8005f56 <prv_handleRegistrationSequenceFailure+0xfa>
        if (targetP->sequence >= sequenceLimit)
 8005e9c:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 8005ea0:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d346      	bcc.n	8005f36 <prv_handleRegistrationSequenceFailure+0xda>
            targetP->status = STATE_REG_FAILED;
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	f884 3020 	strb.w	r3, [r4, #32]
            result = prv_getBootstrapOnRegistrationFailure(contextP, targetP, serverObjP, &bootstrap);
 8005eae:	f10d 030f 	add.w	r3, sp, #15
 8005eb2:	462a      	mov	r2, r5
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f7ff fd75 	bl	80059a6 <prv_getBootstrapOnRegistrationFailure>
            if (result != COAP_NO_ERROR || bootstrap)
 8005ebc:	b910      	cbnz	r0, 8005ec4 <prv_handleRegistrationSequenceFailure+0x68>
 8005ebe:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005ec2:	b1c3      	cbz	r3, 8005ef6 <prv_handleRegistrationSequenceFailure+0x9a>
                contextP->state = STATE_BOOTSTRAP_REQUIRED;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	7033      	strb	r3, [r6, #0]
 8005ec8:	e048      	b.n	8005f5c <prv_handleRegistrationSequenceFailure+0x100>
        result = prv_getRegistrationFailureBlocking(contextP, targetP, serverObjP, &blocking);
 8005eca:	f10d 031e 	add.w	r3, sp, #30
 8005ece:	462a      	mov	r2, r5
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	f7ff fd49 	bl	800596a <prv_getRegistrationFailureBlocking>
        if (result == COAP_NO_ERROR && !blocking && targetP->sequence == 1)
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d1d4      	bne.n	8005e86 <prv_handleRegistrationSequenceFailure+0x2a>
 8005edc:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1d0      	bne.n	8005e86 <prv_handleRegistrationSequenceFailure+0x2a>
 8005ee4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d1cc      	bne.n	8005e86 <prv_handleRegistrationSequenceFailure+0x2a>
            registration_start(contextP, false);
 8005eec:	2100      	movs	r1, #0
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f7ff ff5e 	bl	8005db0 <registration_start>
 8005ef4:	e7c7      	b.n	8005e86 <prv_handleRegistrationSequenceFailure+0x2a>
            else if(ordered && blocking)
 8005ef6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8005efa:	b37b      	cbz	r3, 8005f5c <prv_handleRegistrationSequenceFailure+0x100>
 8005efc:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8005f00:	b363      	cbz	r3, 8005f5c <prv_handleRegistrationSequenceFailure+0x100>
                for (targetP = contextP->serverList; targetP; targetP = targetP->next)
 8005f02:	6974      	ldr	r4, [r6, #20]
 8005f04:	e000      	b.n	8005f08 <prv_handleRegistrationSequenceFailure+0xac>
 8005f06:	6824      	ldr	r4, [r4, #0]
 8005f08:	b344      	cbz	r4, 8005f5c <prv_handleRegistrationSequenceFailure+0x100>
                    if (targetP->status == STATE_DEREGISTERED)
 8005f0a:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1f9      	bne.n	8005f06 <prv_handleRegistrationSequenceFailure+0xaa>
                        if (prv_getRegistrationOrder(contextP, targetP, serverObjP, &ordered, NULL) == COAP_NO_ERROR
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	f10d 031f 	add.w	r3, sp, #31
 8005f18:	462a      	mov	r2, r5
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f7ff fb87 	bl	8005630 <prv_getRegistrationOrder>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d1ef      	bne.n	8005f06 <prv_handleRegistrationSequenceFailure+0xaa>
                            && ordered)
 8005f26:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0eb      	beq.n	8005f06 <prv_handleRegistrationSequenceFailure+0xaa>
                            targetP->status = STATE_REG_FAILED;
 8005f2e:	2304      	movs	r3, #4
 8005f30:	f884 3020 	strb.w	r3, [r4, #32]
 8005f34:	e7e7      	b.n	8005f06 <prv_handleRegistrationSequenceFailure+0xaa>
            targetP->registration = lwm2m_gettime() + sequenceDelay;
 8005f36:	f002 fe30 	bl	8008b9a <lwm2m_gettime>
 8005f3a:	9b04      	ldr	r3, [sp, #16]
 8005f3c:	181b      	adds	r3, r3, r0
 8005f3e:	9a05      	ldr	r2, [sp, #20]
 8005f40:	eb42 0201 	adc.w	r2, r2, r1
 8005f44:	6123      	str	r3, [r4, #16]
 8005f46:	6162      	str	r2, [r4, #20]
            targetP->status = STATE_REG_HOLD_OFF;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	f884 3020 	strb.w	r3, [r4, #32]
            targetP->attempt = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 8005f54:	e002      	b.n	8005f5c <prv_handleRegistrationSequenceFailure+0x100>
        targetP->status = STATE_REG_FAILED;
 8005f56:	2304      	movs	r3, #4
 8005f58:	f884 3020 	strb.w	r3, [r4, #32]
}
 8005f5c:	b008      	add	sp, #32
 8005f5e:	bd70      	pop	{r4, r5, r6, pc}

08005f60 <prv_handleRegistrationAttemptFailure>:
{
 8005f60:	b570      	push	{r4, r5, r6, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	4605      	mov	r5, r0
 8005f66:	460c      	mov	r4, r1
    serverObjP = (lwm2m_object_t*)LWM2M_LIST_FIND(contextP->objectList, LWM2M_SERVER_OBJECT_ID);
 8005f68:	2101      	movs	r1, #1
 8005f6a:	6980      	ldr	r0, [r0, #24]
 8005f6c:	f7fe fbb9 	bl	80046e2 <lwm2m_list_find>
    if (serverObjP)
 8005f70:	b3a8      	cbz	r0, 8005fde <prv_handleRegistrationAttemptFailure+0x7e>
 8005f72:	4606      	mov	r6, r0
        result = prv_getRegistrationAttemptLimit(contextP, targetP, serverObjP, &attemptLimit, &attemptDelay);
 8005f74:	ab04      	add	r3, sp, #16
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	f10d 030f 	add.w	r3, sp, #15
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	4621      	mov	r1, r4
 8005f80:	4628      	mov	r0, r5
 8005f82:	f7ff fb77 	bl	8005674 <prv_getRegistrationAttemptLimit>
        if (result == COAP_NO_ERROR)
 8005f86:	bb30      	cbnz	r0, 8005fd6 <prv_handleRegistrationAttemptFailure+0x76>
            if (targetP->attempt >= attemptLimit)
 8005f88:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 8005f8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d305      	bcc.n	8005fa0 <prv_handleRegistrationAttemptFailure+0x40>
                prv_handleRegistrationSequenceFailure(contextP, serverObjP, targetP);
 8005f94:	4622      	mov	r2, r4
 8005f96:	4631      	mov	r1, r6
 8005f98:	4628      	mov	r0, r5
 8005f9a:	f7ff ff5f 	bl	8005e5c <prv_handleRegistrationSequenceFailure>
 8005f9e:	e021      	b.n	8005fe4 <prv_handleRegistrationAttemptFailure+0x84>
                targetP->registration = lwm2m_gettime() + attemptDelay * (1 << (targetP->attempt - 1));
 8005fa0:	f002 fdfb 	bl	8008b9a <lwm2m_gettime>
 8005fa4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	2601      	movs	r6, #1
 8005fac:	fa06 f303 	lsl.w	r3, r6, r3
 8005fb0:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 8005fb4:	9d04      	ldr	r5, [sp, #16]
 8005fb6:	9a05      	ldr	r2, [sp, #20]
 8005fb8:	fb03 f202 	mul.w	r2, r3, r2
 8005fbc:	fb0c 2205 	mla	r2, ip, r5, r2
 8005fc0:	fba5 5303 	umull	r5, r3, r5, r3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	182d      	adds	r5, r5, r0
 8005fc8:	eb43 0301 	adc.w	r3, r3, r1
 8005fcc:	6125      	str	r5, [r4, #16]
 8005fce:	6163      	str	r3, [r4, #20]
                targetP->status = STATE_REG_HOLD_OFF;
 8005fd0:	f884 6020 	strb.w	r6, [r4, #32]
 8005fd4:	e006      	b.n	8005fe4 <prv_handleRegistrationAttemptFailure+0x84>
            targetP->status = STATE_REG_FAILED;
 8005fd6:	2304      	movs	r3, #4
 8005fd8:	f884 3020 	strb.w	r3, [r4, #32]
            LOG_ARG("%d Registration failed", targetP->shortID);
 8005fdc:	e002      	b.n	8005fe4 <prv_handleRegistrationAttemptFailure+0x84>
        targetP->status = STATE_REG_FAILED;
 8005fde:	2304      	movs	r3, #4
 8005fe0:	f884 3020 	strb.w	r3, [r4, #32]
}
 8005fe4:	b006      	add	sp, #24
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}

08005fe8 <prv_handleRegistrationReply>:
{
 8005fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	4607      	mov	r7, r0
 8005ff0:	460c      	mov	r4, r1
    registration_data_t * dataP = (registration_data_t *)(transacP->userData);
 8005ff2:	6c0d      	ldr	r5, [r1, #64]	; 0x40
    if (dataP->server->status == STATE_REG_PENDING)
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d00a      	beq.n	8006014 <prv_handleRegistrationReply+0x2c>
    char * query = dataP->query;
 8005ffe:	686e      	ldr	r6, [r5, #4]
    uint8_t * payload = dataP->payload;
 8006000:	68ad      	ldr	r5, [r5, #8]
    if (transaction_free_userData(contextP, transacP))
 8006002:	4621      	mov	r1, r4
 8006004:	4638      	mov	r0, r7
 8006006:	f7fd f9fd 	bl	8003404 <transaction_free_userData>
 800600a:	2800      	cmp	r0, #0
 800600c:	d166      	bne.n	80060dc <prv_handleRegistrationReply+0xf4>
}
 800600e:	b004      	add	sp, #16
 8006010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006014:	4616      	mov	r6, r2
        time_t tv_sec = lwm2m_gettime();
 8006016:	f002 fdc0 	bl	8008b9a <lwm2m_gettime>
        if (tv_sec >= 0)
 800601a:	2900      	cmp	r1, #0
 800601c:	db02      	blt.n	8006024 <prv_handleRegistrationReply+0x3c>
            dataP->server->registration = tv_sec;
 800601e:	682b      	ldr	r3, [r5, #0]
 8006020:	6118      	str	r0, [r3, #16]
 8006022:	6159      	str	r1, [r3, #20]
        if (packet != NULL && (packet->code == COAP_231_CONTINUE || (packet->code == COAP_413_ENTITY_TOO_LARGE && (!IS_OPTION(packet, COAP_OPTION_BLOCK1) || packet->block1_num == 0))))
 8006024:	b126      	cbz	r6, 8006030 <prv_handleRegistrationReply+0x48>
 8006026:	79b3      	ldrb	r3, [r6, #6]
 8006028:	2b5f      	cmp	r3, #95	; 0x5f
 800602a:	d011      	beq.n	8006050 <prv_handleRegistrationReply+0x68>
 800602c:	2b8d      	cmp	r3, #141	; 0x8d
 800602e:	d008      	beq.n	8006042 <prv_handleRegistrationReply+0x5a>
        if (packet != NULL && packet->code == COAP_201_CREATED)
 8006030:	b116      	cbz	r6, 8006038 <prv_handleRegistrationReply+0x50>
 8006032:	79b3      	ldrb	r3, [r6, #6]
 8006034:	2b41      	cmp	r3, #65	; 0x41
 8006036:	d010      	beq.n	800605a <prv_handleRegistrationReply+0x72>
            prv_handleRegistrationAttemptFailure(contextP, dataP->server);
 8006038:	6829      	ldr	r1, [r5, #0]
 800603a:	4638      	mov	r0, r7
 800603c:	f7ff ff90 	bl	8005f60 <prv_handleRegistrationAttemptFailure>
 8006040:	e7dd      	b.n	8005ffe <prv_handleRegistrationReply+0x16>
        if (packet != NULL && (packet->code == COAP_231_CONTINUE || (packet->code == COAP_413_ENTITY_TOO_LARGE && (!IS_OPTION(packet, COAP_OPTION_BLOCK1) || packet->block1_num == 0))))
 8006042:	7b73      	ldrb	r3, [r6, #13]
 8006044:	f013 0f08 	tst.w	r3, #8
 8006048:	d002      	beq.n	8006050 <prv_handleRegistrationReply+0x68>
 800604a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1ef      	bne.n	8006030 <prv_handleRegistrationReply+0x48>
            transaction_free_userData(contextP, transacP);
 8006050:	4621      	mov	r1, r4
 8006052:	4638      	mov	r0, r7
 8006054:	f7fd f9d6 	bl	8003404 <transaction_free_userData>
            return;
 8006058:	e7d9      	b.n	800600e <prv_handleRegistrationReply+0x26>
            dataP->server->status = STATE_REGISTERED;
 800605a:	682b      	ldr	r3, [r5, #0]
 800605c:	2203      	movs	r2, #3
 800605e:	f883 2020 	strb.w	r2, [r3, #32]
            if (NULL != dataP->server->location)
 8006062:	682b      	ldr	r3, [r5, #0]
 8006064:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006066:	b108      	cbz	r0, 800606c <prv_handleRegistrationReply+0x84>
                lwm2m_free(dataP->server->location);
 8006068:	f002 fd7a 	bl	8008b60 <lwm2m_free>
            dataP->server->location = coap_get_multi_option_as_path_string(packet->location_path);
 800606c:	f8d5 8000 	ldr.w	r8, [r5]
 8006070:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8006072:	f7fd fb15 	bl	80036a0 <coap_get_multi_option_as_path_string>
 8006076:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
                serverObjP = (lwm2m_object_t*)LWM2M_LIST_FIND(contextP->objectList, LWM2M_SERVER_OBJECT_ID);
 800607a:	2101      	movs	r1, #1
 800607c:	69b8      	ldr	r0, [r7, #24]
 800607e:	f7fe fb30 	bl	80046e2 <lwm2m_list_find>
                if (serverObjP)
 8006082:	4606      	mov	r6, r0
 8006084:	2800      	cmp	r0, #0
 8006086:	d0ba      	beq.n	8005ffe <prv_handleRegistrationReply+0x16>
                    result = prv_getRegistrationOrder(contextP, dataP->server, serverObjP, &ordered, NULL);
 8006088:	6829      	ldr	r1, [r5, #0]
 800608a:	2300      	movs	r3, #0
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	f10d 030e 	add.w	r3, sp, #14
 8006092:	4602      	mov	r2, r0
 8006094:	4638      	mov	r0, r7
 8006096:	f7ff facb 	bl	8005630 <prv_getRegistrationOrder>
                    if (result == COAP_NO_ERROR && ordered)
 800609a:	2800      	cmp	r0, #0
 800609c:	d1af      	bne.n	8005ffe <prv_handleRegistrationReply+0x16>
 800609e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0ab      	beq.n	8005ffe <prv_handleRegistrationReply+0x16>
                        if (1 == dataP->server->sequence)
 80060a6:	6829      	ldr	r1, [r5, #0]
 80060a8:	f891 3033 	ldrb.w	r3, [r1, #51]	; 0x33
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d010      	beq.n	80060d2 <prv_handleRegistrationReply+0xea>
                            result = prv_getRegistrationFailureBlocking(contextP, dataP->server, serverObjP, &blocking);
 80060b0:	f10d 030f 	add.w	r3, sp, #15
 80060b4:	4632      	mov	r2, r6
 80060b6:	4638      	mov	r0, r7
 80060b8:	f7ff fc57 	bl	800596a <prv_getRegistrationFailureBlocking>
                            if (result == COAP_NO_ERROR && !blocking)
 80060bc:	2800      	cmp	r0, #0
 80060be:	d19e      	bne.n	8005ffe <prv_handleRegistrationReply+0x16>
 80060c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d19a      	bne.n	8005ffe <prv_handleRegistrationReply+0x16>
                                registration_start(contextP, false);
 80060c8:	2100      	movs	r1, #0
 80060ca:	4638      	mov	r0, r7
 80060cc:	f7ff fe70 	bl	8005db0 <registration_start>
 80060d0:	e795      	b.n	8005ffe <prv_handleRegistrationReply+0x16>
                            registration_start(contextP, false);
 80060d2:	2100      	movs	r1, #0
 80060d4:	4638      	mov	r0, r7
 80060d6:	f7ff fe6b 	bl	8005db0 <registration_start>
 80060da:	e790      	b.n	8005ffe <prv_handleRegistrationReply+0x16>
            lwm2m_free(query);
 80060dc:	4630      	mov	r0, r6
 80060de:	f002 fd3f 	bl	8008b60 <lwm2m_free>
            lwm2m_free(payload);
 80060e2:	4628      	mov	r0, r5
 80060e4:	f002 fd3c 	bl	8008b60 <lwm2m_free>
 80060e8:	e791      	b.n	800600e <prv_handleRegistrationReply+0x26>

080060ea <registration_getStatus>:
    lwm2m_server_t * targetP;
    lwm2m_status_t reg_status;

    LOG_ARG("State: %s", STR_STATE(contextP->state));

    targetP = contextP->serverList;
 80060ea:	6942      	ldr	r2, [r0, #20]
    reg_status = STATE_REG_FAILED;
 80060ec:	2004      	movs	r0, #4

    while (targetP != NULL)
 80060ee:	e005      	b.n	80060fc <registration_getStatus+0x12>
    {
        LOG_ARG("%d status: %s", targetP->shortID, STR_STATUS(targetP->status));
        switch (targetP->status)
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d800      	bhi.n	80060fa <registration_getStatus+0x10>
                }
                break;

            case STATE_REG_HOLD_OFF:
            case STATE_REG_PENDING:
                reg_status = STATE_REG_PENDING;
 80060f8:	2002      	movs	r0, #2
            default:
                break;
        }
        LOG_ARG("reg_status: %s", STR_STATUS(reg_status));

        targetP = targetP->next;
 80060fa:	6812      	ldr	r2, [r2, #0]
    while (targetP != NULL)
 80060fc:	b162      	cbz	r2, 8006118 <registration_getStatus+0x2e>
        switch (targetP->status)
 80060fe:	f892 3020 	ldrb.w	r3, [r2, #32]
 8006102:	2b03      	cmp	r3, #3
 8006104:	d004      	beq.n	8006110 <registration_getStatus+0x26>
 8006106:	d9f3      	bls.n	80060f0 <registration_getStatus+0x6>
 8006108:	3b05      	subs	r3, #5
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b03      	cmp	r3, #3
 800610e:	d8f4      	bhi.n	80060fa <registration_getStatus+0x10>
                if (reg_status == STATE_REG_FAILED)
 8006110:	2804      	cmp	r0, #4
 8006112:	d1f2      	bne.n	80060fa <registration_getStatus+0x10>
                    reg_status = STATE_REGISTERED;
 8006114:	2003      	movs	r0, #3
 8006116:	e7f0      	b.n	80060fa <registration_getStatus+0x10>
    }

    return reg_status;
}
 8006118:	4770      	bx	lr
	...

0800611c <registration_step>:
// for each server update the registration if needed
// for each client check if the registration expired
void registration_step(lwm2m_context_t * contextP,
                       time_t currentTime,
                       time_t * timeoutP)
{
 800611c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	4680      	mov	r8, r0
 8006124:	4617      	mov	r7, r2
 8006126:	469a      	mov	sl, r3
 8006128:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
#ifdef LWM2M_CLIENT_MODE
    lwm2m_server_t * targetP = contextP->serverList;
 800612c:	6944      	ldr	r4, [r0, #20]

    LOG_ARG("State: %s", STR_STATE(contextP->state));

    while (targetP != NULL)
 800612e:	e05c      	b.n	80061ea <registration_step+0xce>
        switch (targetP->status)
        {
#ifndef LWM2M_VERSION_1_0
        case STATE_REG_HOLD_OFF:
        {
            time_t interval = targetP->registration - currentTime;
 8006130:	6923      	ldr	r3, [r4, #16]
 8006132:	6962      	ldr	r2, [r4, #20]
 8006134:	1bdb      	subs	r3, r3, r7
 8006136:	eb62 020a 	sbc.w	r2, r2, sl
            if (0 >= interval)
 800613a:	2b01      	cmp	r3, #1
 800613c:	f172 0100 	sbcs.w	r1, r2, #0
 8006140:	db0b      	blt.n	800615a <registration_step+0x3e>
            {
                prv_register(contextP, targetP);
            }
            else if (interval <= *timeoutP)
 8006142:	f8d9 0000 	ldr.w	r0, [r9]
 8006146:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800614a:	4298      	cmp	r0, r3
 800614c:	4191      	sbcs	r1, r2
 800614e:	db4b      	blt.n	80061e8 <registration_step+0xcc>
            {
                *timeoutP = interval;
 8006150:	f8c9 3000 	str.w	r3, [r9]
 8006154:	f8c9 2004 	str.w	r2, [r9, #4]
 8006158:	e046      	b.n	80061e8 <registration_step+0xcc>
                prv_register(contextP, targetP);
 800615a:	4621      	mov	r1, r4
 800615c:	4640      	mov	r0, r8
 800615e:	f7ff fd25 	bl	8005bac <prv_register>
 8006162:	e041      	b.n	80061e8 <registration_step+0xcc>
        case STATE_REGISTERED:
        {
            time_t nextUpdate;
            time_t interval;

            nextUpdate = targetP->lifetime;
 8006164:	68a5      	ldr	r5, [r4, #8]
 8006166:	68e6      	ldr	r6, [r4, #12]
            if (COAP_MAX_TRANSMIT_WAIT < nextUpdate)
 8006168:	4628      	mov	r0, r5
 800616a:	4631      	mov	r1, r6
 800616c:	f7fa faa2 	bl	80006b4 <__aeabi_l2d>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	e9cd 2300 	strd	r2, r3, [sp]
 8006178:	2200      	movs	r2, #0
 800617a:	4b31      	ldr	r3, [pc, #196]	; (8006240 <registration_step+0x124>)
 800617c:	f7fa fd58 	bl	8000c30 <__aeabi_dcmpgt>
 8006180:	b310      	cbz	r0, 80061c8 <registration_step+0xac>
            {
                nextUpdate -= COAP_MAX_TRANSMIT_WAIT;
 8006182:	2200      	movs	r2, #0
 8006184:	4b2e      	ldr	r3, [pc, #184]	; (8006240 <registration_step+0x124>)
 8006186:	e9dd 0100 	ldrd	r0, r1, [sp]
 800618a:	f7fa f909 	bl	80003a0 <__aeabi_dsub>
 800618e:	f7fa ff79 	bl	8001084 <__aeabi_d2lz>
 8006192:	4605      	mov	r5, r0
 8006194:	460e      	mov	r6, r1
            else
            {
                nextUpdate = nextUpdate >> 1;
            }

            interval = targetP->registration + nextUpdate - currentTime;
 8006196:	6923      	ldr	r3, [r4, #16]
 8006198:	6962      	ldr	r2, [r4, #20]
 800619a:	195b      	adds	r3, r3, r5
 800619c:	eb42 0606 	adc.w	r6, r2, r6
 80061a0:	1bdb      	subs	r3, r3, r7
 80061a2:	eb66 060a 	sbc.w	r6, r6, sl
            if (0 >= interval)
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	f176 0200 	sbcs.w	r2, r6, #0
 80061ac:	db11      	blt.n	80061d2 <registration_step+0xb6>
            {
                LOG_ARG("%d Updating registration", targetP->shortID);
                prv_updateRegistration(contextP, targetP, false);
            }
            else if (interval < *timeoutP)
 80061ae:	f8d9 1000 	ldr.w	r1, [r9]
 80061b2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80061b6:	428b      	cmp	r3, r1
 80061b8:	eb76 0202 	sbcs.w	r2, r6, r2
 80061bc:	da14      	bge.n	80061e8 <registration_step+0xcc>
            {
                *timeoutP = interval;
 80061be:	f8c9 3000 	str.w	r3, [r9]
 80061c2:	f8c9 6004 	str.w	r6, [r9, #4]
 80061c6:	e00f      	b.n	80061e8 <registration_step+0xcc>
                nextUpdate = nextUpdate >> 1;
 80061c8:	086d      	lsrs	r5, r5, #1
 80061ca:	ea45 75c6 	orr.w	r5, r5, r6, lsl #31
 80061ce:	1076      	asrs	r6, r6, #1
 80061d0:	e7e1      	b.n	8006196 <registration_step+0x7a>
                prv_updateRegistration(contextP, targetP, false);
 80061d2:	2200      	movs	r2, #0
 80061d4:	4621      	mov	r1, r4
 80061d6:	4640      	mov	r0, r8
 80061d8:	f7ff faee 	bl	80057b8 <prv_updateRegistration>
 80061dc:	e004      	b.n	80061e8 <registration_step+0xcc>
            }
        }
        break;

        case STATE_REG_UPDATE_NEEDED:
            prv_updateRegistration(contextP, targetP, false);
 80061de:	2200      	movs	r2, #0
 80061e0:	4621      	mov	r1, r4
 80061e2:	4640      	mov	r0, r8
 80061e4:	f7ff fae8 	bl	80057b8 <prv_updateRegistration>
            break;

        default:
            break;
        }
        targetP = targetP->next;
 80061e8:	6824      	ldr	r4, [r4, #0]
    while (targetP != NULL)
 80061ea:	b32c      	cbz	r4, 8006238 <registration_step+0x11c>
        switch (targetP->status)
 80061ec:	f894 3020 	ldrb.w	r3, [r4, #32]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	2b06      	cmp	r3, #6
 80061f4:	d8f8      	bhi.n	80061e8 <registration_step+0xcc>
 80061f6:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <registration_step+0xe0>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	08006131 	.word	0x08006131
 8006200:	080061e9 	.word	0x080061e9
 8006204:	08006165 	.word	0x08006165
 8006208:	08006225 	.word	0x08006225
 800620c:	080061e9 	.word	0x080061e9
 8006210:	080061df 	.word	0x080061df
 8006214:	08006219 	.word	0x08006219
            prv_updateRegistration(contextP, targetP, true);
 8006218:	2201      	movs	r2, #1
 800621a:	4621      	mov	r1, r4
 800621c:	4640      	mov	r0, r8
 800621e:	f7ff facb 	bl	80057b8 <prv_updateRegistration>
            break;
 8006222:	e7e1      	b.n	80061e8 <registration_step+0xcc>
            if (targetP->sessionH != NULL)
 8006224:	69e0      	ldr	r0, [r4, #28]
 8006226:	2800      	cmp	r0, #0
 8006228:	d0de      	beq.n	80061e8 <registration_step+0xcc>
                lwm2m_close_connection(targetP->sessionH, contextP->userData);
 800622a:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 800622e:	f002 fcb9 	bl	8008ba4 <lwm2m_close_connection>
                targetP->sessionH = NULL;
 8006232:	2300      	movs	r3, #0
 8006234:	61e3      	str	r3, [r4, #28]
 8006236:	e7d7      	b.n	80061e8 <registration_step+0xcc>
        }
        clientP = nextP;
    }
#endif

}
 8006238:	b002      	add	sp, #8
 800623a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623e:	bf00      	nop
 8006240:	40574000 	.word	0x40574000

08006244 <uri_toString>:

int uri_toString(const lwm2m_uri_t * uriP,
                 uint8_t * buffer,
                 size_t bufferLen,
                 uri_depth_t * depthP)
{
 8006244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006248:	460c      	mov	r4, r1
 800624a:	4615      	mov	r5, r2
 800624c:	461e      	mov	r6, r3
    uri_depth_t depth = URI_DEPTH_NONE;

    LOG_ARG("bufferLen: %u", bufferLen);
    LOG_URI(uriP);

    if (uriP && LWM2M_URI_IS_SET_OBJECT(uriP))
 800624e:	4607      	mov	r7, r0
 8006250:	2800      	cmp	r0, #0
 8006252:	d058      	beq.n	8006306 <uri_toString+0xc2>
 8006254:	8802      	ldrh	r2, [r0, #0]
 8006256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800625a:	429a      	cmp	r2, r3
 800625c:	d053      	beq.n	8006306 <uri_toString+0xc2>
    {
        int res;
        depth = URI_DEPTH_OBJECT;
        if (head >= bufferLen - 1) return -1;
 800625e:	f105 38ff 	add.w	r8, r5, #4294967295
 8006262:	2d01      	cmp	r5, #1
 8006264:	d063      	beq.n	800632e <uri_toString+0xea>
        buffer[head++] = '/';
 8006266:	460a      	mov	r2, r1
 8006268:	232f      	movs	r3, #47	; 0x2f
 800626a:	f802 3b01 	strb.w	r3, [r2], #1
        res = utils_intToText(uriP->objectId, buffer + head, bufferLen - head);
 800626e:	4643      	mov	r3, r8
 8006270:	8800      	ldrh	r0, [r0, #0]
 8006272:	2100      	movs	r1, #0
 8006274:	f000 f998 	bl	80065a8 <utils_intToText>
        if (res <= 0) return -1;
 8006278:	1e03      	subs	r3, r0, #0
 800627a:	dd5b      	ble.n	8006334 <uri_toString+0xf0>
        head += res;
 800627c:	1c58      	adds	r0, r3, #1

        if (LWM2M_URI_IS_SET_INSTANCE(uriP))
 800627e:	8879      	ldrh	r1, [r7, #2]
 8006280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006284:	4291      	cmp	r1, r2
 8006286:	d049      	beq.n	800631c <uri_toString+0xd8>
        {
            depth = URI_DEPTH_OBJECT_INSTANCE;
            if (head >= bufferLen - 1) return -1;
 8006288:	4580      	cmp	r8, r0
 800628a:	d956      	bls.n	800633a <uri_toString+0xf6>
            buffer[head++] = '/';
 800628c:	f103 0902 	add.w	r9, r3, #2
 8006290:	232f      	movs	r3, #47	; 0x2f
 8006292:	5423      	strb	r3, [r4, r0]
            res = utils_intToText(uriP->instanceId,
 8006294:	eba5 0309 	sub.w	r3, r5, r9
 8006298:	eb04 0209 	add.w	r2, r4, r9
 800629c:	8878      	ldrh	r0, [r7, #2]
 800629e:	2100      	movs	r1, #0
 80062a0:	f000 f982 	bl	80065a8 <utils_intToText>
                                  buffer + head,
                                  bufferLen - head);
            if (res <= 0) return -1;
 80062a4:	2800      	cmp	r0, #0
 80062a6:	dd4b      	ble.n	8006340 <uri_toString+0xfc>
            head += res;
 80062a8:	4448      	add	r0, r9
            if (LWM2M_URI_IS_SET_RESOURCE(uriP))
 80062aa:	88ba      	ldrh	r2, [r7, #4]
 80062ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d035      	beq.n	8006320 <uri_toString+0xdc>
            {
                depth = URI_DEPTH_RESOURCE;
                if (head >= bufferLen - 1) return -1;
 80062b4:	4580      	cmp	r8, r0
 80062b6:	d946      	bls.n	8006346 <uri_toString+0x102>
                buffer[head++] = '/';
 80062b8:	f100 0901 	add.w	r9, r0, #1
 80062bc:	232f      	movs	r3, #47	; 0x2f
 80062be:	5423      	strb	r3, [r4, r0]
                res = utils_intToText(uriP->resourceId,
 80062c0:	eba5 0309 	sub.w	r3, r5, r9
 80062c4:	eb04 0209 	add.w	r2, r4, r9
 80062c8:	88b8      	ldrh	r0, [r7, #4]
 80062ca:	2100      	movs	r1, #0
 80062cc:	f000 f96c 	bl	80065a8 <utils_intToText>
                                      buffer + head,
                                      bufferLen - head);
                if (res <= 0) return -1;
 80062d0:	2800      	cmp	r0, #0
 80062d2:	dd3b      	ble.n	800634c <uri_toString+0x108>
                head += res;
 80062d4:	4448      	add	r0, r9
#ifndef LWM2M_VERSION_1_0
                if (LWM2M_URI_IS_SET_RESOURCE_INSTANCE(uriP))
 80062d6:	88fa      	ldrh	r2, [r7, #6]
 80062d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062dc:	429a      	cmp	r2, r3
 80062de:	d021      	beq.n	8006324 <uri_toString+0xe0>
                {
                    depth = URI_DEPTH_RESOURCE_INSTANCE;
                    if (head >= bufferLen - 1) return -1;
 80062e0:	4580      	cmp	r8, r0
 80062e2:	d936      	bls.n	8006352 <uri_toString+0x10e>
                    buffer[head++] = '/';
 80062e4:	f100 0801 	add.w	r8, r0, #1
 80062e8:	232f      	movs	r3, #47	; 0x2f
 80062ea:	5423      	strb	r3, [r4, r0]
                    res = utils_intToText(uriP->resourceInstanceId,
 80062ec:	eba5 0308 	sub.w	r3, r5, r8
 80062f0:	eb04 0208 	add.w	r2, r4, r8
 80062f4:	88f8      	ldrh	r0, [r7, #6]
 80062f6:	2100      	movs	r1, #0
 80062f8:	f000 f956 	bl	80065a8 <utils_intToText>
                                          buffer + head,
                                          bufferLen - head);
                    if (res <= 0) return -1;
 80062fc:	2800      	cmp	r0, #0
 80062fe:	dd2b      	ble.n	8006358 <uri_toString+0x114>
                    head += res;
 8006300:	4440      	add	r0, r8
                    depth = URI_DEPTH_RESOURCE_INSTANCE;
 8006302:	2304      	movs	r3, #4
 8006304:	e006      	b.n	8006314 <uri_toString+0xd0>
                }
#endif
            }
        }
    }
    else if(uriP)
 8006306:	b17f      	cbz	r7, 8006328 <uri_toString+0xe4>
    {
        if (head >= bufferLen - 1) return -1;
 8006308:	2d01      	cmp	r5, #1
 800630a:	d028      	beq.n	800635e <uri_toString+0x11a>
        buffer[head++] = '/';
 800630c:	232f      	movs	r3, #47	; 0x2f
 800630e:	7023      	strb	r3, [r4, #0]
    uri_depth_t depth = URI_DEPTH_NONE;
 8006310:	2300      	movs	r3, #0
        buffer[head++] = '/';
 8006312:	2001      	movs	r0, #1
    }

    if (depthP) *depthP = depth;
 8006314:	b106      	cbz	r6, 8006318 <uri_toString+0xd4>
 8006316:	7033      	strb	r3, [r6, #0]

    LOG_ARG("length: %u, buffer: \"%.*s\"", head, head, buffer);

    return head;
}
 8006318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        depth = URI_DEPTH_OBJECT;
 800631c:	2301      	movs	r3, #1
 800631e:	e7f9      	b.n	8006314 <uri_toString+0xd0>
            depth = URI_DEPTH_OBJECT_INSTANCE;
 8006320:	2302      	movs	r3, #2
 8006322:	e7f7      	b.n	8006314 <uri_toString+0xd0>
                depth = URI_DEPTH_RESOURCE;
 8006324:	2303      	movs	r3, #3
 8006326:	e7f5      	b.n	8006314 <uri_toString+0xd0>
    uri_depth_t depth = URI_DEPTH_NONE;
 8006328:	2300      	movs	r3, #0
    size_t head = 0;
 800632a:	4618      	mov	r0, r3
 800632c:	e7f2      	b.n	8006314 <uri_toString+0xd0>
        if (head >= bufferLen - 1) return -1;
 800632e:	f04f 30ff 	mov.w	r0, #4294967295
 8006332:	e7f1      	b.n	8006318 <uri_toString+0xd4>
        if (res <= 0) return -1;
 8006334:	f04f 30ff 	mov.w	r0, #4294967295
 8006338:	e7ee      	b.n	8006318 <uri_toString+0xd4>
            if (head >= bufferLen - 1) return -1;
 800633a:	f04f 30ff 	mov.w	r0, #4294967295
 800633e:	e7eb      	b.n	8006318 <uri_toString+0xd4>
            if (res <= 0) return -1;
 8006340:	f04f 30ff 	mov.w	r0, #4294967295
 8006344:	e7e8      	b.n	8006318 <uri_toString+0xd4>
                if (head >= bufferLen - 1) return -1;
 8006346:	f04f 30ff 	mov.w	r0, #4294967295
 800634a:	e7e5      	b.n	8006318 <uri_toString+0xd4>
                if (res <= 0) return -1;
 800634c:	f04f 30ff 	mov.w	r0, #4294967295
 8006350:	e7e2      	b.n	8006318 <uri_toString+0xd4>
                    if (head >= bufferLen - 1) return -1;
 8006352:	f04f 30ff 	mov.w	r0, #4294967295
 8006356:	e7df      	b.n	8006318 <uri_toString+0xd4>
                    if (res <= 0) return -1;
 8006358:	f04f 30ff 	mov.w	r0, #4294967295
 800635c:	e7dc      	b.n	8006318 <uri_toString+0xd4>
        if (head >= bufferLen - 1) return -1;
 800635e:	f04f 30ff 	mov.w	r0, #4294967295
 8006362:	e7d9      	b.n	8006318 <uri_toString+0xd4>

08006364 <prv_encodeBlock>:
};

static void prv_encodeBlock(const uint8_t input[3],
                            uint8_t output[4])
{
    output[0] = b64Alphabet[input[0] >> 2];
 8006364:	7803      	ldrb	r3, [r0, #0]
 8006366:	089b      	lsrs	r3, r3, #2
 8006368:	4a0e      	ldr	r2, [pc, #56]	; (80063a4 <prv_encodeBlock+0x40>)
 800636a:	5cd3      	ldrb	r3, [r2, r3]
 800636c:	700b      	strb	r3, [r1, #0]
    output[1] = b64Alphabet[((input[0] & 0x03) << 4) | (input[1] >> 4)];
 800636e:	7803      	ldrb	r3, [r0, #0]
 8006370:	011b      	lsls	r3, r3, #4
 8006372:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006376:	f890 c001 	ldrb.w	ip, [r0, #1]
 800637a:	ea43 131c 	orr.w	r3, r3, ip, lsr #4
 800637e:	5cd3      	ldrb	r3, [r2, r3]
 8006380:	704b      	strb	r3, [r1, #1]
    output[2] = b64Alphabet[((input[1] & 0x0F) << 2) | (input[2] >> 6)];
 8006382:	7843      	ldrb	r3, [r0, #1]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800638a:	f890 c002 	ldrb.w	ip, [r0, #2]
 800638e:	ea43 139c 	orr.w	r3, r3, ip, lsr #6
 8006392:	5cd3      	ldrb	r3, [r2, r3]
 8006394:	708b      	strb	r3, [r1, #2]
    output[3] = b64Alphabet[input[2] & 0x3F];
 8006396:	7883      	ldrb	r3, [r0, #2]
 8006398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800639c:	5cd3      	ldrb	r3, [r2, r3]
 800639e:	70cb      	strb	r3, [r1, #3]
}
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	0801b8e8 	.word	0x0801b8e8

080063a8 <utils_textToInt>:
{
 80063a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (0 == length) return 0;
 80063aa:	460d      	mov	r5, r1
 80063ac:	2900      	cmp	r1, #0
 80063ae:	d04c      	beq.n	800644a <utils_textToInt+0xa2>
    if (buffer[0] == '-')
 80063b0:	7803      	ldrb	r3, [r0, #0]
 80063b2:	2b2d      	cmp	r3, #45	; 0x2d
 80063b4:	d028      	beq.n	8006408 <utils_textToInt+0x60>
    int i = 0;
 80063b6:	f04f 0e00 	mov.w	lr, #0
    int sign = 1;
 80063ba:	2601      	movs	r6, #1
 80063bc:	2400      	movs	r4, #0
 80063be:	4627      	mov	r7, r4
 80063c0:	e010      	b.n	80063e4 <utils_textToInt+0x3c>
            result *= 10;
 80063c2:	00b9      	lsls	r1, r7, #2
 80063c4:	ea41 7194 	orr.w	r1, r1, r4, lsr #30
 80063c8:	00a3      	lsls	r3, r4, #2
 80063ca:	191b      	adds	r3, r3, r4
 80063cc:	eb47 0101 	adc.w	r1, r7, r1
 80063d0:	18db      	adds	r3, r3, r3
 80063d2:	4149      	adcs	r1, r1
            result += buffer[i] - '0';
 80063d4:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80063d8:	eb1c 0403 	adds.w	r4, ip, r3
 80063dc:	eb41 77ec 	adc.w	r7, r1, ip, asr #31
        i++;
 80063e0:	f10e 0e01 	add.w	lr, lr, #1
    while (i < length)
 80063e4:	45ae      	cmp	lr, r5
 80063e6:	da14      	bge.n	8006412 <utils_textToInt+0x6a>
        if ('0' <= buffer[i] && buffer[i] <= '9')
 80063e8:	f810 c00e 	ldrb.w	ip, [r0, lr]
 80063ec:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b09      	cmp	r3, #9
 80063f4:	d82b      	bhi.n	800644e <utils_textToInt+0xa6>
            if (result > (UINT64_MAX / 10)) return 0;
 80063f6:	f04f 3399 	mov.w	r3, #2576980377	; 0x99999999
 80063fa:	42a3      	cmp	r3, r4
 80063fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006400:	41bb      	sbcs	r3, r7
 8006402:	d2de      	bcs.n	80063c2 <utils_textToInt+0x1a>
 8006404:	2000      	movs	r0, #0
 8006406:	e021      	b.n	800644c <utils_textToInt+0xa4>
        i = 1;
 8006408:	f04f 0e01 	mov.w	lr, #1
        sign = -1;
 800640c:	f04f 36ff 	mov.w	r6, #4294967295
 8006410:	e7d4      	b.n	80063bc <utils_textToInt+0x14>
    if (result > INT64_MAX + (uint64_t)(sign == -1 ? 1 : 0)) return 0;
 8006412:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006416:	d00d      	beq.n	8006434 <utils_textToInt+0x8c>
 8006418:	f04f 31ff 	mov.w	r1, #4294967295
 800641c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006420:	42a1      	cmp	r1, r4
 8006422:	41bb      	sbcs	r3, r7
 8006424:	d315      	bcc.n	8006452 <utils_textToInt+0xaa>
    if (sign == -1)
 8006426:	f1b6 3fff 	cmp.w	r6, #4294967295
 800642a:	d007      	beq.n	800643c <utils_textToInt+0x94>
        *dataP = result;
 800642c:	6014      	str	r4, [r2, #0]
 800642e:	6057      	str	r7, [r2, #4]
    return 1;
 8006430:	2001      	movs	r0, #1
 8006432:	e00b      	b.n	800644c <utils_textToInt+0xa4>
    if (result > INT64_MAX + (uint64_t)(sign == -1 ? 1 : 0)) return 0;
 8006434:	2100      	movs	r1, #0
 8006436:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800643a:	e7f1      	b.n	8006420 <utils_textToInt+0x78>
        *dataP = 0 - result;
 800643c:	4264      	negs	r4, r4
 800643e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8006442:	6014      	str	r4, [r2, #0]
 8006444:	6057      	str	r7, [r2, #4]
    return 1;
 8006446:	2001      	movs	r0, #1
 8006448:	e000      	b.n	800644c <utils_textToInt+0xa4>
    if (0 == length) return 0;
 800644a:	4608      	mov	r0, r1
}
 800644c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return 0;
 800644e:	2000      	movs	r0, #0
 8006450:	e7fc      	b.n	800644c <utils_textToInt+0xa4>
    if (result > INT64_MAX + (uint64_t)(sign == -1 ? 1 : 0)) return 0;
 8006452:	2000      	movs	r0, #0
 8006454:	e7fa      	b.n	800644c <utils_textToInt+0xa4>

08006456 <utils_textToUInt>:
{
 8006456:	b570      	push	{r4, r5, r6, lr}
    if (0 == length) return 0;
 8006458:	460d      	mov	r5, r1
 800645a:	b359      	cbz	r1, 80064b4 <utils_textToUInt+0x5e>
    int i = 0;
 800645c:	f04f 0e00 	mov.w	lr, #0
    uint64_t result = 0;
 8006460:	4674      	mov	r4, lr
 8006462:	4671      	mov	r1, lr
 8006464:	e010      	b.n	8006488 <utils_textToUInt+0x32>
            result *= 10;
 8006466:	008e      	lsls	r6, r1, #2
 8006468:	ea46 7694 	orr.w	r6, r6, r4, lsr #30
 800646c:	00a3      	lsls	r3, r4, #2
 800646e:	191b      	adds	r3, r3, r4
 8006470:	eb41 0106 	adc.w	r1, r1, r6
 8006474:	18db      	adds	r3, r3, r3
 8006476:	4149      	adcs	r1, r1
            result += buffer[i] - '0';
 8006478:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800647c:	eb1c 0403 	adds.w	r4, ip, r3
 8006480:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
        i++;
 8006484:	f10e 0e01 	add.w	lr, lr, #1
    while (i < length)
 8006488:	45ae      	cmp	lr, r5
 800648a:	da0f      	bge.n	80064ac <utils_textToUInt+0x56>
        if ('0' <= buffer[i] && buffer[i] <= '9')
 800648c:	f810 c00e 	ldrb.w	ip, [r0, lr]
 8006490:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b09      	cmp	r3, #9
 8006498:	d80e      	bhi.n	80064b8 <utils_textToUInt+0x62>
            if (result > (UINT64_MAX / 10)) return 0;
 800649a:	f04f 3399 	mov.w	r3, #2576980377	; 0x99999999
 800649e:	42a3      	cmp	r3, r4
 80064a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80064a4:	418b      	sbcs	r3, r1
 80064a6:	d2de      	bcs.n	8006466 <utils_textToUInt+0x10>
 80064a8:	2000      	movs	r0, #0
 80064aa:	e004      	b.n	80064b6 <utils_textToUInt+0x60>
    *dataP = result;
 80064ac:	6014      	str	r4, [r2, #0]
 80064ae:	6051      	str	r1, [r2, #4]
    return 1;
 80064b0:	2001      	movs	r0, #1
 80064b2:	e000      	b.n	80064b6 <utils_textToUInt+0x60>
    if (0 == length) return 0;
 80064b4:	4608      	mov	r0, r1
}
 80064b6:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
 80064b8:	2000      	movs	r0, #0
 80064ba:	e7fc      	b.n	80064b6 <utils_textToUInt+0x60>

080064bc <utils_textToFloat>:
{
 80064bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c0:	b082      	sub	sp, #8
    if (length == 0) {
 80064c2:	460c      	mov	r4, r1
 80064c4:	b919      	cbnz	r1, 80064ce <utils_textToFloat+0x12>
}
 80064c6:	4620      	mov	r0, r4
 80064c8:	b002      	add	sp, #8
 80064ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064ce:	4680      	mov	r8, r0
 80064d0:	4617      	mov	r7, r2
 80064d2:	461d      	mov	r5, r3
    char *const buffer_c_str = lwm2m_malloc(length + 1);
 80064d4:	1c48      	adds	r0, r1, #1
 80064d6:	f002 fb3f 	bl	8008b58 <lwm2m_malloc>
    if (!buffer_c_str) {
 80064da:	4606      	mov	r6, r0
 80064dc:	b320      	cbz	r0, 8006528 <utils_textToFloat+0x6c>
    memcpy(buffer_c_str, buffer, length);
 80064de:	4622      	mov	r2, r4
 80064e0:	4641      	mov	r1, r8
 80064e2:	f011 fe45 	bl	8018170 <memcpy>
    buffer_c_str[length] = '\0';
 80064e6:	2300      	movs	r3, #0
 80064e8:	5533      	strb	r3, [r6, r4]
    if (!allowExponential && (strchr(buffer_c_str, 'e') != NULL || strchr(buffer_c_str, 'E') != NULL)) {
 80064ea:	b96d      	cbnz	r5, 8006508 <utils_textToFloat+0x4c>
 80064ec:	2165      	movs	r1, #101	; 0x65
 80064ee:	4630      	mov	r0, r6
 80064f0:	f012 fafc 	bl	8018aec <strchr>
 80064f4:	b108      	cbz	r0, 80064fa <utils_textToFloat+0x3e>
    int ret = 0;
 80064f6:	2400      	movs	r4, #0
 80064f8:	e010      	b.n	800651c <utils_textToFloat+0x60>
    if (!allowExponential && (strchr(buffer_c_str, 'e') != NULL || strchr(buffer_c_str, 'E') != NULL)) {
 80064fa:	2145      	movs	r1, #69	; 0x45
 80064fc:	4630      	mov	r0, r6
 80064fe:	f012 faf5 	bl	8018aec <strchr>
 8006502:	b108      	cbz	r0, 8006508 <utils_textToFloat+0x4c>
    int ret = 0;
 8006504:	2400      	movs	r4, #0
 8006506:	e009      	b.n	800651c <utils_textToFloat+0x60>
    *dataP = strtod(buffer_c_str, &tailptr);
 8006508:	a901      	add	r1, sp, #4
 800650a:	4630      	mov	r0, r6
 800650c:	f013 f948 	bl	80197a0 <strtod>
 8006510:	e9c7 0100 	strd	r0, r1, [r7]
    if (tailptr == buffer_c_str) {
 8006514:	9b01      	ldr	r3, [sp, #4]
 8006516:	42b3      	cmp	r3, r6
 8006518:	d004      	beq.n	8006524 <utils_textToFloat+0x68>
    ret = 1;
 800651a:	2401      	movs	r4, #1
    lwm2m_free(buffer_c_str);
 800651c:	4630      	mov	r0, r6
 800651e:	f002 fb1f 	bl	8008b60 <lwm2m_free>
    return ret;
 8006522:	e7d0      	b.n	80064c6 <utils_textToFloat+0xa>
    int ret = 0;
 8006524:	2400      	movs	r4, #0
 8006526:	e7f9      	b.n	800651c <utils_textToFloat+0x60>
        return 0;
 8006528:	2400      	movs	r4, #0
 800652a:	e7cc      	b.n	80064c6 <utils_textToFloat+0xa>

0800652c <utils_uintToText>:
{
 800652c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006530:	b083      	sub	sp, #12
    if (length == 0) return 0;
 8006532:	469b      	mov	fp, r3
 8006534:	b38b      	cbz	r3, 800659a <utils_uintToText+0x6e>
 8006536:	4604      	mov	r4, r0
 8006538:	460d      	mov	r5, r1
 800653a:	4617      	mov	r7, r2
    index = length - 1;
 800653c:	1e5e      	subs	r6, r3, #1
        string[index] = '0' + data%10;
 800653e:	220a      	movs	r2, #10
 8006540:	2300      	movs	r3, #0
 8006542:	4620      	mov	r0, r4
 8006544:	4629      	mov	r1, r5
 8006546:	f7fa fd85 	bl	8001054 <__aeabi_uldivmod>
 800654a:	9601      	str	r6, [sp, #4]
 800654c:	eb07 0a06 	add.w	sl, r7, r6
 8006550:	3230      	adds	r2, #48	; 0x30
 8006552:	55ba      	strb	r2, [r7, r6]
        data /= 10;
 8006554:	46a1      	mov	r9, r4
 8006556:	46a8      	mov	r8, r5
 8006558:	220a      	movs	r2, #10
 800655a:	2300      	movs	r3, #0
 800655c:	4620      	mov	r0, r4
 800655e:	4629      	mov	r1, r5
 8006560:	f7fa fd78 	bl	8001054 <__aeabi_uldivmod>
 8006564:	4604      	mov	r4, r0
 8006566:	460d      	mov	r5, r1
    } while (index >= 0 && data > 0);
 8006568:	3e01      	subs	r6, #1
 800656a:	d404      	bmi.n	8006576 <utils_uintToText+0x4a>
 800656c:	f1b9 0f0a 	cmp.w	r9, #10
 8006570:	f178 0300 	sbcs.w	r3, r8, #0
 8006574:	d2e3      	bcs.n	800653e <utils_uintToText+0x12>
    if (data > 0) return 0;
 8006576:	f1b9 0f0a 	cmp.w	r9, #10
 800657a:	f178 0300 	sbcs.w	r3, r8, #0
 800657e:	d211      	bcs.n	80065a4 <utils_uintToText+0x78>
    result = length - index;
 8006580:	9b01      	ldr	r3, [sp, #4]
 8006582:	ebab 0403 	sub.w	r4, fp, r3
    if (result < length)
 8006586:	45a3      	cmp	fp, r4
 8006588:	d908      	bls.n	800659c <utils_uintToText+0x70>
        memmove(string, string + index, result);
 800658a:	4622      	mov	r2, r4
 800658c:	4651      	mov	r1, sl
 800658e:	4638      	mov	r0, r7
 8006590:	f011 fdfc 	bl	801818c <memmove>
        string[result] = '\0';
 8006594:	2300      	movs	r3, #0
 8006596:	553b      	strb	r3, [r7, r4]
 8006598:	e000      	b.n	800659c <utils_uintToText+0x70>
    if (length == 0) return 0;
 800659a:	461c      	mov	r4, r3
}
 800659c:	4620      	mov	r0, r4
 800659e:	b003      	add	sp, #12
 80065a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (data > 0) return 0;
 80065a4:	2400      	movs	r4, #0
 80065a6:	e7f9      	b.n	800659c <utils_uintToText+0x70>

080065a8 <utils_intToText>:
{
 80065a8:	b510      	push	{r4, lr}
 80065aa:	4694      	mov	ip, r2
    if (data < 0)
 80065ac:	2900      	cmp	r1, #0
 80065ae:	da2e      	bge.n	800660e <utils_intToText+0x66>
        if (length == 0) return 0;
 80065b0:	b383      	cbz	r3, 8006614 <utils_intToText+0x6c>
        string[0] = '-';
 80065b2:	222d      	movs	r2, #45	; 0x2d
 80065b4:	f88c 2000 	strb.w	r2, [ip]
        if (data == INT64_MIN) {
 80065b8:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80065bc:	bf08      	it	eq
 80065be:	2800      	cmpeq	r0, #0
 80065c0:	d115      	bne.n	80065ee <utils_intToText+0x46>
            if (int64_min_strlen >= length) {
 80065c2:	2b14      	cmp	r3, #20
 80065c4:	d801      	bhi.n	80065ca <utils_intToText+0x22>
                return 0;
 80065c6:	2000      	movs	r0, #0
 80065c8:	e023      	b.n	8006612 <utils_intToText+0x6a>
            memcpy(string, "-9223372036854775808", int64_min_strlen);
 80065ca:	4c13      	ldr	r4, [pc, #76]	; (8006618 <utils_intToText+0x70>)
 80065cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065ce:	f8cc 0000 	str.w	r0, [ip]
 80065d2:	f8cc 1004 	str.w	r1, [ip, #4]
 80065d6:	f8cc 2008 	str.w	r2, [ip, #8]
 80065da:	f8cc 300c 	str.w	r3, [ip, #12]
 80065de:	6820      	ldr	r0, [r4, #0]
 80065e0:	f8cc 0010 	str.w	r0, [ip, #16]
            string[int64_min_strlen] = '\0';
 80065e4:	2300      	movs	r3, #0
 80065e6:	f88c 3014 	strb.w	r3, [ip, #20]
            return int64_min_strlen;
 80065ea:	2014      	movs	r0, #20
 80065ec:	e011      	b.n	8006612 <utils_intToText+0x6a>
        result = utils_uintToText(llabs(data), string + 1, length - 1);
 80065ee:	468e      	mov	lr, r1
 80065f0:	2900      	cmp	r1, #0
 80065f2:	db08      	blt.n	8006606 <utils_intToText+0x5e>
 80065f4:	3b01      	subs	r3, #1
 80065f6:	f10c 0201 	add.w	r2, ip, #1
 80065fa:	4671      	mov	r1, lr
 80065fc:	f7ff ff96 	bl	800652c <utils_uintToText>
        if(result != 0)
 8006600:	b138      	cbz	r0, 8006612 <utils_intToText+0x6a>
            result += 1;
 8006602:	3001      	adds	r0, #1
 8006604:	e005      	b.n	8006612 <utils_intToText+0x6a>
        result = utils_uintToText(llabs(data), string + 1, length - 1);
 8006606:	4240      	negs	r0, r0
 8006608:	eb61 0e41 	sbc.w	lr, r1, r1, lsl #1
 800660c:	e7f2      	b.n	80065f4 <utils_intToText+0x4c>
        result = utils_uintToText((uint64_t)data, string, length);
 800660e:	f7ff ff8d 	bl	800652c <utils_uintToText>
}
 8006612:	bd10      	pop	{r4, pc}
        if (length == 0) return 0;
 8006614:	4618      	mov	r0, r3
 8006616:	e7fc      	b.n	8006612 <utils_intToText+0x6a>
 8006618:	0801b8d0 	.word	0x0801b8d0
 800661c:	00000000 	.word	0x00000000

08006620 <utils_floatToText>:
{
 8006620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	b08d      	sub	sp, #52	; 0x34
 8006626:	4617      	mov	r7, r2
 8006628:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800662c:	9204      	str	r2, [sp, #16]
    if (!length || !string) return 0;
 800662e:	4699      	mov	r9, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 8339 	beq.w	8006ca8 <utils_floatToText+0x688>
 8006636:	4605      	mov	r5, r0
 8006638:	460c      	mov	r4, r1
 800663a:	2f00      	cmp	r7, #0
 800663c:	f000 8339 	beq.w	8006cb2 <utils_floatToText+0x692>
    if (data < 0)
 8006640:	2200      	movs	r2, #0
 8006642:	2300      	movs	r3, #0
 8006644:	4628      	mov	r0, r5
 8006646:	4621      	mov	r1, r4
 8006648:	f7fa fad4 	bl	8000bf4 <__aeabi_dcmplt>
 800664c:	b970      	cbnz	r0, 800666c <utils_floatToText+0x4c>
    size_t head = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	9305      	str	r3, [sp, #20]
    if (data < DBL_MIN)
 8006652:	2200      	movs	r2, #0
 8006654:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006658:	4628      	mov	r0, r5
 800665a:	4621      	mov	r1, r4
 800665c:	f7fa faca 	bl	8000bf4 <__aeabi_dcmplt>
 8006660:	b1b8      	cbz	r0, 8006692 <utils_floatToText+0x72>
        if (length < 3) return 0;
 8006662:	f1b9 0f02 	cmp.w	r9, #2
 8006666:	d808      	bhi.n	800667a <utils_floatToText+0x5a>
 8006668:	2400      	movs	r4, #0
 800666a:	e31e      	b.n	8006caa <utils_floatToText+0x68a>
        string[head++] = '-';
 800666c:	232d      	movs	r3, #45	; 0x2d
 800666e:	703b      	strb	r3, [r7, #0]
        data = -data;
 8006670:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
        string[head++] = '-';
 8006674:	2301      	movs	r3, #1
 8006676:	9305      	str	r3, [sp, #20]
 8006678:	e7eb      	b.n	8006652 <utils_floatToText+0x32>
        string[0] = '0';
 800667a:	2330      	movs	r3, #48	; 0x30
 800667c:	703b      	strb	r3, [r7, #0]
        string[1] = '.';
 800667e:	222e      	movs	r2, #46	; 0x2e
 8006680:	707a      	strb	r2, [r7, #1]
        string[2] = '0';
 8006682:	70bb      	strb	r3, [r7, #2]
        if (length > 3) string[3] = '\0';
 8006684:	f1b9 0f03 	cmp.w	r9, #3
 8006688:	d901      	bls.n	800668e <utils_floatToText+0x6e>
 800668a:	2300      	movs	r3, #0
 800668c:	70fb      	strb	r3, [r7, #3]
        return 3;
 800668e:	2403      	movs	r4, #3
 8006690:	e30b      	b.n	8006caa <utils_floatToText+0x68a>
    else if (data > DBL_MAX )
 8006692:	f04f 32ff 	mov.w	r2, #4294967295
 8006696:	4bc4      	ldr	r3, [pc, #784]	; (80069a8 <utils_floatToText+0x388>)
 8006698:	4628      	mov	r0, r5
 800669a:	4621      	mov	r1, r4
 800669c:	f7fa fac8 	bl	8000c30 <__aeabi_dcmpgt>
 80066a0:	b1b0      	cbz	r0, 80066d0 <utils_floatToText+0xb0>
        if (length < 3 + head) return 0;
 80066a2:	9905      	ldr	r1, [sp, #20]
 80066a4:	1ccc      	adds	r4, r1, #3
 80066a6:	454c      	cmp	r4, r9
 80066a8:	f200 8305 	bhi.w	8006cb6 <utils_floatToText+0x696>
        string[head++] = 'i';
 80066ac:	f101 0201 	add.w	r2, r1, #1
 80066b0:	f04f 0369 	mov.w	r3, #105	; 0x69
 80066b4:	547b      	strb	r3, [r7, r1]
        string[head++] = 'n';
 80066b6:	f101 0302 	add.w	r3, r1, #2
 80066ba:	f04f 016e 	mov.w	r1, #110	; 0x6e
 80066be:	54b9      	strb	r1, [r7, r2]
        string[head++] = 'f';
 80066c0:	f04f 0266 	mov.w	r2, #102	; 0x66
 80066c4:	54fa      	strb	r2, [r7, r3]
        if (length > head) string[head] = '\0';
 80066c6:	f080 82f0 	bcs.w	8006caa <utils_floatToText+0x68a>
 80066ca:	2300      	movs	r3, #0
 80066cc:	553b      	strb	r3, [r7, r4]
        return head;
 80066ce:	e2ec      	b.n	8006caa <utils_floatToText+0x68a>
    else if (isnan(data))
 80066d0:	462a      	mov	r2, r5
 80066d2:	4623      	mov	r3, r4
 80066d4:	4628      	mov	r0, r5
 80066d6:	4621      	mov	r1, r4
 80066d8:	f7fa fab4 	bl	8000c44 <__aeabi_dcmpun>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d13b      	bne.n	8006758 <utils_floatToText+0x138>
    if (data > 1e15)
 80066e0:	a39f      	add	r3, pc, #636	; (adr r3, 8006960 <utils_floatToText+0x340>)
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	4628      	mov	r0, r5
 80066e8:	4621      	mov	r1, r4
 80066ea:	f7fa faa1 	bl	8000c30 <__aeabi_dcmpgt>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d15f      	bne.n	80067b2 <utils_floatToText+0x192>
    else if (data < (allowExponential ? 1e-3 : 0.1))
 80066f2:	9b04      	ldr	r3, [sp, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 80e3 	beq.w	80068c0 <utils_floatToText+0x2a0>
 80066fa:	a39b      	add	r3, pc, #620	; (adr r3, 8006968 <utils_floatToText+0x348>)
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	4628      	mov	r0, r5
 8006702:	4621      	mov	r1, r4
 8006704:	f7fa fa76 	bl	8000bf4 <__aeabi_dcmplt>
 8006708:	2800      	cmp	r0, #0
 800670a:	f040 80f3 	bne.w	80068f4 <utils_floatToText+0x2d4>
    int precisionFactor = 1; /* Adjusts for inaccuracies caused by power of 10 operations. */
 800670e:	f04f 0801 	mov.w	r8, #1
    uint8_t expLen = 0;
 8006712:	2300      	movs	r3, #0
 8006714:	930b      	str	r3, [sp, #44]	; 0x2c
    int zeros = 0; /* positive for trailing, negative for leading */
 8006716:	461e      	mov	r6, r3
    noiseFloor = DBL_EPSILON * precisionFactor;
 8006718:	4640      	mov	r0, r8
 800671a:	f7f9 ff8f 	bl	800063c <__aeabi_i2d>
 800671e:	2200      	movs	r2, #0
 8006720:	4ba2      	ldr	r3, [pc, #648]	; (80069ac <utils_floatToText+0x38c>)
 8006722:	f7f9 fff5 	bl	8000710 <__aeabi_dmul>
 8006726:	e9cd 0100 	strd	r0, r1, [sp]
    intPart = (uint64_t)data;
 800672a:	4628      	mov	r0, r5
 800672c:	4621      	mov	r1, r4
 800672e:	f7fa fcc3 	bl	80010b8 <__aeabi_d2ulz>
 8006732:	4603      	mov	r3, r0
 8006734:	9002      	str	r0, [sp, #8]
 8006736:	9108      	str	r1, [sp, #32]
 8006738:	9006      	str	r0, [sp, #24]
 800673a:	9107      	str	r1, [sp, #28]
    if (!intPart)
 800673c:	430b      	orrs	r3, r1
 800673e:	f000 8186 	beq.w	8006a4e <utils_floatToText+0x42e>
        digits = 1;
 8006742:	f04f 0801 	mov.w	r8, #1
        digits = 2;
 8006746:	f8dd b008 	ldr.w	fp, [sp, #8]
 800674a:	f8dd a020 	ldr.w	sl, [sp, #32]
 800674e:	9509      	str	r5, [sp, #36]	; 0x24
 8006750:	940a      	str	r4, [sp, #40]	; 0x28
 8006752:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006756:	e15f      	b.n	8006a18 <utils_floatToText+0x3f8>
        if (length < 3 + head) return 0;
 8006758:	9a05      	ldr	r2, [sp, #20]
 800675a:	1cd4      	adds	r4, r2, #3
 800675c:	454c      	cmp	r4, r9
 800675e:	f200 82ac 	bhi.w	8006cba <utils_floatToText+0x69a>
        string[head++] = 'n';
 8006762:	f102 0101 	add.w	r1, r2, #1
 8006766:	f04f 036e 	mov.w	r3, #110	; 0x6e
 800676a:	54bb      	strb	r3, [r7, r2]
        string[head++] = 'a';
 800676c:	f102 0202 	add.w	r2, r2, #2
 8006770:	f04f 0061 	mov.w	r0, #97	; 0x61
 8006774:	5478      	strb	r0, [r7, r1]
        string[head++] = 'n';
 8006776:	54bb      	strb	r3, [r7, r2]
        if (length > head) string[head] = '\0';
 8006778:	f080 8297 	bcs.w	8006caa <utils_floatToText+0x68a>
 800677c:	2300      	movs	r3, #0
 800677e:	553b      	strb	r3, [r7, r4]
        return head;
 8006780:	e293      	b.n	8006caa <utils_floatToText+0x68a>
            data *= 1e-100;
 8006782:	a37b      	add	r3, pc, #492	; (adr r3, 8006970 <utils_floatToText+0x350>)
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	4628      	mov	r0, r5
 800678a:	4621      	mov	r1, r4
 800678c:	f7f9 ffc0 	bl	8000710 <__aeabi_dmul>
 8006790:	4605      	mov	r5, r0
 8006792:	460c      	mov	r4, r1
            zeros += 100;
 8006794:	3664      	adds	r6, #100	; 0x64
            precisionFactor++;
 8006796:	f108 0801 	add.w	r8, r8, #1
        while (data > 1e100)
 800679a:	a377      	add	r3, pc, #476	; (adr r3, 8006978 <utils_floatToText+0x358>)
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	4628      	mov	r0, r5
 80067a2:	4621      	mov	r1, r4
 80067a4:	f7fa fa44 	bl	8000c30 <__aeabi_dcmpgt>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d1ea      	bne.n	8006782 <utils_floatToText+0x162>
        if (allowExponential)
 80067ac:	9b04      	ldr	r3, [sp, #16]
 80067ae:	b983      	cbnz	r3, 80067d2 <utils_floatToText+0x1b2>
 80067b0:	e042      	b.n	8006838 <utils_floatToText+0x218>
    int precisionFactor = 1; /* Adjusts for inaccuracies caused by power of 10 operations. */
 80067b2:	f04f 0801 	mov.w	r8, #1
    int zeros = 0; /* positive for trailing, negative for leading */
 80067b6:	2600      	movs	r6, #0
 80067b8:	e7ef      	b.n	800679a <utils_floatToText+0x17a>
                data *= 1e-10;
 80067ba:	a371      	add	r3, pc, #452	; (adr r3, 8006980 <utils_floatToText+0x360>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	4628      	mov	r0, r5
 80067c2:	4621      	mov	r1, r4
 80067c4:	f7f9 ffa4 	bl	8000710 <__aeabi_dmul>
 80067c8:	4605      	mov	r5, r0
 80067ca:	460c      	mov	r4, r1
                zeros += 10;
 80067cc:	360a      	adds	r6, #10
                precisionFactor++;
 80067ce:	f108 0801 	add.w	r8, r8, #1
            while (data > 1e10)
 80067d2:	a36d      	add	r3, pc, #436	; (adr r3, 8006988 <utils_floatToText+0x368>)
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	4628      	mov	r0, r5
 80067da:	4621      	mov	r1, r4
 80067dc:	f7fa fa28 	bl	8000c30 <__aeabi_dcmpgt>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	d1ea      	bne.n	80067ba <utils_floatToText+0x19a>
 80067e4:	e00b      	b.n	80067fe <utils_floatToText+0x1de>
                data *= 0.1;
 80067e6:	a36a      	add	r3, pc, #424	; (adr r3, 8006990 <utils_floatToText+0x370>)
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	4628      	mov	r0, r5
 80067ee:	4621      	mov	r1, r4
 80067f0:	f7f9 ff8e 	bl	8000710 <__aeabi_dmul>
 80067f4:	4605      	mov	r5, r0
 80067f6:	460c      	mov	r4, r1
                zeros += 1;
 80067f8:	3601      	adds	r6, #1
                precisionFactor++;
 80067fa:	f108 0801 	add.w	r8, r8, #1
            while (data > 10)
 80067fe:	2200      	movs	r2, #0
 8006800:	4b6b      	ldr	r3, [pc, #428]	; (80069b0 <utils_floatToText+0x390>)
 8006802:	4628      	mov	r0, r5
 8006804:	4621      	mov	r1, r4
 8006806:	f7fa fa13 	bl	8000c30 <__aeabi_dcmpgt>
 800680a:	2800      	cmp	r0, #0
 800680c:	d1eb      	bne.n	80067e6 <utils_floatToText+0x1c6>
            if (zeros >= 100)
 800680e:	2e63      	cmp	r6, #99	; 0x63
 8006810:	f300 80de 	bgt.w	80069d0 <utils_floatToText+0x3b0>
            else if(zeros >= 10)
 8006814:	2e09      	cmp	r6, #9
 8006816:	f340 80de 	ble.w	80069d6 <utils_floatToText+0x3b6>
                expLen = 3;
 800681a:	2303      	movs	r3, #3
 800681c:	930b      	str	r3, [sp, #44]	; 0x2c
 800681e:	e77b      	b.n	8006718 <utils_floatToText+0xf8>
                data *= 1e-10;
 8006820:	a357      	add	r3, pc, #348	; (adr r3, 8006980 <utils_floatToText+0x360>)
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	4628      	mov	r0, r5
 8006828:	4621      	mov	r1, r4
 800682a:	f7f9 ff71 	bl	8000710 <__aeabi_dmul>
 800682e:	4605      	mov	r5, r0
 8006830:	460c      	mov	r4, r1
                zeros += 10;
 8006832:	360a      	adds	r6, #10
                precisionFactor++;
 8006834:	f108 0801 	add.w	r8, r8, #1
            while (data >= 1e25)
 8006838:	a357      	add	r3, pc, #348	; (adr r3, 8006998 <utils_floatToText+0x378>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	4628      	mov	r0, r5
 8006840:	4621      	mov	r1, r4
 8006842:	f7fa f9eb 	bl	8000c1c <__aeabi_dcmpge>
 8006846:	2800      	cmp	r0, #0
 8006848:	d1ea      	bne.n	8006820 <utils_floatToText+0x200>
 800684a:	e00b      	b.n	8006864 <utils_floatToText+0x244>
                data *= 0.1;
 800684c:	a350      	add	r3, pc, #320	; (adr r3, 8006990 <utils_floatToText+0x370>)
 800684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006852:	4628      	mov	r0, r5
 8006854:	4621      	mov	r1, r4
 8006856:	f7f9 ff5b 	bl	8000710 <__aeabi_dmul>
 800685a:	4605      	mov	r5, r0
 800685c:	460c      	mov	r4, r1
                zeros += 1;
 800685e:	3601      	adds	r6, #1
                precisionFactor++;
 8006860:	f108 0801 	add.w	r8, r8, #1
            while (data > 1e15)
 8006864:	a33e      	add	r3, pc, #248	; (adr r3, 8006960 <utils_floatToText+0x340>)
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	4628      	mov	r0, r5
 800686c:	4621      	mov	r1, r4
 800686e:	f7fa f9df 	bl	8000c30 <__aeabi_dcmpgt>
 8006872:	2800      	cmp	r0, #0
 8006874:	d1ea      	bne.n	800684c <utils_floatToText+0x22c>
            if (precisionFactor >= 19)
 8006876:	f1b8 0f12 	cmp.w	r8, #18
 800687a:	dd0e      	ble.n	800689a <utils_floatToText+0x27a>
                data *= 0.01;
 800687c:	a348      	add	r3, pc, #288	; (adr r3, 80069a0 <utils_floatToText+0x380>)
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	4628      	mov	r0, r5
 8006884:	4621      	mov	r1, r4
 8006886:	f7f9 ff43 	bl	8000710 <__aeabi_dmul>
 800688a:	4605      	mov	r5, r0
 800688c:	460c      	mov	r4, r1
                zeros += 2;
 800688e:	3602      	adds	r6, #2
                precisionFactor++;
 8006890:	f108 0801 	add.w	r8, r8, #1
    uint8_t expLen = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	930b      	str	r3, [sp, #44]	; 0x2c
 8006898:	e73e      	b.n	8006718 <utils_floatToText+0xf8>
            else if (precisionFactor >= 10)
 800689a:	f1b8 0f09 	cmp.w	r8, #9
 800689e:	f340 809d 	ble.w	80069dc <utils_floatToText+0x3bc>
                data *= 0.1;
 80068a2:	a33b      	add	r3, pc, #236	; (adr r3, 8006990 <utils_floatToText+0x370>)
 80068a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a8:	4628      	mov	r0, r5
 80068aa:	4621      	mov	r1, r4
 80068ac:	f7f9 ff30 	bl	8000710 <__aeabi_dmul>
 80068b0:	4605      	mov	r5, r0
 80068b2:	460c      	mov	r4, r1
                zeros += 1;
 80068b4:	3601      	adds	r6, #1
                precisionFactor++;
 80068b6:	f108 0801 	add.w	r8, r8, #1
    uint8_t expLen = 0;
 80068ba:	2300      	movs	r3, #0
 80068bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80068be:	e72b      	b.n	8006718 <utils_floatToText+0xf8>
    else if (data < (allowExponential ? 1e-3 : 0.1))
 80068c0:	a333      	add	r3, pc, #204	; (adr r3, 8006990 <utils_floatToText+0x370>)
 80068c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c6:	e71b      	b.n	8006700 <utils_floatToText+0xe0>
            data *= 1e100;
 80068c8:	a32b      	add	r3, pc, #172	; (adr r3, 8006978 <utils_floatToText+0x358>)
 80068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ce:	4628      	mov	r0, r5
 80068d0:	4621      	mov	r1, r4
 80068d2:	f7f9 ff1d 	bl	8000710 <__aeabi_dmul>
 80068d6:	4605      	mov	r5, r0
 80068d8:	460c      	mov	r4, r1
            zeros -= 100;
 80068da:	3e64      	subs	r6, #100	; 0x64
            precisionFactor++;
 80068dc:	f108 0801 	add.w	r8, r8, #1
        while (data < 1e-100)
 80068e0:	a323      	add	r3, pc, #140	; (adr r3, 8006970 <utils_floatToText+0x350>)
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	4628      	mov	r0, r5
 80068e8:	4621      	mov	r1, r4
 80068ea:	f7fa f983 	bl	8000bf4 <__aeabi_dcmplt>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d1ea      	bne.n	80068c8 <utils_floatToText+0x2a8>
 80068f2:	e00f      	b.n	8006914 <utils_floatToText+0x2f4>
    int precisionFactor = 1; /* Adjusts for inaccuracies caused by power of 10 operations. */
 80068f4:	f04f 0801 	mov.w	r8, #1
    int zeros = 0; /* positive for trailing, negative for leading */
 80068f8:	2600      	movs	r6, #0
 80068fa:	e7f1      	b.n	80068e0 <utils_floatToText+0x2c0>
            data *= 1e10;
 80068fc:	a322      	add	r3, pc, #136	; (adr r3, 8006988 <utils_floatToText+0x368>)
 80068fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006902:	4628      	mov	r0, r5
 8006904:	4621      	mov	r1, r4
 8006906:	f7f9 ff03 	bl	8000710 <__aeabi_dmul>
 800690a:	4605      	mov	r5, r0
 800690c:	460c      	mov	r4, r1
            zeros -= 10;
 800690e:	3e0a      	subs	r6, #10
            precisionFactor++;
 8006910:	f108 0801 	add.w	r8, r8, #1
        while (data < 1e-10)
 8006914:	a31a      	add	r3, pc, #104	; (adr r3, 8006980 <utils_floatToText+0x360>)
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	4628      	mov	r0, r5
 800691c:	4621      	mov	r1, r4
 800691e:	f7fa f969 	bl	8000bf4 <__aeabi_dcmplt>
 8006922:	2800      	cmp	r0, #0
 8006924:	d1ea      	bne.n	80068fc <utils_floatToText+0x2dc>
 8006926:	46ba      	mov	sl, r7
 8006928:	9f04      	ldr	r7, [sp, #16]
 800692a:	e013      	b.n	8006954 <utils_floatToText+0x334>
        while (data < (allowExponential ? 1 : 0.1))
 800692c:	a318      	add	r3, pc, #96	; (adr r3, 8006990 <utils_floatToText+0x370>)
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	4628      	mov	r0, r5
 8006934:	4621      	mov	r1, r4
 8006936:	f7fa f95d 	bl	8000bf4 <__aeabi_dcmplt>
 800693a:	2800      	cmp	r0, #0
 800693c:	d03c      	beq.n	80069b8 <utils_floatToText+0x398>
            data *= 10;
 800693e:	2200      	movs	r2, #0
 8006940:	4b1b      	ldr	r3, [pc, #108]	; (80069b0 <utils_floatToText+0x390>)
 8006942:	4628      	mov	r0, r5
 8006944:	4621      	mov	r1, r4
 8006946:	f7f9 fee3 	bl	8000710 <__aeabi_dmul>
 800694a:	4605      	mov	r5, r0
 800694c:	460c      	mov	r4, r1
            zeros -= 1;
 800694e:	3e01      	subs	r6, #1
            precisionFactor++;
 8006950:	f108 0801 	add.w	r8, r8, #1
        while (data < (allowExponential ? 1 : 0.1))
 8006954:	2f00      	cmp	r7, #0
 8006956:	d0e9      	beq.n	800692c <utils_floatToText+0x30c>
 8006958:	2200      	movs	r2, #0
 800695a:	4b16      	ldr	r3, [pc, #88]	; (80069b4 <utils_floatToText+0x394>)
 800695c:	e7e9      	b.n	8006932 <utils_floatToText+0x312>
 800695e:	bf00      	nop
 8006960:	26340000 	.word	0x26340000
 8006964:	430c6bf5 	.word	0x430c6bf5
 8006968:	d2f1a9fc 	.word	0xd2f1a9fc
 800696c:	3f50624d 	.word	0x3f50624d
 8006970:	e48e0530 	.word	0xe48e0530
 8006974:	2b2bff2e 	.word	0x2b2bff2e
 8006978:	2594c37d 	.word	0x2594c37d
 800697c:	54b249ad 	.word	0x54b249ad
 8006980:	d9d7bdbb 	.word	0xd9d7bdbb
 8006984:	3ddb7cdf 	.word	0x3ddb7cdf
 8006988:	20000000 	.word	0x20000000
 800698c:	4202a05f 	.word	0x4202a05f
 8006990:	9999999a 	.word	0x9999999a
 8006994:	3fb99999 	.word	0x3fb99999
 8006998:	2c280291 	.word	0x2c280291
 800699c:	45208b2a 	.word	0x45208b2a
 80069a0:	47ae147b 	.word	0x47ae147b
 80069a4:	3f847ae1 	.word	0x3f847ae1
 80069a8:	7fefffff 	.word	0x7fefffff
 80069ac:	3cb00000 	.word	0x3cb00000
 80069b0:	40240000 	.word	0x40240000
 80069b4:	3ff00000 	.word	0x3ff00000
        if (allowExponential)
 80069b8:	4657      	mov	r7, sl
 80069ba:	9b04      	ldr	r3, [sp, #16]
 80069bc:	b18b      	cbz	r3, 80069e2 <utils_floatToText+0x3c2>
            if (zeros <= -100)
 80069be:	f116 0f63 	cmn.w	r6, #99	; 0x63
 80069c2:	db11      	blt.n	80069e8 <utils_floatToText+0x3c8>
            else if(zeros <= -10)
 80069c4:	f116 0f09 	cmn.w	r6, #9
 80069c8:	da11      	bge.n	80069ee <utils_floatToText+0x3ce>
                expLen = 4;
 80069ca:	2304      	movs	r3, #4
 80069cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80069ce:	e6a3      	b.n	8006718 <utils_floatToText+0xf8>
                expLen = 4;
 80069d0:	2304      	movs	r3, #4
 80069d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80069d4:	e6a0      	b.n	8006718 <utils_floatToText+0xf8>
                expLen = 2;
 80069d6:	2302      	movs	r3, #2
 80069d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80069da:	e69d      	b.n	8006718 <utils_floatToText+0xf8>
    uint8_t expLen = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	930b      	str	r3, [sp, #44]	; 0x2c
 80069e0:	e69a      	b.n	8006718 <utils_floatToText+0xf8>
 80069e2:	2300      	movs	r3, #0
 80069e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80069e6:	e697      	b.n	8006718 <utils_floatToText+0xf8>
                expLen = 5;
 80069e8:	2305      	movs	r3, #5
 80069ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80069ec:	e694      	b.n	8006718 <utils_floatToText+0xf8>
                expLen = 3;
 80069ee:	2303      	movs	r3, #3
 80069f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80069f2:	e691      	b.n	8006718 <utils_floatToText+0xf8>
        noiseFloor *= 10;
 80069f4:	2200      	movs	r2, #0
 80069f6:	4bb3      	ldr	r3, [pc, #716]	; (8006cc4 <utils_floatToText+0x6a4>)
 80069f8:	4620      	mov	r0, r4
 80069fa:	4629      	mov	r1, r5
 80069fc:	f7f9 fe88 	bl	8000710 <__aeabi_dmul>
 8006a00:	4604      	mov	r4, r0
 8006a02:	460d      	mov	r5, r1
        intPart /= 10;
 8006a04:	220a      	movs	r2, #10
 8006a06:	2300      	movs	r3, #0
 8006a08:	4658      	mov	r0, fp
 8006a0a:	4651      	mov	r1, sl
 8006a0c:	f7fa fb22 	bl	8001054 <__aeabi_uldivmod>
 8006a10:	4683      	mov	fp, r0
 8006a12:	468a      	mov	sl, r1
        digits++;
 8006a14:	f108 0801 	add.w	r8, r8, #1
    while (intPart > 0)
 8006a18:	ea5b 030a 	orrs.w	r3, fp, sl
 8006a1c:	d1ea      	bne.n	80069f4 <utils_floatToText+0x3d4>
    decPart = data - intPart;
 8006a1e:	e9cd 4500 	strd	r4, r5, [sp]
 8006a22:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006a24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a26:	9802      	ldr	r0, [sp, #8]
 8006a28:	9908      	ldr	r1, [sp, #32]
 8006a2a:	f7f9 fe3b 	bl	80006a4 <__aeabi_ul2d>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	4628      	mov	r0, r5
 8006a34:	4621      	mov	r1, r4
 8006a36:	f7f9 fcb3 	bl	80003a0 <__aeabi_dsub>
 8006a3a:	4682      	mov	sl, r0
 8006a3c:	468b      	mov	fp, r1
    if (!allowExponential && zeros > 0)
 8006a3e:	9b04      	ldr	r3, [sp, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d149      	bne.n	8006ad8 <utils_floatToText+0x4b8>
 8006a44:	2e00      	cmp	r6, #0
 8006a46:	dd47      	ble.n	8006ad8 <utils_floatToText+0x4b8>
 8006a48:	9c06      	ldr	r4, [sp, #24]
 8006a4a:	9d07      	ldr	r5, [sp, #28]
 8006a4c:	e02d      	b.n	8006aaa <utils_floatToText+0x48a>
        digits = 2;
 8006a4e:	f04f 0802 	mov.w	r8, #2
 8006a52:	e678      	b.n	8006746 <utils_floatToText+0x126>
            decPart *= 10;
 8006a54:	2200      	movs	r2, #0
 8006a56:	4b9b      	ldr	r3, [pc, #620]	; (8006cc4 <utils_floatToText+0x6a4>)
 8006a58:	4650      	mov	r0, sl
 8006a5a:	4659      	mov	r1, fp
 8006a5c:	f7f9 fe58 	bl	8000710 <__aeabi_dmul>
 8006a60:	4682      	mov	sl, r0
 8006a62:	468b      	mov	fp, r1
            intPart = intPart * 10 + (unsigned)decPart;
 8006a64:	00aa      	lsls	r2, r5, #2
 8006a66:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
 8006a6a:	00a3      	lsls	r3, r4, #2
 8006a6c:	191c      	adds	r4, r3, r4
 8006a6e:	eb45 0502 	adc.w	r5, r5, r2
 8006a72:	1924      	adds	r4, r4, r4
 8006a74:	416d      	adcs	r5, r5
 8006a76:	f7fa f923 	bl	8000cc0 <__aeabi_d2uiz>
 8006a7a:	1824      	adds	r4, r4, r0
 8006a7c:	f145 0500 	adc.w	r5, r5, #0
            decPart -= (unsigned)decPart;
 8006a80:	f7f9 fdcc 	bl	800061c <__aeabi_ui2d>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4650      	mov	r0, sl
 8006a8a:	4659      	mov	r1, fp
 8006a8c:	f7f9 fc88 	bl	80003a0 <__aeabi_dsub>
 8006a90:	4682      	mov	sl, r0
 8006a92:	468b      	mov	fp, r1
            zeros--;
 8006a94:	3e01      	subs	r6, #1
            noiseFloor *= 10;
 8006a96:	2200      	movs	r2, #0
 8006a98:	4b8a      	ldr	r3, [pc, #552]	; (8006cc4 <utils_floatToText+0x6a4>)
 8006a9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a9e:	f7f9 fe37 	bl	8000710 <__aeabi_dmul>
 8006aa2:	e9cd 0100 	strd	r0, r1, [sp]
            digits++;
 8006aa6:	f108 0801 	add.w	r8, r8, #1
        while (zeros > 0 && noiseFloor < 1)
 8006aaa:	2e00      	cmp	r6, #0
 8006aac:	dd0e      	ble.n	8006acc <utils_floatToText+0x4ac>
 8006aae:	2200      	movs	r2, #0
 8006ab0:	4b85      	ldr	r3, [pc, #532]	; (8006cc8 <utils_floatToText+0x6a8>)
 8006ab2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ab6:	f7fa f89d 	bl	8000bf4 <__aeabi_dcmplt>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d1ca      	bne.n	8006a54 <utils_floatToText+0x434>
        decPart = 0;
 8006abe:	9406      	str	r4, [sp, #24]
 8006ac0:	9507      	str	r5, [sp, #28]
 8006ac2:	f04f 0a00 	mov.w	sl, #0
 8006ac6:	f04f 0b00 	mov.w	fp, #0
 8006aca:	e005      	b.n	8006ad8 <utils_floatToText+0x4b8>
 8006acc:	9406      	str	r4, [sp, #24]
 8006ace:	9507      	str	r5, [sp, #28]
 8006ad0:	f04f 0a00 	mov.w	sl, #0
 8006ad4:	f04f 0b00 	mov.w	fp, #0
    if (decPart > noiseFloor)
 8006ad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006adc:	4650      	mov	r0, sl
 8006ade:	4659      	mov	r1, fp
 8006ae0:	f7fa f8a6 	bl	8000c30 <__aeabi_dcmpgt>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d05f      	beq.n	8006ba8 <utils_floatToText+0x588>
        decPart += 1;
 8006ae8:	2200      	movs	r2, #0
 8006aea:	4b77      	ldr	r3, [pc, #476]	; (8006cc8 <utils_floatToText+0x6a8>)
 8006aec:	4650      	mov	r0, sl
 8006aee:	4659      	mov	r1, fp
 8006af0:	f7f9 fc58 	bl	80003a4 <__adddf3>
 8006af4:	4604      	mov	r4, r0
 8006af6:	460d      	mov	r5, r1
        roundCheck = 2;
 8006af8:	2200      	movs	r2, #0
 8006afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006afe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b02:	f8dd a014 	ldr.w	sl, [sp, #20]
 8006b06:	9608      	str	r6, [sp, #32]
 8006b08:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8006b0c:	9709      	str	r7, [sp, #36]	; 0x24
 8006b0e:	e9dd 6700 	ldrd	r6, r7, [sp]
            digits++;
 8006b12:	f108 0801 	add.w	r8, r8, #1
            if (head + expLen + digits > length) break;
 8006b16:	eb0b 030a 	add.w	r3, fp, sl
 8006b1a:	4443      	add	r3, r8
 8006b1c:	454b      	cmp	r3, r9
 8006b1e:	d829      	bhi.n	8006b74 <utils_floatToText+0x554>
            decPart *= 10;
 8006b20:	2200      	movs	r2, #0
 8006b22:	4b68      	ldr	r3, [pc, #416]	; (8006cc4 <utils_floatToText+0x6a4>)
 8006b24:	4620      	mov	r0, r4
 8006b26:	4629      	mov	r1, r5
 8006b28:	f7f9 fdf2 	bl	8000710 <__aeabi_dmul>
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	460d      	mov	r5, r1
            roundCheck *= 10;
 8006b30:	2200      	movs	r2, #0
 8006b32:	4b64      	ldr	r3, [pc, #400]	; (8006cc4 <utils_floatToText+0x6a4>)
 8006b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b38:	f7f9 fdea 	bl	8000710 <__aeabi_dmul>
 8006b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
            noiseFloor *= 10;
 8006b40:	2200      	movs	r2, #0
 8006b42:	4b60      	ldr	r3, [pc, #384]	; (8006cc4 <utils_floatToText+0x6a4>)
 8006b44:	4630      	mov	r0, r6
 8006b46:	4639      	mov	r1, r7
 8006b48:	f7f9 fde2 	bl	8000710 <__aeabi_dmul>
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	460f      	mov	r7, r1
        } while (decPart - (uint64_t)decPart > noiseFloor);
 8006b50:	4620      	mov	r0, r4
 8006b52:	4629      	mov	r1, r5
 8006b54:	f7fa fab0 	bl	80010b8 <__aeabi_d2ulz>
 8006b58:	f7f9 fda4 	bl	80006a4 <__aeabi_ul2d>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4620      	mov	r0, r4
 8006b62:	4629      	mov	r1, r5
 8006b64:	f7f9 fc1c 	bl	80003a0 <__aeabi_dsub>
 8006b68:	4632      	mov	r2, r6
 8006b6a:	463b      	mov	r3, r7
 8006b6c:	f7fa f860 	bl	8000c30 <__aeabi_dcmpgt>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d1ce      	bne.n	8006b12 <utils_floatToText+0x4f2>
        decPart += 0.5;
 8006b74:	e9cd 6700 	strd	r6, r7, [sp]
 8006b78:	9e08      	ldr	r6, [sp, #32]
 8006b7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	4b53      	ldr	r3, [pc, #332]	; (8006ccc <utils_floatToText+0x6ac>)
 8006b80:	4620      	mov	r0, r4
 8006b82:	4629      	mov	r1, r5
 8006b84:	f7f9 fc0e 	bl	80003a4 <__adddf3>
 8006b88:	4682      	mov	sl, r0
 8006b8a:	468b      	mov	fp, r1
        if (decPart >= roundCheck)
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b94:	f7fa f838 	bl	8000c08 <__aeabi_dcmple>
 8006b98:	b130      	cbz	r0, 8006ba8 <utils_floatToText+0x588>
            intPart += 1;
 8006b9a:	9b06      	ldr	r3, [sp, #24]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	9306      	str	r3, [sp, #24]
 8006ba0:	9b07      	ldr	r3, [sp, #28]
 8006ba2:	f143 0300 	adc.w	r3, r3, #0
 8006ba6:	9307      	str	r3, [sp, #28]
    res = utils_uintToText(intPart, string + head, length - head);
 8006ba8:	9d05      	ldr	r5, [sp, #20]
 8006baa:	eba9 0305 	sub.w	r3, r9, r5
 8006bae:	197a      	adds	r2, r7, r5
 8006bb0:	9806      	ldr	r0, [sp, #24]
 8006bb2:	9907      	ldr	r1, [sp, #28]
 8006bb4:	f7ff fcba 	bl	800652c <utils_uintToText>
    if (res == 0) return 0;
 8006bb8:	4604      	mov	r4, r0
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d075      	beq.n	8006caa <utils_floatToText+0x68a>
    head += res;
 8006bbe:	442c      	add	r4, r5
    if (decPart <= noiseFloor
 8006bc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bc4:	4650      	mov	r0, sl
 8006bc6:	4659      	mov	r1, fp
 8006bc8:	f7fa f81e 	bl	8000c08 <__aeabi_dcmple>
 8006bcc:	b930      	cbnz	r0, 8006bdc <utils_floatToText+0x5bc>
     || (!allowExponential && -zeros >= (int)(length - head)))
 8006bce:	9b04      	ldr	r3, [sp, #16]
 8006bd0:	bb13      	cbnz	r3, 8006c18 <utils_floatToText+0x5f8>
 8006bd2:	4273      	negs	r3, r6
 8006bd4:	eba9 0204 	sub.w	r2, r9, r4
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	db1d      	blt.n	8006c18 <utils_floatToText+0x5f8>
        if (!allowExponential && zeros > 0)
 8006bdc:	9b04      	ldr	r3, [sp, #16]
 8006bde:	b963      	cbnz	r3, 8006bfa <utils_floatToText+0x5da>
 8006be0:	2e00      	cmp	r6, #0
 8006be2:	dd0a      	ble.n	8006bfa <utils_floatToText+0x5da>
            if (head + zeros > length) return 0;
 8006be4:	1935      	adds	r5, r6, r4
 8006be6:	454d      	cmp	r5, r9
 8006be8:	d901      	bls.n	8006bee <utils_floatToText+0x5ce>
 8006bea:	2400      	movs	r4, #0
 8006bec:	e05d      	b.n	8006caa <utils_floatToText+0x68a>
            memset(string + head, '0', zeros);
 8006bee:	4632      	mov	r2, r6
 8006bf0:	2130      	movs	r1, #48	; 0x30
 8006bf2:	1938      	adds	r0, r7, r4
 8006bf4:	f011 fae4 	bl	80181c0 <memset>
            head += zeros;
 8006bf8:	462c      	mov	r4, r5
        if (head < length) string[head++] = '.';
 8006bfa:	454c      	cmp	r4, r9
 8006bfc:	d202      	bcs.n	8006c04 <utils_floatToText+0x5e4>
 8006bfe:	232e      	movs	r3, #46	; 0x2e
 8006c00:	553b      	strb	r3, [r7, r4]
 8006c02:	3401      	adds	r4, #1
        if (head < length) string[head++] = '0';
 8006c04:	454c      	cmp	r4, r9
 8006c06:	d202      	bcs.n	8006c0e <utils_floatToText+0x5ee>
 8006c08:	2330      	movs	r3, #48	; 0x30
 8006c0a:	553b      	strb	r3, [r7, r4]
 8006c0c:	3401      	adds	r4, #1
        if (head < length) string[head] = '\0';
 8006c0e:	454c      	cmp	r4, r9
 8006c10:	d24b      	bcs.n	8006caa <utils_floatToText+0x68a>
 8006c12:	2300      	movs	r3, #0
 8006c14:	553b      	strb	r3, [r7, r4]
        return head;
 8006c16:	e048      	b.n	8006caa <utils_floatToText+0x68a>
    if (!allowExponential && zeros < 0)
 8006c18:	9b04      	ldr	r3, [sp, #16]
 8006c1a:	b90b      	cbnz	r3, 8006c20 <utils_floatToText+0x600>
 8006c1c:	2e00      	cmp	r6, #0
 8006c1e:	db1f      	blt.n	8006c60 <utils_floatToText+0x640>
    res = utils_uintToText((uint64_t)decPart, string + head, length - head);
 8006c20:	eb07 0804 	add.w	r8, r7, r4
 8006c24:	eba9 0504 	sub.w	r5, r9, r4
 8006c28:	4650      	mov	r0, sl
 8006c2a:	4659      	mov	r1, fp
 8006c2c:	f7fa fa44 	bl	80010b8 <__aeabi_d2ulz>
 8006c30:	462b      	mov	r3, r5
 8006c32:	4642      	mov	r2, r8
 8006c34:	f7ff fc7a 	bl	800652c <utils_uintToText>
    if (!res) return 0;
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d048      	beq.n	8006cd0 <utils_floatToText+0x6b0>
    if (!allowExponential && zeros < 0)
 8006c3e:	9a04      	ldr	r2, [sp, #16]
 8006c40:	b90a      	cbnz	r2, 8006c46 <utils_floatToText+0x626>
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	db1e      	blt.n	8006c84 <utils_floatToText+0x664>
        string[head] = '.';
 8006c46:	222e      	movs	r2, #46	; 0x2e
 8006c48:	f888 2000 	strb.w	r2, [r8]
    head += res;
 8006c4c:	441c      	add	r4, r3
    if (allowExponential && zeros)
 8006c4e:	9b04      	ldr	r3, [sp, #16]
 8006c50:	b35b      	cbz	r3, 8006caa <utils_floatToText+0x68a>
 8006c52:	b356      	cbz	r6, 8006caa <utils_floatToText+0x68a>
        if (head + expLen > length) return 0;
 8006c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c56:	4423      	add	r3, r4
 8006c58:	454b      	cmp	r3, r9
 8006c5a:	d917      	bls.n	8006c8c <utils_floatToText+0x66c>
 8006c5c:	2400      	movs	r4, #0
 8006c5e:	e024      	b.n	8006caa <utils_floatToText+0x68a>
        if (head - zeros > length) return 0;
 8006c60:	1ba5      	subs	r5, r4, r6
 8006c62:	454d      	cmp	r5, r9
 8006c64:	d82b      	bhi.n	8006cbe <utils_floatToText+0x69e>
        string[head] = '.';
 8006c66:	232e      	movs	r3, #46	; 0x2e
 8006c68:	553b      	strb	r3, [r7, r4]
        if (zeros < -1) memset(string + head + 1, '0', -(zeros) - 1);
 8006c6a:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006c6e:	db01      	blt.n	8006c74 <utils_floatToText+0x654>
        head -= zeros;
 8006c70:	462c      	mov	r4, r5
 8006c72:	e7d5      	b.n	8006c20 <utils_floatToText+0x600>
        if (zeros < -1) memset(string + head + 1, '0', -(zeros) - 1);
 8006c74:	1c60      	adds	r0, r4, #1
 8006c76:	43f2      	mvns	r2, r6
 8006c78:	2130      	movs	r1, #48	; 0x30
 8006c7a:	4438      	add	r0, r7
 8006c7c:	f011 faa0 	bl	80181c0 <memset>
        head -= zeros;
 8006c80:	462c      	mov	r4, r5
 8006c82:	e7cd      	b.n	8006c20 <utils_floatToText+0x600>
        string[head] = '0';
 8006c84:	2230      	movs	r2, #48	; 0x30
 8006c86:	f888 2000 	strb.w	r2, [r8]
 8006c8a:	e7df      	b.n	8006c4c <utils_floatToText+0x62c>
        string[head++] = 'e';
 8006c8c:	1c65      	adds	r5, r4, #1
 8006c8e:	2365      	movs	r3, #101	; 0x65
 8006c90:	553b      	strb	r3, [r7, r4]
        res = utils_intToText(zeros, string + head, length - head);
 8006c92:	eba9 0305 	sub.w	r3, r9, r5
 8006c96:	197a      	adds	r2, r7, r5
 8006c98:	4630      	mov	r0, r6
 8006c9a:	17f1      	asrs	r1, r6, #31
 8006c9c:	f7ff fc84 	bl	80065a8 <utils_intToText>
        if (res == 0) return 0;
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	b110      	cbz	r0, 8006caa <utils_floatToText+0x68a>
        head += res;
 8006ca4:	442c      	add	r4, r5
 8006ca6:	e000      	b.n	8006caa <utils_floatToText+0x68a>
    if (!length || !string) return 0;
 8006ca8:	461c      	mov	r4, r3
}
 8006caa:	4620      	mov	r0, r4
 8006cac:	b00d      	add	sp, #52	; 0x34
 8006cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!length || !string) return 0;
 8006cb2:	2400      	movs	r4, #0
 8006cb4:	e7f9      	b.n	8006caa <utils_floatToText+0x68a>
        if (length < 3 + head) return 0;
 8006cb6:	2400      	movs	r4, #0
 8006cb8:	e7f7      	b.n	8006caa <utils_floatToText+0x68a>
        if (length < 3 + head) return 0;
 8006cba:	2400      	movs	r4, #0
 8006cbc:	e7f5      	b.n	8006caa <utils_floatToText+0x68a>
        if (head - zeros > length) return 0;
 8006cbe:	2400      	movs	r4, #0
 8006cc0:	e7f3      	b.n	8006caa <utils_floatToText+0x68a>
 8006cc2:	bf00      	nop
 8006cc4:	40240000 	.word	0x40240000
 8006cc8:	3ff00000 	.word	0x3ff00000
 8006ccc:	3fe00000 	.word	0x3fe00000
    if (!res) return 0;
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	e7ea      	b.n	8006caa <utils_floatToText+0x68a>

08006cd4 <utils_objLinkToText>:
{
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	460e      	mov	r6, r1
 8006cd8:	4615      	mov	r5, r2
 8006cda:	461c      	mov	r4, r3
    size_t res = utils_uintToText(objectId, string, length);
 8006cdc:	2100      	movs	r1, #0
 8006cde:	f7ff fc25 	bl	800652c <utils_uintToText>
    if (!res) return 0;
 8006ce2:	4684      	mov	ip, r0
 8006ce4:	b168      	cbz	r0, 8006d02 <utils_objLinkToText+0x2e>
    if (length - head < 1) return 0;
 8006ce6:	4284      	cmp	r4, r0
 8006ce8:	d00d      	beq.n	8006d06 <utils_objLinkToText+0x32>
    string[head++] = ':';
 8006cea:	1c47      	adds	r7, r0, #1
 8006cec:	233a      	movs	r3, #58	; 0x3a
 8006cee:	542b      	strb	r3, [r5, r0]
    res = utils_uintToText(objectInstanceId, string + head, length - head);
 8006cf0:	1be3      	subs	r3, r4, r7
 8006cf2:	19ea      	adds	r2, r5, r7
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	f7ff fc18 	bl	800652c <utils_uintToText>
    if (!res) return 0;
 8006cfc:	4684      	mov	ip, r0
 8006cfe:	b100      	cbz	r0, 8006d02 <utils_objLinkToText+0x2e>
    return head + res;
 8006d00:	44bc      	add	ip, r7
}
 8006d02:	4660      	mov	r0, ip
 8006d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (length - head < 1) return 0;
 8006d06:	f04f 0c00 	mov.w	ip, #0
 8006d0a:	e7fa      	b.n	8006d02 <utils_objLinkToText+0x2e>

08006d0c <utils_stringToBinding>:
{
 8006d0c:	4684      	mov	ip, r0
    lwm2m_binding_t binding = BINDING_UNKNOWN;
 8006d0e:	2001      	movs	r0, #1
    for (i = 0; i < length; i++)
 8006d10:	2200      	movs	r2, #0
 8006d12:	428a      	cmp	r2, r1
 8006d14:	d22f      	bcs.n	8006d76 <utils_stringToBinding+0x6a>
{
 8006d16:	b500      	push	{lr}
 8006d18:	e004      	b.n	8006d24 <utils_stringToBinding+0x18>
            binding |= BINDING_N;
 8006d1a:	f040 0010 	orr.w	r0, r0, #16
    for (i = 0; i < length; i++)
 8006d1e:	3201      	adds	r2, #1
 8006d20:	428a      	cmp	r2, r1
 8006d22:	d226      	bcs.n	8006d72 <utils_stringToBinding+0x66>
        switch (buffer[i])
 8006d24:	f81c 3002 	ldrb.w	r3, [ip, r2]
 8006d28:	3b4e      	subs	r3, #78	; 0x4e
 8006d2a:	2b07      	cmp	r3, #7
 8006d2c:	d820      	bhi.n	8006d70 <utils_stringToBinding+0x64>
 8006d2e:	f20f 0e08 	addw	lr, pc, #8
 8006d32:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	08006d1b 	.word	0x08006d1b
 8006d3c:	08006d71 	.word	0x08006d71
 8006d40:	08006d71 	.word	0x08006d71
 8006d44:	08006d59 	.word	0x08006d59
 8006d48:	08006d71 	.word	0x08006d71
 8006d4c:	08006d5f 	.word	0x08006d5f
 8006d50:	08006d65 	.word	0x08006d65
 8006d54:	08006d6b 	.word	0x08006d6b
            binding |= BINDING_Q;
 8006d58:	f040 0020 	orr.w	r0, r0, #32
            break;
 8006d5c:	e7df      	b.n	8006d1e <utils_stringToBinding+0x12>
            binding |= BINDING_S;
 8006d5e:	f040 0008 	orr.w	r0, r0, #8
            break;
 8006d62:	e7dc      	b.n	8006d1e <utils_stringToBinding+0x12>
            binding |= BINDING_T;
 8006d64:	f040 0004 	orr.w	r0, r0, #4
            break;
 8006d68:	e7d9      	b.n	8006d1e <utils_stringToBinding+0x12>
            binding |= BINDING_U;
 8006d6a:	f040 0002 	orr.w	r0, r0, #2
            break;
 8006d6e:	e7d6      	b.n	8006d1e <utils_stringToBinding+0x12>
        switch (buffer[i])
 8006d70:	2001      	movs	r0, #1
}
 8006d72:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <utils_getResponseFormat>:
{
 8006d78:	b470      	push	{r4, r5, r6}
 8006d7a:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8006d7e:	9e04      	ldr	r6, [sp, #16]
    if (numData == 1)
 8006d80:	2a01      	cmp	r2, #1
 8006d82:	d008      	beq.n	8006d96 <utils_getResponseFormat+0x1e>
    *format = LWM2M_CONTENT_TEXT;
 8006d84:	2300      	movs	r3, #0
 8006d86:	8033      	strh	r3, [r6, #0]
    if (accept_num > 0)
 8006d88:	bb38      	cbnz	r0, 8006dda <utils_getResponseFormat+0x62>
        *format = LWM2M_CONTENT_JSON;
 8006d8a:	f642 5317 	movw	r3, #11543	; 0x2d17
 8006d8e:	8033      	strh	r3, [r6, #0]
    uint8_t result = COAP_205_CONTENT;
 8006d90:	2045      	movs	r0, #69	; 0x45
}
 8006d92:	bc70      	pop	{r4, r5, r6}
 8006d94:	4770      	bx	lr
        switch (dataP->type)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d8f2      	bhi.n	8006d84 <utils_getResponseFormat+0xc>
            singular = false;
 8006d9e:	2500      	movs	r5, #0
 8006da0:	e7f0      	b.n	8006d84 <utils_getResponseFormat+0xc>
                if (singular)
 8006da2:	b13d      	cbz	r5, 8006db4 <utils_getResponseFormat+0x3c>
                    *format = LWM2M_CONTENT_OPAQUE;
 8006da4:	222a      	movs	r2, #42	; 0x2a
 8006da6:	8032      	strh	r2, [r6, #0]
                    found = true;
 8006da8:	462c      	mov	r4, r5
 8006daa:	e003      	b.n	8006db4 <utils_getResponseFormat+0x3c>
                *format = LWM2M_CONTENT_JSON;
 8006dac:	f642 5217 	movw	r2, #11543	; 0x2d17
 8006db0:	8032      	strh	r2, [r6, #0]
                found = true;
 8006db2:	2401      	movs	r4, #1
        for(i = 0; i < accept_num && !found; i++)
 8006db4:	3301      	adds	r3, #1
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	4283      	cmp	r3, r0
 8006dba:	d211      	bcs.n	8006de0 <utils_getResponseFormat+0x68>
 8006dbc:	b984      	cbnz	r4, 8006de0 <utils_getResponseFormat+0x68>
            switch (accept[i])
 8006dbe:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006dc2:	2a2a      	cmp	r2, #42	; 0x2a
 8006dc4:	d0ed      	beq.n	8006da2 <utils_getResponseFormat+0x2a>
 8006dc6:	f642 5c17 	movw	ip, #11543	; 0x2d17
 8006dca:	4562      	cmp	r2, ip
 8006dcc:	d0ee      	beq.n	8006dac <utils_getResponseFormat+0x34>
 8006dce:	2a00      	cmp	r2, #0
 8006dd0:	d1f0      	bne.n	8006db4 <utils_getResponseFormat+0x3c>
                if (singular)
 8006dd2:	2d00      	cmp	r5, #0
 8006dd4:	d0ee      	beq.n	8006db4 <utils_getResponseFormat+0x3c>
                    found = true;
 8006dd6:	462c      	mov	r4, r5
 8006dd8:	e7ec      	b.n	8006db4 <utils_getResponseFormat+0x3c>
        bool found = false;
 8006dda:	2400      	movs	r4, #0
        for(i = 0; i < accept_num && !found; i++)
 8006ddc:	4623      	mov	r3, r4
 8006dde:	e7eb      	b.n	8006db8 <utils_getResponseFormat+0x40>
        if (!found) result = COAP_406_NOT_ACCEPTABLE;
 8006de0:	b10c      	cbz	r4, 8006de6 <utils_getResponseFormat+0x6e>
    uint8_t result = COAP_205_CONTENT;
 8006de2:	2045      	movs	r0, #69	; 0x45
 8006de4:	e7d5      	b.n	8006d92 <utils_getResponseFormat+0x1a>
        if (!found) result = COAP_406_NOT_ACCEPTABLE;
 8006de6:	2086      	movs	r0, #134	; 0x86
 8006de8:	e7d3      	b.n	8006d92 <utils_getResponseFormat+0x1a>

08006dea <utils_isAltPathValid>:
    if (altPath == NULL) return 0;
 8006dea:	4684      	mov	ip, r0
 8006dec:	b338      	cbz	r0, 8006e3e <utils_isAltPathValid+0x54>
    if (altPath[0] != '/') return 0;
 8006dee:	7803      	ldrb	r3, [r0, #0]
 8006df0:	2b2f      	cmp	r3, #47	; 0x2f
 8006df2:	d126      	bne.n	8006e42 <utils_isAltPathValid+0x58>
    for (i = 1 ; altPath[i] != 0 ; i++)
 8006df4:	2101      	movs	r1, #1
 8006df6:	e000      	b.n	8006dfa <utils_isAltPathValid+0x10>
 8006df8:	3101      	adds	r1, #1
 8006dfa:	f81c 3001 	ldrb.w	r3, [ip, r1]
 8006dfe:	b1e3      	cbz	r3, 8006e3a <utils_isAltPathValid+0x50>
        if (altPath[i] == '/') return 0;
 8006e00:	2b2f      	cmp	r3, #47	; 0x2f
 8006e02:	d020      	beq.n	8006e46 <utils_isAltPathValid+0x5c>
        if ((altPath[i] < 'A' || altPath[i] > 'Z')      // ALPHA
 8006e04:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006e08:	b2d2      	uxtb	r2, r2
 8006e0a:	2a19      	cmp	r2, #25
 8006e0c:	d9f4      	bls.n	8006df8 <utils_isAltPathValid+0xe>
         && (altPath[i] < 'a' || altPath[i] > 'z')
 8006e0e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	2a19      	cmp	r2, #25
 8006e16:	d9ef      	bls.n	8006df8 <utils_isAltPathValid+0xe>
         && (altPath[i] < '0' || altPath[i] > '9')      // DIGIT
 8006e18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	2a09      	cmp	r2, #9
 8006e20:	d9ea      	bls.n	8006df8 <utils_isAltPathValid+0xe>
         && (altPath[i] != '-')                         // Other unreserved
 8006e22:	2b2d      	cmp	r3, #45	; 0x2d
 8006e24:	d0e8      	beq.n	8006df8 <utils_isAltPathValid+0xe>
         && (altPath[i] != '.')
 8006e26:	2b2e      	cmp	r3, #46	; 0x2e
 8006e28:	d0e6      	beq.n	8006df8 <utils_isAltPathValid+0xe>
         && (altPath[i] != '_')
 8006e2a:	2b5f      	cmp	r3, #95	; 0x5f
 8006e2c:	d0e4      	beq.n	8006df8 <utils_isAltPathValid+0xe>
         && (altPath[i] != '~')
 8006e2e:	2b7e      	cmp	r3, #126	; 0x7e
 8006e30:	d0e2      	beq.n	8006df8 <utils_isAltPathValid+0xe>
         && (altPath[i] != '%'))                        // pct_encoded
 8006e32:	2b25      	cmp	r3, #37	; 0x25
 8006e34:	d0e0      	beq.n	8006df8 <utils_isAltPathValid+0xe>
            return 0;
 8006e36:	2000      	movs	r0, #0
}
 8006e38:	4770      	bx	lr
    return 1;
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	4770      	bx	lr
    if (altPath == NULL) return 0;
 8006e3e:	2000      	movs	r0, #0
 8006e40:	4770      	bx	lr
    if (altPath[0] != '/') return 0;
 8006e42:	2000      	movs	r0, #0
 8006e44:	4770      	bx	lr
        if (altPath[i] == '/') return 0;
 8006e46:	2000      	movs	r0, #0
 8006e48:	4770      	bx	lr

08006e4a <utils_stringCopy>:
{
 8006e4a:	4684      	mov	ip, r0
    for (i = 0 ; i < length && str[i] != 0 ; i++)
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	e002      	b.n	8006e56 <utils_stringCopy+0xc>
        buffer[i] = str[i];
 8006e50:	f80c 3000 	strb.w	r3, [ip, r0]
    for (i = 0 ; i < length && str[i] != 0 ; i++)
 8006e54:	3001      	adds	r0, #1
 8006e56:	4288      	cmp	r0, r1
 8006e58:	d202      	bcs.n	8006e60 <utils_stringCopy+0x16>
 8006e5a:	5c13      	ldrb	r3, [r2, r0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1f7      	bne.n	8006e50 <utils_stringCopy+0x6>
    if (i == length) return -1;
 8006e60:	4288      	cmp	r0, r1
 8006e62:	d003      	beq.n	8006e6c <utils_stringCopy+0x22>
    buffer[i] = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	f80c 3000 	strb.w	r3, [ip, r0]
    return (int)i;
 8006e6a:	4770      	bx	lr
    if (i == length) return -1;
 8006e6c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006e70:	4770      	bx	lr

08006e72 <utils_copyValue>:
}
 8006e72:	4770      	bx	lr

08006e74 <utils_base64GetSize>:

size_t utils_base64GetSize(size_t dataLen)
{
 8006e74:	4602      	mov	r2, r0
    size_t result_len;

    result_len = 4 * (dataLen / 3);
 8006e76:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <utils_base64GetSize+0x18>)
 8006e78:	fba3 1300 	umull	r1, r3, r3, r0
 8006e7c:	085b      	lsrs	r3, r3, #1
 8006e7e:	0098      	lsls	r0, r3, #2
    if (dataLen % 3) result_len += 4;
 8006e80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d000      	beq.n	8006e8a <utils_base64GetSize+0x16>
 8006e88:	3004      	adds	r0, #4

    return result_len;
}
 8006e8a:	4770      	bx	lr
 8006e8c:	aaaaaaab 	.word	0xaaaaaaab

08006e90 <utils_base64Encode>:

size_t utils_base64Encode(const uint8_t * dataP,
                          size_t dataLen, 
                          uint8_t * bufferP,
                          size_t bufferLen)
{
 8006e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e94:	4680      	mov	r8, r0
 8006e96:	460e      	mov	r6, r1
 8006e98:	4617      	mov	r7, r2
 8006e9a:	461c      	mov	r4, r3
    unsigned int data_index;
    unsigned int result_index;
    size_t result_len;

    result_len = utils_base64GetSize(dataLen);
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	f7ff ffe9 	bl	8006e74 <utils_base64GetSize>

    if (result_len > bufferLen) return 0;
 8006ea2:	42a0      	cmp	r0, r4
 8006ea4:	d848      	bhi.n	8006f38 <utils_base64Encode+0xa8>
 8006ea6:	4681      	mov	r9, r0

    data_index = 0;
    result_index = 0;
 8006ea8:	2500      	movs	r5, #0
    data_index = 0;
 8006eaa:	462c      	mov	r4, r5
 8006eac:	e014      	b.n	8006ed8 <utils_base64Encode+0x48>
        {
        case 0:
            // should never happen
            break;
        case 1:
            bufferP[result_index] = b64Alphabet[dataP[data_index] >> 2];
 8006eae:	f818 3004 	ldrb.w	r3, [r8, r4]
 8006eb2:	089b      	lsrs	r3, r3, #2
 8006eb4:	4923      	ldr	r1, [pc, #140]	; (8006f44 <utils_base64Encode+0xb4>)
 8006eb6:	5ccb      	ldrb	r3, [r1, r3]
 8006eb8:	557b      	strb	r3, [r7, r5]
            bufferP[result_index + 1] = b64Alphabet[(dataP[data_index] & 0x03) << 4];
 8006eba:	f818 3004 	ldrb.w	r3, [r8, r4]
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ec4:	1c6a      	adds	r2, r5, #1
 8006ec6:	5cc9      	ldrb	r1, [r1, r3]
 8006ec8:	54b9      	strb	r1, [r7, r2]
            bufferP[result_index + 2] = PRV_B64_PADDING;
 8006eca:	1cab      	adds	r3, r5, #2
 8006ecc:	223d      	movs	r2, #61	; 0x3d
 8006ece:	54fa      	strb	r2, [r7, r3]
            bufferP[result_index + 3] = PRV_B64_PADDING;
 8006ed0:	1ceb      	adds	r3, r5, #3
 8006ed2:	54fa      	strb	r2, [r7, r3]
            break;
        default:
            prv_encodeBlock(dataP + data_index, bufferP + result_index);
            break;
        }
        data_index += 3;
 8006ed4:	3403      	adds	r4, #3
        result_index += 4;
 8006ed6:	3504      	adds	r5, #4
    while (data_index < dataLen)
 8006ed8:	42b4      	cmp	r4, r6
 8006eda:	d22f      	bcs.n	8006f3c <utils_base64Encode+0xac>
        switch (dataLen - data_index)
 8006edc:	1b33      	subs	r3, r6, r4
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d0e5      	beq.n	8006eae <utils_base64Encode+0x1e>
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d007      	beq.n	8006ef6 <utils_base64Encode+0x66>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0f4      	beq.n	8006ed4 <utils_base64Encode+0x44>
            prv_encodeBlock(dataP + data_index, bufferP + result_index);
 8006eea:	1979      	adds	r1, r7, r5
 8006eec:	eb08 0004 	add.w	r0, r8, r4
 8006ef0:	f7ff fa38 	bl	8006364 <prv_encodeBlock>
            break;
 8006ef4:	e7ee      	b.n	8006ed4 <utils_base64Encode+0x44>
            bufferP[result_index] = b64Alphabet[dataP[data_index] >> 2];
 8006ef6:	f818 3004 	ldrb.w	r3, [r8, r4]
 8006efa:	089b      	lsrs	r3, r3, #2
 8006efc:	4a11      	ldr	r2, [pc, #68]	; (8006f44 <utils_base64Encode+0xb4>)
 8006efe:	5cd3      	ldrb	r3, [r2, r3]
 8006f00:	557b      	strb	r3, [r7, r5]
            bufferP[result_index + 1] = b64Alphabet[(dataP[data_index] & 0x03) << 4 | (dataP[data_index + 1] >> 4)];
 8006f02:	f818 3004 	ldrb.w	r3, [r8, r4]
 8006f06:	011b      	lsls	r3, r3, #4
 8006f08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f0c:	1c60      	adds	r0, r4, #1
 8006f0e:	f818 1000 	ldrb.w	r1, [r8, r0]
 8006f12:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8006f16:	1c69      	adds	r1, r5, #1
 8006f18:	f812 c003 	ldrb.w	ip, [r2, r3]
 8006f1c:	f807 c001 	strb.w	ip, [r7, r1]
            bufferP[result_index + 2] = b64Alphabet[(dataP[data_index + 1] & 0x0F) << 2];
 8006f20:	f818 3000 	ldrb.w	r3, [r8, r0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8006f2a:	1ca9      	adds	r1, r5, #2
 8006f2c:	5cd2      	ldrb	r2, [r2, r3]
 8006f2e:	547a      	strb	r2, [r7, r1]
            bufferP[result_index + 3] = PRV_B64_PADDING;
 8006f30:	1ceb      	adds	r3, r5, #3
 8006f32:	223d      	movs	r2, #61	; 0x3d
 8006f34:	54fa      	strb	r2, [r7, r3]
            break;
 8006f36:	e7cd      	b.n	8006ed4 <utils_base64Encode+0x44>
    if (result_len > bufferLen) return 0;
 8006f38:	f04f 0900 	mov.w	r9, #0
    }

    return result_len;
}
 8006f3c:	4648      	mov	r0, r9
 8006f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f42:	bf00      	nop
 8006f44:	0801b8e8 	.word	0x0801b8e8

08006f48 <prv_setBuffer>:
}

static int prv_setBuffer(lwm2m_data_t * dataP,
                         const uint8_t * buffer,
                         size_t bufferLen)
{
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	4605      	mov	r5, r0
 8006f4c:	460e      	mov	r6, r1
 8006f4e:	4614      	mov	r4, r2
    dataP->value.asBuffer.buffer = (uint8_t *)lwm2m_malloc(bufferLen);
 8006f50:	4610      	mov	r0, r2
 8006f52:	f001 fe01 	bl	8008b58 <lwm2m_malloc>
 8006f56:	60e8      	str	r0, [r5, #12]
    if (dataP->value.asBuffer.buffer == NULL)
 8006f58:	b130      	cbz	r0, 8006f68 <prv_setBuffer+0x20>
    {
        return 0;
    }
    dataP->value.asBuffer.length = bufferLen;
 8006f5a:	60ac      	str	r4, [r5, #8]
    memcpy(dataP->value.asBuffer.buffer, buffer, bufferLen);
 8006f5c:	4622      	mov	r2, r4
 8006f5e:	4631      	mov	r1, r6
 8006f60:	f011 f906 	bl	8018170 <memcpy>

    return 1;
 8006f64:	2001      	movs	r0, #1
}
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
        return 0;
 8006f68:	2000      	movs	r0, #0
 8006f6a:	e7fc      	b.n	8006f66 <prv_setBuffer+0x1e>

08006f6c <prv_textSerialize>:
{
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	b092      	sub	sp, #72	; 0x48
 8006f70:	4604      	mov	r4, r0
 8006f72:	460d      	mov	r5, r1
    switch (dataP->type)
 8006f74:	7803      	ldrb	r3, [r0, #0]
 8006f76:	3b04      	subs	r3, #4
 8006f78:	2b07      	cmp	r3, #7
 8006f7a:	f200 80aa 	bhi.w	80070d2 <prv_textSerialize+0x166>
 8006f7e:	e8df f003 	tbb	[pc, r3]
 8006f82:	9204      	.short	0x9204
 8006f84:	5b412911 	.word	0x5b412911
 8006f88:	046a      	.short	0x046a
        *bufferP = (uint8_t *)lwm2m_malloc(dataP->value.asBuffer.length);
 8006f8a:	6880      	ldr	r0, [r0, #8]
 8006f8c:	f001 fde4 	bl	8008b58 <lwm2m_malloc>
 8006f90:	6028      	str	r0, [r5, #0]
        if (*bufferP == NULL) return 0;
 8006f92:	2800      	cmp	r0, #0
 8006f94:	f000 80a0 	beq.w	80070d8 <prv_textSerialize+0x16c>
        memcpy(*bufferP, dataP->value.asBuffer.buffer, dataP->value.asBuffer.length);
 8006f98:	68a2      	ldr	r2, [r4, #8]
 8006f9a:	68e1      	ldr	r1, [r4, #12]
 8006f9c:	f011 f8e8 	bl	8018170 <memcpy>
        return (int)dataP->value.asBuffer.length;
 8006fa0:	68a0      	ldr	r0, [r4, #8]
 8006fa2:	e054      	b.n	800704e <prv_textSerialize+0xe2>
        res = utils_intToText(dataP->value.asInteger, intString, _PRV_STR_LENGTH);
 8006fa4:	2320      	movs	r3, #32
 8006fa6:	aa02      	add	r2, sp, #8
 8006fa8:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
 8006fac:	f7ff fafc 	bl	80065a8 <utils_intToText>
        if (res == 0) return -1;
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	b910      	cbnz	r0, 8006fba <prv_textSerialize+0x4e>
 8006fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb8:	e049      	b.n	800704e <prv_textSerialize+0xe2>
        *bufferP = (uint8_t *)lwm2m_malloc(res);
 8006fba:	f001 fdcd 	bl	8008b58 <lwm2m_malloc>
 8006fbe:	6028      	str	r0, [r5, #0]
        if (NULL == *bufferP) return -1;
 8006fc0:	b128      	cbz	r0, 8006fce <prv_textSerialize+0x62>
        memcpy(*bufferP, intString, res);
 8006fc2:	4622      	mov	r2, r4
 8006fc4:	a902      	add	r1, sp, #8
 8006fc6:	f011 f8d3 	bl	8018170 <memcpy>
        return (int)res;
 8006fca:	4620      	mov	r0, r4
 8006fcc:	e03f      	b.n	800704e <prv_textSerialize+0xe2>
        if (NULL == *bufferP) return -1;
 8006fce:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd2:	e03c      	b.n	800704e <prv_textSerialize+0xe2>
        res = utils_uintToText(dataP->value.asUnsigned, intString, _PRV_STR_LENGTH);
 8006fd4:	2320      	movs	r3, #32
 8006fd6:	aa02      	add	r2, sp, #8
 8006fd8:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
 8006fdc:	f7ff faa6 	bl	800652c <utils_uintToText>
        if (res == 0) return -1;
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	b910      	cbnz	r0, 8006fea <prv_textSerialize+0x7e>
 8006fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe8:	e031      	b.n	800704e <prv_textSerialize+0xe2>
        *bufferP = (uint8_t *)lwm2m_malloc(res);
 8006fea:	f001 fdb5 	bl	8008b58 <lwm2m_malloc>
 8006fee:	6028      	str	r0, [r5, #0]
        if (NULL == *bufferP) return -1;
 8006ff0:	b128      	cbz	r0, 8006ffe <prv_textSerialize+0x92>
        memcpy(*bufferP, intString, res);
 8006ff2:	4622      	mov	r2, r4
 8006ff4:	a902      	add	r1, sp, #8
 8006ff6:	f011 f8bb 	bl	8018170 <memcpy>
        return (int)res;
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	e027      	b.n	800704e <prv_textSerialize+0xe2>
        if (NULL == *bufferP) return -1;
 8006ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8007002:	e024      	b.n	800704e <prv_textSerialize+0xe2>
        res = utils_floatToText(dataP->value.asFloat, floatString, _PRV_STR_LENGTH * 2, false);
 8007004:	2300      	movs	r3, #0
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	2340      	movs	r3, #64	; 0x40
 800700a:	aa02      	add	r2, sp, #8
 800700c:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
 8007010:	f7ff fb06 	bl	8006620 <utils_floatToText>
        if (res == 0) return -1;
 8007014:	4604      	mov	r4, r0
 8007016:	b910      	cbnz	r0, 800701e <prv_textSerialize+0xb2>
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
 800701c:	e017      	b.n	800704e <prv_textSerialize+0xe2>
        *bufferP = (uint8_t *)lwm2m_malloc(res);
 800701e:	f001 fd9b 	bl	8008b58 <lwm2m_malloc>
 8007022:	6028      	str	r0, [r5, #0]
        if (NULL == *bufferP) return -1;
 8007024:	b128      	cbz	r0, 8007032 <prv_textSerialize+0xc6>
        memcpy(*bufferP, floatString, res);
 8007026:	4622      	mov	r2, r4
 8007028:	a902      	add	r1, sp, #8
 800702a:	f011 f8a1 	bl	8018170 <memcpy>
        return (int)res;
 800702e:	4620      	mov	r0, r4
 8007030:	e00d      	b.n	800704e <prv_textSerialize+0xe2>
        if (NULL == *bufferP) return -1;
 8007032:	f04f 30ff 	mov.w	r0, #4294967295
 8007036:	e00a      	b.n	800704e <prv_textSerialize+0xe2>
        *bufferP = (uint8_t *)lwm2m_malloc(1);
 8007038:	2001      	movs	r0, #1
 800703a:	f001 fd8d 	bl	8008b58 <lwm2m_malloc>
 800703e:	6028      	str	r0, [r5, #0]
        if (NULL == *bufferP) return -1;
 8007040:	2800      	cmp	r0, #0
 8007042:	d04b      	beq.n	80070dc <prv_textSerialize+0x170>
        *bufferP[0] = dataP->value.asBoolean ? '1' : '0';
 8007044:	7a23      	ldrb	r3, [r4, #8]
 8007046:	b123      	cbz	r3, 8007052 <prv_textSerialize+0xe6>
 8007048:	2331      	movs	r3, #49	; 0x31
 800704a:	7003      	strb	r3, [r0, #0]
        return 1;
 800704c:	2001      	movs	r0, #1
}
 800704e:	b012      	add	sp, #72	; 0x48
 8007050:	bd70      	pop	{r4, r5, r6, pc}
        *bufferP[0] = dataP->value.asBoolean ? '1' : '0';
 8007052:	2330      	movs	r3, #48	; 0x30
 8007054:	e7f9      	b.n	800704a <prv_textSerialize+0xde>
        length = utils_intToText(dataP->value.asObjLink.objectId, (uint8_t*)stringBuffer, 5);
 8007056:	2305      	movs	r3, #5
 8007058:	aa02      	add	r2, sp, #8
 800705a:	8900      	ldrh	r0, [r0, #8]
 800705c:	2100      	movs	r1, #0
 800705e:	f7ff faa3 	bl	80065a8 <utils_intToText>
        if (length == 0) return -1;
 8007062:	b910      	cbnz	r0, 800706a <prv_textSerialize+0xfe>
 8007064:	f04f 30ff 	mov.w	r0, #4294967295
 8007068:	e7f1      	b.n	800704e <prv_textSerialize+0xe2>
        stringBuffer[5] = ':';
 800706a:	223a      	movs	r2, #58	; 0x3a
 800706c:	f88d 200d 	strb.w	r2, [sp, #13]
        res = length + 1;
 8007070:	1c46      	adds	r6, r0, #1
        length = utils_intToText(dataP->value.asObjLink.objectInstanceId, (uint8_t*)stringBuffer + res, 5);
 8007072:	2305      	movs	r3, #5
 8007074:	aa02      	add	r2, sp, #8
 8007076:	4432      	add	r2, r6
 8007078:	8960      	ldrh	r0, [r4, #10]
 800707a:	2100      	movs	r1, #0
 800707c:	f7ff fa94 	bl	80065a8 <utils_intToText>
        if (length == 0) return -1;
 8007080:	b910      	cbnz	r0, 8007088 <prv_textSerialize+0x11c>
 8007082:	f04f 30ff 	mov.w	r0, #4294967295
 8007086:	e7e2      	b.n	800704e <prv_textSerialize+0xe2>
        res += length;
 8007088:	4406      	add	r6, r0
        *bufferP = (uint8_t *)lwm2m_malloc(res);
 800708a:	4630      	mov	r0, r6
 800708c:	f001 fd64 	bl	8008b58 <lwm2m_malloc>
 8007090:	6028      	str	r0, [r5, #0]
        if (*bufferP == NULL) return -1;
 8007092:	b128      	cbz	r0, 80070a0 <prv_textSerialize+0x134>
        memcpy(*bufferP, stringBuffer, res);
 8007094:	4632      	mov	r2, r6
 8007096:	a902      	add	r1, sp, #8
 8007098:	f011 f86a 	bl	8018170 <memcpy>
        return res;
 800709c:	4630      	mov	r0, r6
 800709e:	e7d6      	b.n	800704e <prv_textSerialize+0xe2>
        if (*bufferP == NULL) return -1;
 80070a0:	f04f 30ff 	mov.w	r0, #4294967295
 80070a4:	e7d3      	b.n	800704e <prv_textSerialize+0xe2>
        length = utils_base64GetSize(dataP->value.asBuffer.length);
 80070a6:	6880      	ldr	r0, [r0, #8]
 80070a8:	f7ff fee4 	bl	8006e74 <utils_base64GetSize>
 80070ac:	4606      	mov	r6, r0
        *bufferP = (uint8_t *)lwm2m_malloc(length);
 80070ae:	f001 fd53 	bl	8008b58 <lwm2m_malloc>
 80070b2:	4602      	mov	r2, r0
 80070b4:	6028      	str	r0, [r5, #0]
        if (*bufferP == NULL) return 0;
 80070b6:	b1a0      	cbz	r0, 80070e2 <prv_textSerialize+0x176>
        length = utils_base64Encode(dataP->value.asBuffer.buffer, dataP->value.asBuffer.length, *bufferP, length);
 80070b8:	4633      	mov	r3, r6
 80070ba:	68a1      	ldr	r1, [r4, #8]
 80070bc:	68e0      	ldr	r0, [r4, #12]
 80070be:	f7ff fee7 	bl	8006e90 <utils_base64Encode>
        if (length == 0)
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d1c3      	bne.n	800704e <prv_textSerialize+0xe2>
            lwm2m_free(*bufferP);
 80070c6:	6828      	ldr	r0, [r5, #0]
 80070c8:	f001 fd4a 	bl	8008b60 <lwm2m_free>
            *bufferP = NULL;
 80070cc:	2000      	movs	r0, #0
 80070ce:	6028      	str	r0, [r5, #0]
            return 0;
 80070d0:	e7bd      	b.n	800704e <prv_textSerialize+0xe2>
    switch (dataP->type)
 80070d2:	f04f 30ff 	mov.w	r0, #4294967295
 80070d6:	e7ba      	b.n	800704e <prv_textSerialize+0xe2>
        if (*bufferP == NULL) return 0;
 80070d8:	2000      	movs	r0, #0
 80070da:	e7b8      	b.n	800704e <prv_textSerialize+0xe2>
        if (NULL == *bufferP) return -1;
 80070dc:	f04f 30ff 	mov.w	r0, #4294967295
 80070e0:	e7b5      	b.n	800704e <prv_textSerialize+0xe2>
        if (*bufferP == NULL) return 0;
 80070e2:	2000      	movs	r0, #0
 80070e4:	e7b3      	b.n	800704e <prv_textSerialize+0xe2>

080070e6 <lwm2m_data_new>:

lwm2m_data_t * lwm2m_data_new(int size)
{
 80070e6:	b538      	push	{r3, r4, r5, lr}
    lwm2m_data_t * dataP;

    LOG_ARG("size: %d", size);
    if (size <= 0) return NULL;
 80070e8:	2800      	cmp	r0, #0
 80070ea:	dd0b      	ble.n	8007104 <lwm2m_data_new+0x1e>

    dataP = (lwm2m_data_t *)lwm2m_malloc(size * sizeof(lwm2m_data_t));
 80070ec:	0104      	lsls	r4, r0, #4
 80070ee:	4620      	mov	r0, r4
 80070f0:	f001 fd32 	bl	8008b58 <lwm2m_malloc>

    if (dataP != NULL)
 80070f4:	4605      	mov	r5, r0
 80070f6:	b118      	cbz	r0, 8007100 <lwm2m_data_new+0x1a>
    {
        memset(dataP, 0, size * sizeof(lwm2m_data_t));
 80070f8:	4622      	mov	r2, r4
 80070fa:	2100      	movs	r1, #0
 80070fc:	f011 f860 	bl	80181c0 <memset>
    }

    return dataP;
}
 8007100:	4628      	mov	r0, r5
 8007102:	bd38      	pop	{r3, r4, r5, pc}
    if (size <= 0) return NULL;
 8007104:	2500      	movs	r5, #0
 8007106:	e7fb      	b.n	8007100 <lwm2m_data_new+0x1a>

08007108 <lwm2m_data_free>:
                     lwm2m_data_t * dataP)
{
    int i;

    LOG_ARG("size: %d", size);
    if (size == 0 || dataP == NULL) return;
 8007108:	b328      	cbz	r0, 8007156 <lwm2m_data_free+0x4e>
{
 800710a:	b570      	push	{r4, r5, r6, lr}
 800710c:	460d      	mov	r5, r1
 800710e:	4606      	mov	r6, r0
    if (size == 0 || dataP == NULL) return;
 8007110:	b301      	cbz	r1, 8007154 <lwm2m_data_free+0x4c>

    for (i = 0; i < size; i++)
 8007112:	2400      	movs	r4, #0
 8007114:	e002      	b.n	800711c <lwm2m_data_free+0x14>
    {
        switch (dataP[i].type)
 8007116:	2b0b      	cmp	r3, #11
 8007118:	d013      	beq.n	8007142 <lwm2m_data_free+0x3a>
    for (i = 0; i < size; i++)
 800711a:	3401      	adds	r4, #1
 800711c:	42b4      	cmp	r4, r6
 800711e:	da16      	bge.n	800714e <lwm2m_data_free+0x46>
        switch (dataP[i].type)
 8007120:	0123      	lsls	r3, r4, #4
 8007122:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8007126:	5ceb      	ldrb	r3, [r5, r3]
 8007128:	2b05      	cmp	r3, #5
 800712a:	d8f4      	bhi.n	8007116 <lwm2m_data_free+0xe>
 800712c:	2b04      	cmp	r3, #4
 800712e:	d208      	bcs.n	8007142 <lwm2m_data_free+0x3a>
 8007130:	3b01      	subs	r3, #1
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d8f0      	bhi.n	800711a <lwm2m_data_free+0x12>
        {
        case LWM2M_TYPE_MULTIPLE_RESOURCE:
        case LWM2M_TYPE_OBJECT_INSTANCE:
        case LWM2M_TYPE_OBJECT:
            lwm2m_data_free(dataP[i].value.asChildren.count, dataP[i].value.asChildren.array);
 8007138:	68d1      	ldr	r1, [r2, #12]
 800713a:	6890      	ldr	r0, [r2, #8]
 800713c:	f7ff ffe4 	bl	8007108 <lwm2m_data_free>
            break;
 8007140:	e7eb      	b.n	800711a <lwm2m_data_free+0x12>

        case LWM2M_TYPE_STRING:
        case LWM2M_TYPE_OPAQUE:
        case LWM2M_TYPE_CORE_LINK:
            if (dataP[i].value.asBuffer.buffer != NULL)
 8007142:	68d0      	ldr	r0, [r2, #12]
 8007144:	2800      	cmp	r0, #0
 8007146:	d0e8      	beq.n	800711a <lwm2m_data_free+0x12>
            {
                lwm2m_free(dataP[i].value.asBuffer.buffer);
 8007148:	f001 fd0a 	bl	8008b60 <lwm2m_free>
 800714c:	e7e5      	b.n	800711a <lwm2m_data_free+0x12>
        default:
            // do nothing
            break;
        }
    }
    lwm2m_free(dataP);
 800714e:	4628      	mov	r0, r5
 8007150:	f001 fd06 	bl	8008b60 <lwm2m_free>
}
 8007154:	bd70      	pop	{r4, r5, r6, pc}
 8007156:	4770      	bx	lr

08007158 <lwm2m_data_encode_string>:

void lwm2m_data_encode_string(const char * string,
                              lwm2m_data_t * dataP)
{
 8007158:	b510      	push	{r4, lr}
 800715a:	460c      	mov	r4, r1
    size_t len;
    int res;

    LOG_ARG("\"%s\"", STR_NULL2EMPTY(string));
    if (string == NULL)
 800715c:	b138      	cbz	r0, 800716e <lwm2m_data_encode_string+0x16>
 800715e:	4601      	mov	r1, r0
    {
        len = 0;
    }
    else
    {
        for (len = 0; string[len] != 0; len++);
 8007160:	2200      	movs	r2, #0
 8007162:	e000      	b.n	8007166 <lwm2m_data_encode_string+0xe>
 8007164:	3201      	adds	r2, #1
 8007166:	5c8b      	ldrb	r3, [r1, r2]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1fb      	bne.n	8007164 <lwm2m_data_encode_string+0xc>
    }

    if (len == 0)
 800716c:	b92a      	cbnz	r2, 800717a <lwm2m_data_encode_string+0x22>
    {
        dataP->value.asBuffer.length = 0;
 800716e:	2300      	movs	r3, #0
 8007170:	60a3      	str	r3, [r4, #8]
        dataP->value.asBuffer.buffer = NULL;
 8007172:	60e3      	str	r3, [r4, #12]
        res = prv_setBuffer(dataP, (uint8_t *)string, len);
    }

    if (res == 1)
    {
        dataP->type = LWM2M_TYPE_STRING;
 8007174:	2304      	movs	r3, #4
 8007176:	7023      	strb	r3, [r4, #0]
    }
    else
    {
        dataP->type = LWM2M_TYPE_UNDEFINED;
    }
}
 8007178:	bd10      	pop	{r4, pc}
        res = prv_setBuffer(dataP, (uint8_t *)string, len);
 800717a:	4620      	mov	r0, r4
 800717c:	f7ff fee4 	bl	8006f48 <prv_setBuffer>
    if (res == 1)
 8007180:	2801      	cmp	r0, #1
 8007182:	d0f7      	beq.n	8007174 <lwm2m_data_encode_string+0x1c>
        dataP->type = LWM2M_TYPE_UNDEFINED;
 8007184:	2300      	movs	r3, #0
 8007186:	7023      	strb	r3, [r4, #0]
}
 8007188:	e7f6      	b.n	8007178 <lwm2m_data_encode_string+0x20>

0800718a <lwm2m_data_encode_opaque>:

void lwm2m_data_encode_opaque(const uint8_t * buffer,
                              size_t length,
                              lwm2m_data_t * dataP)
{
 800718a:	b510      	push	{r4, lr}
 800718c:	4614      	mov	r4, r2
    int res;

    LOG_ARG("length: %d", length);
    if (length == 0)
 800718e:	b929      	cbnz	r1, 800719c <lwm2m_data_encode_opaque+0x12>
    {
        dataP->value.asBuffer.length = 0;
 8007190:	2300      	movs	r3, #0
 8007192:	6093      	str	r3, [r2, #8]
        dataP->value.asBuffer.buffer = NULL;
 8007194:	60d3      	str	r3, [r2, #12]
        res = prv_setBuffer(dataP, buffer, length);
    }

    if (res == 1)
    {
        dataP->type = LWM2M_TYPE_OPAQUE;
 8007196:	2305      	movs	r3, #5
 8007198:	7023      	strb	r3, [r4, #0]
    }
    else
    {
        dataP->type = LWM2M_TYPE_UNDEFINED;
    }
}
 800719a:	bd10      	pop	{r4, pc}
 800719c:	460a      	mov	r2, r1
        res = prv_setBuffer(dataP, buffer, length);
 800719e:	4601      	mov	r1, r0
 80071a0:	4620      	mov	r0, r4
 80071a2:	f7ff fed1 	bl	8006f48 <prv_setBuffer>
    if (res == 1)
 80071a6:	2801      	cmp	r0, #1
 80071a8:	d0f5      	beq.n	8007196 <lwm2m_data_encode_opaque+0xc>
        dataP->type = LWM2M_TYPE_UNDEFINED;
 80071aa:	2300      	movs	r3, #0
 80071ac:	7023      	strb	r3, [r4, #0]
}
 80071ae:	e7f4      	b.n	800719a <lwm2m_data_encode_opaque+0x10>

080071b0 <lwm2m_data_encode_int>:

void lwm2m_data_encode_int(int64_t value,
                           lwm2m_data_t * dataP)
{
    LOG_ARG("value: %" PRId64 "", value);
    dataP->type = LWM2M_TYPE_INTEGER;
 80071b0:	2306      	movs	r3, #6
 80071b2:	7013      	strb	r3, [r2, #0]
    dataP->value.asInteger = value;
 80071b4:	e9c2 0102 	strd	r0, r1, [r2, #8]
}
 80071b8:	4770      	bx	lr

080071ba <lwm2m_data_decode_int>:

int lwm2m_data_decode_int(const lwm2m_data_t * dataP,
                          int64_t * valueP)
{
 80071ba:	b510      	push	{r4, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	460c      	mov	r4, r1
    int result = 0;

    LOG("Entering");
    switch (dataP->type)
 80071c0:	7803      	ldrb	r3, [r0, #0]
 80071c2:	3b04      	subs	r3, #4
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d845      	bhi.n	8007254 <lwm2m_data_decode_int+0x9a>
 80071c8:	e8df f003 	tbb	[pc, r3]
 80071cc:	09021711 	.word	0x09021711
    {
    case LWM2M_TYPE_INTEGER:
        *valueP = dataP->value.asInteger;
 80071d0:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 80071d4:	e9c1 2300 	strd	r2, r3, [r1]
        result = 1;
 80071d8:	2001      	movs	r0, #1
        break;
    }
    LOG_ARG("result: %d, value: %" PRId64, result, *valueP);

    return result;
}
 80071da:	b002      	add	sp, #8
 80071dc:	bd10      	pop	{r4, pc}
        if (dataP->value.asUnsigned <= INT64_MAX)
 80071de:	6882      	ldr	r2, [r0, #8]
 80071e0:	68c3      	ldr	r3, [r0, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	db38      	blt.n	8007258 <lwm2m_data_decode_int+0x9e>
            *valueP = dataP->value.asUnsigned;
 80071e6:	600a      	str	r2, [r1, #0]
 80071e8:	604b      	str	r3, [r1, #4]
            result = 1;
 80071ea:	2001      	movs	r0, #1
 80071ec:	e7f5      	b.n	80071da <lwm2m_data_decode_int+0x20>
        result = utils_textToInt(dataP->value.asBuffer.buffer, dataP->value.asBuffer.length, valueP);
 80071ee:	460a      	mov	r2, r1
 80071f0:	6881      	ldr	r1, [r0, #8]
 80071f2:	68c0      	ldr	r0, [r0, #12]
 80071f4:	f7ff f8d8 	bl	80063a8 <utils_textToInt>
        break;
 80071f8:	e7ef      	b.n	80071da <lwm2m_data_decode_int+0x20>
        switch (dataP->value.asBuffer.length)
 80071fa:	6882      	ldr	r2, [r0, #8]
 80071fc:	1e53      	subs	r3, r2, #1
 80071fe:	2b07      	cmp	r3, #7
 8007200:	d82c      	bhi.n	800725c <lwm2m_data_decode_int+0xa2>
 8007202:	e8df f003 	tbb	[pc, r3]
 8007206:	0c04      	.short	0x0c04
 8007208:	2b2b172b 	.word	0x2b2b172b
 800720c:	212b      	.short	0x212b
            *valueP = (int8_t)dataP->value.asBuffer.buffer[0];
 800720e:	68c3      	ldr	r3, [r0, #12]
 8007210:	f993 3000 	ldrsb.w	r3, [r3]
 8007214:	17da      	asrs	r2, r3, #31
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	6062      	str	r2, [r4, #4]
            result = 1;
 800721a:	2001      	movs	r0, #1
            break;
 800721c:	e7dd      	b.n	80071da <lwm2m_data_decode_int+0x20>
            utils_copyValue(&value, dataP->value.asBuffer.buffer, dataP->value.asBuffer.length);
 800721e:	68c1      	ldr	r1, [r0, #12]
 8007220:	a801      	add	r0, sp, #4
 8007222:	f7ff fe26 	bl	8006e72 <utils_copyValue>
            *valueP = value;
 8007226:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800722a:	17da      	asrs	r2, r3, #31
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	6062      	str	r2, [r4, #4]
            result = 1;
 8007230:	2001      	movs	r0, #1
 8007232:	e7d2      	b.n	80071da <lwm2m_data_decode_int+0x20>
            utils_copyValue(&value, dataP->value.asBuffer.buffer, dataP->value.asBuffer.length);
 8007234:	68c1      	ldr	r1, [r0, #12]
 8007236:	a801      	add	r0, sp, #4
 8007238:	f7ff fe1b 	bl	8006e72 <utils_copyValue>
            *valueP = value;
 800723c:	9b01      	ldr	r3, [sp, #4]
 800723e:	17da      	asrs	r2, r3, #31
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	6062      	str	r2, [r4, #4]
            result = 1;
 8007244:	2001      	movs	r0, #1
 8007246:	e7c8      	b.n	80071da <lwm2m_data_decode_int+0x20>
            utils_copyValue(valueP, dataP->value.asBuffer.buffer, dataP->value.asBuffer.length);
 8007248:	68c1      	ldr	r1, [r0, #12]
 800724a:	4620      	mov	r0, r4
 800724c:	f7ff fe11 	bl	8006e72 <utils_copyValue>
            result = 1;
 8007250:	2001      	movs	r0, #1
            break;
 8007252:	e7c2      	b.n	80071da <lwm2m_data_decode_int+0x20>
    switch (dataP->type)
 8007254:	2000      	movs	r0, #0
 8007256:	e7c0      	b.n	80071da <lwm2m_data_decode_int+0x20>
    int result = 0;
 8007258:	2000      	movs	r0, #0
 800725a:	e7be      	b.n	80071da <lwm2m_data_decode_int+0x20>
 800725c:	2000      	movs	r0, #0
    return result;
 800725e:	e7bc      	b.n	80071da <lwm2m_data_decode_int+0x20>

08007260 <lwm2m_data_decode_uint>:
    dataP->value.asUnsigned = value;
}

int lwm2m_data_decode_uint(const lwm2m_data_t * dataP,
                           uint64_t * valueP)
{
 8007260:	b510      	push	{r4, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	460c      	mov	r4, r1
    int result = 0;

    LOG("Entering");
    switch (dataP->type)
 8007266:	7803      	ldrb	r3, [r0, #0]
 8007268:	3b04      	subs	r3, #4
 800726a:	2b03      	cmp	r3, #3
 800726c:	d844      	bhi.n	80072f8 <lwm2m_data_decode_uint+0x98>
 800726e:	e8df f003 	tbb	[pc, r3]
 8007272:	1711      	.short	0x1711
 8007274:	0a02      	.short	0x0a02
    {
    case LWM2M_TYPE_INTEGER:
        if (dataP->value.asInteger >= 0)
 8007276:	6882      	ldr	r2, [r0, #8]
 8007278:	68c3      	ldr	r3, [r0, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	db3e      	blt.n	80072fc <lwm2m_data_decode_uint+0x9c>
        {
            *valueP = dataP->value.asInteger;
 800727e:	600a      	str	r2, [r1, #0]
 8007280:	604b      	str	r3, [r1, #4]
            result = 1;
 8007282:	2001      	movs	r0, #1
 8007284:	e004      	b.n	8007290 <lwm2m_data_decode_uint+0x30>
        }
        break;

    case LWM2M_TYPE_UNSIGNED_INTEGER:
        *valueP = dataP->value.asUnsigned;
 8007286:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800728a:	e9c1 2300 	strd	r2, r3, [r1]
        result = 1;
 800728e:	2001      	movs	r0, #1
        break;
    }
    LOG_ARG("result: %d, value: %" PRIu64, result, *valueP);

    return result;
}
 8007290:	b002      	add	sp, #8
 8007292:	bd10      	pop	{r4, pc}
        result = utils_textToUInt(dataP->value.asBuffer.buffer, dataP->value.asBuffer.length, valueP);
 8007294:	460a      	mov	r2, r1
 8007296:	6881      	ldr	r1, [r0, #8]
 8007298:	68c0      	ldr	r0, [r0, #12]
 800729a:	f7ff f8dc 	bl	8006456 <utils_textToUInt>
        break;
 800729e:	e7f7      	b.n	8007290 <lwm2m_data_decode_uint+0x30>
        switch (dataP->value.asBuffer.length)
 80072a0:	6882      	ldr	r2, [r0, #8]
 80072a2:	1e53      	subs	r3, r2, #1
 80072a4:	2b07      	cmp	r3, #7
 80072a6:	d82b      	bhi.n	8007300 <lwm2m_data_decode_uint+0xa0>
 80072a8:	e8df f003 	tbb	[pc, r3]
 80072ac:	162a0b04 	.word	0x162a0b04
 80072b0:	202a2a2a 	.word	0x202a2a2a
            *valueP = (uint8_t)dataP->value.asBuffer.buffer[0];
 80072b4:	68c3      	ldr	r3, [r0, #12]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	2300      	movs	r3, #0
 80072bc:	6063      	str	r3, [r4, #4]
            result = 1;
 80072be:	2001      	movs	r0, #1
            break;
 80072c0:	e7e6      	b.n	8007290 <lwm2m_data_decode_uint+0x30>
            utils_copyValue(&value, dataP->value.asBuffer.buffer, dataP->value.asBuffer.length);
 80072c2:	68c1      	ldr	r1, [r0, #12]
 80072c4:	a801      	add	r0, sp, #4
 80072c6:	f7ff fdd4 	bl	8006e72 <utils_copyValue>
            *valueP = value;
 80072ca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80072ce:	6023      	str	r3, [r4, #0]
 80072d0:	2300      	movs	r3, #0
 80072d2:	6063      	str	r3, [r4, #4]
            result = 1;
 80072d4:	2001      	movs	r0, #1
 80072d6:	e7db      	b.n	8007290 <lwm2m_data_decode_uint+0x30>
            utils_copyValue(&value, dataP->value.asBuffer.buffer, dataP->value.asBuffer.length);
 80072d8:	68c1      	ldr	r1, [r0, #12]
 80072da:	a801      	add	r0, sp, #4
 80072dc:	f7ff fdc9 	bl	8006e72 <utils_copyValue>
            *valueP = value;
 80072e0:	9b01      	ldr	r3, [sp, #4]
 80072e2:	6023      	str	r3, [r4, #0]
 80072e4:	2300      	movs	r3, #0
 80072e6:	6063      	str	r3, [r4, #4]
            result = 1;
 80072e8:	2001      	movs	r0, #1
 80072ea:	e7d1      	b.n	8007290 <lwm2m_data_decode_uint+0x30>
            utils_copyValue(valueP, dataP->value.asBuffer.buffer, dataP->value.asBuffer.length);
 80072ec:	68c1      	ldr	r1, [r0, #12]
 80072ee:	4620      	mov	r0, r4
 80072f0:	f7ff fdbf 	bl	8006e72 <utils_copyValue>
            result = 1;
 80072f4:	2001      	movs	r0, #1
            break;
 80072f6:	e7cb      	b.n	8007290 <lwm2m_data_decode_uint+0x30>
    switch (dataP->type)
 80072f8:	2000      	movs	r0, #0
 80072fa:	e7c9      	b.n	8007290 <lwm2m_data_decode_uint+0x30>
    int result = 0;
 80072fc:	2000      	movs	r0, #0
 80072fe:	e7c7      	b.n	8007290 <lwm2m_data_decode_uint+0x30>
 8007300:	2000      	movs	r0, #0
    return result;
 8007302:	e7c5      	b.n	8007290 <lwm2m_data_decode_uint+0x30>

08007304 <lwm2m_data_encode_float>:

void lwm2m_data_encode_float(double value,
                             lwm2m_data_t * dataP)
{
    LOG_ARG("value: %f", value);
    dataP->type = LWM2M_TYPE_FLOAT;
 8007304:	2308      	movs	r3, #8
 8007306:	7013      	strb	r3, [r2, #0]
    dataP->value.asFloat = value;
 8007308:	e9c2 0102 	strd	r0, r1, [r2, #8]
}
 800730c:	4770      	bx	lr

0800730e <lwm2m_data_decode_float>:

int lwm2m_data_decode_float(const lwm2m_data_t * dataP,
                            double * valueP)
{
 800730e:	b510      	push	{r4, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	460c      	mov	r4, r1
    int result = 0;

    LOG("Entering");
    switch (dataP->type)
 8007314:	7803      	ldrb	r3, [r0, #0]
 8007316:	3b04      	subs	r3, #4
 8007318:	2b04      	cmp	r3, #4
 800731a:	d83a      	bhi.n	8007392 <lwm2m_data_decode_float+0x84>
 800731c:	e8df f003 	tbb	[pc, r3]
 8007320:	120a211a 	.word	0x120a211a
 8007324:	03          	.byte	0x03
 8007325:	00          	.byte	0x00
    {
    case LWM2M_TYPE_FLOAT:
        *valueP = dataP->value.asFloat;
 8007326:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800732a:	e9c1 2300 	strd	r2, r3, [r1]
        result = 1;
 800732e:	2001      	movs	r0, #1
    }

    LOG_ARG("result: %d, value: %f", result, *valueP);

    return result;
}
 8007330:	b002      	add	sp, #8
 8007332:	bd10      	pop	{r4, pc}
        *valueP = (double)dataP->value.asInteger;
 8007334:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
 8007338:	f7f9 f9bc 	bl	80006b4 <__aeabi_l2d>
 800733c:	e9c4 0100 	strd	r0, r1, [r4]
        result = 1;
 8007340:	2001      	movs	r0, #1
        break;
 8007342:	e7f5      	b.n	8007330 <lwm2m_data_decode_float+0x22>
        *valueP = (double)dataP->value.asUnsigned;
 8007344:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
 8007348:	f7f9 f9ac 	bl	80006a4 <__aeabi_ul2d>
 800734c:	e9c4 0100 	strd	r0, r1, [r4]
        result = 1;
 8007350:	2001      	movs	r0, #1
        break;
 8007352:	e7ed      	b.n	8007330 <lwm2m_data_decode_float+0x22>
        result = utils_textToFloat(dataP->value.asBuffer.buffer, dataP->value.asBuffer.length, valueP, false);
 8007354:	2300      	movs	r3, #0
 8007356:	460a      	mov	r2, r1
 8007358:	6881      	ldr	r1, [r0, #8]
 800735a:	68c0      	ldr	r0, [r0, #12]
 800735c:	f7ff f8ae 	bl	80064bc <utils_textToFloat>
        break;
 8007360:	e7e6      	b.n	8007330 <lwm2m_data_decode_float+0x22>
        switch (dataP->value.asBuffer.length)
 8007362:	6882      	ldr	r2, [r0, #8]
 8007364:	2a04      	cmp	r2, #4
 8007366:	d003      	beq.n	8007370 <lwm2m_data_decode_float+0x62>
 8007368:	2a08      	cmp	r2, #8
 800736a:	d00c      	beq.n	8007386 <lwm2m_data_decode_float+0x78>
 800736c:	2000      	movs	r0, #0
 800736e:	e7df      	b.n	8007330 <lwm2m_data_decode_float+0x22>
            utils_copyValue(&temp, dataP->value.asBuffer.buffer, dataP->value.asBuffer.length);
 8007370:	68c1      	ldr	r1, [r0, #12]
 8007372:	a801      	add	r0, sp, #4
 8007374:	f7ff fd7d 	bl	8006e72 <utils_copyValue>
            *valueP = temp;
 8007378:	9801      	ldr	r0, [sp, #4]
 800737a:	f7f9 f971 	bl	8000660 <__aeabi_f2d>
 800737e:	e9c4 0100 	strd	r0, r1, [r4]
            result = 1;
 8007382:	2001      	movs	r0, #1
        break;
 8007384:	e7d4      	b.n	8007330 <lwm2m_data_decode_float+0x22>
            utils_copyValue(valueP, dataP->value.asBuffer.buffer, dataP->value.asBuffer.length);
 8007386:	68c1      	ldr	r1, [r0, #12]
 8007388:	4620      	mov	r0, r4
 800738a:	f7ff fd72 	bl	8006e72 <utils_copyValue>
            result = 1;
 800738e:	2001      	movs	r0, #1
            break;
 8007390:	e7ce      	b.n	8007330 <lwm2m_data_decode_float+0x22>
    switch (dataP->type)
 8007392:	2000      	movs	r0, #0
    return result;
 8007394:	e7cc      	b.n	8007330 <lwm2m_data_decode_float+0x22>

08007396 <lwm2m_data_encode_bool>:

void lwm2m_data_encode_bool(bool value,
                            lwm2m_data_t * dataP)
{
    LOG_ARG("value: %s", value?"true":"false");
    dataP->type = LWM2M_TYPE_BOOLEAN;
 8007396:	2309      	movs	r3, #9
 8007398:	700b      	strb	r3, [r1, #0]
    dataP->value.asBoolean = value;
 800739a:	7208      	strb	r0, [r1, #8]
}
 800739c:	4770      	bx	lr

0800739e <lwm2m_data_decode_bool>:
                           bool * valueP)
{
    int result;

    LOG("Entering");
    switch (dataP->type)
 800739e:	7803      	ldrb	r3, [r0, #0]
 80073a0:	2b05      	cmp	r3, #5
 80073a2:	d01b      	beq.n	80073dc <lwm2m_data_decode_bool+0x3e>
 80073a4:	2b09      	cmp	r3, #9
 80073a6:	d003      	beq.n	80073b0 <lwm2m_data_decode_bool+0x12>
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	d005      	beq.n	80073b8 <lwm2m_data_decode_bool+0x1a>
 80073ac:	2000      	movs	r0, #0
 80073ae:	4770      	bx	lr
    {
    case LWM2M_TYPE_BOOLEAN:
        *valueP = dataP->value.asBoolean;
 80073b0:	7a03      	ldrb	r3, [r0, #8]
 80073b2:	700b      	strb	r3, [r1, #0]
        result = 1;
 80073b4:	2001      	movs	r0, #1
        break;
 80073b6:	4770      	bx	lr

    case LWM2M_TYPE_STRING:
        if (dataP->value.asBuffer.length != 1) return 0;
 80073b8:	6883      	ldr	r3, [r0, #8]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d11f      	bne.n	80073fe <lwm2m_data_decode_bool+0x60>

        switch (dataP->value.asBuffer.buffer[0])
 80073be:	68c3      	ldr	r3, [r0, #12]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	2b30      	cmp	r3, #48	; 0x30
 80073c4:	d003      	beq.n	80073ce <lwm2m_data_decode_bool+0x30>
 80073c6:	2b31      	cmp	r3, #49	; 0x31
 80073c8:	d005      	beq.n	80073d6 <lwm2m_data_decode_bool+0x38>
 80073ca:	2000      	movs	r0, #0
 80073cc:	4770      	bx	lr
        {
        case '0':
            *valueP = false;
 80073ce:	2300      	movs	r3, #0
 80073d0:	700b      	strb	r3, [r1, #0]
            result = 1;
 80073d2:	2001      	movs	r0, #1
            break;
 80073d4:	4770      	bx	lr
        case '1':
            *valueP = true;
 80073d6:	2001      	movs	r0, #1
 80073d8:	7008      	strb	r0, [r1, #0]
            result = 1;
            break;
 80073da:	4770      	bx	lr
            break;
        }
        break;

    case LWM2M_TYPE_OPAQUE:
        if (dataP->value.asBuffer.length != 1) return 0;
 80073dc:	6883      	ldr	r3, [r0, #8]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d10f      	bne.n	8007402 <lwm2m_data_decode_bool+0x64>

        switch (dataP->value.asBuffer.buffer[0])
 80073e2:	68c3      	ldr	r3, [r0, #12]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	b11b      	cbz	r3, 80073f0 <lwm2m_data_decode_bool+0x52>
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d005      	beq.n	80073f8 <lwm2m_data_decode_bool+0x5a>
 80073ec:	2000      	movs	r0, #0
 80073ee:	4770      	bx	lr
        {
        case 0:
            *valueP = false;
 80073f0:	2300      	movs	r3, #0
 80073f2:	700b      	strb	r3, [r1, #0]
            result = 1;
 80073f4:	2001      	movs	r0, #1
            break;
 80073f6:	4770      	bx	lr
        case 1:
            *valueP = true;
 80073f8:	2001      	movs	r0, #1
 80073fa:	7008      	strb	r0, [r1, #0]
            result = 1;
            break;
 80073fc:	4770      	bx	lr
        if (dataP->value.asBuffer.length != 1) return 0;
 80073fe:	2000      	movs	r0, #0
 8007400:	4770      	bx	lr
        if (dataP->value.asBuffer.length != 1) return 0;
 8007402:	2000      	movs	r0, #0
    }

    LOG_ARG("result: %d, value: %s", result, *valueP ? "true" : "false");

    return result;
}
 8007404:	4770      	bx	lr
	...

08007408 <lwm2m_data_serialize>:
int lwm2m_data_serialize(lwm2m_uri_t * uriP,
                         int size,
                         lwm2m_data_t * dataP,
                         lwm2m_media_type_t * formatP,
                         uint8_t ** bufferP)
{
 8007408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800740c:	b082      	sub	sp, #8
 800740e:	4680      	mov	r8, r0
 8007410:	460f      	mov	r7, r1
 8007412:	4616      	mov	r6, r2
 8007414:	461c      	mov	r4, r3
	do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, "\n\n Start lwm2m_data_serialize \r\n");} }while(0);
 8007416:	4b33      	ldr	r3, [pc, #204]	; (80074e4 <lwm2m_data_serialize+0xdc>)
 8007418:	2201      	movs	r2, #1
 800741a:	2100      	movs	r1, #0
 800741c:	2002      	movs	r0, #2
 800741e:	f00f fff5 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>

    LOG_URI(uriP);
    LOG_ARG("size: %d, formatP: %s", size, STR_MEDIA_TYPE(*formatP));

    // Check format
    if (*formatP == LWM2M_CONTENT_TEXT
 8007422:	8825      	ldrh	r5, [r4, #0]
 8007424:	b10d      	cbz	r5, 800742a <lwm2m_data_serialize+0x22>
     || *formatP == LWM2M_CONTENT_OPAQUE)
 8007426:	2d2a      	cmp	r5, #42	; 0x2a
 8007428:	d104      	bne.n	8007434 <lwm2m_data_serialize+0x2c>
    {
        if (size != 1
 800742a:	2f01      	cmp	r7, #1
 800742c:	d016      	beq.n	800745c <lwm2m_data_serialize+0x54>
         || dataP->type == LWM2M_TYPE_MULTIPLE_RESOURCE)
        {
#ifdef LWM2M_SUPPORT_SENML_JSON
            *formatP = LWM2M_CONTENT_SENML_JSON;
#elif defined(LWM2M_SUPPORT_JSON)
            *formatP = LWM2M_CONTENT_JSON;
 800742e:	f642 5317 	movw	r3, #11543	; 0x2d17
 8007432:	8023      	strh	r3, [r4, #0]
            return -1;
#endif
        }
    }

    if (*formatP == LWM2M_CONTENT_OPAQUE
 8007434:	8824      	ldrh	r4, [r4, #0]
 8007436:	2c2a      	cmp	r4, #42	; 0x2a
 8007438:	d021      	beq.n	800747e <lwm2m_data_serialize+0x76>
        return -1;
    }

    LOG_ARG("Final format: %s", STR_MEDIA_TYPE(*formatP));

    switch (*formatP)
 800743a:	2c2a      	cmp	r4, #42	; 0x2a
 800743c:	d043      	beq.n	80074c6 <lwm2m_data_serialize+0xbe>
 800743e:	d827      	bhi.n	8007490 <lwm2m_data_serialize+0x88>
 8007440:	2c00      	cmp	r4, #0
 8007442:	d03b      	beq.n	80074bc <lwm2m_data_serialize+0xb4>
 8007444:	2c28      	cmp	r4, #40	; 0x28
 8007446:	d120      	bne.n	800748a <lwm2m_data_serialize+0x82>
    }
#endif

#ifdef LWM2M_CLIENT_MODE
    case LWM2M_CONTENT_LINK:
        return discover_serialize(NULL, uriP, NULL, size, dataP, bufferP);
 8007448:	9b08      	ldr	r3, [sp, #32]
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	9600      	str	r6, [sp, #0]
 800744e:	463b      	mov	r3, r7
 8007450:	2200      	movs	r2, #0
 8007452:	4641      	mov	r1, r8
 8007454:	4610      	mov	r0, r2
 8007456:	f7fc fed3 	bl	8004200 <discover_serialize>
 800745a:	e02c      	b.n	80074b6 <lwm2m_data_serialize+0xae>
         || (uriP != NULL && !LWM2M_URI_IS_SET_RESOURCE(uriP))
 800745c:	f1b8 0f00 	cmp.w	r8, #0
 8007460:	d005      	beq.n	800746e <lwm2m_data_serialize+0x66>
 8007462:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8007466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800746a:	429a      	cmp	r2, r3
 800746c:	d0df      	beq.n	800742e <lwm2m_data_serialize+0x26>
         || dataP->type == LWM2M_TYPE_OBJECT
 800746e:	7833      	ldrb	r3, [r6, #0]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d0dc      	beq.n	800742e <lwm2m_data_serialize+0x26>
         || dataP->type == LWM2M_TYPE_OBJECT_INSTANCE
 8007474:	2b02      	cmp	r3, #2
 8007476:	d0da      	beq.n	800742e <lwm2m_data_serialize+0x26>
         || dataP->type == LWM2M_TYPE_MULTIPLE_RESOURCE)
 8007478:	2b03      	cmp	r3, #3
 800747a:	d1db      	bne.n	8007434 <lwm2m_data_serialize+0x2c>
 800747c:	e7d7      	b.n	800742e <lwm2m_data_serialize+0x26>
     && dataP->type != LWM2M_TYPE_OPAQUE)
 800747e:	7833      	ldrb	r3, [r6, #0]
 8007480:	2b05      	cmp	r3, #5
 8007482:	d0da      	beq.n	800743a <lwm2m_data_serialize+0x32>
        return -1;
 8007484:	f04f 30ff 	mov.w	r0, #4294967295
 8007488:	e015      	b.n	80074b6 <lwm2m_data_serialize+0xae>
    switch (*formatP)
 800748a:	f04f 30ff 	mov.w	r0, #4294967295
 800748e:	e012      	b.n	80074b6 <lwm2m_data_serialize+0xae>
 8007490:	f642 5317 	movw	r3, #11543	; 0x2d17
 8007494:	429c      	cmp	r4, r3
 8007496:	d10c      	bne.n	80074b2 <lwm2m_data_serialize+0xaa>
#ifdef LWM2M_SUPPORT_JSON
    case LWM2M_CONTENT_JSON:
#ifdef LWM2M_OLD_CONTENT_FORMAT_SUPPORT
    case LWM2M_CONTENT_JSON_OLD:
#endif
		do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, "\n\n Start json_serialize function \r\n");} }while(0);
 8007498:	4b13      	ldr	r3, [pc, #76]	; (80074e8 <lwm2m_data_serialize+0xe0>)
 800749a:	2201      	movs	r2, #1
 800749c:	2100      	movs	r1, #0
 800749e:	2002      	movs	r0, #2
 80074a0:	f00f ffb4 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
        return json_serialize(uriP, size, dataP, bufferP);
 80074a4:	9b08      	ldr	r3, [sp, #32]
 80074a6:	4632      	mov	r2, r6
 80074a8:	4639      	mov	r1, r7
 80074aa:	4640      	mov	r0, r8
 80074ac:	f000 f9c6 	bl	800783c <json_serialize>
 80074b0:	e001      	b.n	80074b6 <lwm2m_data_serialize+0xae>
    switch (*formatP)
 80074b2:	f04f 30ff 	mov.w	r0, #4294967295
#endif

    default:
        return -1;
    }
}
 80074b6:	b002      	add	sp, #8
 80074b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return prv_textSerialize(dataP, bufferP);
 80074bc:	9908      	ldr	r1, [sp, #32]
 80074be:	4630      	mov	r0, r6
 80074c0:	f7ff fd54 	bl	8006f6c <prv_textSerialize>
 80074c4:	e7f7      	b.n	80074b6 <lwm2m_data_serialize+0xae>
        *bufferP = (uint8_t *)lwm2m_malloc(dataP->value.asBuffer.length);
 80074c6:	68b0      	ldr	r0, [r6, #8]
 80074c8:	f001 fb46 	bl	8008b58 <lwm2m_malloc>
 80074cc:	9b08      	ldr	r3, [sp, #32]
 80074ce:	6018      	str	r0, [r3, #0]
        if (*bufferP == NULL) return -1;
 80074d0:	b128      	cbz	r0, 80074de <lwm2m_data_serialize+0xd6>
        memcpy(*bufferP, dataP->value.asBuffer.buffer, dataP->value.asBuffer.length);
 80074d2:	68b2      	ldr	r2, [r6, #8]
 80074d4:	68f1      	ldr	r1, [r6, #12]
 80074d6:	f010 fe4b 	bl	8018170 <memcpy>
        return (int)dataP->value.asBuffer.length;
 80074da:	68b0      	ldr	r0, [r6, #8]
 80074dc:	e7eb      	b.n	80074b6 <lwm2m_data_serialize+0xae>
        if (*bufferP == NULL) return -1;
 80074de:	f04f 30ff 	mov.w	r0, #4294967295
 80074e2:	e7e8      	b.n	80074b6 <lwm2m_data_serialize+0xae>
 80074e4:	0801b928 	.word	0x0801b928
 80074e8:	0801b94c 	.word	0x0801b94c

080074ec <prv_serializeValue>:
}

static int prv_serializeValue(lwm2m_data_t * tlvP,
                              uint8_t * buffer,
                              size_t bufferLen)
{
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	4606      	mov	r6, r0
 80074f2:	460c      	mov	r4, r1
 80074f4:	4615      	mov	r5, r2
    size_t res;
    size_t head;

    switch (tlvP->type)
 80074f6:	7803      	ldrb	r3, [r0, #0]
 80074f8:	3b04      	subs	r3, #4
 80074fa:	2b07      	cmp	r3, #7
 80074fc:	f200 80fe 	bhi.w	80076fc <prv_serializeValue+0x210>
 8007500:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007504:	00bd0008 	.word	0x00bd0008
 8007508:	004b002d 	.word	0x004b002d
 800750c:	009d0069 	.word	0x009d0069
 8007510:	000800de 	.word	0x000800de
    {
    case LWM2M_TYPE_STRING:
    case LWM2M_TYPE_CORE_LINK:
        if (bufferLen < JSON_ITEM_STRING_BEGIN_SIZE) return -1;
 8007514:	2d07      	cmp	r5, #7
 8007516:	f240 80f4 	bls.w	8007702 <prv_serializeValue+0x216>
        memcpy(buffer, JSON_ITEM_STRING_BEGIN, JSON_ITEM_STRING_BEGIN_SIZE);
 800751a:	4b87      	ldr	r3, [pc, #540]	; (8007738 <prv_serializeValue+0x24c>)
 800751c:	cb03      	ldmia	r3!, {r0, r1}
 800751e:	6020      	str	r0, [r4, #0]
 8007520:	6061      	str	r1, [r4, #4]
        head = JSON_ITEM_STRING_BEGIN_SIZE;

        res = json_escapeString(buffer + head,
 8007522:	68b3      	ldr	r3, [r6, #8]
 8007524:	68f2      	ldr	r2, [r6, #12]
 8007526:	f1a5 0108 	sub.w	r1, r5, #8
 800752a:	f104 0008 	add.w	r0, r4, #8
 800752e:	f000 fb8e 	bl	8007c4e <json_escapeString>
 8007532:	4603      	mov	r3, r0
                                bufferLen - head,
                                tlvP->value.asBuffer.buffer,
                                tlvP->value.asBuffer.length);
        if (tlvP->value.asBuffer.length != 0 && res == 0) return -1;
 8007534:	68b2      	ldr	r2, [r6, #8]
 8007536:	b112      	cbz	r2, 800753e <prv_serializeValue+0x52>
 8007538:	2800      	cmp	r0, #0
 800753a:	f000 80e5 	beq.w	8007708 <prv_serializeValue+0x21c>
        head += res;
 800753e:	f103 0108 	add.w	r1, r3, #8

        if (bufferLen - head < JSON_ITEM_STRING_END_SIZE) return -1;
 8007542:	1a6d      	subs	r5, r5, r1
 8007544:	2d02      	cmp	r5, #2
 8007546:	f240 80e2 	bls.w	800770e <prv_serializeValue+0x222>
        memcpy(buffer + head, JSON_ITEM_STRING_END, JSON_ITEM_STRING_END_SIZE);
 800754a:	1860      	adds	r0, r4, r1
 800754c:	4a7b      	ldr	r2, [pc, #492]	; (800773c <prv_serializeValue+0x250>)
 800754e:	8815      	ldrh	r5, [r2, #0]
 8007550:	7892      	ldrb	r2, [r2, #2]
 8007552:	5265      	strh	r5, [r4, r1]
 8007554:	7082      	strb	r2, [r0, #2]
        head += JSON_ITEM_STRING_END_SIZE;
 8007556:	f103 000b 	add.w	r0, r3, #11
    default:
        return -1;
    }

    return (int)head;
}
 800755a:	b004      	add	sp, #16
 800755c:	bd70      	pop	{r4, r5, r6, pc}
        if (0 == lwm2m_data_decode_int(tlvP, &value)) return -1;
 800755e:	a902      	add	r1, sp, #8
 8007560:	f7ff fe2b 	bl	80071ba <lwm2m_data_decode_int>
 8007564:	b1b0      	cbz	r0, 8007594 <prv_serializeValue+0xa8>
        if (bufferLen < JSON_ITEM_NUM_SIZE) return -1;
 8007566:	2d05      	cmp	r5, #5
 8007568:	d914      	bls.n	8007594 <prv_serializeValue+0xa8>
        memcpy(buffer, JSON_ITEM_NUM, JSON_ITEM_NUM_SIZE);
 800756a:	4b75      	ldr	r3, [pc, #468]	; (8007740 <prv_serializeValue+0x254>)
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	6020      	str	r0, [r4, #0]
 8007570:	889b      	ldrh	r3, [r3, #4]
 8007572:	80a3      	strh	r3, [r4, #4]
        res = utils_intToText(value, buffer + head, bufferLen - head);
 8007574:	1fab      	subs	r3, r5, #6
 8007576:	1da2      	adds	r2, r4, #6
 8007578:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800757c:	f7ff f814 	bl	80065a8 <utils_intToText>
        if (!res) return -1;
 8007580:	b140      	cbz	r0, 8007594 <prv_serializeValue+0xa8>
        head += res;
 8007582:	1d81      	adds	r1, r0, #6
        if (bufferLen - head < JSON_ITEM_NUM_END_SIZE) return -1;
 8007584:	1a6d      	subs	r5, r5, r1
 8007586:	2d01      	cmp	r5, #1
 8007588:	d904      	bls.n	8007594 <prv_serializeValue+0xa8>
        memcpy(buffer + head, JSON_ITEM_NUM_END, JSON_ITEM_NUM_END_SIZE);
 800758a:	4a6e      	ldr	r2, [pc, #440]	; (8007744 <prv_serializeValue+0x258>)
 800758c:	8812      	ldrh	r2, [r2, #0]
 800758e:	5262      	strh	r2, [r4, r1]
        head += JSON_ITEM_NUM_END_SIZE;
 8007590:	3008      	adds	r0, #8
    break;
 8007592:	e7e2      	b.n	800755a <prv_serializeValue+0x6e>
        if (0 == lwm2m_data_decode_int(tlvP, &value)) return -1;
 8007594:	f04f 30ff 	mov.w	r0, #4294967295
 8007598:	e7df      	b.n	800755a <prv_serializeValue+0x6e>
        if (0 == lwm2m_data_decode_uint(tlvP, &value)) return -1;
 800759a:	a902      	add	r1, sp, #8
 800759c:	f7ff fe60 	bl	8007260 <lwm2m_data_decode_uint>
 80075a0:	b1b0      	cbz	r0, 80075d0 <prv_serializeValue+0xe4>
        if (bufferLen < JSON_ITEM_NUM_SIZE) return -1;
 80075a2:	2d05      	cmp	r5, #5
 80075a4:	d914      	bls.n	80075d0 <prv_serializeValue+0xe4>
        memcpy(buffer, JSON_ITEM_NUM, JSON_ITEM_NUM_SIZE);
 80075a6:	4b66      	ldr	r3, [pc, #408]	; (8007740 <prv_serializeValue+0x254>)
 80075a8:	6818      	ldr	r0, [r3, #0]
 80075aa:	6020      	str	r0, [r4, #0]
 80075ac:	889b      	ldrh	r3, [r3, #4]
 80075ae:	80a3      	strh	r3, [r4, #4]
        res = utils_uintToText(value, buffer + head, bufferLen - head);
 80075b0:	1fab      	subs	r3, r5, #6
 80075b2:	1da2      	adds	r2, r4, #6
 80075b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075b8:	f7fe ffb8 	bl	800652c <utils_uintToText>
        if (!res) return -1;
 80075bc:	b140      	cbz	r0, 80075d0 <prv_serializeValue+0xe4>
        head += res;
 80075be:	1d81      	adds	r1, r0, #6
        if (bufferLen - head < JSON_ITEM_NUM_END_SIZE) return -1;
 80075c0:	1a6d      	subs	r5, r5, r1
 80075c2:	2d01      	cmp	r5, #1
 80075c4:	d904      	bls.n	80075d0 <prv_serializeValue+0xe4>
        memcpy(buffer + head, JSON_ITEM_NUM_END, JSON_ITEM_NUM_END_SIZE);
 80075c6:	4a5f      	ldr	r2, [pc, #380]	; (8007744 <prv_serializeValue+0x258>)
 80075c8:	8812      	ldrh	r2, [r2, #0]
 80075ca:	5262      	strh	r2, [r4, r1]
        head += JSON_ITEM_NUM_END_SIZE;
 80075cc:	3008      	adds	r0, #8
    break;
 80075ce:	e7c4      	b.n	800755a <prv_serializeValue+0x6e>
        if (0 == lwm2m_data_decode_uint(tlvP, &value)) return -1;
 80075d0:	f04f 30ff 	mov.w	r0, #4294967295
 80075d4:	e7c1      	b.n	800755a <prv_serializeValue+0x6e>
        if (0 == lwm2m_data_decode_float(tlvP, &value)) return -1;
 80075d6:	a902      	add	r1, sp, #8
 80075d8:	f7ff fe99 	bl	800730e <lwm2m_data_decode_float>
 80075dc:	b360      	cbz	r0, 8007638 <prv_serializeValue+0x14c>
        if (bufferLen < JSON_ITEM_NUM_SIZE) return -1;
 80075de:	2d05      	cmp	r5, #5
 80075e0:	d92a      	bls.n	8007638 <prv_serializeValue+0x14c>
        memcpy(buffer, JSON_ITEM_NUM, JSON_ITEM_NUM_SIZE);
 80075e2:	4b57      	ldr	r3, [pc, #348]	; (8007740 <prv_serializeValue+0x254>)
 80075e4:	6818      	ldr	r0, [r3, #0]
 80075e6:	6020      	str	r0, [r4, #0]
 80075e8:	889b      	ldrh	r3, [r3, #4]
 80075ea:	80a3      	strh	r3, [r4, #4]
        res = utils_floatToText(value, buffer + head, bufferLen - head, true);
 80075ec:	2301      	movs	r3, #1
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	1fab      	subs	r3, r5, #6
 80075f2:	1da2      	adds	r2, r4, #6
 80075f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075f8:	f7ff f812 	bl	8006620 <utils_floatToText>
        if (!res) return -1;
 80075fc:	4603      	mov	r3, r0
 80075fe:	b1d8      	cbz	r0, 8007638 <prv_serializeValue+0x14c>
        if (buffer[head] != '-' && !isdigit(buffer[head])) return -1;
 8007600:	79a2      	ldrb	r2, [r4, #6]
 8007602:	2a2d      	cmp	r2, #45	; 0x2d
 8007604:	d004      	beq.n	8007610 <prv_serializeValue+0x124>
 8007606:	4950      	ldr	r1, [pc, #320]	; (8007748 <prv_serializeValue+0x25c>)
 8007608:	5c51      	ldrb	r1, [r2, r1]
 800760a:	f011 0f04 	tst.w	r1, #4
 800760e:	d013      	beq.n	8007638 <prv_serializeValue+0x14c>
        if (res > 1 && buffer[head] == '-' && !isdigit(buffer[head+1])) return -1;
 8007610:	2b01      	cmp	r3, #1
 8007612:	d901      	bls.n	8007618 <prv_serializeValue+0x12c>
 8007614:	2a2d      	cmp	r2, #45	; 0x2d
 8007616:	d009      	beq.n	800762c <prv_serializeValue+0x140>
        head += res;
 8007618:	1d99      	adds	r1, r3, #6
        if (bufferLen - head < JSON_ITEM_NUM_END_SIZE) return -1;
 800761a:	1a6d      	subs	r5, r5, r1
 800761c:	2d01      	cmp	r5, #1
 800761e:	d90b      	bls.n	8007638 <prv_serializeValue+0x14c>
        memcpy(buffer + head, JSON_ITEM_NUM_END, JSON_ITEM_NUM_END_SIZE);
 8007620:	4a48      	ldr	r2, [pc, #288]	; (8007744 <prv_serializeValue+0x258>)
 8007622:	8812      	ldrh	r2, [r2, #0]
 8007624:	5262      	strh	r2, [r4, r1]
        head += JSON_ITEM_NUM_END_SIZE;
 8007626:	f103 0008 	add.w	r0, r3, #8
    break;
 800762a:	e796      	b.n	800755a <prv_serializeValue+0x6e>
        if (res > 1 && buffer[head] == '-' && !isdigit(buffer[head+1])) return -1;
 800762c:	79e1      	ldrb	r1, [r4, #7]
 800762e:	4a46      	ldr	r2, [pc, #280]	; (8007748 <prv_serializeValue+0x25c>)
 8007630:	5c8a      	ldrb	r2, [r1, r2]
 8007632:	f012 0f04 	tst.w	r2, #4
 8007636:	d1ef      	bne.n	8007618 <prv_serializeValue+0x12c>
        if (0 == lwm2m_data_decode_float(tlvP, &value)) return -1;
 8007638:	f04f 30ff 	mov.w	r0, #4294967295
 800763c:	e78d      	b.n	800755a <prv_serializeValue+0x6e>
        if (0 == lwm2m_data_decode_bool(tlvP, &value)) return -1;
 800763e:	a902      	add	r1, sp, #8
 8007640:	f7ff fead 	bl	800739e <lwm2m_data_decode_bool>
 8007644:	b1c0      	cbz	r0, 8007678 <prv_serializeValue+0x18c>
        if (value == true)
 8007646:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800764a:	b153      	cbz	r3, 8007662 <prv_serializeValue+0x176>
            if (bufferLen < JSON_ITEM_BOOL_TRUE_SIZE) return -1;
 800764c:	2d0c      	cmp	r5, #12
 800764e:	d913      	bls.n	8007678 <prv_serializeValue+0x18c>
            memcpy(buffer, JSON_ITEM_BOOL_TRUE, JSON_ITEM_BOOL_TRUE_SIZE);
 8007650:	4b3e      	ldr	r3, [pc, #248]	; (800774c <prv_serializeValue+0x260>)
 8007652:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007654:	6020      	str	r0, [r4, #0]
 8007656:	6061      	str	r1, [r4, #4]
 8007658:	60a2      	str	r2, [r4, #8]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	7323      	strb	r3, [r4, #12]
            head = JSON_ITEM_BOOL_TRUE_SIZE;
 800765e:	200d      	movs	r0, #13
 8007660:	e77b      	b.n	800755a <prv_serializeValue+0x6e>
            if (bufferLen < JSON_ITEM_BOOL_FALSE_SIZE) return -1;
 8007662:	2d0d      	cmp	r5, #13
 8007664:	d908      	bls.n	8007678 <prv_serializeValue+0x18c>
            memcpy(buffer, JSON_ITEM_BOOL_FALSE, JSON_ITEM_BOOL_FALSE_SIZE);
 8007666:	4b3a      	ldr	r3, [pc, #232]	; (8007750 <prv_serializeValue+0x264>)
 8007668:	cb07      	ldmia	r3!, {r0, r1, r2}
 800766a:	6020      	str	r0, [r4, #0]
 800766c:	6061      	str	r1, [r4, #4]
 800766e:	60a2      	str	r2, [r4, #8]
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	81a3      	strh	r3, [r4, #12]
            head = JSON_ITEM_BOOL_FALSE_SIZE;
 8007674:	200e      	movs	r0, #14
    break;
 8007676:	e770      	b.n	800755a <prv_serializeValue+0x6e>
        if (0 == lwm2m_data_decode_bool(tlvP, &value)) return -1;
 8007678:	f04f 30ff 	mov.w	r0, #4294967295
 800767c:	e76d      	b.n	800755a <prv_serializeValue+0x6e>
        if (bufferLen < JSON_ITEM_STRING_BEGIN_SIZE) return -1;
 800767e:	2d07      	cmp	r5, #7
 8007680:	d948      	bls.n	8007714 <prv_serializeValue+0x228>
        memcpy(buffer, JSON_ITEM_STRING_BEGIN, JSON_ITEM_STRING_BEGIN_SIZE);
 8007682:	4b2d      	ldr	r3, [pc, #180]	; (8007738 <prv_serializeValue+0x24c>)
 8007684:	cb03      	ldmia	r3!, {r0, r1}
 8007686:	6020      	str	r0, [r4, #0]
 8007688:	6061      	str	r1, [r4, #4]
        res = utils_base64Encode(tlvP->value.asBuffer.buffer, tlvP->value.asBuffer.length, buffer+head, bufferLen - head);
 800768a:	f1a5 0308 	sub.w	r3, r5, #8
 800768e:	f104 0208 	add.w	r2, r4, #8
 8007692:	68b1      	ldr	r1, [r6, #8]
 8007694:	68f0      	ldr	r0, [r6, #12]
 8007696:	f7ff fbfb 	bl	8006e90 <utils_base64Encode>
 800769a:	4603      	mov	r3, r0
        if (tlvP->value.asBuffer.length != 0 && res == 0) return -1;
 800769c:	68b2      	ldr	r2, [r6, #8]
 800769e:	b10a      	cbz	r2, 80076a4 <prv_serializeValue+0x1b8>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d03a      	beq.n	800771a <prv_serializeValue+0x22e>
        head += res;
 80076a4:	f103 0108 	add.w	r1, r3, #8
        if (bufferLen - head < JSON_ITEM_STRING_END_SIZE) return -1;
 80076a8:	1a6d      	subs	r5, r5, r1
 80076aa:	2d02      	cmp	r5, #2
 80076ac:	d938      	bls.n	8007720 <prv_serializeValue+0x234>
        memcpy(buffer + head, JSON_ITEM_STRING_END, JSON_ITEM_STRING_END_SIZE);
 80076ae:	1860      	adds	r0, r4, r1
 80076b0:	4a22      	ldr	r2, [pc, #136]	; (800773c <prv_serializeValue+0x250>)
 80076b2:	8815      	ldrh	r5, [r2, #0]
 80076b4:	7892      	ldrb	r2, [r2, #2]
 80076b6:	5265      	strh	r5, [r4, r1]
 80076b8:	7082      	strb	r2, [r0, #2]
        head += JSON_ITEM_STRING_END_SIZE;
 80076ba:	f103 000b 	add.w	r0, r3, #11
        break;
 80076be:	e74c      	b.n	800755a <prv_serializeValue+0x6e>
        if (bufferLen < JSON_ITEM_OBJECT_LINK_BEGIN_SIZE) return -1;
 80076c0:	2d07      	cmp	r5, #7
 80076c2:	d930      	bls.n	8007726 <prv_serializeValue+0x23a>
        memcpy(buffer, JSON_ITEM_OBJECT_LINK_BEGIN, JSON_ITEM_OBJECT_LINK_BEGIN_SIZE);
 80076c4:	4b23      	ldr	r3, [pc, #140]	; (8007754 <prv_serializeValue+0x268>)
 80076c6:	cb03      	ldmia	r3!, {r0, r1}
 80076c8:	6020      	str	r0, [r4, #0]
 80076ca:	6061      	str	r1, [r4, #4]
        res = utils_objLinkToText(tlvP->value.asObjLink.objectId,
 80076cc:	f1a5 0308 	sub.w	r3, r5, #8
 80076d0:	f104 0208 	add.w	r2, r4, #8
 80076d4:	8971      	ldrh	r1, [r6, #10]
 80076d6:	8930      	ldrh	r0, [r6, #8]
 80076d8:	f7ff fafc 	bl	8006cd4 <utils_objLinkToText>
        if (!res) return -1;
 80076dc:	4603      	mov	r3, r0
 80076de:	b328      	cbz	r0, 800772c <prv_serializeValue+0x240>
        head += res;
 80076e0:	f100 0208 	add.w	r2, r0, #8
        if (bufferLen - head < JSON_ITEM_OBJECT_LINK_END_SIZE) return -1;
 80076e4:	1aad      	subs	r5, r5, r2
 80076e6:	2d02      	cmp	r5, #2
 80076e8:	d923      	bls.n	8007732 <prv_serializeValue+0x246>
        memcpy(buffer + head, JSON_ITEM_OBJECT_LINK_END, JSON_ITEM_OBJECT_LINK_END_SIZE);
 80076ea:	18a0      	adds	r0, r4, r2
 80076ec:	4913      	ldr	r1, [pc, #76]	; (800773c <prv_serializeValue+0x250>)
 80076ee:	880d      	ldrh	r5, [r1, #0]
 80076f0:	7889      	ldrb	r1, [r1, #2]
 80076f2:	52a5      	strh	r5, [r4, r2]
 80076f4:	7081      	strb	r1, [r0, #2]
        head += JSON_ITEM_OBJECT_LINK_END_SIZE;
 80076f6:	f103 000b 	add.w	r0, r3, #11
    return (int)head;
 80076fa:	e72e      	b.n	800755a <prv_serializeValue+0x6e>
    switch (tlvP->type)
 80076fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007700:	e72b      	b.n	800755a <prv_serializeValue+0x6e>
        if (bufferLen < JSON_ITEM_STRING_BEGIN_SIZE) return -1;
 8007702:	f04f 30ff 	mov.w	r0, #4294967295
 8007706:	e728      	b.n	800755a <prv_serializeValue+0x6e>
        if (tlvP->value.asBuffer.length != 0 && res == 0) return -1;
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
 800770c:	e725      	b.n	800755a <prv_serializeValue+0x6e>
        if (bufferLen - head < JSON_ITEM_STRING_END_SIZE) return -1;
 800770e:	f04f 30ff 	mov.w	r0, #4294967295
 8007712:	e722      	b.n	800755a <prv_serializeValue+0x6e>
        if (bufferLen < JSON_ITEM_STRING_BEGIN_SIZE) return -1;
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	e71f      	b.n	800755a <prv_serializeValue+0x6e>
        if (tlvP->value.asBuffer.length != 0 && res == 0) return -1;
 800771a:	f04f 30ff 	mov.w	r0, #4294967295
 800771e:	e71c      	b.n	800755a <prv_serializeValue+0x6e>
        if (bufferLen - head < JSON_ITEM_STRING_END_SIZE) return -1;
 8007720:	f04f 30ff 	mov.w	r0, #4294967295
 8007724:	e719      	b.n	800755a <prv_serializeValue+0x6e>
        if (bufferLen < JSON_ITEM_OBJECT_LINK_BEGIN_SIZE) return -1;
 8007726:	f04f 30ff 	mov.w	r0, #4294967295
 800772a:	e716      	b.n	800755a <prv_serializeValue+0x6e>
        if (!res) return -1;
 800772c:	f04f 30ff 	mov.w	r0, #4294967295
 8007730:	e713      	b.n	800755a <prv_serializeValue+0x6e>
        if (bufferLen - head < JSON_ITEM_OBJECT_LINK_END_SIZE) return -1;
 8007732:	f04f 30ff 	mov.w	r0, #4294967295
 8007736:	e710      	b.n	800755a <prv_serializeValue+0x6e>
 8007738:	0801b970 	.word	0x0801b970
 800773c:	0801b97c 	.word	0x0801b97c
 8007740:	0801b980 	.word	0x0801b980
 8007744:	0801b9a4 	.word	0x0801b9a4
 8007748:	0801c53c 	.word	0x0801c53c
 800774c:	0801b988 	.word	0x0801b988
 8007750:	0801b998 	.word	0x0801b998
 8007754:	0801b9a8 	.word	0x0801b9a8

08007758 <prv_serializeData>:
static int prv_serializeData(lwm2m_data_t * tlvP,
                             const uint8_t * parentUriStr,
                             size_t parentUriLen,
                             uint8_t * buffer,
                             size_t bufferLen)
{
 8007758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800775c:	b089      	sub	sp, #36	; 0x24
 800775e:	4605      	mov	r5, r0
 8007760:	4614      	mov	r4, r2
 8007762:	461e      	mov	r6, r3
 8007764:	9f10      	ldr	r7, [sp, #64]	; 0x40
    int head;
    int res;

    head = 0;

    switch (tlvP->type)
 8007766:	7803      	ldrb	r3, [r0, #0]
 8007768:	3b01      	subs	r3, #1
 800776a:	2b02      	cmp	r3, #2
 800776c:	d831      	bhi.n	80077d2 <prv_serializeData+0x7a>
    {
        uint8_t uriStr[URI_MAX_STRING_LEN];
        size_t uriLen;
        size_t index;

        if (parentUriLen > 0)
 800776e:	b122      	cbz	r2, 800777a <prv_serializeData+0x22>
        {
            if (URI_MAX_STRING_LEN < parentUriLen) return -1;
 8007770:	2a18      	cmp	r2, #24
 8007772:	d82b      	bhi.n	80077cc <prv_serializeData+0x74>
            memcpy(uriStr, parentUriStr, parentUriLen);
 8007774:	a802      	add	r0, sp, #8
 8007776:	f010 fcfb 	bl	8018170 <memcpy>
        }
        else
        {
            uriLen = 0;
        }
        res = utils_intToText(tlvP->id, uriStr + uriLen, URI_MAX_STRING_LEN - uriLen);
 800777a:	f1c4 0318 	rsb	r3, r4, #24
 800777e:	aa02      	add	r2, sp, #8
 8007780:	4422      	add	r2, r4
 8007782:	8868      	ldrh	r0, [r5, #2]
 8007784:	2100      	movs	r1, #0
 8007786:	f7fe ff0f 	bl	80065a8 <utils_intToText>
        if (res <= 0) return -1;
 800778a:	2800      	cmp	r0, #0
 800778c:	dd1e      	ble.n	80077cc <prv_serializeData+0x74>
        uriLen += res;
 800778e:	4404      	add	r4, r0
        uriStr[uriLen] = '/';
 8007790:	f104 0320 	add.w	r3, r4, #32
 8007794:	446b      	add	r3, sp
 8007796:	222f      	movs	r2, #47	; 0x2f
 8007798:	f803 2c18 	strb.w	r2, [r3, #-24]
        uriLen++;
 800779c:	f104 0901 	add.w	r9, r4, #1

        head = 0;
        for (index = 0 ; index < tlvP->value.asChildren.count; index++)
 80077a0:	f04f 0800 	mov.w	r8, #0
        head = 0;
 80077a4:	4644      	mov	r4, r8
        for (index = 0 ; index < tlvP->value.asChildren.count; index++)
 80077a6:	68ab      	ldr	r3, [r5, #8]
 80077a8:	4543      	cmp	r3, r8
 80077aa:	d932      	bls.n	8007812 <prv_serializeData+0xba>
        {
            res = prv_serializeData(tlvP->value.asChildren.array + index, uriStr, uriLen, buffer + head, bufferLen - head);
 80077ac:	68e8      	ldr	r0, [r5, #12]
 80077ae:	1b3b      	subs	r3, r7, r4
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	1933      	adds	r3, r6, r4
 80077b4:	464a      	mov	r2, r9
 80077b6:	a902      	add	r1, sp, #8
 80077b8:	eb00 1008 	add.w	r0, r0, r8, lsl #4
 80077bc:	f7ff ffcc 	bl	8007758 <prv_serializeData>
            if (res < 0) return -1;
 80077c0:	2800      	cmp	r0, #0
 80077c2:	db03      	blt.n	80077cc <prv_serializeData+0x74>
            head += res;
 80077c4:	4404      	add	r4, r0
        for (index = 0 ; index < tlvP->value.asChildren.count; index++)
 80077c6:	f108 0801 	add.w	r8, r8, #1
 80077ca:	e7ec      	b.n	80077a6 <prv_serializeData+0x4e>
            if (URI_MAX_STRING_LEN < parentUriLen) return -1;
 80077cc:	f04f 34ff 	mov.w	r4, #4294967295
 80077d0:	e01f      	b.n	8007812 <prv_serializeData+0xba>
        }
    }
    break;

    default:
        if (bufferLen < JSON_RES_ITEM_URI_SIZE) return -1;
 80077d2:	2f05      	cmp	r7, #5
 80077d4:	d923      	bls.n	800781e <prv_serializeData+0xc6>
        memcpy(buffer, JSON_RES_ITEM_URI, JSON_RES_ITEM_URI_SIZE);
 80077d6:	4b18      	ldr	r3, [pc, #96]	; (8007838 <prv_serializeData+0xe0>)
 80077d8:	6818      	ldr	r0, [r3, #0]
 80077da:	6030      	str	r0, [r6, #0]
 80077dc:	889b      	ldrh	r3, [r3, #4]
 80077de:	80b3      	strh	r3, [r6, #4]
        head = JSON_RES_ITEM_URI_SIZE;

        if (parentUriLen > 0)
 80077e0:	b1da      	cbz	r2, 800781a <prv_serializeData+0xc2>
        {
            if (bufferLen - head < parentUriLen) return -1;
 80077e2:	1fbb      	subs	r3, r7, #6
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d31d      	bcc.n	8007824 <prv_serializeData+0xcc>
            memcpy(buffer + head, parentUriStr, parentUriLen);
 80077e8:	1db0      	adds	r0, r6, #6
 80077ea:	f010 fcc1 	bl	8018170 <memcpy>
            head += parentUriLen;
 80077ee:	3406      	adds	r4, #6
        }

        res = utils_intToText(tlvP->id, buffer + head, bufferLen - head);
 80077f0:	1b3b      	subs	r3, r7, r4
 80077f2:	1932      	adds	r2, r6, r4
 80077f4:	8868      	ldrh	r0, [r5, #2]
 80077f6:	2100      	movs	r1, #0
 80077f8:	f7fe fed6 	bl	80065a8 <utils_intToText>
        if (res <= 0) return -1;
 80077fc:	2800      	cmp	r0, #0
 80077fe:	dd14      	ble.n	800782a <prv_serializeData+0xd2>
        head += res;
 8007800:	4404      	add	r4, r0

        res = prv_serializeValue(tlvP, buffer + head, bufferLen - head);
 8007802:	1b3a      	subs	r2, r7, r4
 8007804:	1931      	adds	r1, r6, r4
 8007806:	4628      	mov	r0, r5
 8007808:	f7ff fe70 	bl	80074ec <prv_serializeValue>
        if (res < 0) return -1;
 800780c:	2800      	cmp	r0, #0
 800780e:	db0f      	blt.n	8007830 <prv_serializeData+0xd8>
        head += res;
 8007810:	4404      	add	r4, r0
        break;
    }

    return head;
}
 8007812:	4620      	mov	r0, r4
 8007814:	b009      	add	sp, #36	; 0x24
 8007816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        head = JSON_RES_ITEM_URI_SIZE;
 800781a:	2406      	movs	r4, #6
 800781c:	e7e8      	b.n	80077f0 <prv_serializeData+0x98>
        if (bufferLen < JSON_RES_ITEM_URI_SIZE) return -1;
 800781e:	f04f 34ff 	mov.w	r4, #4294967295
 8007822:	e7f6      	b.n	8007812 <prv_serializeData+0xba>
            if (bufferLen - head < parentUriLen) return -1;
 8007824:	f04f 34ff 	mov.w	r4, #4294967295
 8007828:	e7f3      	b.n	8007812 <prv_serializeData+0xba>
        if (res <= 0) return -1;
 800782a:	f04f 34ff 	mov.w	r4, #4294967295
 800782e:	e7f0      	b.n	8007812 <prv_serializeData+0xba>
        if (res < 0) return -1;
 8007830:	f04f 34ff 	mov.w	r4, #4294967295
 8007834:	e7ed      	b.n	8007812 <prv_serializeData+0xba>
 8007836:	bf00      	nop
 8007838:	0801b9b4 	.word	0x0801b9b4

0800783c <json_serialize>:

int json_serialize(lwm2m_uri_t * uriP,
                   int size,
                   lwm2m_data_t * tlvP,
                   uint8_t ** bufferP)
{
 800783c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007840:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
 8007844:	4606      	mov	r6, r0
 8007846:	4617      	mov	r7, r2
 8007848:	461d      	mov	r5, r3
    lwm2m_uri_t uri;
#endif

    LOG_ARG("size: %d", size);
    LOG_URI(uriP);
    if (size != 0 && tlvP == NULL) return -1;
 800784a:	4688      	mov	r8, r1
 800784c:	b111      	cbz	r1, 8007854 <json_serialize+0x18>
 800784e:	2a00      	cmp	r2, #0
 8007850:	f000 80c8 	beq.w	80079e4 <json_serialize+0x1a8>

#ifndef LWM2M_VERSION_1_0
    if (uriP && LWM2M_URI_IS_SET_RESOURCE_INSTANCE(uriP))
 8007854:	b126      	cbz	r6, 8007860 <json_serialize+0x24>
 8007856:	88f2      	ldrh	r2, [r6, #6]
 8007858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800785c:	429a      	cmp	r2, r3
 800785e:	d140      	bne.n	80078e2 <json_serialize+0xa6>
        uri.resourceInstanceId = LWM2M_MAX_ID;
        uriP = &uri;
    }
#endif

    baseUriLen = uri_toString(uriP, baseUriStr, URI_MAX_STRING_LEN, &baseLevel);
 8007860:	f10d 0316 	add.w	r3, sp, #22
 8007864:	2218      	movs	r2, #24
 8007866:	eb0d 0102 	add.w	r1, sp, r2
 800786a:	4630      	mov	r0, r6
 800786c:	f7fe fcea 	bl	8006244 <uri_toString>
    if (baseUriLen < 0) return -1;
 8007870:	1e04      	subs	r4, r0, #0
 8007872:	f2c0 80ba 	blt.w	80079ea <json_serialize+0x1ae>

    num = json_findAndCheckData(uriP, baseLevel, size, tlvP, &targetP, &rootLevel);
 8007876:	f10d 0317 	add.w	r3, sp, #23
 800787a:	9301      	str	r3, [sp, #4]
 800787c:	ab04      	add	r3, sp, #16
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	463b      	mov	r3, r7
 8007882:	4642      	mov	r2, r8
 8007884:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8007888:	4630      	mov	r0, r6
 800788a:	f000 fa94 	bl	8007db6 <json_findAndCheckData>
    if (num < 0) return -1;
 800788e:	1e06      	subs	r6, r0, #0
 8007890:	f2c0 80ae 	blt.w	80079f0 <json_serialize+0x1b4>

    if (baseLevel >= URI_DEPTH_RESOURCE
 8007894:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d903      	bls.n	80078a4 <json_serialize+0x68>
     && rootLevel == baseLevel
 800789c:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d028      	beq.n	80078f6 <json_serialize+0xba>
        /* Remove the ID from the base name */
        while (baseUriLen > 1 && baseUriStr[baseUriLen - 1] != '/') baseUriLen--;
        if (baseUriLen > 1 && baseUriStr[baseUriLen - 1] == '/') baseUriLen--;
    }

    while (num == 1
 80078a4:	2e01      	cmp	r6, #1
 80078a6:	d13a      	bne.n	800791e <json_serialize+0xe2>
        && (targetP->type == LWM2M_TYPE_OBJECT
 80078a8:	9904      	ldr	r1, [sp, #16]
 80078aa:	780a      	ldrb	r2, [r1, #0]
         || targetP->type == LWM2M_TYPE_OBJECT_INSTANCE
         || targetP->type == LWM2M_TYPE_MULTIPLE_RESOURCE))
 80078ac:	3a01      	subs	r2, #1
 80078ae:	b2d2      	uxtb	r2, r2
        && (targetP->type == LWM2M_TYPE_OBJECT
 80078b0:	2a02      	cmp	r2, #2
 80078b2:	d834      	bhi.n	800791e <json_serialize+0xe2>
    {
        int res;

        if (baseUriLen >= URI_MAX_STRING_LEN -1) return 0;
 80078b4:	2c16      	cmp	r4, #22
 80078b6:	f300 809e 	bgt.w	80079f6 <json_serialize+0x1ba>
        baseUriStr[baseUriLen++] = '/';
 80078ba:	1c66      	adds	r6, r4, #1
 80078bc:	aa06      	add	r2, sp, #24
 80078be:	232f      	movs	r3, #47	; 0x2f
 80078c0:	5513      	strb	r3, [r2, r4]
        res = utils_intToText(targetP->id, baseUriStr + baseUriLen, URI_MAX_STRING_LEN - baseUriLen);
 80078c2:	f1c4 0317 	rsb	r3, r4, #23
 80078c6:	4432      	add	r2, r6
 80078c8:	8848      	ldrh	r0, [r1, #2]
 80078ca:	2100      	movs	r1, #0
 80078cc:	f7fe fe6c 	bl	80065a8 <utils_intToText>
        if (res <= 0) return 0;
 80078d0:	2800      	cmp	r0, #0
 80078d2:	f340 8095 	ble.w	8007a00 <json_serialize+0x1c4>
        baseUriLen += res;
 80078d6:	1834      	adds	r4, r6, r0
        num = targetP->value.asChildren.count;
 80078d8:	9b04      	ldr	r3, [sp, #16]
 80078da:	689e      	ldr	r6, [r3, #8]
        targetP = targetP->value.asChildren.array;
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	9304      	str	r3, [sp, #16]
 80078e0:	e7e0      	b.n	80078a4 <json_serialize+0x68>
        memcpy(&uri, uriP, sizeof(lwm2m_uri_t));
 80078e2:	ab02      	add	r3, sp, #8
 80078e4:	6830      	ldr	r0, [r6, #0]
 80078e6:	6871      	ldr	r1, [r6, #4]
 80078e8:	c303      	stmia	r3!, {r0, r1}
        uri.resourceInstanceId = LWM2M_MAX_ID;
 80078ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078ee:	f8ad 300e 	strh.w	r3, [sp, #14]
        uriP = &uri;
 80078f2:	ae02      	add	r6, sp, #8
 80078f4:	e7b4      	b.n	8007860 <json_serialize+0x24>
     && baseUriLen > 1)
 80078f6:	2c01      	cmp	r4, #1
 80078f8:	dc01      	bgt.n	80078fe <json_serialize+0xc2>
 80078fa:	e7d3      	b.n	80078a4 <json_serialize+0x68>
        while (baseUriLen > 1 && baseUriStr[baseUriLen - 1] != '/') baseUriLen--;
 80078fc:	461c      	mov	r4, r3
 80078fe:	2c01      	cmp	r4, #1
 8007900:	dd04      	ble.n	800790c <json_serialize+0xd0>
 8007902:	1e63      	subs	r3, r4, #1
 8007904:	aa06      	add	r2, sp, #24
 8007906:	5cd2      	ldrb	r2, [r2, r3]
 8007908:	2a2f      	cmp	r2, #47	; 0x2f
 800790a:	d1f7      	bne.n	80078fc <json_serialize+0xc0>
        if (baseUriLen > 1 && baseUriStr[baseUriLen - 1] == '/') baseUriLen--;
 800790c:	2c01      	cmp	r4, #1
 800790e:	ddc9      	ble.n	80078a4 <json_serialize+0x68>
 8007910:	1e63      	subs	r3, r4, #1
 8007912:	aa06      	add	r2, sp, #24
 8007914:	5cd2      	ldrb	r2, [r2, r3]
 8007916:	2a2f      	cmp	r2, #47	; 0x2f
 8007918:	d1c4      	bne.n	80078a4 <json_serialize+0x68>
 800791a:	461c      	mov	r4, r3
 800791c:	e7c2      	b.n	80078a4 <json_serialize+0x68>
    }

    if (baseUriLen > 0)
 800791e:	2c00      	cmp	r4, #0
 8007920:	dd3d      	ble.n	800799e <json_serialize+0x162>
    {
        if (baseUriLen >= URI_MAX_STRING_LEN -1) return 0;
 8007922:	2c16      	cmp	r4, #22
 8007924:	dd01      	ble.n	800792a <json_serialize+0xee>
 8007926:	2000      	movs	r0, #0
 8007928:	e066      	b.n	80079f8 <json_serialize+0x1bc>
        baseUriStr[baseUriLen++] = '/';
 800792a:	f10d 0c18 	add.w	ip, sp, #24
 800792e:	232f      	movs	r3, #47	; 0x2f
 8007930:	f80c 3004 	strb.w	r3, [ip, r4]
        memcpy(bufferJSON, JSON_BN_HEADER_1, JSON_BN_HEADER_1_SIZE);
 8007934:	af0c      	add	r7, sp, #48	; 0x30
 8007936:	4b36      	ldr	r3, [pc, #216]	; (8007a10 <json_serialize+0x1d4>)
 8007938:	e893 0003 	ldmia.w	r3, {r0, r1}
 800793c:	900c      	str	r0, [sp, #48]	; 0x30
 800793e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
 8007942:	0c09      	lsrs	r1, r1, #16
 8007944:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
        head = JSON_BN_HEADER_1_SIZE;
        memcpy(bufferJSON + head, baseUriStr, baseUriLen);
 8007948:	1c62      	adds	r2, r4, #1
 800794a:	4661      	mov	r1, ip
 800794c:	f10d 0037 	add.w	r0, sp, #55	; 0x37
 8007950:	f010 fc0e 	bl	8018170 <memcpy>
        head += baseUriLen;
 8007954:	f104 0108 	add.w	r1, r4, #8
        memcpy(bufferJSON + head, JSON_BN_HEADER_2, JSON_BN_HEADER_2_SIZE);
 8007958:	187a      	adds	r2, r7, r1
 800795a:	4b2e      	ldr	r3, [pc, #184]	; (8007a14 <json_serialize+0x1d8>)
 800795c:	6818      	ldr	r0, [r3, #0]
 800795e:	5078      	str	r0, [r7, r1]
 8007960:	8899      	ldrh	r1, [r3, #4]
 8007962:	799b      	ldrb	r3, [r3, #6]
 8007964:	8091      	strh	r1, [r2, #4]
 8007966:	7193      	strb	r3, [r2, #6]
        head += JSON_BN_HEADER_2_SIZE;
 8007968:	340f      	adds	r4, #15
    size_t parentUriLen = 0;
 800796a:	f04f 0800 	mov.w	r8, #0
    const uint8_t *parentUriStr = NULL;
 800796e:	46c1      	mov	r9, r8
        head = JSON_HEADER_SIZE;
        parentUriStr = (const uint8_t *)"/";
        parentUriLen = 1;
    }

    for (index = 0 ; index < num && head < PRV_JSON_BUFFER_SIZE ; index++)
 8007970:	2700      	movs	r7, #0
 8007972:	42b7      	cmp	r7, r6
 8007974:	da1f      	bge.n	80079b6 <json_serialize+0x17a>
 8007976:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800797a:	d21c      	bcs.n	80079b6 <json_serialize+0x17a>
    {
        int res;

        res = prv_serializeData(targetP + index,
 800797c:	9804      	ldr	r0, [sp, #16]
 800797e:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	ab0c      	add	r3, sp, #48	; 0x30
 8007986:	4423      	add	r3, r4
 8007988:	4642      	mov	r2, r8
 800798a:	4649      	mov	r1, r9
 800798c:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8007990:	f7ff fee2 	bl	8007758 <prv_serializeData>
                                parentUriStr,
                                parentUriLen,
                                bufferJSON + head,
                                PRV_JSON_BUFFER_SIZE - head);
        if (res < 0) return res;
 8007994:	2800      	cmp	r0, #0
 8007996:	db2f      	blt.n	80079f8 <json_serialize+0x1bc>
        head += res;
 8007998:	4404      	add	r4, r0
    for (index = 0 ; index < num && head < PRV_JSON_BUFFER_SIZE ; index++)
 800799a:	3701      	adds	r7, #1
 800799c:	e7e9      	b.n	8007972 <json_serialize+0x136>
        memcpy(bufferJSON, JSON_HEADER, JSON_HEADER_SIZE);
 800799e:	4b1e      	ldr	r3, [pc, #120]	; (8007a18 <json_serialize+0x1dc>)
 80079a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80079a4:	900c      	str	r0, [sp, #48]	; 0x30
 80079a6:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
        parentUriLen = 1;
 80079aa:	f04f 0801 	mov.w	r8, #1
        parentUriStr = (const uint8_t *)"/";
 80079ae:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8007a1c <json_serialize+0x1e0>
        head = JSON_HEADER_SIZE;
 80079b2:	2406      	movs	r4, #6
 80079b4:	e7dc      	b.n	8007970 <json_serialize+0x134>
    }

    if (head + JSON_FOOTER_SIZE - 1 > PRV_JSON_BUFFER_SIZE) return 0;
 80079b6:	1c63      	adds	r3, r4, #1
 80079b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079bc:	d822      	bhi.n	8007a04 <json_serialize+0x1c8>

    if (num > 0) head = head - 1;
 80079be:	2e00      	cmp	r6, #0
 80079c0:	dd00      	ble.n	80079c4 <json_serialize+0x188>
 80079c2:	3c01      	subs	r4, #1

    memcpy(bufferJSON + head, JSON_FOOTER, JSON_FOOTER_SIZE);
 80079c4:	4b16      	ldr	r3, [pc, #88]	; (8007a20 <json_serialize+0x1e4>)
 80079c6:	881a      	ldrh	r2, [r3, #0]
 80079c8:	ab0c      	add	r3, sp, #48	; 0x30
 80079ca:	531a      	strh	r2, [r3, r4]
    head = head + JSON_FOOTER_SIZE;
 80079cc:	3402      	adds	r4, #2

    *bufferP = (uint8_t *)lwm2m_malloc(head);
 80079ce:	4620      	mov	r0, r4
 80079d0:	f001 f8c2 	bl	8008b58 <lwm2m_malloc>
 80079d4:	6028      	str	r0, [r5, #0]
    if (*bufferP == NULL) return -1;
 80079d6:	b1b8      	cbz	r0, 8007a08 <json_serialize+0x1cc>
    memcpy(*bufferP, bufferJSON, head);
 80079d8:	4622      	mov	r2, r4
 80079da:	a90c      	add	r1, sp, #48	; 0x30
 80079dc:	f010 fbc8 	bl	8018170 <memcpy>

    return head;
 80079e0:	4620      	mov	r0, r4
 80079e2:	e009      	b.n	80079f8 <json_serialize+0x1bc>
    if (size != 0 && tlvP == NULL) return -1;
 80079e4:	f04f 30ff 	mov.w	r0, #4294967295
 80079e8:	e006      	b.n	80079f8 <json_serialize+0x1bc>
    if (baseUriLen < 0) return -1;
 80079ea:	f04f 30ff 	mov.w	r0, #4294967295
 80079ee:	e003      	b.n	80079f8 <json_serialize+0x1bc>
    if (num < 0) return -1;
 80079f0:	f04f 30ff 	mov.w	r0, #4294967295
 80079f4:	e000      	b.n	80079f8 <json_serialize+0x1bc>
        if (baseUriLen >= URI_MAX_STRING_LEN -1) return 0;
 80079f6:	2000      	movs	r0, #0
}
 80079f8:	f20d 4d34 	addw	sp, sp, #1076	; 0x434
 80079fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (res <= 0) return 0;
 8007a00:	2000      	movs	r0, #0
 8007a02:	e7f9      	b.n	80079f8 <json_serialize+0x1bc>
    if (head + JSON_FOOTER_SIZE - 1 > PRV_JSON_BUFFER_SIZE) return 0;
 8007a04:	2000      	movs	r0, #0
 8007a06:	e7f7      	b.n	80079f8 <json_serialize+0x1bc>
    if (*bufferP == NULL) return -1;
 8007a08:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0c:	e7f4      	b.n	80079f8 <json_serialize+0x1bc>
 8007a0e:	bf00      	nop
 8007a10:	0801b9bc 	.word	0x0801b9bc
 8007a14:	0801b9c4 	.word	0x0801b9c4
 8007a18:	0801b9cc 	.word	0x0801b9cc
 8007a1c:	0801b838 	.word	0x0801b838
 8007a20:	0801b9d4 	.word	0x0801b9d4

08007a24 <prv_hexDigit>:
}


static uint8_t prv_hexDigit(uint8_t value)
{
    value = value & 0xF;
 8007a24:	f000 000f 	and.w	r0, r0, #15
    if (value < 10) return '0' + value;
 8007a28:	2809      	cmp	r0, #9
 8007a2a:	d901      	bls.n	8007a30 <prv_hexDigit+0xc>
    return 'A' + value - 10;
 8007a2c:	3037      	adds	r0, #55	; 0x37
}
 8007a2e:	4770      	bx	lr
    if (value < 10) return '0' + value;
 8007a30:	3030      	adds	r0, #48	; 0x30
 8007a32:	4770      	bx	lr

08007a34 <prv_findAndCheckData>:
                                uri_depth_t *targetLevelP)
{
    size_t index;
    int result;

    if (size == 0) return 0;
 8007a34:	2a00      	cmp	r2, #0
 8007a36:	f000 8102 	beq.w	8007c3e <prv_findAndCheckData+0x20a>
{
 8007a3a:	b530      	push	{r4, r5, lr}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	4694      	mov	ip, r2

    if (size > 1)
 8007a40:	2a01      	cmp	r2, #1
 8007a42:	d92a      	bls.n	8007a9a <prv_findAndCheckData+0x66>
    {
        if (tlvP[0].type == LWM2M_TYPE_OBJECT
 8007a44:	781c      	ldrb	r4, [r3, #0]
         || tlvP[0].type == LWM2M_TYPE_OBJECT_INSTANCE)
 8007a46:	1e62      	subs	r2, r4, #1
 8007a48:	b2d2      	uxtb	r2, r2
        if (tlvP[0].type == LWM2M_TYPE_OBJECT
 8007a4a:	2a01      	cmp	r2, #1
 8007a4c:	d913      	bls.n	8007a76 <prv_findAndCheckData+0x42>
                }
            }
        }
        else
        {
            for (index = 0; index < size; index++)
 8007a4e:	f04f 0e00 	mov.w	lr, #0
 8007a52:	45e6      	cmp	lr, ip
 8007a54:	d221      	bcs.n	8007a9a <prv_findAndCheckData+0x66>
            {
                if (tlvP[index].type == LWM2M_TYPE_OBJECT
 8007a56:	ea4f 120e 	mov.w	r2, lr, lsl #4
 8007a5a:	5c9a      	ldrb	r2, [r3, r2]
                 || tlvP[index].type == LWM2M_TYPE_OBJECT_INSTANCE)
 8007a5c:	3a01      	subs	r2, #1
 8007a5e:	b2d2      	uxtb	r2, r2
                if (tlvP[index].type == LWM2M_TYPE_OBJECT
 8007a60:	2a01      	cmp	r2, #1
 8007a62:	d913      	bls.n	8007a8c <prv_findAndCheckData+0x58>
            for (index = 0; index < size; index++)
 8007a64:	f10e 0e01 	add.w	lr, lr, #1
 8007a68:	e7f3      	b.n	8007a52 <prv_findAndCheckData+0x1e>
                    *targetP = NULL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9a06      	ldr	r2, [sp, #24]
 8007a6e:	6013      	str	r3, [r2, #0]
                    return -1;
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295
 8007a74:	e00f      	b.n	8007a96 <prv_findAndCheckData+0x62>
            for (index = 0; index < size; index++)
 8007a76:	2200      	movs	r2, #0
 8007a78:	4562      	cmp	r2, ip
 8007a7a:	d20e      	bcs.n	8007a9a <prv_findAndCheckData+0x66>
                if (tlvP[index].type != tlvP[0].type)
 8007a7c:	ea4f 1e02 	mov.w	lr, r2, lsl #4
 8007a80:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8007a84:	4574      	cmp	r4, lr
 8007a86:	d1f0      	bne.n	8007a6a <prv_findAndCheckData+0x36>
            for (index = 0; index < size; index++)
 8007a88:	3201      	adds	r2, #1
 8007a8a:	e7f5      	b.n	8007a78 <prv_findAndCheckData+0x44>
                {
                    *targetP = NULL;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	9a06      	ldr	r2, [sp, #24]
 8007a90:	6013      	str	r3, [r2, #0]
                    return -1;
 8007a92:	f04f 30ff 	mov.w	r0, #4294967295
    default:
        break;
    }

    return result;
}
 8007a96:	b003      	add	sp, #12
 8007a98:	bd30      	pop	{r4, r5, pc}
    *targetP = NULL;
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	9c06      	ldr	r4, [sp, #24]
 8007a9e:	6022      	str	r2, [r4, #0]
    switch (desiredLevel)
 8007aa0:	1e4a      	subs	r2, r1, #1
 8007aa2:	2a03      	cmp	r2, #3
 8007aa4:	f200 80cd 	bhi.w	8007c42 <prv_findAndCheckData+0x20e>
 8007aa8:	e8df f002 	tbb	[pc, r2]
 8007aac:	70330d02 	.word	0x70330d02
        if (tlvP[0].type == LWM2M_TYPE_OBJECT)
 8007ab0:	781a      	ldrb	r2, [r3, #0]
 8007ab2:	2a01      	cmp	r2, #1
 8007ab4:	f040 80c8 	bne.w	8007c48 <prv_findAndCheckData+0x214>
            *targetP = (lwm2m_data_t*)tlvP;
 8007ab8:	9a06      	ldr	r2, [sp, #24]
 8007aba:	6013      	str	r3, [r2, #0]
            *targetLevelP = URI_DEPTH_OBJECT;
 8007abc:	2301      	movs	r3, #1
 8007abe:	9a07      	ldr	r2, [sp, #28]
 8007ac0:	7013      	strb	r3, [r2, #0]
            result = (int)size;
 8007ac2:	4660      	mov	r0, ip
 8007ac4:	e7e7      	b.n	8007a96 <prv_findAndCheckData+0x62>
        switch (tlvP[0].type)
 8007ac6:	781a      	ldrb	r2, [r3, #0]
 8007ac8:	2a01      	cmp	r2, #1
 8007aca:	d00f      	beq.n	8007aec <prv_findAndCheckData+0xb8>
 8007acc:	2a02      	cmp	r2, #2
 8007ace:	d01c      	beq.n	8007b0a <prv_findAndCheckData+0xd6>
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	e7df      	b.n	8007a96 <prv_findAndCheckData+0x62>
                    *targetLevelP = URI_DEPTH_OBJECT_INSTANCE;
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	9a07      	ldr	r2, [sp, #28]
 8007ada:	7013      	strb	r3, [r2, #0]
                    return prv_findAndCheckData(uriP,
 8007adc:	9201      	str	r2, [sp, #4]
 8007ade:	9b06      	ldr	r3, [sp, #24]
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	68e3      	ldr	r3, [r4, #12]
 8007ae4:	68a2      	ldr	r2, [r4, #8]
 8007ae6:	f7ff ffa5 	bl	8007a34 <prv_findAndCheckData>
 8007aea:	e7d4      	b.n	8007a96 <prv_findAndCheckData+0x62>
 8007aec:	2200      	movs	r2, #0
            for (index = 0; index < size; index++)
 8007aee:	4562      	cmp	r2, ip
 8007af0:	d208      	bcs.n	8007b04 <prv_findAndCheckData+0xd0>
                if (tlvP[index].id == uriP->objectId)
 8007af2:	eb03 1402 	add.w	r4, r3, r2, lsl #4
 8007af6:	f8b4 e002 	ldrh.w	lr, [r4, #2]
 8007afa:	8805      	ldrh	r5, [r0, #0]
 8007afc:	45ae      	cmp	lr, r5
 8007afe:	d0ea      	beq.n	8007ad6 <prv_findAndCheckData+0xa2>
            for (index = 0; index < size; index++)
 8007b00:	3201      	adds	r2, #1
 8007b02:	e7f4      	b.n	8007aee <prv_findAndCheckData+0xba>
    result = -1;
 8007b04:	f04f 30ff 	mov.w	r0, #4294967295
 8007b08:	e7c5      	b.n	8007a96 <prv_findAndCheckData+0x62>
            *targetP = (lwm2m_data_t*)tlvP;
 8007b0a:	9a06      	ldr	r2, [sp, #24]
 8007b0c:	6013      	str	r3, [r2, #0]
            result = (int)size;
 8007b0e:	4660      	mov	r0, ip
            break;
 8007b10:	e7c1      	b.n	8007a96 <prv_findAndCheckData+0x62>
        switch (tlvP[0].type)
 8007b12:	781a      	ldrb	r2, [r3, #0]
 8007b14:	2a01      	cmp	r2, #1
 8007b16:	d010      	beq.n	8007b3a <prv_findAndCheckData+0x106>
 8007b18:	2a02      	cmp	r2, #2
 8007b1a:	d028      	beq.n	8007b6e <prv_findAndCheckData+0x13a>
            *targetP = (lwm2m_data_t*)tlvP;
 8007b1c:	9a06      	ldr	r2, [sp, #24]
 8007b1e:	6013      	str	r3, [r2, #0]
            result = (int)size;
 8007b20:	4660      	mov	r0, ip
            break;
 8007b22:	e7b8      	b.n	8007a96 <prv_findAndCheckData+0x62>
                    *targetLevelP = URI_DEPTH_OBJECT_INSTANCE;
 8007b24:	2302      	movs	r3, #2
 8007b26:	9a07      	ldr	r2, [sp, #28]
 8007b28:	7013      	strb	r3, [r2, #0]
                    return prv_findAndCheckData(uriP,
 8007b2a:	9201      	str	r2, [sp, #4]
 8007b2c:	9b06      	ldr	r3, [sp, #24]
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	68e3      	ldr	r3, [r4, #12]
 8007b32:	68a2      	ldr	r2, [r4, #8]
 8007b34:	f7ff ff7e 	bl	8007a34 <prv_findAndCheckData>
 8007b38:	e7ad      	b.n	8007a96 <prv_findAndCheckData+0x62>
 8007b3a:	2200      	movs	r2, #0
            for (index = 0; index < size; index++)
 8007b3c:	4562      	cmp	r2, ip
 8007b3e:	d208      	bcs.n	8007b52 <prv_findAndCheckData+0x11e>
                if (tlvP[index].id == uriP->objectId)
 8007b40:	eb03 1402 	add.w	r4, r3, r2, lsl #4
 8007b44:	f8b4 e002 	ldrh.w	lr, [r4, #2]
 8007b48:	8805      	ldrh	r5, [r0, #0]
 8007b4a:	45ae      	cmp	lr, r5
 8007b4c:	d0ea      	beq.n	8007b24 <prv_findAndCheckData+0xf0>
            for (index = 0; index < size; index++)
 8007b4e:	3201      	adds	r2, #1
 8007b50:	e7f4      	b.n	8007b3c <prv_findAndCheckData+0x108>
    result = -1;
 8007b52:	f04f 30ff 	mov.w	r0, #4294967295
 8007b56:	e79e      	b.n	8007a96 <prv_findAndCheckData+0x62>
                    *targetLevelP = URI_DEPTH_RESOURCE;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	9a07      	ldr	r2, [sp, #28]
 8007b5c:	7013      	strb	r3, [r2, #0]
                    return prv_findAndCheckData(uriP,
 8007b5e:	9201      	str	r2, [sp, #4]
 8007b60:	9b06      	ldr	r3, [sp, #24]
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	68e3      	ldr	r3, [r4, #12]
 8007b66:	68a2      	ldr	r2, [r4, #8]
 8007b68:	f7ff ff64 	bl	8007a34 <prv_findAndCheckData>
 8007b6c:	e793      	b.n	8007a96 <prv_findAndCheckData+0x62>
 8007b6e:	2200      	movs	r2, #0
            for (index = 0; index < size; index++)
 8007b70:	4562      	cmp	r2, ip
 8007b72:	d208      	bcs.n	8007b86 <prv_findAndCheckData+0x152>
                if (tlvP[index].id == uriP->instanceId)
 8007b74:	eb03 1402 	add.w	r4, r3, r2, lsl #4
 8007b78:	8865      	ldrh	r5, [r4, #2]
 8007b7a:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 8007b7e:	4575      	cmp	r5, lr
 8007b80:	d0ea      	beq.n	8007b58 <prv_findAndCheckData+0x124>
            for (index = 0; index < size; index++)
 8007b82:	3201      	adds	r2, #1
 8007b84:	e7f4      	b.n	8007b70 <prv_findAndCheckData+0x13c>
    result = -1;
 8007b86:	f04f 30ff 	mov.w	r0, #4294967295
 8007b8a:	e784      	b.n	8007a96 <prv_findAndCheckData+0x62>
        switch (tlvP[0].type)
 8007b8c:	781a      	ldrb	r2, [r3, #0]
 8007b8e:	2a02      	cmp	r2, #2
 8007b90:	d02c      	beq.n	8007bec <prv_findAndCheckData+0x1b8>
 8007b92:	2a03      	cmp	r2, #3
 8007b94:	d044      	beq.n	8007c20 <prv_findAndCheckData+0x1ec>
 8007b96:	2a01      	cmp	r2, #1
 8007b98:	d00e      	beq.n	8007bb8 <prv_findAndCheckData+0x184>
            *targetP = (lwm2m_data_t*)tlvP;
 8007b9a:	9a06      	ldr	r2, [sp, #24]
 8007b9c:	6013      	str	r3, [r2, #0]
            result = (int)size;
 8007b9e:	4660      	mov	r0, ip
            break;
 8007ba0:	e779      	b.n	8007a96 <prv_findAndCheckData+0x62>
                    *targetLevelP = URI_DEPTH_OBJECT_INSTANCE;
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	9a07      	ldr	r2, [sp, #28]
 8007ba6:	7013      	strb	r3, [r2, #0]
                    return prv_findAndCheckData(uriP,
 8007ba8:	9201      	str	r2, [sp, #4]
 8007baa:	9b06      	ldr	r3, [sp, #24]
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	68e3      	ldr	r3, [r4, #12]
 8007bb0:	68a2      	ldr	r2, [r4, #8]
 8007bb2:	f7ff ff3f 	bl	8007a34 <prv_findAndCheckData>
 8007bb6:	e76e      	b.n	8007a96 <prv_findAndCheckData+0x62>
 8007bb8:	2200      	movs	r2, #0
            for (index = 0; index < size; index++)
 8007bba:	4562      	cmp	r2, ip
 8007bbc:	d208      	bcs.n	8007bd0 <prv_findAndCheckData+0x19c>
                if (tlvP[index].id == uriP->objectId)
 8007bbe:	eb03 1402 	add.w	r4, r3, r2, lsl #4
 8007bc2:	f8b4 e002 	ldrh.w	lr, [r4, #2]
 8007bc6:	8805      	ldrh	r5, [r0, #0]
 8007bc8:	45ae      	cmp	lr, r5
 8007bca:	d0ea      	beq.n	8007ba2 <prv_findAndCheckData+0x16e>
            for (index = 0; index < size; index++)
 8007bcc:	3201      	adds	r2, #1
 8007bce:	e7f4      	b.n	8007bba <prv_findAndCheckData+0x186>
    result = -1;
 8007bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd4:	e75f      	b.n	8007a96 <prv_findAndCheckData+0x62>
                    *targetLevelP = URI_DEPTH_RESOURCE;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	9a07      	ldr	r2, [sp, #28]
 8007bda:	7013      	strb	r3, [r2, #0]
                    return prv_findAndCheckData(uriP,
 8007bdc:	9201      	str	r2, [sp, #4]
 8007bde:	9b06      	ldr	r3, [sp, #24]
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	68e3      	ldr	r3, [r4, #12]
 8007be4:	68a2      	ldr	r2, [r4, #8]
 8007be6:	f7ff ff25 	bl	8007a34 <prv_findAndCheckData>
 8007bea:	e754      	b.n	8007a96 <prv_findAndCheckData+0x62>
 8007bec:	2200      	movs	r2, #0
            for (index = 0; index < size; index++)
 8007bee:	4562      	cmp	r2, ip
 8007bf0:	d208      	bcs.n	8007c04 <prv_findAndCheckData+0x1d0>
                if (tlvP[index].id == uriP->instanceId)
 8007bf2:	eb03 1402 	add.w	r4, r3, r2, lsl #4
 8007bf6:	f8b4 e002 	ldrh.w	lr, [r4, #2]
 8007bfa:	8845      	ldrh	r5, [r0, #2]
 8007bfc:	45ae      	cmp	lr, r5
 8007bfe:	d0ea      	beq.n	8007bd6 <prv_findAndCheckData+0x1a2>
            for (index = 0; index < size; index++)
 8007c00:	3201      	adds	r2, #1
 8007c02:	e7f4      	b.n	8007bee <prv_findAndCheckData+0x1ba>
    result = -1;
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295
 8007c08:	e745      	b.n	8007a96 <prv_findAndCheckData+0x62>
                    *targetLevelP = URI_DEPTH_RESOURCE_INSTANCE;
 8007c0a:	2304      	movs	r3, #4
 8007c0c:	9a07      	ldr	r2, [sp, #28]
 8007c0e:	7013      	strb	r3, [r2, #0]
                    return prv_findAndCheckData(uriP,
 8007c10:	9201      	str	r2, [sp, #4]
 8007c12:	9b06      	ldr	r3, [sp, #24]
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	68e3      	ldr	r3, [r4, #12]
 8007c18:	68a2      	ldr	r2, [r4, #8]
 8007c1a:	f7ff ff0b 	bl	8007a34 <prv_findAndCheckData>
 8007c1e:	e73a      	b.n	8007a96 <prv_findAndCheckData+0x62>
 8007c20:	2200      	movs	r2, #0
            for (index = 0; index < size; index++)
 8007c22:	4562      	cmp	r2, ip
 8007c24:	d208      	bcs.n	8007c38 <prv_findAndCheckData+0x204>
                if (tlvP[index].id == uriP->resourceId)
 8007c26:	eb03 1402 	add.w	r4, r3, r2, lsl #4
 8007c2a:	f8b4 e002 	ldrh.w	lr, [r4, #2]
 8007c2e:	8885      	ldrh	r5, [r0, #4]
 8007c30:	45ae      	cmp	lr, r5
 8007c32:	d0ea      	beq.n	8007c0a <prv_findAndCheckData+0x1d6>
            for (index = 0; index < size; index++)
 8007c34:	3201      	adds	r2, #1
 8007c36:	e7f4      	b.n	8007c22 <prv_findAndCheckData+0x1ee>
    result = -1;
 8007c38:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3c:	e72b      	b.n	8007a96 <prv_findAndCheckData+0x62>
    if (size == 0) return 0;
 8007c3e:	2000      	movs	r0, #0
}
 8007c40:	4770      	bx	lr
    switch (desiredLevel)
 8007c42:	f04f 30ff 	mov.w	r0, #4294967295
 8007c46:	e726      	b.n	8007a96 <prv_findAndCheckData+0x62>
    result = -1;
 8007c48:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4c:	e723      	b.n	8007a96 <prv_findAndCheckData+0x62>

08007c4e <json_escapeString>:
{
 8007c4e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c52:	4607      	mov	r7, r0
 8007c54:	468a      	mov	sl, r1
 8007c56:	4616      	mov	r6, r2
 8007c58:	4698      	mov	r8, r3
    size_t head = 0;
 8007c5a:	2400      	movs	r4, #0
    for (i = 0; i < srcLen; i++)
 8007c5c:	4625      	mov	r5, r4
 8007c5e:	e040      	b.n	8007ce2 <json_escapeString+0x94>
                if (dstLen - head < 2) return 0;
 8007c60:	ebaa 0304 	sub.w	r3, sl, r4
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	f240 8081 	bls.w	8007d6c <json_escapeString+0x11e>
                dst[head++] = '\\';
 8007c6a:	1c63      	adds	r3, r4, #1
 8007c6c:	225c      	movs	r2, #92	; 0x5c
 8007c6e:	553a      	strb	r2, [r7, r4]
                dst[head++] = 'b';
 8007c70:	2262      	movs	r2, #98	; 0x62
 8007c72:	54fa      	strb	r2, [r7, r3]
 8007c74:	3402      	adds	r4, #2
 8007c76:	e033      	b.n	8007ce0 <json_escapeString+0x92>
                if (dstLen - head < 2) return 0;
 8007c78:	ebaa 0304 	sub.w	r3, sl, r4
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d977      	bls.n	8007d70 <json_escapeString+0x122>
                dst[head++] = '\\';
 8007c80:	1c63      	adds	r3, r4, #1
 8007c82:	225c      	movs	r2, #92	; 0x5c
 8007c84:	553a      	strb	r2, [r7, r4]
                dst[head++] = 'f';
 8007c86:	2266      	movs	r2, #102	; 0x66
 8007c88:	54fa      	strb	r2, [r7, r3]
 8007c8a:	3402      	adds	r4, #2
 8007c8c:	e028      	b.n	8007ce0 <json_escapeString+0x92>
                if (dstLen - head < 2) return 0;
 8007c8e:	ebaa 0304 	sub.w	r3, sl, r4
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d96e      	bls.n	8007d74 <json_escapeString+0x126>
                dst[head++] = '\\';
 8007c96:	1c63      	adds	r3, r4, #1
 8007c98:	225c      	movs	r2, #92	; 0x5c
 8007c9a:	553a      	strb	r2, [r7, r4]
                dst[head++] = 'n';
 8007c9c:	226e      	movs	r2, #110	; 0x6e
 8007c9e:	54fa      	strb	r2, [r7, r3]
 8007ca0:	3402      	adds	r4, #2
 8007ca2:	e01d      	b.n	8007ce0 <json_escapeString+0x92>
                if (dstLen - head < 2) return 0;
 8007ca4:	ebaa 0304 	sub.w	r3, sl, r4
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d965      	bls.n	8007d78 <json_escapeString+0x12a>
                dst[head++] = '\\';
 8007cac:	1c63      	adds	r3, r4, #1
 8007cae:	225c      	movs	r2, #92	; 0x5c
 8007cb0:	553a      	strb	r2, [r7, r4]
                dst[head++] = 'r';
 8007cb2:	2272      	movs	r2, #114	; 0x72
 8007cb4:	54fa      	strb	r2, [r7, r3]
 8007cb6:	3402      	adds	r4, #2
 8007cb8:	e012      	b.n	8007ce0 <json_escapeString+0x92>
                if (dstLen - head < 2) return 0;
 8007cba:	ebaa 0304 	sub.w	r3, sl, r4
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d95c      	bls.n	8007d7c <json_escapeString+0x12e>
                dst[head++] = '\\';
 8007cc2:	1c63      	adds	r3, r4, #1
 8007cc4:	225c      	movs	r2, #92	; 0x5c
 8007cc6:	553a      	strb	r2, [r7, r4]
                dst[head++] = 't';
 8007cc8:	2274      	movs	r2, #116	; 0x74
 8007cca:	54fa      	strb	r2, [r7, r3]
 8007ccc:	3402      	adds	r4, #2
 8007cce:	e007      	b.n	8007ce0 <json_escapeString+0x92>
        else if (src[i] == '"')
 8007cd0:	2b22      	cmp	r3, #34	; 0x22
 8007cd2:	d036      	beq.n	8007d42 <json_escapeString+0xf4>
        else if (src[i] == '\\')
 8007cd4:	2b5c      	cmp	r3, #92	; 0x5c
 8007cd6:	d03f      	beq.n	8007d58 <json_escapeString+0x10a>
            if (dstLen - head < 1) return 0;
 8007cd8:	4554      	cmp	r4, sl
 8007cda:	d057      	beq.n	8007d8c <json_escapeString+0x13e>
            dst[head++] = src[i];
 8007cdc:	553b      	strb	r3, [r7, r4]
 8007cde:	3401      	adds	r4, #1
    for (i = 0; i < srcLen; i++)
 8007ce0:	3501      	adds	r5, #1
 8007ce2:	4545      	cmp	r5, r8
 8007ce4:	d253      	bcs.n	8007d8e <json_escapeString+0x140>
        if (src[i] < 0x20)
 8007ce6:	eb06 0905 	add.w	r9, r6, r5
 8007cea:	5d73      	ldrb	r3, [r6, r5]
 8007cec:	2b1f      	cmp	r3, #31
 8007cee:	d8ef      	bhi.n	8007cd0 <json_escapeString+0x82>
            if (src[i] == '\b')
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d0b5      	beq.n	8007c60 <json_escapeString+0x12>
            else if(src[i] == '\f')
 8007cf4:	2b0c      	cmp	r3, #12
 8007cf6:	d0bf      	beq.n	8007c78 <json_escapeString+0x2a>
            else if(src[i] == '\n')
 8007cf8:	2b0a      	cmp	r3, #10
 8007cfa:	d0c8      	beq.n	8007c8e <json_escapeString+0x40>
            else if(src[i] == '\r')
 8007cfc:	2b0d      	cmp	r3, #13
 8007cfe:	d0d1      	beq.n	8007ca4 <json_escapeString+0x56>
            else if(src[i] == '\t')
 8007d00:	2b09      	cmp	r3, #9
 8007d02:	d0da      	beq.n	8007cba <json_escapeString+0x6c>
                if (dstLen - head < 6) return 0;
 8007d04:	ebaa 0304 	sub.w	r3, sl, r4
 8007d08:	2b05      	cmp	r3, #5
 8007d0a:	d939      	bls.n	8007d80 <json_escapeString+0x132>
                dst[head++] = '\\';
 8007d0c:	1c63      	adds	r3, r4, #1
 8007d0e:	225c      	movs	r2, #92	; 0x5c
 8007d10:	553a      	strb	r2, [r7, r4]
                dst[head++] = 'u';
 8007d12:	1ca1      	adds	r1, r4, #2
 8007d14:	2275      	movs	r2, #117	; 0x75
 8007d16:	54fa      	strb	r2, [r7, r3]
                dst[head++] = '0';
 8007d18:	1ce2      	adds	r2, r4, #3
 8007d1a:	2330      	movs	r3, #48	; 0x30
 8007d1c:	547b      	strb	r3, [r7, r1]
                dst[head++] = '0';
 8007d1e:	f104 0b04 	add.w	fp, r4, #4
 8007d22:	54bb      	strb	r3, [r7, r2]
                dst[head++] = prv_hexDigit(src[i] >> 4);
 8007d24:	f899 0000 	ldrb.w	r0, [r9]
 8007d28:	0900      	lsrs	r0, r0, #4
 8007d2a:	f7ff fe7b 	bl	8007a24 <prv_hexDigit>
 8007d2e:	f807 000b 	strb.w	r0, [r7, fp]
                dst[head++] = prv_hexDigit(src[i]);
 8007d32:	f899 0000 	ldrb.w	r0, [r9]
 8007d36:	f7ff fe75 	bl	8007a24 <prv_hexDigit>
 8007d3a:	1d63      	adds	r3, r4, #5
 8007d3c:	54f8      	strb	r0, [r7, r3]
 8007d3e:	3406      	adds	r4, #6
 8007d40:	e7ce      	b.n	8007ce0 <json_escapeString+0x92>
            if (dstLen - head < 2) return 0;
 8007d42:	ebaa 0304 	sub.w	r3, sl, r4
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d91c      	bls.n	8007d84 <json_escapeString+0x136>
            dst[head++] = '\\';
 8007d4a:	1c63      	adds	r3, r4, #1
 8007d4c:	225c      	movs	r2, #92	; 0x5c
 8007d4e:	553a      	strb	r2, [r7, r4]
            dst[head++] = '\"';
 8007d50:	2222      	movs	r2, #34	; 0x22
 8007d52:	54fa      	strb	r2, [r7, r3]
 8007d54:	3402      	adds	r4, #2
 8007d56:	e7c3      	b.n	8007ce0 <json_escapeString+0x92>
            if (dstLen - head < 2) return 0;
 8007d58:	ebaa 0304 	sub.w	r3, sl, r4
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d913      	bls.n	8007d88 <json_escapeString+0x13a>
            dst[head++] = '\\';
 8007d60:	1c63      	adds	r3, r4, #1
 8007d62:	225c      	movs	r2, #92	; 0x5c
 8007d64:	553a      	strb	r2, [r7, r4]
            dst[head++] = '\\';
 8007d66:	54fa      	strb	r2, [r7, r3]
 8007d68:	3402      	adds	r4, #2
 8007d6a:	e7b9      	b.n	8007ce0 <json_escapeString+0x92>
                if (dstLen - head < 2) return 0;
 8007d6c:	2400      	movs	r4, #0
 8007d6e:	e00e      	b.n	8007d8e <json_escapeString+0x140>
                if (dstLen - head < 2) return 0;
 8007d70:	2400      	movs	r4, #0
 8007d72:	e00c      	b.n	8007d8e <json_escapeString+0x140>
                if (dstLen - head < 2) return 0;
 8007d74:	2400      	movs	r4, #0
 8007d76:	e00a      	b.n	8007d8e <json_escapeString+0x140>
                if (dstLen - head < 2) return 0;
 8007d78:	2400      	movs	r4, #0
 8007d7a:	e008      	b.n	8007d8e <json_escapeString+0x140>
                if (dstLen - head < 2) return 0;
 8007d7c:	2400      	movs	r4, #0
 8007d7e:	e006      	b.n	8007d8e <json_escapeString+0x140>
                if (dstLen - head < 6) return 0;
 8007d80:	2400      	movs	r4, #0
 8007d82:	e004      	b.n	8007d8e <json_escapeString+0x140>
            if (dstLen - head < 2) return 0;
 8007d84:	2400      	movs	r4, #0
 8007d86:	e002      	b.n	8007d8e <json_escapeString+0x140>
            if (dstLen - head < 2) return 0;
 8007d88:	2400      	movs	r4, #0
 8007d8a:	e000      	b.n	8007d8e <json_escapeString+0x140>
            if (dstLen - head < 1) return 0;
 8007d8c:	2400      	movs	r4, #0
}
 8007d8e:	4620      	mov	r0, r4
 8007d90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d94 <json_decreaseLevel>:
    switch(level)
 8007d94:	2804      	cmp	r0, #4
 8007d96:	d80a      	bhi.n	8007dae <json_decreaseLevel+0x1a>
 8007d98:	e8df f000 	tbb	[pc, r0]
 8007d9c:	07050b03 	.word	0x07050b03
 8007da0:	0c          	.byte	0x0c
 8007da1:	00          	.byte	0x00
 8007da2:	2001      	movs	r0, #1
 8007da4:	4770      	bx	lr
        return URI_DEPTH_RESOURCE;
 8007da6:	2003      	movs	r0, #3
 8007da8:	4770      	bx	lr
        return URI_DEPTH_RESOURCE_INSTANCE;
 8007daa:	2004      	movs	r0, #4
 8007dac:	4770      	bx	lr
        return URI_DEPTH_RESOURCE;
 8007dae:	2003      	movs	r0, #3
 8007db0:	4770      	bx	lr
        return URI_DEPTH_OBJECT_INSTANCE;
 8007db2:	2002      	movs	r0, #2
}
 8007db4:	4770      	bx	lr

08007db6 <json_findAndCheckData>:
                          uri_depth_t baseLevel,
                          size_t size,
                          const lwm2m_data_t * tlvP,
                          lwm2m_data_t ** targetP,
                          uri_depth_t *targetLevelP)
{
 8007db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	4605      	mov	r5, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	4616      	mov	r6, r2
 8007dc2:	461f      	mov	r7, r3
 8007dc4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    uri_depth_t desiredLevel = json_decreaseLevel(baseLevel);
 8007dc8:	4608      	mov	r0, r1
 8007dca:	f7ff ffe3 	bl	8007d94 <json_decreaseLevel>
 8007dce:	4601      	mov	r1, r0
    if (baseLevel < URI_DEPTH_RESOURCE)
 8007dd0:	2c02      	cmp	r4, #2
 8007dd2:	d80d      	bhi.n	8007df0 <json_findAndCheckData+0x3a>
    {
        *targetLevelP = desiredLevel;
 8007dd4:	f888 0000 	strb.w	r0, [r8]
    }
    else
    {
        *targetLevelP = baseLevel;
    }
    return prv_findAndCheckData(uriP,
 8007dd8:	f8cd 8004 	str.w	r8, [sp, #4]
 8007ddc:	9b08      	ldr	r3, [sp, #32]
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	463b      	mov	r3, r7
 8007de2:	4632      	mov	r2, r6
 8007de4:	4628      	mov	r0, r5
 8007de6:	f7ff fe25 	bl	8007a34 <prv_findAndCheckData>
                                desiredLevel,
                                size,
                                tlvP,
                                targetP,
                                targetLevelP);
}
 8007dea:	b002      	add	sp, #8
 8007dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *targetLevelP = baseLevel;
 8007df0:	f888 4000 	strb.w	r4, [r8]
 8007df4:	e7f0      	b.n	8007dd8 <json_findAndCheckData+0x22>

08007df6 <read_to_coap_response>:
        response->payload_len = 0;
    }

}

uint8_t read_to_coap_response(lwm2m_context_t * contextP, lwm2m_uri_t * uriP, coap_packet_t * response){
 8007df6:	b510      	push	{r4, lr}
 8007df8:	b088      	sub	sp, #32
 8007dfa:	4614      	mov	r4, r2
    uint8_t result;
    lwm2m_media_type_t format = LWM2M_CONTENT_JSON;
 8007dfc:	f642 5317 	movw	r3, #11543	; 0x2d17
 8007e00:	f8ad 301e 	strh.w	r3, [sp, #30]

    uint8_t * buffer = NULL;
 8007e04:	2200      	movs	r2, #0
 8007e06:	9206      	str	r2, [sp, #24]
    size_t length = 0;
 8007e08:	9205      	str	r2, [sp, #20]

    result = object_read(contextP, uriP, 0, 0, &format, &buffer, &length); // verify if we can just pass 0s here
 8007e0a:	ab05      	add	r3, sp, #20
 8007e0c:	9302      	str	r3, [sp, #8]
 8007e0e:	ab06      	add	r3, sp, #24
 8007e10:	9301      	str	r3, [sp, #4]
 8007e12:	f10d 031e 	add.w	r3, sp, #30
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	f7fc fd6a 	bl	80048f2 <object_read>
 8007e1e:	b2c0      	uxtb	r0, r0

    if (COAP_205_CONTENT == result)
 8007e20:	2845      	cmp	r0, #69	; 0x45
 8007e22:	d002      	beq.n	8007e2a <read_to_coap_response+0x34>
        //do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, "\n\n FAILDER TO READ CONTENT %d\n", result);} }while(0);
    }

    //return result;
    return 0;
}
 8007e24:	2000      	movs	r0, #0
 8007e26:	b008      	add	sp, #32
 8007e28:	bd10      	pop	{r4, pc}
        coap_set_header_content_type(response, format);
 8007e2a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f7fb fe82 	bl	8003b38 <coap_set_header_content_type>
        coap_set_payload(response, buffer, length);
 8007e34:	9a05      	ldr	r2, [sp, #20]
 8007e36:	9906      	ldr	r1, [sp, #24]
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f7fb ff3f 	bl	8003cbc <coap_set_payload>
 8007e3e:	e7f1      	b.n	8007e24 <read_to_coap_response+0x2e>

08007e40 <send_coap_response>:

void send_coap_response(lwm2m_context_t * contextP, coap_packet_t * message){
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	460c      	mov	r4, r1
    uint8_t result = COAP_500_INTERNAL_SERVER_ERROR;
    uint8_t * pktBuffer;
    size_t pktBufferLen = 0;
    size_t allocLen;

    allocLen = coap_serialize_get_size(message);
 8007e44:	4608      	mov	r0, r1
 8007e46:	f7fb fc50 	bl	80036ea <coap_serialize_get_size>
    pktBuffer = (uint8_t *)lwm2m_malloc(allocLen);
 8007e4a:	f000 fe85 	bl	8008b58 <lwm2m_malloc>
	//message->payload[0] = message->payload[0];

	//do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, " \n\n payload end \r\n");} }while(0);


    if (pktBuffer != NULL)
 8007e4e:	b168      	cbz	r0, 8007e6c <send_coap_response+0x2c>
 8007e50:	4605      	mov	r5, r0
    {
    	do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, " \n\n start serialization \r\n");} }while(0);
 8007e52:	4b07      	ldr	r3, [pc, #28]	; (8007e70 <send_coap_response+0x30>)
 8007e54:	2201      	movs	r2, #1
 8007e56:	2100      	movs	r1, #0
 8007e58:	2002      	movs	r0, #2
 8007e5a:	f00f fad7 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>

        pktBufferLen = coap_serialize_message(message, pktBuffer);
 8007e5e:	4629      	mov	r1, r5
 8007e60:	4620      	mov	r0, r4
 8007e62:	f7fb fcc1 	bl	80037e8 <coap_serialize_message>
        if (0 != pktBufferLen)
        {
            send_raw_data(pktBuffer, pktBufferLen);
        }
        lwm2m_free(pktBuffer);
 8007e66:	4628      	mov	r0, r5
 8007e68:	f000 fe7a 	bl	8008b60 <lwm2m_free>
    }
}
 8007e6c:	bd38      	pop	{r3, r4, r5, pc}
 8007e6e:	bf00      	nop
 8007e70:	0801b9d8 	.word	0x0801b9d8

08007e74 <simple_read_send>:
{
 8007e74:	b570      	push	{r4, r5, r6, lr}
 8007e76:	4604      	mov	r4, r0
    uint8_t result = read_to_coap_response(contextP, uriP, response);
 8007e78:	4a0a      	ldr	r2, [pc, #40]	; (8007ea4 <simple_read_send+0x30>)
 8007e7a:	f7ff ffbc 	bl	8007df6 <read_to_coap_response>
    if (result == NO_ERROR)
 8007e7e:	b100      	cbz	r0, 8007e82 <simple_read_send+0xe>
}
 8007e80:	bd70      	pop	{r4, r5, r6, pc}
        uint8_t *payload = response->payload;
 8007e82:	4d08      	ldr	r5, [pc, #32]	; (8007ea4 <simple_read_send+0x30>)
 8007e84:	f8d5 608c 	ldr.w	r6, [r5, #140]	; 0x8c
        send_coap_response(contextP, response);
 8007e88:	4629      	mov	r1, r5
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f7ff ffd8 	bl	8007e40 <send_coap_response>
        lwm2m_free(payload);
 8007e90:	4630      	mov	r0, r6
 8007e92:	f000 fe65 	bl	8008b60 <lwm2m_free>
        response->payload = NULL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        response->payload_len = 0;
 8007e9c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8007ea0:	e7ee      	b.n	8007e80 <simple_read_send+0xc>
 8007ea2:	bf00      	nop
 8007ea4:	20000744 	.word	0x20000744

08007ea8 <start_wakaama>:
void start_wakaama() {
 8007ea8:	b510      	push	{r4, lr}
 8007eaa:	b08c      	sub	sp, #48	; 0x30
	lwm2m_context_t * lwm2mH = NULL;
 8007eac:	2400      	movs	r4, #0
 8007eae:	940b      	str	r4, [sp, #44]	; 0x2c
	objArray[0] = get_security_object();
 8007eb0:	f000 f9e8 	bl	8008284 <get_security_object>
 8007eb4:	9007      	str	r0, [sp, #28]
	objArray[1] = get_server_object();
 8007eb6:	f000 fbb7 	bl	8008628 <get_server_object>
 8007eba:	9008      	str	r0, [sp, #32]
	objArray[2] = get_object_device();
 8007ebc:	f000 f906 	bl	80080cc <get_object_device>
 8007ec0:	9009      	str	r0, [sp, #36]	; 0x24
	objArray[3] = get_test_object();
 8007ec2:	f000 fde7 	bl	8008a94 <get_test_object>
 8007ec6:	900a      	str	r0, [sp, #40]	; 0x28
	lwm2mH = (lwm2m_context_t *) lwm2m_malloc(sizeof(lwm2m_context_t));
 8007ec8:	202c      	movs	r0, #44	; 0x2c
 8007eca:	f000 fe45 	bl	8008b58 <lwm2m_malloc>
 8007ece:	900b      	str	r0, [sp, #44]	; 0x2c
	memset(lwm2mH, 0, sizeof(lwm2m_context_t));
 8007ed0:	222c      	movs	r2, #44	; 0x2c
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	f010 f974 	bl	80181c0 <memset>
	lwm2mH->nextMID = 1;
 8007ed8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007eda:	2301      	movs	r3, #1
 8007edc:	8403      	strh	r3, [r0, #32]
	int result  = lwm2m_configure(lwm2mH, name, NULL, NULL, OBJ_COUNT, objArray);
 8007ede:	ab07      	add	r3, sp, #28
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	2304      	movs	r3, #4
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	4623      	mov	r3, r4
 8007ee8:	4622      	mov	r2, r4
 8007eea:	4911      	ldr	r1, [pc, #68]	; (8007f30 <start_wakaama+0x88>)
 8007eec:	f7fc fb1b 	bl	8004526 <lwm2m_configure>
	lwm2m_uri_t * uriP = (lwm2m_uri_t *)lwm2m_malloc(sizeof(lwm2m_uri_t));
 8007ef0:	2008      	movs	r0, #8
 8007ef2:	f000 fe31 	bl	8008b58 <lwm2m_malloc>
 8007ef6:	9006      	str	r0, [sp, #24]
	uriP->objectId = 3;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	8003      	strh	r3, [r0, #0]
	uriP->instanceId = 10;
 8007efc:	9b06      	ldr	r3, [sp, #24]
 8007efe:	220a      	movs	r2, #10
 8007f00:	805a      	strh	r2, [r3, #2]
	uriP->resourceId = 20;
 8007f02:	9b06      	ldr	r3, [sp, #24]
 8007f04:	2214      	movs	r2, #20
 8007f06:	809a      	strh	r2, [r3, #4]
	simple_read_send(&lwm2mH, &uriP);
 8007f08:	a906      	add	r1, sp, #24
 8007f0a:	a80b      	add	r0, sp, #44	; 0x2c
 8007f0c:	f7ff ffb2 	bl	8007e74 <simple_read_send>
	result = lwm2m_step(lwm2mH, &(tv.tv_sec));
 8007f10:	a902      	add	r1, sp, #8
 8007f12:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007f14:	f7fc fb72 	bl	80045fc <lwm2m_step>
	if (result != 0)
 8007f18:	b908      	cbnz	r0, 8007f1e <start_wakaama+0x76>
}
 8007f1a:	b00c      	add	sp, #48	; 0x30
 8007f1c:	bd10      	pop	{r4, pc}
	    do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, "\r\n lwm2m_server_t lwm2m_step %d \r\n ",result);} }while(0);
 8007f1e:	9000      	str	r0, [sp, #0]
 8007f20:	4b04      	ldr	r3, [pc, #16]	; (8007f34 <start_wakaama+0x8c>)
 8007f22:	2201      	movs	r2, #1
 8007f24:	4621      	mov	r1, r4
 8007f26:	2002      	movs	r0, #2
 8007f28:	f00f fa70 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 8007f2c:	e7f5      	b.n	8007f1a <start_wakaama+0x72>
 8007f2e:	bf00      	nop
 8007f30:	0801b9f4 	.word	0x0801b9f4
 8007f34:	0801ba00 	.word	0x0801ba00

08007f38 <prv_device_discover>:

    /* Unused parameter */
    (void)contextP;

    // this is a single instance object
    if (instanceId != 0)
 8007f38:	2900      	cmp	r1, #0
 8007f3a:	d13e      	bne.n	8007fba <prv_device_discover+0x82>
{
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	4616      	mov	r6, r2
 8007f42:	461d      	mov	r5, r3
    }

    result = COAP_205_CONTENT;

    // is the server asking for the full object ?
    if (*numDataP == 0)
 8007f44:	6814      	ldr	r4, [r2, #0]
 8007f46:	b114      	cbz	r4, 8007f4e <prv_device_discover+0x16>
            (*dataArrayP)[i].id = resList[i];
        }
    }
    else
    {
        for (i = 0; i < *numDataP && result == COAP_205_CONTENT; i++)
 8007f48:	2200      	movs	r2, #0
    result = COAP_205_CONTENT;
 8007f4a:	2045      	movs	r0, #69	; 0x45
 8007f4c:	e020      	b.n	8007f90 <prv_device_discover+0x58>
        uint16_t resList[] = {
 8007f4e:	4b1c      	ldr	r3, [pc, #112]	; (8007fc0 <prv_device_discover+0x88>)
 8007f50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007f54:	ab02      	add	r3, sp, #8
 8007f56:	e903 0003 	stmdb	r3, {r0, r1}
        *dataArrayP = lwm2m_data_new(nbRes);
 8007f5a:	2004      	movs	r0, #4
 8007f5c:	f7ff f8c3 	bl	80070e6 <lwm2m_data_new>
 8007f60:	6028      	str	r0, [r5, #0]
        if (*dataArrayP == NULL) return COAP_500_INTERNAL_SERVER_ERROR;
 8007f62:	b110      	cbz	r0, 8007f6a <prv_device_discover+0x32>
        *numDataP = nbRes;
 8007f64:	2304      	movs	r3, #4
 8007f66:	6033      	str	r3, [r6, #0]
        for (i = 0 ; i < nbRes ; i++)
 8007f68:	e00b      	b.n	8007f82 <prv_device_discover+0x4a>
        if (*dataArrayP == NULL) return COAP_500_INTERNAL_SERVER_ERROR;
 8007f6a:	20a0      	movs	r0, #160	; 0xa0
 8007f6c:	e00c      	b.n	8007f88 <prv_device_discover+0x50>
            (*dataArrayP)[i].id = resList[i];
 8007f6e:	682b      	ldr	r3, [r5, #0]
 8007f70:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8007f74:	aa02      	add	r2, sp, #8
 8007f76:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8007f7a:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8007f7e:	805a      	strh	r2, [r3, #2]
        for (i = 0 ; i < nbRes ; i++)
 8007f80:	3401      	adds	r4, #1
 8007f82:	2c03      	cmp	r4, #3
 8007f84:	ddf3      	ble.n	8007f6e <prv_device_discover+0x36>
    result = COAP_205_CONTENT;
 8007f86:	2045      	movs	r0, #69	; 0x45
            }
        }
    }

    return result;
}
 8007f88:	b002      	add	sp, #8
 8007f8a:	bd70      	pop	{r4, r5, r6, pc}
                result = COAP_404_NOT_FOUND;
 8007f8c:	2084      	movs	r0, #132	; 0x84
        for (i = 0; i < *numDataP && result == COAP_205_CONTENT; i++)
 8007f8e:	3201      	adds	r2, #1
 8007f90:	4294      	cmp	r4, r2
 8007f92:	ddf9      	ble.n	8007f88 <prv_device_discover+0x50>
 8007f94:	2845      	cmp	r0, #69	; 0x45
 8007f96:	d1f7      	bne.n	8007f88 <prv_device_discover+0x50>
            switch ((*dataArrayP)[i].id)
 8007f98:	6829      	ldr	r1, [r5, #0]
 8007f9a:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8007f9e:	884b      	ldrh	r3, [r1, #2]
 8007fa0:	2b10      	cmp	r3, #16
 8007fa2:	d8f3      	bhi.n	8007f8c <prv_device_discover+0x54>
 8007fa4:	f04f 0c01 	mov.w	ip, #1
 8007fa8:	fa0c fc03 	lsl.w	ip, ip, r3
 8007fac:	4905      	ldr	r1, [pc, #20]	; (8007fc4 <prv_device_discover+0x8c>)
 8007fae:	ea0c 0101 	and.w	r1, ip, r1
 8007fb2:	2900      	cmp	r1, #0
 8007fb4:	d1eb      	bne.n	8007f8e <prv_device_discover+0x56>
                result = COAP_404_NOT_FOUND;
 8007fb6:	2084      	movs	r0, #132	; 0x84
 8007fb8:	e7e9      	b.n	8007f8e <prv_device_discover+0x56>
        return COAP_404_NOT_FOUND;
 8007fba:	2084      	movs	r0, #132	; 0x84
}
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	0801b1d0 	.word	0x0801b1d0
 8007fc4:	00010013 	.word	0x00010013

08007fc8 <prv_device_execute>:
{
    /* Unused parameter */
    (void)contextP;

    // this is a single instance object
    if (instanceId != 0)
 8007fc8:	b981      	cbnz	r1, 8007fec <prv_device_execute+0x24>
{
 8007fca:	b508      	push	{r3, lr}
    {
        return COAP_404_NOT_FOUND;
    }

    if (length != 0) return COAP_400_BAD_REQUEST;
 8007fcc:	9b02      	ldr	r3, [sp, #8]
 8007fce:	b97b      	cbnz	r3, 8007ff0 <prv_device_execute+0x28>

    if (resourceId == RES_M_REBOOT)
 8007fd0:	2a04      	cmp	r2, #4
 8007fd2:	d001      	beq.n	8007fd8 <prv_device_execute+0x10>
    {
        fprintf(stdout, "\n\t REBOOT\r\n\n");
        return COAP_204_CHANGED;
    }

    return COAP_405_METHOD_NOT_ALLOWED;
 8007fd4:	2085      	movs	r0, #133	; 0x85
}
 8007fd6:	bd08      	pop	{r3, pc}
        fprintf(stdout, "\n\t REBOOT\r\n\n");
 8007fd8:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <prv_device_execute+0x2c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	220c      	movs	r2, #12
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	4805      	ldr	r0, [pc, #20]	; (8007ff8 <prv_device_execute+0x30>)
 8007fe4:	f010 f87e 	bl	80180e4 <fwrite>
        return COAP_204_CHANGED;
 8007fe8:	2044      	movs	r0, #68	; 0x44
 8007fea:	e7f4      	b.n	8007fd6 <prv_device_execute+0xe>
        return COAP_404_NOT_FOUND;
 8007fec:	2084      	movs	r0, #132	; 0x84
}
 8007fee:	4770      	bx	lr
    if (length != 0) return COAP_400_BAD_REQUEST;
 8007ff0:	2080      	movs	r0, #128	; 0x80
 8007ff2:	e7f0      	b.n	8007fd6 <prv_device_execute+0xe>
 8007ff4:	20000120 	.word	0x20000120
 8007ff8:	0801ba24 	.word	0x0801ba24

08007ffc <prv_set_value>:
{
 8007ffc:	b508      	push	{r3, lr}
 8007ffe:	4601      	mov	r1, r0
    switch (dataP->id)
 8008000:	8843      	ldrh	r3, [r0, #2]
 8008002:	2b10      	cmp	r3, #16
 8008004:	d81b      	bhi.n	800803e <prv_set_value+0x42>
 8008006:	e8df f003 	tbb	[pc, r3]
 800800a:	100b      	.short	0x100b
 800800c:	1a091a1a 	.word	0x1a091a1a
 8008010:	1a1a1a1a 	.word	0x1a1a1a1a
 8008014:	1a1a1a1a 	.word	0x1a1a1a1a
 8008018:	1a1a      	.short	0x1a1a
 800801a:	15          	.byte	0x15
 800801b:	00          	.byte	0x00
 800801c:	2085      	movs	r0, #133	; 0x85
 800801e:	e00f      	b.n	8008040 <prv_set_value+0x44>
        lwm2m_data_encode_string(PRV_MANUFACTURER, dataP);
 8008020:	4808      	ldr	r0, [pc, #32]	; (8008044 <prv_set_value+0x48>)
 8008022:	f7ff f899 	bl	8007158 <lwm2m_data_encode_string>
        return COAP_205_CONTENT;
 8008026:	2045      	movs	r0, #69	; 0x45
 8008028:	e00a      	b.n	8008040 <prv_set_value+0x44>
        lwm2m_data_encode_string(PRV_MODEL_NUMBER, dataP);
 800802a:	4807      	ldr	r0, [pc, #28]	; (8008048 <prv_set_value+0x4c>)
 800802c:	f7ff f894 	bl	8007158 <lwm2m_data_encode_string>
        return COAP_205_CONTENT;
 8008030:	2045      	movs	r0, #69	; 0x45
 8008032:	e005      	b.n	8008040 <prv_set_value+0x44>
        lwm2m_data_encode_string(PRV_BINDING_MODE, dataP);
 8008034:	4805      	ldr	r0, [pc, #20]	; (800804c <prv_set_value+0x50>)
 8008036:	f7ff f88f 	bl	8007158 <lwm2m_data_encode_string>
        return COAP_205_CONTENT;
 800803a:	2045      	movs	r0, #69	; 0x45
 800803c:	e000      	b.n	8008040 <prv_set_value+0x44>
        return COAP_404_NOT_FOUND;
 800803e:	2084      	movs	r0, #132	; 0x84
}
 8008040:	bd08      	pop	{r3, pc}
 8008042:	bf00      	nop
 8008044:	0801ba34 	.word	0x0801ba34
 8008048:	0801ba4c 	.word	0x0801ba4c
 800804c:	0801ba64 	.word	0x0801ba64

08008050 <prv_device_read>:
    if (instanceId != 0)
 8008050:	2900      	cmp	r1, #0
 8008052:	d136      	bne.n	80080c2 <prv_device_read+0x72>
{
 8008054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008056:	b083      	sub	sp, #12
 8008058:	4616      	mov	r6, r2
 800805a:	461f      	mov	r7, r3
    if (*numDataP == 0)
 800805c:	6814      	ldr	r4, [r2, #0]
 800805e:	b10c      	cbz	r4, 8008064 <prv_device_read+0x14>
{
 8008060:	2400      	movs	r4, #0
 8008062:	e025      	b.n	80080b0 <prv_device_read+0x60>
        uint16_t resList[] = {
 8008064:	4b18      	ldr	r3, [pc, #96]	; (80080c8 <prv_device_read+0x78>)
 8008066:	e893 0003 	ldmia.w	r3, {r0, r1}
 800806a:	9000      	str	r0, [sp, #0]
 800806c:	f8ad 1004 	strh.w	r1, [sp, #4]
        *dataArrayP = lwm2m_data_new(nbRes);
 8008070:	2003      	movs	r0, #3
 8008072:	f7ff f838 	bl	80070e6 <lwm2m_data_new>
 8008076:	6038      	str	r0, [r7, #0]
        if (*dataArrayP == NULL) return COAP_500_INTERNAL_SERVER_ERROR;
 8008078:	b110      	cbz	r0, 8008080 <prv_device_read+0x30>
        *numDataP = nbRes;
 800807a:	2303      	movs	r3, #3
 800807c:	6033      	str	r3, [r6, #0]
        for (i = 0 ; i < nbRes ; i++)
 800807e:	e00c      	b.n	800809a <prv_device_read+0x4a>
        if (*dataArrayP == NULL) return COAP_500_INTERNAL_SERVER_ERROR;
 8008080:	20a0      	movs	r0, #160	; 0xa0
}
 8008082:	b003      	add	sp, #12
 8008084:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (*dataArrayP)[i].id = resList[i];
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800808c:	aa02      	add	r2, sp, #8
 800808e:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8008092:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8008096:	805a      	strh	r2, [r3, #2]
        for (i = 0 ; i < nbRes ; i++)
 8008098:	3401      	adds	r4, #1
 800809a:	2c02      	cmp	r4, #2
 800809c:	ddf3      	ble.n	8008086 <prv_device_read+0x36>
 800809e:	e7df      	b.n	8008060 <prv_device_read+0x10>
            result = prv_set_value((*dataArrayP) + i);
 80080a0:	f7ff ffac 	bl	8007ffc <prv_set_value>
        i++;
 80080a4:	3401      	adds	r4, #1
    } while (i < *numDataP && result == COAP_205_CONTENT);
 80080a6:	6833      	ldr	r3, [r6, #0]
 80080a8:	42a3      	cmp	r3, r4
 80080aa:	ddea      	ble.n	8008082 <prv_device_read+0x32>
 80080ac:	2845      	cmp	r0, #69	; 0x45
 80080ae:	d1e8      	bne.n	8008082 <prv_device_read+0x32>
        if ((*dataArrayP)[i].type == LWM2M_TYPE_MULTIPLE_RESOURCE)
 80080b0:	683d      	ldr	r5, [r7, #0]
 80080b2:	0121      	lsls	r1, r4, #4
 80080b4:	eb05 1004 	add.w	r0, r5, r4, lsl #4
 80080b8:	5c6b      	ldrb	r3, [r5, r1]
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d1f0      	bne.n	80080a0 <prv_device_read+0x50>
            result = COAP_404_NOT_FOUND;
 80080be:	2084      	movs	r0, #132	; 0x84
 80080c0:	e7f0      	b.n	80080a4 <prv_device_read+0x54>
        return COAP_404_NOT_FOUND;
 80080c2:	2084      	movs	r0, #132	; 0x84
}
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	0801b1d8 	.word	0x0801b1d8

080080cc <get_object_device>:

lwm2m_object_t * get_object_device()
{
 80080cc:	b538      	push	{r3, r4, r5, lr}
    /*
     * The get_object_device function create the object itself and return a pointer to the structure that represent it.
     */
    lwm2m_object_t * deviceObj;

    deviceObj = (lwm2m_object_t *)lwm2m_malloc(sizeof(lwm2m_object_t));
 80080ce:	2028      	movs	r0, #40	; 0x28
 80080d0:	f000 fd42 	bl	8008b58 <lwm2m_malloc>

    if (NULL != deviceObj)
 80080d4:	4604      	mov	r4, r0
 80080d6:	b1a0      	cbz	r0, 8008102 <get_object_device+0x36>
    {
        memset(deviceObj, 0, sizeof(lwm2m_object_t));
 80080d8:	2228      	movs	r2, #40	; 0x28
 80080da:	2100      	movs	r1, #0
 80080dc:	f010 f870 	bl	80181c0 <memset>

        /*
         * It assigns his unique ID
         * The 3 is the standard ID for the mandatory object "Object device".
         */
        deviceObj->objID = LWM2M_DEVICE_OBJECT_ID;
 80080e0:	2303      	movs	r3, #3
 80080e2:	80a3      	strh	r3, [r4, #4]

        /*
         * and its unique instance
         *
         */
        deviceObj->instanceList = (lwm2m_list_t *)lwm2m_malloc(sizeof(lwm2m_list_t));
 80080e4:	2008      	movs	r0, #8
 80080e6:	f000 fd37 	bl	8008b58 <lwm2m_malloc>
 80080ea:	4605      	mov	r5, r0
 80080ec:	60a0      	str	r0, [r4, #8]
        if (NULL != deviceObj->instanceList)
 80080ee:	b150      	cbz	r0, 8008106 <get_object_device+0x3a>
        {
            memset(deviceObj->instanceList, 0, sizeof(lwm2m_list_t));
 80080f0:	2300      	movs	r3, #0
 80080f2:	6003      	str	r3, [r0, #0]
 80080f4:	6043      	str	r3, [r0, #4]
        /*
         * And the private function that will access the object.
         * Those function will be called when a read/write/execute query is made by the server. In fact the library don't need to
         * know the resources of the object, only the server does.
         */
        deviceObj->readFunc     = prv_device_read;
 80080f6:	4b06      	ldr	r3, [pc, #24]	; (8008110 <get_object_device+0x44>)
 80080f8:	60e3      	str	r3, [r4, #12]
        deviceObj->executeFunc  = prv_device_execute;
 80080fa:	4b06      	ldr	r3, [pc, #24]	; (8008114 <get_object_device+0x48>)
 80080fc:	6163      	str	r3, [r4, #20]
        deviceObj->discoverFunc = prv_device_discover;
 80080fe:	4b06      	ldr	r3, [pc, #24]	; (8008118 <get_object_device+0x4c>)
 8008100:	6223      	str	r3, [r4, #32]

     }

    return deviceObj;
}
 8008102:	4620      	mov	r0, r4
 8008104:	bd38      	pop	{r3, r4, r5, pc}
            lwm2m_free(deviceObj);
 8008106:	4620      	mov	r0, r4
 8008108:	f000 fd2a 	bl	8008b60 <lwm2m_free>
            return NULL;
 800810c:	462c      	mov	r4, r5
 800810e:	e7f8      	b.n	8008102 <get_object_device+0x36>
 8008110:	08008051 	.word	0x08008051
 8008114:	08007fc9 	.word	0x08007fc9
 8008118:	08007f39 	.word	0x08007f39

0800811c <prv_get_value>:
    uint32_t                     clientHoldOffTime;
} security_instance_t;

static uint8_t prv_get_value(lwm2m_data_t * dataP,
                             security_instance_t * targetP)
{
 800811c:	b500      	push	{lr}
 800811e:	b083      	sub	sp, #12
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1

    switch (dataP->id)
 8008124:	8841      	ldrh	r1, [r0, #2]
 8008126:	290b      	cmp	r1, #11
 8008128:	d85d      	bhi.n	80081e6 <prv_get_value+0xca>
 800812a:	e8df f001 	tbb	[pc, r1]
 800812e:	0e06      	.short	0x0e06
 8008130:	2e241a14 	.word	0x2e241a14
 8008134:	4a443e38 	.word	0x4a443e38
 8008138:	5650      	.short	0x5650
    {
    case LWM2M_SECURITY_URI_ID:
        lwm2m_data_encode_string(targetP->uri, dataP);
 800813a:	4611      	mov	r1, r2
 800813c:	6898      	ldr	r0, [r3, #8]
 800813e:	f7ff f80b 	bl	8007158 <lwm2m_data_encode_string>
        return COAP_205_CONTENT;
 8008142:	2045      	movs	r0, #69	; 0x45
        return COAP_205_CONTENT;

    default:
        return COAP_404_NOT_FOUND;
    }
}
 8008144:	b003      	add	sp, #12
 8008146:	f85d fb04 	ldr.w	pc, [sp], #4
        lwm2m_data_encode_bool(targetP->isBootstrap, dataP);
 800814a:	4611      	mov	r1, r2
 800814c:	7b18      	ldrb	r0, [r3, #12]
 800814e:	f7ff f922 	bl	8007396 <lwm2m_data_encode_bool>
        return COAP_205_CONTENT;
 8008152:	2045      	movs	r0, #69	; 0x45
 8008154:	e7f6      	b.n	8008144 <prv_get_value+0x28>
        lwm2m_data_encode_int(LWM2M_SECURITY_MODE_NONE, dataP);
 8008156:	2003      	movs	r0, #3
 8008158:	2100      	movs	r1, #0
 800815a:	f7ff f829 	bl	80071b0 <lwm2m_data_encode_int>
        return COAP_205_CONTENT;
 800815e:	2045      	movs	r0, #69	; 0x45
 8008160:	e7f0      	b.n	8008144 <prv_get_value+0x28>
            uint8_t value = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	f88d 3007 	strb.w	r3, [sp, #7]
            lwm2m_data_encode_opaque(&value, 1, dataP);
 8008168:	2101      	movs	r1, #1
 800816a:	f10d 0007 	add.w	r0, sp, #7
 800816e:	f7ff f80c 	bl	800718a <lwm2m_data_encode_opaque>
        return COAP_205_CONTENT;
 8008172:	2045      	movs	r0, #69	; 0x45
 8008174:	e7e6      	b.n	8008144 <prv_get_value+0x28>
            uint8_t value = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	f88d 3007 	strb.w	r3, [sp, #7]
            lwm2m_data_encode_opaque(&value, 1, dataP);
 800817c:	2101      	movs	r1, #1
 800817e:	f10d 0007 	add.w	r0, sp, #7
 8008182:	f7ff f802 	bl	800718a <lwm2m_data_encode_opaque>
        return COAP_205_CONTENT;
 8008186:	2045      	movs	r0, #69	; 0x45
 8008188:	e7dc      	b.n	8008144 <prv_get_value+0x28>
            uint8_t value = 0;
 800818a:	2300      	movs	r3, #0
 800818c:	f88d 3007 	strb.w	r3, [sp, #7]
            lwm2m_data_encode_opaque(&value, 1, dataP);
 8008190:	2101      	movs	r1, #1
 8008192:	f10d 0007 	add.w	r0, sp, #7
 8008196:	f7fe fff8 	bl	800718a <lwm2m_data_encode_opaque>
        return COAP_205_CONTENT;
 800819a:	2045      	movs	r0, #69	; 0x45
 800819c:	e7d2      	b.n	8008144 <prv_get_value+0x28>
        lwm2m_data_encode_int(LWM2M_SECURITY_MODE_NONE, dataP);
 800819e:	2003      	movs	r0, #3
 80081a0:	2100      	movs	r1, #0
 80081a2:	f7ff f805 	bl	80071b0 <lwm2m_data_encode_int>
        return COAP_205_CONTENT;
 80081a6:	2045      	movs	r0, #69	; 0x45
 80081a8:	e7cc      	b.n	8008144 <prv_get_value+0x28>
            lwm2m_data_encode_opaque((uint8_t *)value, 6, dataP);
 80081aa:	2106      	movs	r1, #6
 80081ac:	480f      	ldr	r0, [pc, #60]	; (80081ec <prv_get_value+0xd0>)
 80081ae:	f7fe ffec 	bl	800718a <lwm2m_data_encode_opaque>
        return COAP_205_CONTENT;
 80081b2:	2045      	movs	r0, #69	; 0x45
 80081b4:	e7c6      	b.n	8008144 <prv_get_value+0x28>
            lwm2m_data_encode_opaque((uint8_t *)value, 32, dataP);
 80081b6:	2120      	movs	r1, #32
 80081b8:	480d      	ldr	r0, [pc, #52]	; (80081f0 <prv_get_value+0xd4>)
 80081ba:	f7fe ffe6 	bl	800718a <lwm2m_data_encode_opaque>
        return COAP_205_CONTENT;
 80081be:	2045      	movs	r0, #69	; 0x45
 80081c0:	e7c0      	b.n	8008144 <prv_get_value+0x28>
        lwm2m_data_encode_int(0, dataP);
 80081c2:	2000      	movs	r0, #0
 80081c4:	2100      	movs	r1, #0
 80081c6:	f7fe fff3 	bl	80071b0 <lwm2m_data_encode_int>
        return COAP_205_CONTENT;
 80081ca:	2045      	movs	r0, #69	; 0x45
 80081cc:	e7ba      	b.n	8008144 <prv_get_value+0x28>
        lwm2m_data_encode_int(targetP->shortID, dataP);
 80081ce:	89d8      	ldrh	r0, [r3, #14]
 80081d0:	2100      	movs	r1, #0
 80081d2:	f7fe ffed 	bl	80071b0 <lwm2m_data_encode_int>
        return COAP_205_CONTENT;
 80081d6:	2045      	movs	r0, #69	; 0x45
 80081d8:	e7b4      	b.n	8008144 <prv_get_value+0x28>
        lwm2m_data_encode_int(targetP->clientHoldOffTime, dataP);
 80081da:	6918      	ldr	r0, [r3, #16]
 80081dc:	2100      	movs	r1, #0
 80081de:	f7fe ffe7 	bl	80071b0 <lwm2m_data_encode_int>
        return COAP_205_CONTENT;
 80081e2:	2045      	movs	r0, #69	; 0x45
 80081e4:	e7ae      	b.n	8008144 <prv_get_value+0x28>
    switch (dataP->id)
 80081e6:	2084      	movs	r0, #132	; 0x84
 80081e8:	e7ac      	b.n	8008144 <prv_get_value+0x28>
 80081ea:	bf00      	nop
 80081ec:	0801ba68 	.word	0x0801ba68
 80081f0:	0801ba70 	.word	0x0801ba70

080081f4 <prv_security_read>:
static uint8_t prv_security_read(lwm2m_context_t * contextP,
                                 uint16_t instanceId,
                                 int * numDataP,
                                 lwm2m_data_t ** dataArrayP,
                                 lwm2m_object_t * objectP)
{
 80081f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081f6:	b087      	sub	sp, #28
 80081f8:	4616      	mov	r6, r2
 80081fa:	461d      	mov	r5, r3
    int i;

    /* Unused parameter */
    (void)contextP;

    targetP = (security_instance_t *)lwm2m_list_find(objectP->instanceList, instanceId);
 80081fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081fe:	6898      	ldr	r0, [r3, #8]
 8008200:	f7fc fa6f 	bl	80046e2 <lwm2m_list_find>
    if (NULL == targetP) return COAP_404_NOT_FOUND;
 8008204:	2800      	cmp	r0, #0
 8008206:	d038      	beq.n	800827a <prv_security_read+0x86>
 8008208:	4607      	mov	r7, r0

    // is the server asking for the full instance ?
    if (*numDataP == 0)
 800820a:	6834      	ldr	r4, [r6, #0]
 800820c:	b10c      	cbz	r4, 8008212 <prv_security_read+0x1e>
{
 800820e:	2400      	movs	r4, #0
 8008210:	e02a      	b.n	8008268 <prv_security_read+0x74>
    {
        uint16_t resList[] = {LWM2M_SECURITY_URI_ID,
 8008212:	46ec      	mov	ip, sp
 8008214:	f8df e068 	ldr.w	lr, [pc, #104]	; 8008280 <prv_security_read+0x8c>
 8008218:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800821c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008220:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8008224:	e88c 0003 	stmia.w	ip, {r0, r1}
                              LWM2M_SECURITY_SMS_SERVER_NUMBER_ID,
                              LWM2M_SECURITY_SHORT_SERVER_ID,
                              LWM2M_SECURITY_HOLD_OFF_ID};
        int nbRes = sizeof(resList)/sizeof(uint16_t);

        *dataArrayP = lwm2m_data_new(nbRes);
 8008228:	200c      	movs	r0, #12
 800822a:	f7fe ff5c 	bl	80070e6 <lwm2m_data_new>
 800822e:	6028      	str	r0, [r5, #0]
        if (*dataArrayP == NULL) return COAP_500_INTERNAL_SERVER_ERROR;
 8008230:	b110      	cbz	r0, 8008238 <prv_security_read+0x44>
        *numDataP = nbRes;
 8008232:	230c      	movs	r3, #12
 8008234:	6033      	str	r3, [r6, #0]
        for (i = 0 ; i < nbRes ; i++)
 8008236:	e00b      	b.n	8008250 <prv_security_read+0x5c>
        if (*dataArrayP == NULL) return COAP_500_INTERNAL_SERVER_ERROR;
 8008238:	20a0      	movs	r0, #160	; 0xa0
 800823a:	e01f      	b.n	800827c <prv_security_read+0x88>
        {
            (*dataArrayP)[i].id = resList[i];
 800823c:	682b      	ldr	r3, [r5, #0]
 800823e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8008242:	aa06      	add	r2, sp, #24
 8008244:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8008248:	f832 2c18 	ldrh.w	r2, [r2, #-24]
 800824c:	805a      	strh	r2, [r3, #2]
        for (i = 0 ; i < nbRes ; i++)
 800824e:	3401      	adds	r4, #1
 8008250:	2c0b      	cmp	r4, #11
 8008252:	ddf3      	ble.n	800823c <prv_security_read+0x48>
 8008254:	e7db      	b.n	800820e <prv_security_read+0x1a>
        {
            result = COAP_404_NOT_FOUND;
        }
        else
        {
            result = prv_get_value((*dataArrayP) + i, targetP);
 8008256:	4639      	mov	r1, r7
 8008258:	f7ff ff60 	bl	800811c <prv_get_value>
        }
        i++;
 800825c:	3401      	adds	r4, #1
    } while (i < *numDataP && result == COAP_205_CONTENT);
 800825e:	6833      	ldr	r3, [r6, #0]
 8008260:	42a3      	cmp	r3, r4
 8008262:	dd0b      	ble.n	800827c <prv_security_read+0x88>
 8008264:	2845      	cmp	r0, #69	; 0x45
 8008266:	d109      	bne.n	800827c <prv_security_read+0x88>
        if ((*dataArrayP)[i].type == LWM2M_TYPE_MULTIPLE_RESOURCE)
 8008268:	682b      	ldr	r3, [r5, #0]
 800826a:	0121      	lsls	r1, r4, #4
 800826c:	eb03 1004 	add.w	r0, r3, r4, lsl #4
 8008270:	5c5b      	ldrb	r3, [r3, r1]
 8008272:	2b03      	cmp	r3, #3
 8008274:	d1ef      	bne.n	8008256 <prv_security_read+0x62>
            result = COAP_404_NOT_FOUND;
 8008276:	2084      	movs	r0, #132	; 0x84
 8008278:	e7f0      	b.n	800825c <prv_security_read+0x68>
    if (NULL == targetP) return COAP_404_NOT_FOUND;
 800827a:	2084      	movs	r0, #132	; 0x84

    return result;
}
 800827c:	b007      	add	sp, #28
 800827e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008280:	0801b1e0 	.word	0x0801b1e0

08008284 <get_security_object>:

lwm2m_object_t * get_security_object()
{
 8008284:	b538      	push	{r3, r4, r5, lr}
    lwm2m_object_t * securityObj;

    securityObj = (lwm2m_object_t *)lwm2m_malloc(sizeof(lwm2m_object_t));
 8008286:	2028      	movs	r0, #40	; 0x28
 8008288:	f000 fc66 	bl	8008b58 <lwm2m_malloc>

    if (NULL != securityObj)
 800828c:	4605      	mov	r5, r0
 800828e:	b1e8      	cbz	r0, 80082cc <get_security_object+0x48>
    {
        security_instance_t * targetP;

        memset(securityObj, 0, sizeof(lwm2m_object_t));
 8008290:	2228      	movs	r2, #40	; 0x28
 8008292:	2100      	movs	r1, #0
 8008294:	f00f ff94 	bl	80181c0 <memset>

        securityObj->objID = 0;

        // Manually create an hardcoded instance
        targetP = (security_instance_t *)lwm2m_malloc(sizeof(security_instance_t));
 8008298:	2014      	movs	r0, #20
 800829a:	f000 fc5d 	bl	8008b58 <lwm2m_malloc>
        if (NULL == targetP)
 800829e:	4604      	mov	r4, r0
 80082a0:	b1b0      	cbz	r0, 80082d0 <get_security_object+0x4c>
        {
            lwm2m_free(securityObj);
            return NULL;
        }

        memset(targetP, 0, sizeof(security_instance_t));
 80082a2:	2300      	movs	r3, #0
 80082a4:	6003      	str	r3, [r0, #0]
 80082a6:	6043      	str	r3, [r0, #4]
 80082a8:	6083      	str	r3, [r0, #8]
 80082aa:	60c3      	str	r3, [r0, #12]
 80082ac:	6103      	str	r3, [r0, #16]
        targetP->instanceId = 0;
        targetP->uri = strdup("coap://localhost:5683");
 80082ae:	480b      	ldr	r0, [pc, #44]	; (80082dc <get_security_object+0x58>)
 80082b0:	f010 fc2a 	bl	8018b08 <strdup>
 80082b4:	60a0      	str	r0, [r4, #8]
        targetP->isBootstrap = false;
        targetP->shortID = 123;
 80082b6:	237b      	movs	r3, #123	; 0x7b
 80082b8:	81e3      	strh	r3, [r4, #14]
        targetP->clientHoldOffTime = 10;
 80082ba:	230a      	movs	r3, #10
 80082bc:	6123      	str	r3, [r4, #16]

        securityObj->instanceList = LWM2M_LIST_ADD(securityObj->instanceList, targetP);
 80082be:	4621      	mov	r1, r4
 80082c0:	68a8      	ldr	r0, [r5, #8]
 80082c2:	f7fc f9f5 	bl	80046b0 <lwm2m_list_add>
 80082c6:	60a8      	str	r0, [r5, #8]

        securityObj->readFunc = prv_security_read;
 80082c8:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <get_security_object+0x5c>)
 80082ca:	60eb      	str	r3, [r5, #12]
    }

    return securityObj;
}
 80082cc:	4628      	mov	r0, r5
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
            lwm2m_free(securityObj);
 80082d0:	4628      	mov	r0, r5
 80082d2:	f000 fc45 	bl	8008b60 <lwm2m_free>
            return NULL;
 80082d6:	4625      	mov	r5, r4
 80082d8:	e7f8      	b.n	80082cc <get_security_object+0x48>
 80082da:	bf00      	nop
 80082dc:	0801ba90 	.word	0x0801ba90
 80082e0:	080081f5 	.word	0x080081f5

080082e4 <prv_server_discover>:
static uint8_t prv_server_discover(lwm2m_context_t * contextP,
                                   uint16_t instanceId,
                                   int * numDataP,
                                   lwm2m_data_t ** dataArrayP,
                                   lwm2m_object_t * objectP)
{
 80082e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082e6:	b087      	sub	sp, #28
 80082e8:	461d      	mov	r5, r3
    (void)contextP;

    result = COAP_205_CONTENT;

    // is the server asking for the full object ?
    if (*numDataP == 0)
 80082ea:	6814      	ldr	r4, [r2, #0]
 80082ec:	b114      	cbz	r4, 80082f4 <prv_server_discover+0x10>
            (*dataArrayP)[i].id = resList[i];
        }
    }
    else
    {
        for (i = 0; i < *numDataP && result == COAP_205_CONTENT; i++)
 80082ee:	2200      	movs	r2, #0
    result = COAP_205_CONTENT;
 80082f0:	2045      	movs	r0, #69	; 0x45
 80082f2:	e023      	b.n	800833c <prv_server_discover+0x58>
 80082f4:	4616      	mov	r6, r2
        uint16_t resList[] = {
 80082f6:	f10d 0c04 	add.w	ip, sp, #4
 80082fa:	4f16      	ldr	r7, [pc, #88]	; (8008354 <prv_server_discover+0x70>)
 80082fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80082fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	f8ac 3000 	strh.w	r3, [ip]
        *dataArrayP = lwm2m_data_new(nbRes);
 8008308:	2009      	movs	r0, #9
 800830a:	f7fe feec 	bl	80070e6 <lwm2m_data_new>
 800830e:	6028      	str	r0, [r5, #0]
        if (*dataArrayP == NULL) return COAP_500_INTERNAL_SERVER_ERROR;
 8008310:	b110      	cbz	r0, 8008318 <prv_server_discover+0x34>
        *numDataP = nbRes;
 8008312:	2309      	movs	r3, #9
 8008314:	6033      	str	r3, [r6, #0]
        for (i = 0 ; i < nbRes ; i++)
 8008316:	e00b      	b.n	8008330 <prv_server_discover+0x4c>
        if (*dataArrayP == NULL) return COAP_500_INTERNAL_SERVER_ERROR;
 8008318:	20a0      	movs	r0, #160	; 0xa0
 800831a:	e00c      	b.n	8008336 <prv_server_discover+0x52>
            (*dataArrayP)[i].id = resList[i];
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8008322:	aa06      	add	r2, sp, #24
 8008324:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8008328:	f832 2c14 	ldrh.w	r2, [r2, #-20]
 800832c:	805a      	strh	r2, [r3, #2]
        for (i = 0 ; i < nbRes ; i++)
 800832e:	3401      	adds	r4, #1
 8008330:	2c08      	cmp	r4, #8
 8008332:	ddf3      	ble.n	800831c <prv_server_discover+0x38>
    result = COAP_205_CONTENT;
 8008334:	2045      	movs	r0, #69	; 0x45
            }
        }
    }

    return result;
}
 8008336:	b007      	add	sp, #28
 8008338:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (i = 0; i < *numDataP && result == COAP_205_CONTENT; i++)
 800833a:	3201      	adds	r2, #1
 800833c:	4294      	cmp	r4, r2
 800833e:	ddfa      	ble.n	8008336 <prv_server_discover+0x52>
 8008340:	2845      	cmp	r0, #69	; 0x45
 8008342:	d1f8      	bne.n	8008336 <prv_server_discover+0x52>
            switch ((*dataArrayP)[i].id)
 8008344:	6829      	ldr	r1, [r5, #0]
 8008346:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800834a:	884b      	ldrh	r3, [r1, #2]
 800834c:	2b08      	cmp	r3, #8
 800834e:	d9f4      	bls.n	800833a <prv_server_discover+0x56>
                result = COAP_404_NOT_FOUND;
 8008350:	2084      	movs	r0, #132	; 0x84
 8008352:	e7f2      	b.n	800833a <prv_server_discover+0x56>
 8008354:	0801b1f8 	.word	0x0801b1f8

08008358 <prv_server_execute>:
                                  uint16_t resourceId,
                                  uint8_t * buffer,
                                  int length,
                                  lwm2m_object_t * objectP)

{
 8008358:	b510      	push	{r4, lr}
 800835a:	4614      	mov	r4, r2
    server_instance_t * targetP;

    /* Unused parameter */
    (void)contextP;

    targetP = (server_instance_t *)lwm2m_list_find(objectP->instanceList, instanceId);
 800835c:	9b03      	ldr	r3, [sp, #12]
 800835e:	6898      	ldr	r0, [r3, #8]
 8008360:	f7fc f9bf 	bl	80046e2 <lwm2m_list_find>
    if (NULL == targetP) return COAP_404_NOT_FOUND;
 8008364:	b138      	cbz	r0, 8008376 <prv_server_execute+0x1e>

    switch (resourceId)
 8008366:	2c04      	cmp	r4, #4
 8008368:	d007      	beq.n	800837a <prv_server_execute+0x22>
 800836a:	2c08      	cmp	r4, #8
 800836c:	d001      	beq.n	8008372 <prv_server_execute+0x1a>
    case LWM2M_SERVER_UPDATE_ID:
        // executed in core, if COAP_204_CHANGED is returned
        return COAP_204_CHANGED;

    default:
        return COAP_405_METHOD_NOT_ALLOWED;
 800836e:	2085      	movs	r0, #133	; 0x85
    }
}
 8008370:	bd10      	pop	{r4, pc}
    switch (resourceId)
 8008372:	2044      	movs	r0, #68	; 0x44
 8008374:	e7fc      	b.n	8008370 <prv_server_execute+0x18>
    if (NULL == targetP) return COAP_404_NOT_FOUND;
 8008376:	2084      	movs	r0, #132	; 0x84
 8008378:	e7fa      	b.n	8008370 <prv_server_execute+0x18>
    switch (resourceId)
 800837a:	2044      	movs	r0, #68	; 0x44
 800837c:	e7f8      	b.n	8008370 <prv_server_execute+0x18>

0800837e <prv_server_delete>:

static uint8_t prv_server_delete(lwm2m_context_t * contextP,
                                 uint16_t id,
                                 lwm2m_object_t * objectP)
{
 800837e:	b510      	push	{r4, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	4614      	mov	r4, r2
    server_instance_t * serverInstance;

    /* Unused parameter */
    (void)contextP;

    objectP->instanceList = lwm2m_list_remove(objectP->instanceList, id, (lwm2m_list_t **)&serverInstance);
 8008384:	aa01      	add	r2, sp, #4
 8008386:	68a0      	ldr	r0, [r4, #8]
 8008388:	f7fc f9b7 	bl	80046fa <lwm2m_list_remove>
 800838c:	60a0      	str	r0, [r4, #8]
    if (NULL == serverInstance) return COAP_404_NOT_FOUND;
 800838e:	9801      	ldr	r0, [sp, #4]
 8008390:	b120      	cbz	r0, 800839c <prv_server_delete+0x1e>

    lwm2m_free(serverInstance);
 8008392:	f000 fbe5 	bl	8008b60 <lwm2m_free>

    return COAP_202_DELETED;
 8008396:	2042      	movs	r0, #66	; 0x42
}
 8008398:	b002      	add	sp, #8
 800839a:	bd10      	pop	{r4, pc}
    if (NULL == serverInstance) return COAP_404_NOT_FOUND;
 800839c:	2084      	movs	r0, #132	; 0x84
 800839e:	e7fb      	b.n	8008398 <prv_server_delete+0x1a>

080083a0 <prv_set_int_value>:
{
 80083a0:	b510      	push	{r4, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	460c      	mov	r4, r1
    if (1 == lwm2m_data_decode_int(dataArray, &value))
 80083a6:	4669      	mov	r1, sp
 80083a8:	f7fe ff07 	bl	80071ba <lwm2m_data_decode_int>
 80083ac:	2801      	cmp	r0, #1
 80083ae:	d002      	beq.n	80083b6 <prv_set_int_value+0x16>
        result = COAP_400_BAD_REQUEST;
 80083b0:	2080      	movs	r0, #128	; 0x80
}
 80083b2:	b002      	add	sp, #8
 80083b4:	bd10      	pop	{r4, pc}
        if (value >= 0 && value <= 0xFFFFFFFF)
 80083b6:	9b00      	ldr	r3, [sp, #0]
 80083b8:	f04f 32ff 	mov.w	r2, #4294967295
 80083bc:	429a      	cmp	r2, r3
 80083be:	9a01      	ldr	r2, [sp, #4]
 80083c0:	f04f 0100 	mov.w	r1, #0
 80083c4:	eb71 0202 	sbcs.w	r2, r1, r2
 80083c8:	d302      	bcc.n	80083d0 <prv_set_int_value+0x30>
            *data = value;
 80083ca:	6023      	str	r3, [r4, #0]
            result = COAP_204_CHANGED;
 80083cc:	2044      	movs	r0, #68	; 0x44
 80083ce:	e7f0      	b.n	80083b2 <prv_set_int_value+0x12>
            result = COAP_406_NOT_ACCEPTABLE;
 80083d0:	2086      	movs	r0, #134	; 0x86
 80083d2:	e7ee      	b.n	80083b2 <prv_set_int_value+0x12>

080083d4 <prv_server_write>:
{
 80083d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083d8:	b085      	sub	sp, #20
 80083da:	4680      	mov	r8, r0
 80083dc:	4689      	mov	r9, r1
 80083de:	4616      	mov	r6, r2
 80083e0:	461d      	mov	r5, r3
 80083e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    targetP = (server_instance_t *)lwm2m_list_find(objectP->instanceList, instanceId);
 80083e4:	68a0      	ldr	r0, [r4, #8]
 80083e6:	f7fc f97c 	bl	80046e2 <lwm2m_list_find>
    if (NULL == targetP)
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d074      	beq.n	80084d8 <prv_server_write+0x104>
 80083ee:	4607      	mov	r7, r0
    if (writeType == LWM2M_WRITE_REPLACE_INSTANCE)
 80083f0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d001      	beq.n	80083fc <prv_server_write+0x28>
    i = 0;
 80083f8:	2400      	movs	r4, #0
 80083fa:	e04a      	b.n	8008492 <prv_server_write+0xbe>
        result = prv_server_delete(contextP, instanceId, objectP);
 80083fc:	4622      	mov	r2, r4
 80083fe:	4649      	mov	r1, r9
 8008400:	4640      	mov	r0, r8
 8008402:	f7ff ffbc 	bl	800837e <prv_server_delete>
        if (result == COAP_202_DELETED)
 8008406:	2842      	cmp	r0, #66	; 0x42
 8008408:	d169      	bne.n	80084de <prv_server_write+0x10a>
            result = prv_server_create(contextP, instanceId, numData, dataArray, objectP);
 800840a:	9400      	str	r4, [sp, #0]
 800840c:	462b      	mov	r3, r5
 800840e:	4632      	mov	r2, r6
 8008410:	4649      	mov	r1, r9
 8008412:	4640      	mov	r0, r8
 8008414:	f000 f866 	bl	80084e4 <prv_server_create>
            if (result == COAP_201_CREATED)
 8008418:	2841      	cmp	r0, #65	; 0x41
 800841a:	d160      	bne.n	80084de <prv_server_write+0x10a>
                result = COAP_204_CHANGED;
 800841c:	2044      	movs	r0, #68	; 0x44
        return result;
 800841e:	e05e      	b.n	80084de <prv_server_write+0x10a>
            result = prv_set_int_value(dataArray + i, &value);
 8008420:	a903      	add	r1, sp, #12
 8008422:	f7ff ffbd 	bl	80083a0 <prv_set_int_value>
            if (COAP_204_CHANGED == result)
 8008426:	2844      	cmp	r0, #68	; 0x44
 8008428:	d12e      	bne.n	8008488 <prv_server_write+0xb4>
                if (0 < value && value <= 0xFFFF)
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	1e59      	subs	r1, r3, #1
 800842e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008432:	4291      	cmp	r1, r2
 8008434:	d801      	bhi.n	800843a <prv_server_write+0x66>
                    targetP->shortServerId = value;
 8008436:	80fb      	strh	r3, [r7, #6]
 8008438:	e026      	b.n	8008488 <prv_server_write+0xb4>
                    result = COAP_406_NOT_ACCEPTABLE;
 800843a:	2086      	movs	r0, #134	; 0x86
        break;
 800843c:	e024      	b.n	8008488 <prv_server_write+0xb4>
            result = prv_set_int_value(dataArray + i, (uint32_t *)&(targetP->lifetime));
 800843e:	f107 0108 	add.w	r1, r7, #8
 8008442:	f7ff ffad 	bl	80083a0 <prv_set_int_value>
            break;
 8008446:	e01f      	b.n	8008488 <prv_server_write+0xb4>
            if (1 == lwm2m_data_decode_bool(dataArray + i, &value))
 8008448:	a903      	add	r1, sp, #12
 800844a:	f7fe ffa8 	bl	800739e <lwm2m_data_decode_bool>
 800844e:	2801      	cmp	r0, #1
 8008450:	d001      	beq.n	8008456 <prv_server_write+0x82>
                result = COAP_400_BAD_REQUEST;
 8008452:	2080      	movs	r0, #128	; 0x80
        break;
 8008454:	e018      	b.n	8008488 <prv_server_write+0xb4>
                targetP->storing = value;
 8008456:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800845a:	733b      	strb	r3, [r7, #12]
                result = COAP_204_CHANGED;
 800845c:	2044      	movs	r0, #68	; 0x44
 800845e:	e013      	b.n	8008488 <prv_server_write+0xb4>
            if ((dataArray[i].type == LWM2M_TYPE_STRING || dataArray[i].type == LWM2M_TYPE_OPAQUE)
 8008460:	3b04      	subs	r3, #4
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b01      	cmp	r3, #1
 8008466:	d901      	bls.n	800846c <prv_server_write+0x98>
                result = COAP_400_BAD_REQUEST;
 8008468:	2080      	movs	r0, #128	; 0x80
 800846a:	e00d      	b.n	8008488 <prv_server_write+0xb4>
             && dataArray[i].value.asBuffer.length > 0 && dataArray[i].value.asBuffer.length <= 3
 800846c:	6882      	ldr	r2, [r0, #8]
 800846e:	b37a      	cbz	r2, 80084d0 <prv_server_write+0xfc>
 8008470:	2a03      	cmp	r2, #3
 8008472:	d901      	bls.n	8008478 <prv_server_write+0xa4>
                result = COAP_400_BAD_REQUEST;
 8008474:	2080      	movs	r0, #128	; 0x80
 8008476:	e007      	b.n	8008488 <prv_server_write+0xb4>
                strncpy(targetP->binding, (char*)dataArray[i].value.asBuffer.buffer, dataArray[i].value.asBuffer.length);
 8008478:	68c1      	ldr	r1, [r0, #12]
 800847a:	f107 000d 	add.w	r0, r7, #13
 800847e:	f010 fb72 	bl	8018b66 <strncpy>
                result = COAP_204_CHANGED;
 8008482:	2044      	movs	r0, #68	; 0x44
 8008484:	e000      	b.n	8008488 <prv_server_write+0xb4>
        switch (dataArray[i].id)
 8008486:	2085      	movs	r0, #133	; 0x85
        i++;
 8008488:	3401      	adds	r4, #1
    } while (i < numData && result == COAP_204_CHANGED);
 800848a:	42b4      	cmp	r4, r6
 800848c:	da27      	bge.n	80084de <prv_server_write+0x10a>
 800848e:	2844      	cmp	r0, #68	; 0x44
 8008490:	d125      	bne.n	80084de <prv_server_write+0x10a>
        if (dataArray[i].type == LWM2M_TYPE_MULTIPLE_RESOURCE)
 8008492:	0121      	lsls	r1, r4, #4
 8008494:	eb05 1004 	add.w	r0, r5, r4, lsl #4
 8008498:	5c6b      	ldrb	r3, [r5, r1]
 800849a:	2b03      	cmp	r3, #3
 800849c:	d01a      	beq.n	80084d4 <prv_server_write+0x100>
        switch (dataArray[i].id)
 800849e:	8842      	ldrh	r2, [r0, #2]
 80084a0:	2a08      	cmp	r2, #8
 80084a2:	d81b      	bhi.n	80084dc <prv_server_write+0x108>
 80084a4:	a101      	add	r1, pc, #4	; (adr r1, 80084ac <prv_server_write+0xd8>)
 80084a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084aa:	bf00      	nop
 80084ac:	08008421 	.word	0x08008421
 80084b0:	0800843f 	.word	0x0800843f
 80084b4:	080084dd 	.word	0x080084dd
 80084b8:	080084dd 	.word	0x080084dd
 80084bc:	08008487 	.word	0x08008487
 80084c0:	080084dd 	.word	0x080084dd
 80084c4:	08008449 	.word	0x08008449
 80084c8:	08008461 	.word	0x08008461
 80084cc:	08008487 	.word	0x08008487
                result = COAP_400_BAD_REQUEST;
 80084d0:	2080      	movs	r0, #128	; 0x80
 80084d2:	e7d9      	b.n	8008488 <prv_server_write+0xb4>
            result = COAP_404_NOT_FOUND;
 80084d4:	2084      	movs	r0, #132	; 0x84
 80084d6:	e7d8      	b.n	800848a <prv_server_write+0xb6>
        return COAP_404_NOT_FOUND;
 80084d8:	2084      	movs	r0, #132	; 0x84
 80084da:	e000      	b.n	80084de <prv_server_write+0x10a>
        switch (dataArray[i].id)
 80084dc:	2084      	movs	r0, #132	; 0x84
}
 80084de:	b005      	add	sp, #20
 80084e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080084e4 <prv_server_create>:
static uint8_t prv_server_create(lwm2m_context_t * contextP,
                                 uint16_t instanceId,
                                 int numData,
                                 lwm2m_data_t * dataArray,
                                 lwm2m_object_t * objectP)
{
 80084e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	4606      	mov	r6, r0
 80084ec:	460c      	mov	r4, r1
 80084ee:	4615      	mov	r5, r2
 80084f0:	4698      	mov	r8, r3
 80084f2:	9f08      	ldr	r7, [sp, #32]
    server_instance_t * serverInstance;
    uint8_t result;

    serverInstance = (server_instance_t *)lwm2m_malloc(sizeof(server_instance_t));
 80084f4:	2014      	movs	r0, #20
 80084f6:	f000 fb2f 	bl	8008b58 <lwm2m_malloc>
    if (NULL == serverInstance) return COAP_500_INTERNAL_SERVER_ERROR;
 80084fa:	b330      	cbz	r0, 800854a <prv_server_create+0x66>
 80084fc:	4601      	mov	r1, r0
    memset(serverInstance, 0, sizeof(server_instance_t));
 80084fe:	f04f 0c00 	mov.w	ip, #0
 8008502:	f8c0 c000 	str.w	ip, [r0]
 8008506:	f8c0 c004 	str.w	ip, [r0, #4]
 800850a:	f8c0 c008 	str.w	ip, [r0, #8]
 800850e:	f8c0 c00c 	str.w	ip, [r0, #12]
 8008512:	f8c0 c010 	str.w	ip, [r0, #16]

    serverInstance->instanceId = instanceId;
 8008516:	8084      	strh	r4, [r0, #4]
    objectP->instanceList = LWM2M_LIST_ADD(objectP->instanceList, serverInstance);
 8008518:	68b8      	ldr	r0, [r7, #8]
 800851a:	f7fc f8c9 	bl	80046b0 <lwm2m_list_add>
 800851e:	60b8      	str	r0, [r7, #8]

    result = prv_server_write(contextP, instanceId, numData, dataArray, objectP, LWM2M_WRITE_REPLACE_RESOURCES);
 8008520:	2301      	movs	r3, #1
 8008522:	9301      	str	r3, [sp, #4]
 8008524:	9700      	str	r7, [sp, #0]
 8008526:	4643      	mov	r3, r8
 8008528:	462a      	mov	r2, r5
 800852a:	4621      	mov	r1, r4
 800852c:	4630      	mov	r0, r6
 800852e:	f7ff ff51 	bl	80083d4 <prv_server_write>
 8008532:	4605      	mov	r5, r0

    if (result != COAP_204_CHANGED)
 8008534:	2844      	cmp	r0, #68	; 0x44
 8008536:	d00a      	beq.n	800854e <prv_server_create+0x6a>
    {
        (void)prv_server_delete(contextP, instanceId, objectP);
 8008538:	463a      	mov	r2, r7
 800853a:	4621      	mov	r1, r4
 800853c:	4630      	mov	r0, r6
 800853e:	f7ff ff1e 	bl	800837e <prv_server_delete>
    {
        result = COAP_201_CREATED;
    }

    return result;
}
 8008542:	4628      	mov	r0, r5
 8008544:	b002      	add	sp, #8
 8008546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (NULL == serverInstance) return COAP_500_INTERNAL_SERVER_ERROR;
 800854a:	25a0      	movs	r5, #160	; 0xa0
 800854c:	e7f9      	b.n	8008542 <prv_server_create+0x5e>
        result = COAP_201_CREATED;
 800854e:	2541      	movs	r5, #65	; 0x41
 8008550:	e7f7      	b.n	8008542 <prv_server_create+0x5e>

08008552 <prv_get_value>:
{
 8008552:	b508      	push	{r3, lr}
 8008554:	4602      	mov	r2, r0
 8008556:	4608      	mov	r0, r1
    switch (dataP->id)
 8008558:	8853      	ldrh	r3, [r2, #2]
 800855a:	2b08      	cmp	r3, #8
 800855c:	d820      	bhi.n	80085a0 <prv_get_value+0x4e>
 800855e:	e8df f003 	tbb	[pc, r3]
 8008562:	0d07      	.short	0x0d07
 8008564:	1f051f1f 	.word	0x1f051f1f
 8008568:	1913      	.short	0x1913
 800856a:	05          	.byte	0x05
 800856b:	00          	.byte	0x00
 800856c:	2085      	movs	r0, #133	; 0x85
}
 800856e:	bd08      	pop	{r3, pc}
        lwm2m_data_encode_int(targetP->shortServerId, dataP);
 8008570:	88c0      	ldrh	r0, [r0, #6]
 8008572:	2100      	movs	r1, #0
 8008574:	f7fe fe1c 	bl	80071b0 <lwm2m_data_encode_int>
        return COAP_205_CONTENT;
 8008578:	2045      	movs	r0, #69	; 0x45
 800857a:	e7f8      	b.n	800856e <prv_get_value+0x1c>
        lwm2m_data_encode_int(targetP->lifetime, dataP);
 800857c:	6880      	ldr	r0, [r0, #8]
 800857e:	2100      	movs	r1, #0
 8008580:	f7fe fe16 	bl	80071b0 <lwm2m_data_encode_int>
        return COAP_205_CONTENT;
 8008584:	2045      	movs	r0, #69	; 0x45
 8008586:	e7f2      	b.n	800856e <prv_get_value+0x1c>
        lwm2m_data_encode_bool(targetP->storing, dataP);
 8008588:	4611      	mov	r1, r2
 800858a:	7b00      	ldrb	r0, [r0, #12]
 800858c:	f7fe ff03 	bl	8007396 <lwm2m_data_encode_bool>
        return COAP_205_CONTENT;
 8008590:	2045      	movs	r0, #69	; 0x45
 8008592:	e7ec      	b.n	800856e <prv_get_value+0x1c>
        lwm2m_data_encode_string(targetP->binding, dataP);
 8008594:	4611      	mov	r1, r2
 8008596:	300d      	adds	r0, #13
 8008598:	f7fe fdde 	bl	8007158 <lwm2m_data_encode_string>
        return COAP_205_CONTENT;
 800859c:	2045      	movs	r0, #69	; 0x45
 800859e:	e7e6      	b.n	800856e <prv_get_value+0x1c>
        return COAP_404_NOT_FOUND;
 80085a0:	2084      	movs	r0, #132	; 0x84
 80085a2:	e7e4      	b.n	800856e <prv_get_value+0x1c>

080085a4 <prv_server_read>:
{
 80085a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085a6:	b083      	sub	sp, #12
 80085a8:	4616      	mov	r6, r2
 80085aa:	461d      	mov	r5, r3
    targetP = (server_instance_t *)lwm2m_list_find(objectP->instanceList, instanceId);
 80085ac:	9b08      	ldr	r3, [sp, #32]
 80085ae:	6898      	ldr	r0, [r3, #8]
 80085b0:	f7fc f897 	bl	80046e2 <lwm2m_list_find>
    if (NULL == targetP) return COAP_404_NOT_FOUND;
 80085b4:	b390      	cbz	r0, 800861c <prv_server_read+0x78>
 80085b6:	4607      	mov	r7, r0
    if (*numDataP == 0)
 80085b8:	6834      	ldr	r4, [r6, #0]
 80085ba:	b10c      	cbz	r4, 80085c0 <prv_server_read+0x1c>
{
 80085bc:	2400      	movs	r4, #0
 80085be:	e024      	b.n	800860a <prv_server_read+0x66>
        uint16_t resList[] = {
 80085c0:	4b18      	ldr	r3, [pc, #96]	; (8008624 <prv_server_read+0x80>)
 80085c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80085c6:	ab02      	add	r3, sp, #8
 80085c8:	e903 0003 	stmdb	r3, {r0, r1}
        *dataArrayP = lwm2m_data_new(nbRes);
 80085cc:	2004      	movs	r0, #4
 80085ce:	f7fe fd8a 	bl	80070e6 <lwm2m_data_new>
 80085d2:	6028      	str	r0, [r5, #0]
        if (*dataArrayP == NULL) return COAP_500_INTERNAL_SERVER_ERROR;
 80085d4:	b170      	cbz	r0, 80085f4 <prv_server_read+0x50>
        *numDataP = nbRes;
 80085d6:	2304      	movs	r3, #4
 80085d8:	6033      	str	r3, [r6, #0]
        for (i = 0 ; i < nbRes ; i++)
 80085da:	2c03      	cmp	r4, #3
 80085dc:	dcee      	bgt.n	80085bc <prv_server_read+0x18>
            (*dataArrayP)[i].id = resList[i];
 80085de:	682b      	ldr	r3, [r5, #0]
 80085e0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80085e4:	aa02      	add	r2, sp, #8
 80085e6:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 80085ea:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 80085ee:	805a      	strh	r2, [r3, #2]
        for (i = 0 ; i < nbRes ; i++)
 80085f0:	3401      	adds	r4, #1
 80085f2:	e7f2      	b.n	80085da <prv_server_read+0x36>
        if (*dataArrayP == NULL) return COAP_500_INTERNAL_SERVER_ERROR;
 80085f4:	20a0      	movs	r0, #160	; 0xa0
 80085f6:	e012      	b.n	800861e <prv_server_read+0x7a>
            result = prv_get_value((*dataArrayP) + i, targetP);
 80085f8:	4639      	mov	r1, r7
 80085fa:	f7ff ffaa 	bl	8008552 <prv_get_value>
        i++;
 80085fe:	3401      	adds	r4, #1
    } while (i < *numDataP && result == COAP_205_CONTENT);
 8008600:	6833      	ldr	r3, [r6, #0]
 8008602:	42a3      	cmp	r3, r4
 8008604:	dd0b      	ble.n	800861e <prv_server_read+0x7a>
 8008606:	2845      	cmp	r0, #69	; 0x45
 8008608:	d109      	bne.n	800861e <prv_server_read+0x7a>
        if ((*dataArrayP)[i].type == LWM2M_TYPE_MULTIPLE_RESOURCE)
 800860a:	682b      	ldr	r3, [r5, #0]
 800860c:	0121      	lsls	r1, r4, #4
 800860e:	eb03 1004 	add.w	r0, r3, r4, lsl #4
 8008612:	5c5b      	ldrb	r3, [r3, r1]
 8008614:	2b03      	cmp	r3, #3
 8008616:	d1ef      	bne.n	80085f8 <prv_server_read+0x54>
            result = COAP_404_NOT_FOUND;
 8008618:	2084      	movs	r0, #132	; 0x84
 800861a:	e7f0      	b.n	80085fe <prv_server_read+0x5a>
    if (NULL == targetP) return COAP_404_NOT_FOUND;
 800861c:	2084      	movs	r0, #132	; 0x84
}
 800861e:	b003      	add	sp, #12
 8008620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008622:	bf00      	nop
 8008624:	0801b20c 	.word	0x0801b20c

08008628 <get_server_object>:

lwm2m_object_t * get_server_object()
{
 8008628:	b538      	push	{r3, r4, r5, lr}
    lwm2m_object_t * serverObj;

    serverObj = (lwm2m_object_t *)lwm2m_malloc(sizeof(lwm2m_object_t));
 800862a:	2028      	movs	r0, #40	; 0x28
 800862c:	f000 fa94 	bl	8008b58 <lwm2m_malloc>

    if (NULL != serverObj)
 8008630:	4604      	mov	r4, r0
 8008632:	b340      	cbz	r0, 8008686 <get_server_object+0x5e>
    {
        server_instance_t * serverInstance;

        memset(serverObj, 0, sizeof(lwm2m_object_t));
 8008634:	2228      	movs	r2, #40	; 0x28
 8008636:	2100      	movs	r1, #0
 8008638:	f00f fdc2 	bl	80181c0 <memset>

        serverObj->objID = 1;
 800863c:	2301      	movs	r3, #1
 800863e:	80a3      	strh	r3, [r4, #4]

        // Manually create an hardcoded server
        serverInstance = (server_instance_t *)lwm2m_malloc(sizeof(server_instance_t));
 8008640:	2014      	movs	r0, #20
 8008642:	f000 fa89 	bl	8008b58 <lwm2m_malloc>
        if (NULL == serverInstance)
 8008646:	4605      	mov	r5, r0
 8008648:	b1f8      	cbz	r0, 800868a <get_server_object+0x62>
        {
            lwm2m_free(serverObj);
            return NULL;
        }

        memset(serverInstance, 0, sizeof(server_instance_t));
 800864a:	2300      	movs	r3, #0
 800864c:	6003      	str	r3, [r0, #0]
 800864e:	6043      	str	r3, [r0, #4]
 8008650:	6083      	str	r3, [r0, #8]
 8008652:	60c3      	str	r3, [r0, #12]
 8008654:	6103      	str	r3, [r0, #16]
        serverInstance->instanceId = 0;
        serverInstance->shortServerId = 123;
 8008656:	237b      	movs	r3, #123	; 0x7b
 8008658:	80c3      	strh	r3, [r0, #6]
        serverInstance->lifetime = 300;
 800865a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800865e:	6083      	str	r3, [r0, #8]
        serverInstance->storing = false;
        serverInstance->binding[0] = 'U';
 8008660:	2355      	movs	r3, #85	; 0x55
 8008662:	7343      	strb	r3, [r0, #13]
        serverObj->instanceList = LWM2M_LIST_ADD(serverObj->instanceList, serverInstance);
 8008664:	4601      	mov	r1, r0
 8008666:	68a0      	ldr	r0, [r4, #8]
 8008668:	f7fc f822 	bl	80046b0 <lwm2m_list_add>
 800866c:	60a0      	str	r0, [r4, #8]

        serverObj->readFunc = prv_server_read;
 800866e:	4b09      	ldr	r3, [pc, #36]	; (8008694 <get_server_object+0x6c>)
 8008670:	60e3      	str	r3, [r4, #12]
        serverObj->writeFunc = prv_server_write;
 8008672:	4b09      	ldr	r3, [pc, #36]	; (8008698 <get_server_object+0x70>)
 8008674:	6123      	str	r3, [r4, #16]
        serverObj->createFunc = prv_server_create;
 8008676:	4b09      	ldr	r3, [pc, #36]	; (800869c <get_server_object+0x74>)
 8008678:	61a3      	str	r3, [r4, #24]
        serverObj->deleteFunc = prv_server_delete;
 800867a:	4b09      	ldr	r3, [pc, #36]	; (80086a0 <get_server_object+0x78>)
 800867c:	61e3      	str	r3, [r4, #28]
        serverObj->executeFunc = prv_server_execute;
 800867e:	4b09      	ldr	r3, [pc, #36]	; (80086a4 <get_server_object+0x7c>)
 8008680:	6163      	str	r3, [r4, #20]
        serverObj->discoverFunc = prv_server_discover;
 8008682:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <get_server_object+0x80>)
 8008684:	6223      	str	r3, [r4, #32]
    }

    return serverObj;
}
 8008686:	4620      	mov	r0, r4
 8008688:	bd38      	pop	{r3, r4, r5, pc}
            lwm2m_free(serverObj);
 800868a:	4620      	mov	r0, r4
 800868c:	f000 fa68 	bl	8008b60 <lwm2m_free>
            return NULL;
 8008690:	462c      	mov	r4, r5
 8008692:	e7f8      	b.n	8008686 <get_server_object+0x5e>
 8008694:	080085a5 	.word	0x080085a5
 8008698:	080083d5 	.word	0x080083d5
 800869c:	080084e5 	.word	0x080084e5
 80086a0:	0800837f 	.word	0x0800837f
 80086a4:	08008359 	.word	0x08008359
 80086a8:	080082e5 	.word	0x080082e5

080086ac <prv_discover>:
static uint8_t prv_discover(lwm2m_context_t * contextP,
                            uint16_t instanceId,
                            int * numDataP,
                            lwm2m_data_t ** dataArrayP,
                            lwm2m_object_t * objectP)
{
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	461c      	mov	r4, r3

    /* Unused parameter */
    (void)contextP;

    // is the server asking for the full object ?
    if (*numDataP == 0)
 80086b0:	6813      	ldr	r3, [r2, #0]
 80086b2:	b15b      	cbz	r3, 80086cc <prv_discover+0x20>
        (*dataArrayP)[2].id = 3;
        (*dataArrayP)[3].id = 4;
    }
    else
    {
        for (i = 0; i < *numDataP; i++)
 80086b4:	2200      	movs	r2, #0
 80086b6:	4293      	cmp	r3, r2
 80086b8:	dd1d      	ble.n	80086f6 <prv_discover+0x4a>
        {
            switch ((*dataArrayP)[i].id)
 80086ba:	6821      	ldr	r1, [r4, #0]
 80086bc:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 80086c0:	8849      	ldrh	r1, [r1, #2]
 80086c2:	3901      	subs	r1, #1
 80086c4:	2903      	cmp	r1, #3
 80086c6:	d81a      	bhi.n	80086fe <prv_discover+0x52>
        for (i = 0; i < *numDataP; i++)
 80086c8:	3201      	adds	r2, #1
 80086ca:	e7f4      	b.n	80086b6 <prv_discover+0xa>
 80086cc:	4615      	mov	r5, r2
        *dataArrayP = lwm2m_data_new(4);
 80086ce:	2004      	movs	r0, #4
 80086d0:	f7fe fd09 	bl	80070e6 <lwm2m_data_new>
 80086d4:	6020      	str	r0, [r4, #0]
        if (*dataArrayP == NULL) return COAP_500_INTERNAL_SERVER_ERROR;
 80086d6:	b180      	cbz	r0, 80086fa <prv_discover+0x4e>
        *numDataP = 4;
 80086d8:	2304      	movs	r3, #4
 80086da:	602b      	str	r3, [r5, #0]
        (*dataArrayP)[0].id = 1;
 80086dc:	6822      	ldr	r2, [r4, #0]
 80086de:	2101      	movs	r1, #1
 80086e0:	8051      	strh	r1, [r2, #2]
        (*dataArrayP)[1].id = 2;
 80086e2:	6822      	ldr	r2, [r4, #0]
 80086e4:	2102      	movs	r1, #2
 80086e6:	8251      	strh	r1, [r2, #18]
        (*dataArrayP)[2].id = 3;
 80086e8:	6822      	ldr	r2, [r4, #0]
 80086ea:	2103      	movs	r1, #3
 80086ec:	8451      	strh	r1, [r2, #34]	; 0x22
        (*dataArrayP)[3].id = 4;
 80086ee:	6822      	ldr	r2, [r4, #0]
 80086f0:	8653      	strh	r3, [r2, #50]	; 0x32
            default:
                return COAP_404_NOT_FOUND;
            }
        }
    }
    return COAP_205_CONTENT;
 80086f2:	2045      	movs	r0, #69	; 0x45
 80086f4:	e000      	b.n	80086f8 <prv_discover+0x4c>
 80086f6:	2045      	movs	r0, #69	; 0x45
}
 80086f8:	bd38      	pop	{r3, r4, r5, pc}
        if (*dataArrayP == NULL) return COAP_500_INTERNAL_SERVER_ERROR;
 80086fa:	20a0      	movs	r0, #160	; 0xa0
 80086fc:	e7fc      	b.n	80086f8 <prv_discover+0x4c>
                return COAP_404_NOT_FOUND;
 80086fe:	2084      	movs	r0, #132	; 0x84
 8008700:	e7fa      	b.n	80086f8 <prv_discover+0x4c>

08008702 <prv_delete>:
}

static uint8_t prv_delete(lwm2m_context_t * contextP,
                          uint16_t id,
                          lwm2m_object_t * objectP)
{
 8008702:	b510      	push	{r4, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	4614      	mov	r4, r2
    prv_instance_t * targetP;

    /* Unused parameter */
    (void)contextP;

    objectP->instanceList = lwm2m_list_remove(objectP->instanceList, id, (lwm2m_list_t **)&targetP);
 8008708:	aa01      	add	r2, sp, #4
 800870a:	68a0      	ldr	r0, [r4, #8]
 800870c:	f7fb fff5 	bl	80046fa <lwm2m_list_remove>
 8008710:	60a0      	str	r0, [r4, #8]
    if (NULL == targetP) return COAP_404_NOT_FOUND;
 8008712:	9801      	ldr	r0, [sp, #4]
 8008714:	b120      	cbz	r0, 8008720 <prv_delete+0x1e>

    lwm2m_free(targetP);
 8008716:	f000 fa23 	bl	8008b60 <lwm2m_free>

    return COAP_202_DELETED;
 800871a:	2042      	movs	r0, #66	; 0x42
}
 800871c:	b002      	add	sp, #8
 800871e:	bd10      	pop	{r4, pc}
    if (NULL == targetP) return COAP_404_NOT_FOUND;
 8008720:	2084      	movs	r0, #132	; 0x84
 8008722:	e7fb      	b.n	800871c <prv_delete+0x1a>

08008724 <prv_output_buffer>:
{
 8008724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008726:	b085      	sub	sp, #20
 8008728:	4607      	mov	r7, r0
 800872a:	460e      	mov	r6, r1
    i = 0;
 800872c:	2500      	movs	r5, #0
    while (i < length)
 800872e:	e04c      	b.n	80087ca <prv_output_buffer+0xa6>
            fprintf(stderr, "%02X ", array[j]);
 8008730:	4b30      	ldr	r3, [pc, #192]	; (80087f4 <prv_output_buffer+0xd0>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f104 0210 	add.w	r2, r4, #16
 8008738:	446a      	add	r2, sp
 800873a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800873e:	492e      	ldr	r1, [pc, #184]	; (80087f8 <prv_output_buffer+0xd4>)
 8008740:	68d8      	ldr	r0, [r3, #12]
 8008742:	f00f fc1d 	bl	8017f80 <fiprintf>
        for (j = 0 ; j < 16 && i+j < length; j++)
 8008746:	3401      	adds	r4, #1
 8008748:	2c0f      	cmp	r4, #15
 800874a:	dc0c      	bgt.n	8008766 <prv_output_buffer+0x42>
 800874c:	192b      	adds	r3, r5, r4
 800874e:	42b3      	cmp	r3, r6
 8008750:	dbee      	blt.n	8008730 <prv_output_buffer+0xc>
 8008752:	e008      	b.n	8008766 <prv_output_buffer+0x42>
            fprintf(stderr, "   ");
 8008754:	4b27      	ldr	r3, [pc, #156]	; (80087f4 <prv_output_buffer+0xd0>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	2203      	movs	r2, #3
 800875c:	2101      	movs	r1, #1
 800875e:	4827      	ldr	r0, [pc, #156]	; (80087fc <prv_output_buffer+0xd8>)
 8008760:	f00f fcc0 	bl	80180e4 <fwrite>
            j++;
 8008764:	3401      	adds	r4, #1
        while (j < 16)
 8008766:	2c0f      	cmp	r4, #15
 8008768:	ddf4      	ble.n	8008754 <prv_output_buffer+0x30>
        fprintf(stderr, "  ");
 800876a:	4b22      	ldr	r3, [pc, #136]	; (80087f4 <prv_output_buffer+0xd0>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	2202      	movs	r2, #2
 8008772:	2101      	movs	r1, #1
 8008774:	4822      	ldr	r0, [pc, #136]	; (8008800 <prv_output_buffer+0xdc>)
 8008776:	f00f fcb5 	bl	80180e4 <fwrite>
        for (j = 0 ; j < 16 && i+j < length; j++)
 800877a:	2400      	movs	r4, #0
 800877c:	e008      	b.n	8008790 <prv_output_buffer+0x6c>
                fprintf(stderr, ". ");
 800877e:	4b1d      	ldr	r3, [pc, #116]	; (80087f4 <prv_output_buffer+0xd0>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	2202      	movs	r2, #2
 8008786:	2101      	movs	r1, #1
 8008788:	481e      	ldr	r0, [pc, #120]	; (8008804 <prv_output_buffer+0xe0>)
 800878a:	f00f fcab 	bl	80180e4 <fwrite>
        for (j = 0 ; j < 16 && i+j < length; j++)
 800878e:	3401      	adds	r4, #1
 8008790:	2c0f      	cmp	r4, #15
 8008792:	dc13      	bgt.n	80087bc <prv_output_buffer+0x98>
 8008794:	192b      	adds	r3, r5, r4
 8008796:	42b3      	cmp	r3, r6
 8008798:	da10      	bge.n	80087bc <prv_output_buffer+0x98>
            if (isprint(array[j]))
 800879a:	f104 0310 	add.w	r3, r4, #16
 800879e:	446b      	add	r3, sp
 80087a0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80087a4:	4b18      	ldr	r3, [pc, #96]	; (8008808 <prv_output_buffer+0xe4>)
 80087a6:	5cd3      	ldrb	r3, [r2, r3]
 80087a8:	f013 0f97 	tst.w	r3, #151	; 0x97
 80087ac:	d0e7      	beq.n	800877e <prv_output_buffer+0x5a>
                fprintf(stderr, "%c ", array[j]);
 80087ae:	4b11      	ldr	r3, [pc, #68]	; (80087f4 <prv_output_buffer+0xd0>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4916      	ldr	r1, [pc, #88]	; (800880c <prv_output_buffer+0xe8>)
 80087b4:	68d8      	ldr	r0, [r3, #12]
 80087b6:	f00f fbe3 	bl	8017f80 <fiprintf>
 80087ba:	e7e8      	b.n	800878e <prv_output_buffer+0x6a>
        fprintf(stderr, "\n");
 80087bc:	4b0d      	ldr	r3, [pc, #52]	; (80087f4 <prv_output_buffer+0xd0>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68d9      	ldr	r1, [r3, #12]
 80087c2:	200a      	movs	r0, #10
 80087c4:	f00f fc26 	bl	8018014 <fputc>
        i += 16;
 80087c8:	3510      	adds	r5, #16
    while (i < length)
 80087ca:	42b5      	cmp	r5, r6
 80087cc:	da10      	bge.n	80087f0 <prv_output_buffer+0xcc>
        fprintf(stderr, "  ");
 80087ce:	4b09      	ldr	r3, [pc, #36]	; (80087f4 <prv_output_buffer+0xd0>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	2202      	movs	r2, #2
 80087d6:	2101      	movs	r1, #1
 80087d8:	4809      	ldr	r0, [pc, #36]	; (8008800 <prv_output_buffer+0xdc>)
 80087da:	f00f fc83 	bl	80180e4 <fwrite>
        memcpy(array, buffer+i, 16);
 80087de:	197b      	adds	r3, r7, r5
 80087e0:	466c      	mov	r4, sp
 80087e2:	5978      	ldr	r0, [r7, r5]
 80087e4:	6859      	ldr	r1, [r3, #4]
 80087e6:	689a      	ldr	r2, [r3, #8]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        for (j = 0 ; j < 16 && i+j < length; j++)
 80087ec:	2400      	movs	r4, #0
 80087ee:	e7ab      	b.n	8008748 <prv_output_buffer+0x24>
}
 80087f0:	b005      	add	sp, #20
 80087f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087f4:	20000120 	.word	0x20000120
 80087f8:	0801baac 	.word	0x0801baac
 80087fc:	0801bab4 	.word	0x0801bab4
 8008800:	0801baa8 	.word	0x0801baa8
 8008804:	0801babc 	.word	0x0801babc
 8008808:	0801c53c 	.word	0x0801c53c
 800880c:	0801bab8 	.word	0x0801bab8

08008810 <prv_exec>:
                        uint16_t instanceId,
                        uint16_t resourceId,
                        uint8_t * buffer,
                        int length,
                        lwm2m_object_t * objectP)
{
 8008810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	460f      	mov	r7, r1
 8008818:	4614      	mov	r4, r2
 800881a:	461d      	mov	r5, r3
 800881c:	9e09      	ldr	r6, [sp, #36]	; 0x24
    /* Unused parameter */
    (void)contextP;

    if (NULL == lwm2m_list_find(objectP->instanceList, instanceId)) return COAP_404_NOT_FOUND;
 800881e:	68b0      	ldr	r0, [r6, #8]
 8008820:	f7fb ff5f 	bl	80046e2 <lwm2m_list_find>
 8008824:	b330      	cbz	r0, 8008874 <prv_exec+0x64>

    switch (resourceId)
 8008826:	2c02      	cmp	r4, #2
 8008828:	d009      	beq.n	800883e <prv_exec+0x2e>
 800882a:	2c03      	cmp	r4, #3
 800882c:	d024      	beq.n	8008878 <prv_exec+0x68>
 800882e:	2c01      	cmp	r4, #1
 8008830:	d003      	beq.n	800883a <prv_exec+0x2a>
        fprintf(stdout, "-----------------\r\n\r\n");
        return COAP_204_CHANGED;
    case 3:
        return COAP_405_METHOD_NOT_ALLOWED;
    default:
        return COAP_404_NOT_FOUND;
 8008832:	2084      	movs	r0, #132	; 0x84
    }
}
 8008834:	b002      	add	sp, #8
 8008836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (resourceId)
 800883a:	2085      	movs	r0, #133	; 0x85
 800883c:	e7fa      	b.n	8008834 <prv_exec+0x24>
        fprintf(stdout, "\r\n-----------------\r\n"
 800883e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800887c <prv_exec+0x6c>
 8008842:	f8d8 3000 	ldr.w	r3, [r8]
 8008846:	6898      	ldr	r0, [r3, #8]
 8008848:	9b08      	ldr	r3, [sp, #32]
 800884a:	9301      	str	r3, [sp, #4]
 800884c:	9400      	str	r4, [sp, #0]
 800884e:	463b      	mov	r3, r7
 8008850:	88b2      	ldrh	r2, [r6, #4]
 8008852:	490b      	ldr	r1, [pc, #44]	; (8008880 <prv_exec+0x70>)
 8008854:	f00f fb94 	bl	8017f80 <fiprintf>
        prv_output_buffer((uint8_t*)buffer, length);
 8008858:	9908      	ldr	r1, [sp, #32]
 800885a:	4628      	mov	r0, r5
 800885c:	f7ff ff62 	bl	8008724 <prv_output_buffer>
        fprintf(stdout, "-----------------\r\n\r\n");
 8008860:	f8d8 3000 	ldr.w	r3, [r8]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	2215      	movs	r2, #21
 8008868:	2101      	movs	r1, #1
 800886a:	4806      	ldr	r0, [pc, #24]	; (8008884 <prv_exec+0x74>)
 800886c:	f00f fc3a 	bl	80180e4 <fwrite>
        return COAP_204_CHANGED;
 8008870:	2044      	movs	r0, #68	; 0x44
 8008872:	e7df      	b.n	8008834 <prv_exec+0x24>
    if (NULL == lwm2m_list_find(objectP->instanceList, instanceId)) return COAP_404_NOT_FOUND;
 8008874:	2084      	movs	r0, #132	; 0x84
 8008876:	e7dd      	b.n	8008834 <prv_exec+0x24>
    switch (resourceId)
 8008878:	2085      	movs	r0, #133	; 0x85
 800887a:	e7db      	b.n	8008834 <prv_exec+0x24>
 800887c:	20000120 	.word	0x20000120
 8008880:	0801bac0 	.word	0x0801bac0
 8008884:	0801bb04 	.word	0x0801bb04

08008888 <prv_write>:
{
 8008888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800888c:	b085      	sub	sp, #20
 800888e:	4680      	mov	r8, r0
 8008890:	4689      	mov	r9, r1
 8008892:	4616      	mov	r6, r2
 8008894:	461d      	mov	r5, r3
 8008896:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    targetP = (prv_instance_t *)lwm2m_list_find(objectP->instanceList, instanceId);
 8008898:	68a0      	ldr	r0, [r4, #8]
 800889a:	f7fb ff22 	bl	80046e2 <lwm2m_list_find>
    if (NULL == targetP) return COAP_404_NOT_FOUND;
 800889e:	2800      	cmp	r0, #0
 80088a0:	d063      	beq.n	800896a <prv_write+0xe2>
 80088a2:	4607      	mov	r7, r0
    if (writeType == LWM2M_WRITE_REPLACE_INSTANCE)
 80088a4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d001      	beq.n	80088b0 <prv_write+0x28>
    for (i = 0 ; i < numData ; i++)
 80088ac:	2400      	movs	r4, #0
 80088ae:	e02e      	b.n	800890e <prv_write+0x86>
        uint8_t result = prv_delete(contextP, instanceId, objectP);
 80088b0:	4622      	mov	r2, r4
 80088b2:	4649      	mov	r1, r9
 80088b4:	4640      	mov	r0, r8
 80088b6:	f7ff ff24 	bl	8008702 <prv_delete>
        if (result == COAP_202_DELETED)
 80088ba:	2842      	cmp	r0, #66	; 0x42
 80088bc:	d10b      	bne.n	80088d6 <prv_write+0x4e>
            result = prv_create(contextP, instanceId, numData, dataArray, objectP);
 80088be:	9400      	str	r4, [sp, #0]
 80088c0:	462b      	mov	r3, r5
 80088c2:	4632      	mov	r2, r6
 80088c4:	4649      	mov	r1, r9
 80088c6:	4640      	mov	r0, r8
 80088c8:	f000 f858 	bl	800897c <prv_create>
            if (result == COAP_201_CREATED)
 80088cc:	2841      	cmp	r0, #65	; 0x41
 80088ce:	d102      	bne.n	80088d6 <prv_write+0x4e>
                result = COAP_204_CHANGED;
 80088d0:	2044      	movs	r0, #68	; 0x44
        return result;
 80088d2:	e000      	b.n	80088d6 <prv_write+0x4e>
        switch (dataArray[i].id)
 80088d4:	2085      	movs	r0, #133	; 0x85
}
 80088d6:	b005      	add	sp, #20
 80088d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if (1 != lwm2m_data_decode_int(dataArray + i, &value) || value < 0 || value > 0xFF)
 80088dc:	a902      	add	r1, sp, #8
 80088de:	f7fe fc6c 	bl	80071ba <lwm2m_data_decode_int>
 80088e2:	2801      	cmp	r0, #1
 80088e4:	d10a      	bne.n	80088fc <prv_write+0x74>
 80088e6:	9a02      	ldr	r2, [sp, #8]
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	db06      	blt.n	80088fc <prv_write+0x74>
 80088ee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80088f2:	f173 0300 	sbcs.w	r3, r3, #0
 80088f6:	da01      	bge.n	80088fc <prv_write+0x74>
            targetP->test = (uint8_t)value;
 80088f8:	71ba      	strb	r2, [r7, #6]
        break;
 80088fa:	e007      	b.n	800890c <prv_write+0x84>
                return COAP_400_BAD_REQUEST;
 80088fc:	2080      	movs	r0, #128	; 0x80
 80088fe:	e7ea      	b.n	80088d6 <prv_write+0x4e>
            if (1 != lwm2m_data_decode_float(dataArray + i, &(targetP->dec)))
 8008900:	f107 0108 	add.w	r1, r7, #8
 8008904:	f7fe fd03 	bl	800730e <lwm2m_data_decode_float>
 8008908:	2801      	cmp	r0, #1
 800890a:	d134      	bne.n	8008976 <prv_write+0xee>
    for (i = 0 ; i < numData ; i++)
 800890c:	3401      	adds	r4, #1
 800890e:	42b4      	cmp	r4, r6
 8008910:	da29      	bge.n	8008966 <prv_write+0xde>
        if (dataArray[i].type == LWM2M_TYPE_MULTIPLE_RESOURCE) return  COAP_404_NOT_FOUND;
 8008912:	0121      	lsls	r1, r4, #4
 8008914:	eb05 1004 	add.w	r0, r5, r4, lsl #4
 8008918:	5c6b      	ldrb	r3, [r5, r1]
 800891a:	2b03      	cmp	r3, #3
 800891c:	d027      	beq.n	800896e <prv_write+0xe6>
        switch (dataArray[i].id)
 800891e:	8841      	ldrh	r1, [r0, #2]
 8008920:	3901      	subs	r1, #1
 8008922:	2903      	cmp	r1, #3
 8008924:	d825      	bhi.n	8008972 <prv_write+0xea>
 8008926:	a301      	add	r3, pc, #4	; (adr r3, 800892c <prv_write+0xa4>)
 8008928:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800892c:	080088dd 	.word	0x080088dd
 8008930:	080088d5 	.word	0x080088d5
 8008934:	08008901 	.word	0x08008901
 8008938:	0800893d 	.word	0x0800893d
            if (1 != lwm2m_data_decode_int(dataArray + i, &value) || value < INT16_MIN || value > INT16_MAX)
 800893c:	a902      	add	r1, sp, #8
 800893e:	f7fe fc3c 	bl	80071ba <lwm2m_data_decode_int>
 8008942:	2801      	cmp	r0, #1
 8008944:	d10d      	bne.n	8008962 <prv_write+0xda>
 8008946:	9b02      	ldr	r3, [sp, #8]
 8008948:	9a03      	ldr	r2, [sp, #12]
 800894a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800894e:	f172 31ff 	sbcs.w	r1, r2, #4294967295
 8008952:	db06      	blt.n	8008962 <prv_write+0xda>
 8008954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008958:	f172 0200 	sbcs.w	r2, r2, #0
 800895c:	da01      	bge.n	8008962 <prv_write+0xda>
            targetP->sig = (int16_t)value;
 800895e:	823b      	strh	r3, [r7, #16]
        break;
 8008960:	e7d4      	b.n	800890c <prv_write+0x84>
                return COAP_400_BAD_REQUEST;
 8008962:	2080      	movs	r0, #128	; 0x80
 8008964:	e7b7      	b.n	80088d6 <prv_write+0x4e>
    return COAP_204_CHANGED;
 8008966:	2044      	movs	r0, #68	; 0x44
 8008968:	e7b5      	b.n	80088d6 <prv_write+0x4e>
    if (NULL == targetP) return COAP_404_NOT_FOUND;
 800896a:	2084      	movs	r0, #132	; 0x84
 800896c:	e7b3      	b.n	80088d6 <prv_write+0x4e>
        if (dataArray[i].type == LWM2M_TYPE_MULTIPLE_RESOURCE) return  COAP_404_NOT_FOUND;
 800896e:	2084      	movs	r0, #132	; 0x84
 8008970:	e7b1      	b.n	80088d6 <prv_write+0x4e>
            return COAP_404_NOT_FOUND;
 8008972:	2084      	movs	r0, #132	; 0x84
 8008974:	e7af      	b.n	80088d6 <prv_write+0x4e>
                return COAP_400_BAD_REQUEST;
 8008976:	2080      	movs	r0, #128	; 0x80
 8008978:	e7ad      	b.n	80088d6 <prv_write+0x4e>
 800897a:	bf00      	nop

0800897c <prv_create>:
{
 800897c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	4606      	mov	r6, r0
 8008984:	460c      	mov	r4, r1
 8008986:	4615      	mov	r5, r2
 8008988:	4698      	mov	r8, r3
 800898a:	9f08      	ldr	r7, [sp, #32]
    targetP = (prv_instance_t *)lwm2m_malloc(sizeof(prv_instance_t));
 800898c:	2018      	movs	r0, #24
 800898e:	f000 f8e3 	bl	8008b58 <lwm2m_malloc>
    if (NULL == targetP) return COAP_500_INTERNAL_SERVER_ERROR;
 8008992:	b340      	cbz	r0, 80089e6 <prv_create+0x6a>
 8008994:	4601      	mov	r1, r0
    memset(targetP, 0, sizeof(prv_instance_t));
 8008996:	f04f 0c00 	mov.w	ip, #0
 800899a:	f8c0 c000 	str.w	ip, [r0]
 800899e:	f8c0 c004 	str.w	ip, [r0, #4]
 80089a2:	f8c0 c008 	str.w	ip, [r0, #8]
 80089a6:	f8c0 c00c 	str.w	ip, [r0, #12]
 80089aa:	f8c0 c010 	str.w	ip, [r0, #16]
 80089ae:	f8c0 c014 	str.w	ip, [r0, #20]
    targetP->shortID = instanceId;
 80089b2:	8084      	strh	r4, [r0, #4]
    objectP->instanceList = LWM2M_LIST_ADD(objectP->instanceList, targetP);
 80089b4:	68b8      	ldr	r0, [r7, #8]
 80089b6:	f7fb fe7b 	bl	80046b0 <lwm2m_list_add>
 80089ba:	60b8      	str	r0, [r7, #8]
    result = prv_write(contextP, instanceId, numData, dataArray, objectP, LWM2M_WRITE_REPLACE_RESOURCES);
 80089bc:	2301      	movs	r3, #1
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	9700      	str	r7, [sp, #0]
 80089c2:	4643      	mov	r3, r8
 80089c4:	462a      	mov	r2, r5
 80089c6:	4621      	mov	r1, r4
 80089c8:	4630      	mov	r0, r6
 80089ca:	f7ff ff5d 	bl	8008888 <prv_write>
 80089ce:	4605      	mov	r5, r0
    if (result != COAP_204_CHANGED)
 80089d0:	2844      	cmp	r0, #68	; 0x44
 80089d2:	d00a      	beq.n	80089ea <prv_create+0x6e>
        (void)prv_delete(contextP, instanceId, objectP);
 80089d4:	463a      	mov	r2, r7
 80089d6:	4621      	mov	r1, r4
 80089d8:	4630      	mov	r0, r6
 80089da:	f7ff fe92 	bl	8008702 <prv_delete>
}
 80089de:	4628      	mov	r0, r5
 80089e0:	b002      	add	sp, #8
 80089e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (NULL == targetP) return COAP_500_INTERNAL_SERVER_ERROR;
 80089e6:	25a0      	movs	r5, #160	; 0xa0
 80089e8:	e7f9      	b.n	80089de <prv_create+0x62>
        result = COAP_201_CREATED;
 80089ea:	2541      	movs	r5, #65	; 0x41
 80089ec:	e7f7      	b.n	80089de <prv_create+0x62>
	...

080089f0 <prv_read>:
{
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	461e      	mov	r6, r3
    targetP = objectP->instanceList;
 80089f4:	9b06      	ldr	r3, [sp, #24]
 80089f6:	689f      	ldr	r7, [r3, #8]
    if (NULL == targetP) {
 80089f8:	2f00      	cmp	r7, #0
 80089fa:	d042      	beq.n	8008a82 <prv_read+0x92>
 80089fc:	4615      	mov	r5, r2
    if (*numDataP == 0)
 80089fe:	6813      	ldr	r3, [r2, #0]
 8008a00:	b10b      	cbz	r3, 8008a06 <prv_read+0x16>
{
 8008a02:	2400      	movs	r4, #0
 8008a04:	e017      	b.n	8008a36 <prv_read+0x46>
        *dataArrayP = lwm2m_data_new(3);
 8008a06:	2003      	movs	r0, #3
 8008a08:	f7fe fb6d 	bl	80070e6 <lwm2m_data_new>
 8008a0c:	6030      	str	r0, [r6, #0]
        if (*dataArrayP == NULL) return COAP_500_INTERNAL_SERVER_ERROR;
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d039      	beq.n	8008a86 <prv_read+0x96>
        *numDataP = 3;
 8008a12:	2303      	movs	r3, #3
 8008a14:	602b      	str	r3, [r5, #0]
        (*dataArrayP)[0].id = 1;
 8008a16:	6832      	ldr	r2, [r6, #0]
 8008a18:	2101      	movs	r1, #1
 8008a1a:	8051      	strh	r1, [r2, #2]
        (*dataArrayP)[1].id = 3;
 8008a1c:	6832      	ldr	r2, [r6, #0]
 8008a1e:	8253      	strh	r3, [r2, #18]
        (*dataArrayP)[2].id = 4;
 8008a20:	6833      	ldr	r3, [r6, #0]
 8008a22:	2204      	movs	r2, #4
 8008a24:	845a      	strh	r2, [r3, #34]	; 0x22
 8008a26:	e7ec      	b.n	8008a02 <prv_read+0x12>
        switch ((*dataArrayP)[i].id)
 8008a28:	2085      	movs	r0, #133	; 0x85
}
 8008a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lwm2m_data_encode_int(targetP->test, *dataArrayP + i);
 8008a2c:	79b8      	ldrb	r0, [r7, #6]
 8008a2e:	2100      	movs	r1, #0
 8008a30:	f7fe fbbe 	bl	80071b0 <lwm2m_data_encode_int>
    for (i = 0 ; i < *numDataP ; i++)
 8008a34:	3401      	adds	r4, #1
 8008a36:	682b      	ldr	r3, [r5, #0]
 8008a38:	42a3      	cmp	r3, r4
 8008a3a:	dd20      	ble.n	8008a7e <prv_read+0x8e>
        if ((*dataArrayP)[i].type == LWM2M_TYPE_MULTIPLE_RESOURCE)
 8008a3c:	6833      	ldr	r3, [r6, #0]
 8008a3e:	0121      	lsls	r1, r4, #4
 8008a40:	eb03 1204 	add.w	r2, r3, r4, lsl #4
 8008a44:	5c5b      	ldrb	r3, [r3, r1]
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d01f      	beq.n	8008a8a <prv_read+0x9a>
        switch ((*dataArrayP)[i].id)
 8008a4a:	8851      	ldrh	r1, [r2, #2]
 8008a4c:	3901      	subs	r1, #1
 8008a4e:	2903      	cmp	r1, #3
 8008a50:	d81d      	bhi.n	8008a8e <prv_read+0x9e>
 8008a52:	a301      	add	r3, pc, #4	; (adr r3, 8008a58 <prv_read+0x68>)
 8008a54:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8008a58:	08008a2d 	.word	0x08008a2d
 8008a5c:	08008a29 	.word	0x08008a29
 8008a60:	08008a69 	.word	0x08008a69
 8008a64:	08008a73 	.word	0x08008a73
            lwm2m_data_encode_float(targetP->dec, *dataArrayP + i);
 8008a68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a6c:	f7fe fc4a 	bl	8007304 <lwm2m_data_encode_float>
            break;
 8008a70:	e7e0      	b.n	8008a34 <prv_read+0x44>
            lwm2m_data_encode_int(targetP->sig, *dataArrayP + i);
 8008a72:	f9b7 0010 	ldrsh.w	r0, [r7, #16]
 8008a76:	17c1      	asrs	r1, r0, #31
 8008a78:	f7fe fb9a 	bl	80071b0 <lwm2m_data_encode_int>
            break;
 8008a7c:	e7da      	b.n	8008a34 <prv_read+0x44>
    return COAP_205_CONTENT;
 8008a7e:	2045      	movs	r0, #69	; 0x45
 8008a80:	e7d3      	b.n	8008a2a <prv_read+0x3a>
    	return COAP_404_NOT_FOUND;
 8008a82:	2084      	movs	r0, #132	; 0x84
 8008a84:	e7d1      	b.n	8008a2a <prv_read+0x3a>
        if (*dataArrayP == NULL) return COAP_500_INTERNAL_SERVER_ERROR;
 8008a86:	20a0      	movs	r0, #160	; 0xa0
 8008a88:	e7cf      	b.n	8008a2a <prv_read+0x3a>
            return COAP_404_NOT_FOUND;
 8008a8a:	2084      	movs	r0, #132	; 0x84
 8008a8c:	e7cd      	b.n	8008a2a <prv_read+0x3a>
            return COAP_404_NOT_FOUND;
 8008a8e:	2084      	movs	r0, #132	; 0x84
 8008a90:	e7cb      	b.n	8008a2a <prv_read+0x3a>
 8008a92:	bf00      	nop

08008a94 <get_test_object>:


lwm2m_object_t * get_test_object(void)
{
 8008a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	//do{ {UTIL_ADV_TRACE_COND_FSend(2, 0, 1, "\n\n Create test_object definiton \r\n");} }while(0);


    lwm2m_object_t * testObj;

    testObj = (lwm2m_object_t *)lwm2m_malloc(sizeof(lwm2m_object_t));
 8008a98:	2028      	movs	r0, #40	; 0x28
 8008a9a:	f000 f85d 	bl	8008b58 <lwm2m_malloc>

    if (NULL != testObj)
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d046      	beq.n	8008b32 <get_test_object+0x9e>
    {
        int i;
        prv_instance_t * targetP;

        memset(testObj, 0, sizeof(lwm2m_object_t));
 8008aa4:	2228      	movs	r2, #40	; 0x28
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	f00f fb8a 	bl	80181c0 <memset>

        testObj->objID = 31024;
 8008aac:	f647 1330 	movw	r3, #31024	; 0x7930
 8008ab0:	80b3      	strh	r3, [r6, #4]
        for (i=0 ; i < 3 ; i++)
 8008ab2:	2500      	movs	r5, #0
 8008ab4:	2d02      	cmp	r5, #2
 8008ab6:	dc30      	bgt.n	8008b1a <get_test_object+0x86>
        {
            targetP = (prv_instance_t *)lwm2m_malloc(sizeof(prv_instance_t));
 8008ab8:	2018      	movs	r0, #24
 8008aba:	f000 f84d 	bl	8008b58 <lwm2m_malloc>
            if (NULL == targetP) return NULL;
 8008abe:	4604      	mov	r4, r0
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	d039      	beq.n	8008b38 <get_test_object+0xa4>
            memset(targetP, 0, sizeof(prv_instance_t));
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	6003      	str	r3, [r0, #0]
 8008ac8:	6043      	str	r3, [r0, #4]
 8008aca:	6083      	str	r3, [r0, #8]
 8008acc:	60c3      	str	r3, [r0, #12]
 8008ace:	6103      	str	r3, [r0, #16]
 8008ad0:	6143      	str	r3, [r0, #20]
            targetP->shortID = 10 + i;
 8008ad2:	b2af      	uxth	r7, r5
 8008ad4:	f107 030a 	add.w	r3, r7, #10
 8008ad8:	8083      	strh	r3, [r0, #4]
            targetP->test    = 20 + i;
 8008ada:	f105 0314 	add.w	r3, r5, #20
 8008ade:	7183      	strb	r3, [r0, #6]
            targetP->dec     = -30 + i + (double)i/100.0;
 8008ae0:	f1a5 0a1e 	sub.w	sl, r5, #30
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f7f7 fda9 	bl	800063c <__aeabi_i2d>
 8008aea:	2200      	movs	r2, #0
 8008aec:	4b13      	ldr	r3, [pc, #76]	; (8008b3c <get_test_object+0xa8>)
 8008aee:	f7f7 ff39 	bl	8000964 <__aeabi_ddiv>
 8008af2:	4680      	mov	r8, r0
 8008af4:	4689      	mov	r9, r1
 8008af6:	4650      	mov	r0, sl
 8008af8:	f7f7 fda0 	bl	800063c <__aeabi_i2d>
 8008afc:	4642      	mov	r2, r8
 8008afe:	464b      	mov	r3, r9
 8008b00:	f7f7 fc50 	bl	80003a4 <__adddf3>
 8008b04:	e9c4 0102 	strd	r0, r1, [r4, #8]
            targetP->sig     = 0 - i;
 8008b08:	427f      	negs	r7, r7
 8008b0a:	8227      	strh	r7, [r4, #16]
            testObj->instanceList = LWM2M_LIST_ADD(testObj->instanceList, targetP);
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	68b0      	ldr	r0, [r6, #8]
 8008b10:	f7fb fdce 	bl	80046b0 <lwm2m_list_add>
 8008b14:	60b0      	str	r0, [r6, #8]
        for (i=0 ; i < 3 ; i++)
 8008b16:	3501      	adds	r5, #1
 8008b18:	e7cc      	b.n	8008ab4 <get_test_object+0x20>
         * - The first one (createFunc) create a new instance and filled it with the provided informations. If an ID is
         *   provided a check is done for verifying his disponibility, or a new one is generated.
         * - The other one (deleteFunc) delete an instance by removing it from the instance list (and freeing the memory
         *   allocated to it)
         */
        testObj->readFunc = prv_read;
 8008b1a:	4b09      	ldr	r3, [pc, #36]	; (8008b40 <get_test_object+0xac>)
 8008b1c:	60f3      	str	r3, [r6, #12]
        testObj->writeFunc = prv_write;
 8008b1e:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <get_test_object+0xb0>)
 8008b20:	6133      	str	r3, [r6, #16]
        testObj->executeFunc = prv_exec;
 8008b22:	4b09      	ldr	r3, [pc, #36]	; (8008b48 <get_test_object+0xb4>)
 8008b24:	6173      	str	r3, [r6, #20]
        testObj->createFunc = prv_create;
 8008b26:	4b09      	ldr	r3, [pc, #36]	; (8008b4c <get_test_object+0xb8>)
 8008b28:	61b3      	str	r3, [r6, #24]
        testObj->deleteFunc = prv_delete;
 8008b2a:	4b09      	ldr	r3, [pc, #36]	; (8008b50 <get_test_object+0xbc>)
 8008b2c:	61f3      	str	r3, [r6, #28]
        testObj->discoverFunc = prv_discover;
 8008b2e:	4b09      	ldr	r3, [pc, #36]	; (8008b54 <get_test_object+0xc0>)
 8008b30:	6233      	str	r3, [r6, #32]
    }

    return testObj;
}
 8008b32:	4630      	mov	r0, r6
 8008b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (NULL == targetP) return NULL;
 8008b38:	4606      	mov	r6, r0
 8008b3a:	e7fa      	b.n	8008b32 <get_test_object+0x9e>
 8008b3c:	40590000 	.word	0x40590000
 8008b40:	080089f1 	.word	0x080089f1
 8008b44:	08008889 	.word	0x08008889
 8008b48:	08008811 	.word	0x08008811
 8008b4c:	0800897d 	.word	0x0800897d
 8008b50:	08008703 	.word	0x08008703
 8008b54:	080086ad 	.word	0x080086ad

08008b58 <lwm2m_malloc>:
* From wakamma/exmaples/shared ------> platfrom.c
*
*/

void * lwm2m_malloc(size_t s)
{
 8008b58:	b508      	push	{r3, lr}
    return malloc(s);
 8008b5a:	f00f faf9 	bl	8018150 <malloc>
}
 8008b5e:	bd08      	pop	{r3, pc}

08008b60 <lwm2m_free>:

void lwm2m_free(void * p)
{
 8008b60:	b508      	push	{r3, lr}
    free(p);
 8008b62:	f00f fafd 	bl	8018160 <free>
}
 8008b66:	bd08      	pop	{r3, pc}

08008b68 <lwm2m_strdup>:

char * lwm2m_strdup(const char * str)
{
 8008b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!str) {
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	b198      	cbz	r0, 8008b96 <lwm2m_strdup+0x2e>
      return NULL;
    }

    const int len = strlen(str) + 1;
 8008b6e:	f7f7 fb57 	bl	8000220 <strlen>
 8008b72:	4604      	mov	r4, r0
 8008b74:	1c47      	adds	r7, r0, #1
    char * const buf = lwm2m_malloc(len);
 8008b76:	4638      	mov	r0, r7
 8008b78:	f7ff ffee 	bl	8008b58 <lwm2m_malloc>

    if (buf) {
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	b140      	cbz	r0, 8008b92 <lwm2m_strdup+0x2a>
      memset(buf, 0, len);
 8008b80:	463a      	mov	r2, r7
 8008b82:	2100      	movs	r1, #0
 8008b84:	f00f fb1c 	bl	80181c0 <memset>
      memcpy(buf, str, len - 1);
 8008b88:	4622      	mov	r2, r4
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	f00f faef 	bl	8018170 <memcpy>
    }

    return buf;
}
 8008b92:	4628      	mov	r0, r5
 8008b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return NULL;
 8008b96:	4605      	mov	r5, r0
 8008b98:	e7fb      	b.n	8008b92 <lwm2m_strdup+0x2a>

08008b9a <lwm2m_gettime>:
{
    return strncmp(s1, s2, n);
}

time_t lwm2m_gettime(void)
{
 8008b9a:	b508      	push	{r3, lr}
    return time(NULL);
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	f010 fe0b 	bl	80197b8 <time>
}
 8008ba2:	bd08      	pop	{r3, pc}

08008ba4 <lwm2m_close_connection>:
    int addressFamily;
} client_data_t;

void lwm2m_close_connection(void * sessionH,
                            void * userData)
{
 8008ba4:	b508      	push	{r3, lr}
    connection_t * targetP;

    app_data = (client_data_t *)userData;
    targetP = (connection_t *)sessionH;

    if (targetP == app_data->connList)
 8008ba6:	688b      	ldr	r3, [r1, #8]
 8008ba8:	4283      	cmp	r3, r0
 8008baa:	d105      	bne.n	8008bb8 <lwm2m_close_connection+0x14>
    {
        app_data->connList = targetP->next;
 8008bac:	6803      	ldr	r3, [r0, #0]
 8008bae:	608b      	str	r3, [r1, #8]
        lwm2m_free(targetP);
 8008bb0:	f7ff ffd6 	bl	8008b60 <lwm2m_free>
 8008bb4:	e009      	b.n	8008bca <lwm2m_close_connection+0x26>
        connection_t * parentP;

        parentP = app_data->connList;
        while (parentP != NULL && parentP->next != targetP)
        {
            parentP = parentP->next;
 8008bb6:	4613      	mov	r3, r2
        while (parentP != NULL && parentP->next != targetP)
 8008bb8:	b113      	cbz	r3, 8008bc0 <lwm2m_close_connection+0x1c>
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	4282      	cmp	r2, r0
 8008bbe:	d1fa      	bne.n	8008bb6 <lwm2m_close_connection+0x12>
        }
        if (parentP != NULL)
 8008bc0:	b11b      	cbz	r3, 8008bca <lwm2m_close_connection+0x26>
        {
            parentP->next = targetP->next;
 8008bc2:	6802      	ldr	r2, [r0, #0]
 8008bc4:	601a      	str	r2, [r3, #0]
            lwm2m_free(targetP);
 8008bc6:	f7ff ffcb 	bl	8008b60 <lwm2m_free>
        }
    }
}
 8008bca:	bd08      	pop	{r3, pc}

08008bcc <connection_send>:
    //   nbSent = sendto(connP->sock, buffer + offset, length - offset, 0, (struct sockaddr *)&(connP->addr), connP->addrLen);
    //    if (nbSent == -1) return -1;
    //   offset += nbSent;
    //}
    return 0;
}
 8008bcc:	2000      	movs	r0, #0
 8008bce:	4770      	bx	lr

08008bd0 <lwm2m_buffer_send>:

uint8_t lwm2m_buffer_send(void * sessionH,
                          uint8_t * buffer,
                          size_t length,
                          void * userdata)
{
 8008bd0:	b510      	push	{r4, lr}
 8008bd2:	4614      	mov	r4, r2
    connection_t * connP = (connection_t*) sessionH;

    (void)userdata; /* unused */

    if (connP == NULL)
 8008bd4:	b130      	cbz	r0, 8008be4 <lwm2m_buffer_send+0x14>
    {
        fprintf(stderr, "#> failed sending %lu bytes, missing connection\r\n", length);
        return COAP_500_INTERNAL_SERVER_ERROR ;
    }

    if (-1 == connection_send(connP, buffer, length))
 8008bd6:	f7ff fff9 	bl	8008bcc <connection_send>
 8008bda:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008bde:	d009      	beq.n	8008bf4 <lwm2m_buffer_send+0x24>
    {
        fprintf(stderr, "#> failed sending %lu bytes\r\n", length);
        return COAP_500_INTERNAL_SERVER_ERROR ;
    }

    return COAP_NO_ERROR;
 8008be0:	2000      	movs	r0, #0
}
 8008be2:	bd10      	pop	{r4, pc}
        fprintf(stderr, "#> failed sending %lu bytes, missing connection\r\n", length);
 8008be4:	4b08      	ldr	r3, [pc, #32]	; (8008c08 <lwm2m_buffer_send+0x38>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4908      	ldr	r1, [pc, #32]	; (8008c0c <lwm2m_buffer_send+0x3c>)
 8008bea:	68d8      	ldr	r0, [r3, #12]
 8008bec:	f00f f9c8 	bl	8017f80 <fiprintf>
        return COAP_500_INTERNAL_SERVER_ERROR ;
 8008bf0:	20a0      	movs	r0, #160	; 0xa0
 8008bf2:	e7f6      	b.n	8008be2 <lwm2m_buffer_send+0x12>
        fprintf(stderr, "#> failed sending %lu bytes\r\n", length);
 8008bf4:	4b04      	ldr	r3, [pc, #16]	; (8008c08 <lwm2m_buffer_send+0x38>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4622      	mov	r2, r4
 8008bfa:	4905      	ldr	r1, [pc, #20]	; (8008c10 <lwm2m_buffer_send+0x40>)
 8008bfc:	68d8      	ldr	r0, [r3, #12]
 8008bfe:	f00f f9bf 	bl	8017f80 <fiprintf>
        return COAP_500_INTERNAL_SERVER_ERROR ;
 8008c02:	20a0      	movs	r0, #160	; 0xa0
 8008c04:	e7ed      	b.n	8008be2 <lwm2m_buffer_send+0x12>
 8008c06:	bf00      	nop
 8008c08:	20000120 	.word	0x20000120
 8008c0c:	0801bb1c 	.word	0x0801bb1c
 8008c10:	0801bb50 	.word	0x0801bb50

08008c14 <lwm2m_connect_server>:
void * lwm2m_connect_server(uint16_t secObjInstID,
                            void * userData)
{
    (void)userData;
    return (void *)(uintptr_t)secObjInstID;
}
 8008c14:	4770      	bx	lr
	...

08008c18 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8008c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1c:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8008c1e:	2400      	movs	r4, #0
 8008c20:	9401      	str	r4, [sp, #4]
 8008c22:	9402      	str	r4, [sp, #8]
 8008c24:	9403      	str	r4, [sp, #12]
 8008c26:	9404      	str	r4, [sp, #16]
 8008c28:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c30:	f042 0204 	orr.w	r2, r2, #4
 8008c34:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c38:	f003 0304 	and.w	r3, r3, #4
 8008c3c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8008c3e:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8008c40:	2710      	movs	r7, #16
 8008c42:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8008c44:	2301      	movs	r3, #1
 8008c46:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8008c4c:	4d12      	ldr	r5, [pc, #72]	; (8008c98 <BSP_RADIO_Init+0x80>)
 8008c4e:	a901      	add	r1, sp, #4
 8008c50:	4628      	mov	r0, r5
 8008c52:	f001 fa21 	bl	800a098 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8008c56:	f04f 0820 	mov.w	r8, #32
 8008c5a:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8008c5e:	a901      	add	r1, sp, #4
 8008c60:	4628      	mov	r0, r5
 8008c62:	f001 fa19 	bl	800a098 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8008c66:	2608      	movs	r6, #8
 8008c68:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8008c6a:	a901      	add	r1, sp, #4
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	f001 fa13 	bl	800a098 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8008c72:	4622      	mov	r2, r4
 8008c74:	4641      	mov	r1, r8
 8008c76:	4628      	mov	r0, r5
 8008c78:	f001 fb5e 	bl	800a338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	4639      	mov	r1, r7
 8008c80:	4628      	mov	r0, r5
 8008c82:	f001 fb59 	bl	800a338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8008c86:	4622      	mov	r2, r4
 8008c88:	4631      	mov	r1, r6
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f001 fb54 	bl	800a338 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8008c90:	4620      	mov	r0, r4
 8008c92:	b006      	add	sp, #24
 8008c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c98:	48000800 	.word	0x48000800

08008c9c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8008c9c:	b510      	push	{r4, lr}
  switch (Config)
 8008c9e:	2803      	cmp	r0, #3
 8008ca0:	d813      	bhi.n	8008cca <BSP_RADIO_ConfigRFSwitch+0x2e>
 8008ca2:	e8df f000 	tbb	[pc, r0]
 8008ca6:	1402      	.short	0x1402
 8008ca8:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8008caa:	4c22      	ldr	r4, [pc, #136]	; (8008d34 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	2108      	movs	r1, #8
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f001 fb41 	bl	800a338 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	2110      	movs	r1, #16
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f001 fb3c 	bl	800a338 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2120      	movs	r1, #32
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f001 fb37 	bl	800a338 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8008cca:	2000      	movs	r0, #0
 8008ccc:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8008cce:	4c19      	ldr	r4, [pc, #100]	; (8008d34 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	2108      	movs	r1, #8
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f001 fb2f 	bl	800a338 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8008cda:	2201      	movs	r2, #1
 8008cdc:	2110      	movs	r1, #16
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f001 fb2a 	bl	800a338 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	2120      	movs	r1, #32
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f001 fb25 	bl	800a338 <HAL_GPIO_WritePin>
      break;
 8008cee:	e7ec      	b.n	8008cca <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8008cf0:	4c10      	ldr	r4, [pc, #64]	; (8008d34 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	2108      	movs	r1, #8
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	f001 fb1e 	bl	800a338 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	2110      	movs	r1, #16
 8008d00:	4620      	mov	r0, r4
 8008d02:	f001 fb19 	bl	800a338 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8008d06:	2201      	movs	r2, #1
 8008d08:	2120      	movs	r1, #32
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f001 fb14 	bl	800a338 <HAL_GPIO_WritePin>
      break;
 8008d10:	e7db      	b.n	8008cca <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8008d12:	4c08      	ldr	r4, [pc, #32]	; (8008d34 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8008d14:	2201      	movs	r2, #1
 8008d16:	2108      	movs	r1, #8
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f001 fb0d 	bl	800a338 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8008d1e:	2200      	movs	r2, #0
 8008d20:	2110      	movs	r1, #16
 8008d22:	4620      	mov	r0, r4
 8008d24:	f001 fb08 	bl	800a338 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8008d28:	2201      	movs	r2, #1
 8008d2a:	2120      	movs	r1, #32
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f001 fb03 	bl	800a338 <HAL_GPIO_WritePin>
      break;
 8008d32:	e7ca      	b.n	8008cca <BSP_RADIO_ConfigRFSwitch+0x2e>
 8008d34:	48000800 	.word	0x48000800

08008d38 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8008d38:	2000      	movs	r0, #0
 8008d3a:	4770      	bx	lr

08008d3c <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8008d3c:	2001      	movs	r0, #1
 8008d3e:	4770      	bx	lr

08008d40 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8008d40:	2001      	movs	r0, #1
 8008d42:	4770      	bx	lr

08008d44 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8008d44:	b908      	cbnz	r0, 8008d4a <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8008d46:	200f      	movs	r0, #15
 8008d48:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8008d4a:	2016      	movs	r0, #22
  }

  return ret;
}
 8008d4c:	4770      	bx	lr

08008d4e <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8008d4e:	4770      	bx	lr

08008d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d50:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d52:	2003      	movs	r0, #3
 8008d54:	f000 fd2e 	bl	80097b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008d58:	f001 fc94 	bl	800a684 <HAL_RCC_GetHCLKFreq>
 8008d5c:	4b06      	ldr	r3, [pc, #24]	; (8008d78 <HAL_Init+0x28>)
 8008d5e:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008d60:	200f      	movs	r0, #15
 8008d62:	f7f9 f825 	bl	8001db0 <HAL_InitTick>
 8008d66:	b110      	cbz	r0, 8008d6e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8008d68:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	bd10      	pop	{r4, pc}
 8008d6e:	4604      	mov	r4, r0
    HAL_MspInit();
 8008d70:	f7f8 fee2 	bl	8001b38 <HAL_MspInit>
 8008d74:	e7f9      	b.n	8008d6a <HAL_Init+0x1a>
 8008d76:	bf00      	nop
 8008d78:	20000078 	.word	0x20000078

08008d7c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8008d7c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008d80:	6913      	ldr	r3, [r2, #16]
 8008d82:	f023 0302 	bic.w	r3, r3, #2
 8008d86:	6113      	str	r3, [r2, #16]
}
 8008d88:	4770      	bx	lr

08008d8a <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8008d8a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008d8e:	6913      	ldr	r3, [r2, #16]
 8008d90:	f043 0302 	orr.w	r3, r3, #2
 8008d94:	6113      	str	r3, [r2, #16]
}
 8008d96:	4770      	bx	lr

08008d98 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8008d98:	4b01      	ldr	r3, [pc, #4]	; (8008da0 <HAL_GetUIDw0+0x8>)
 8008d9a:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8008d9e:	4770      	bx	lr
 8008da0:	1fff7000 	.word	0x1fff7000

08008da4 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8008da4:	4b01      	ldr	r3, [pc, #4]	; (8008dac <HAL_GetUIDw1+0x8>)
 8008da6:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8008daa:	4770      	bx	lr
 8008dac:	1fff7000 	.word	0x1fff7000

08008db0 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8008db0:	4b01      	ldr	r3, [pc, #4]	; (8008db8 <HAL_GetUIDw2+0x8>)
 8008db2:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8008db6:	4770      	bx	lr
 8008db8:	1fff7000 	.word	0x1fff7000

08008dbc <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8008dbc:	4a02      	ldr	r2, [pc, #8]	; (8008dc8 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8008dbe:	6853      	ldr	r3, [r2, #4]
 8008dc0:	f023 0301 	bic.w	r3, r3, #1
 8008dc4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8008dc6:	4770      	bx	lr
 8008dc8:	e0042000 	.word	0xe0042000

08008dcc <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8008dcc:	4a02      	ldr	r2, [pc, #8]	; (8008dd8 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8008dce:	6853      	ldr	r3, [r2, #4]
 8008dd0:	f023 0302 	bic.w	r3, r3, #2
 8008dd4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8008dd6:	4770      	bx	lr
 8008dd8:	e0042000 	.word	0xe0042000

08008ddc <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8008ddc:	4a02      	ldr	r2, [pc, #8]	; (8008de8 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8008dde:	6853      	ldr	r3, [r2, #4]
 8008de0:	f023 0304 	bic.w	r3, r3, #4
 8008de4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8008de6:	4770      	bx	lr
 8008de8:	e0042000 	.word	0xe0042000

08008dec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008df0:	2300      	movs	r3, #0
 8008df2:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8008df4:	2800      	cmp	r0, #0
 8008df6:	f000 811b 	beq.w	8009030 <HAL_ADC_Init+0x244>
 8008dfa:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008dfc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8008dfe:	b1bb      	cbz	r3, 8008e30 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008e00:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008e02:	6893      	ldr	r3, [r2, #8]
 8008e04:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008e08:	d11f      	bne.n	8008e4a <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8008e0a:	6893      	ldr	r3, [r2, #8]
 8008e0c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008e10:	f023 0317 	bic.w	r3, r3, #23
 8008e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e18:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008e1a:	4b86      	ldr	r3, [pc, #536]	; (8009034 <HAL_ADC_Init+0x248>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	099b      	lsrs	r3, r3, #6
 8008e20:	4a85      	ldr	r2, [pc, #532]	; (8009038 <HAL_ADC_Init+0x24c>)
 8008e22:	fba2 2303 	umull	r2, r3, r2, r3
 8008e26:	099b      	lsrs	r3, r3, #6
 8008e28:	3301      	adds	r3, #1
 8008e2a:	005b      	lsls	r3, r3, #1
 8008e2c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008e2e:	e009      	b.n	8008e44 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8008e30:	f7f8 faf6 	bl	8001420 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8008e34:	2300      	movs	r3, #0
 8008e36:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8008e38:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8008e3c:	e7e0      	b.n	8008e00 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8008e3e:	9b01      	ldr	r3, [sp, #4]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008e44:	9b01      	ldr	r3, [sp, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1f9      	bne.n	8008e3e <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008e4a:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008e4c:	6893      	ldr	r3, [r2, #8]
 8008e4e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008e52:	f040 809c 	bne.w	8008f8e <HAL_ADC_Init+0x1a2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e58:	f043 0310 	orr.w	r3, r3, #16
 8008e5c:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008e60:	f043 0301 	orr.w	r3, r3, #1
 8008e64:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008e66:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008e68:	6893      	ldr	r3, [r2, #8]
 8008e6a:	f013 0304 	ands.w	r3, r3, #4
 8008e6e:	d000      	beq.n	8008e72 <HAL_ADC_Init+0x86>
 8008e70:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008e72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008e74:	f011 0f10 	tst.w	r1, #16
 8008e78:	f040 80d3 	bne.w	8009022 <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f040 80d0 	bne.w	8009022 <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e82:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008e84:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8008e88:	f041 0102 	orr.w	r1, r1, #2
 8008e8c:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008e8e:	6891      	ldr	r1, [r2, #8]
 8008e90:	f011 0f01 	tst.w	r1, #1
 8008e94:	d151      	bne.n	8008f3a <HAL_ADC_Init+0x14e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8008e96:	68a1      	ldr	r1, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8008e98:	7e25      	ldrb	r5, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8008e9a:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8008e9e:	7e65      	ldrb	r5, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8008ea0:	ea41 31c5 	orr.w	r1, r1, r5, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8008ea4:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8008ea6:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8008eaa:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8008eac:	b10d      	cbz	r5, 8008eb2 <HAL_ADC_Init+0xc6>
 8008eae:	f44f 5580 	mov.w	r5, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8008eb2:	4329      	orrs	r1, r5
                   hadc->Init.DataAlign                                           |
 8008eb4:	68e5      	ldr	r5, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8008eb6:	4329      	orrs	r1, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8008eb8:	6925      	ldr	r5, [r4, #16]
 8008eba:	2d00      	cmp	r5, #0
 8008ebc:	db69      	blt.n	8008f92 <HAL_ADC_Init+0x1a6>
 8008ebe:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8008ec2:	4329      	orrs	r1, r5
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008ec4:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8008ec8:	ea41 0145 	orr.w	r1, r1, r5, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008ecc:	f894 5020 	ldrb.w	r5, [r4, #32]
 8008ed0:	2d01      	cmp	r5, #1
 8008ed2:	d061      	beq.n	8008f98 <HAL_ADC_Init+0x1ac>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008ed4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008ed6:	b125      	cbz	r5, 8008ee2 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8008ed8:	f405 75e0 	and.w	r5, r5, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8008edc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8008ede:	4335      	orrs	r5, r6
 8008ee0:	4329      	orrs	r1, r5
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8008ee2:	68d5      	ldr	r5, [r2, #12]
 8008ee4:	f425 3cfe 	bic.w	ip, r5, #130048	; 0x1fc00
 8008ee8:	f42c 7cff 	bic.w	ip, ip, #510	; 0x1fe
 8008eec:	ea4c 0101 	orr.w	r1, ip, r1
 8008ef0:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008ef2:	6862      	ldr	r2, [r4, #4]
 8008ef4:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8008ef8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008efa:	ea42 0501 	orr.w	r5, r2, r1
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8008efe:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8008f02:	2901      	cmp	r1, #1
 8008f04:	d055      	beq.n	8008fb2 <HAL_ADC_Init+0x1c6>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8008f06:	6822      	ldr	r2, [r4, #0]
 8008f08:	6916      	ldr	r6, [r2, #16]
 8008f0a:	494c      	ldr	r1, [pc, #304]	; (800903c <HAL_ADC_Init+0x250>)
 8008f0c:	4031      	ands	r1, r6
 8008f0e:	4329      	orrs	r1, r5
 8008f10:	6111      	str	r1, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8008f12:	6862      	ldr	r2, [r4, #4]
 8008f14:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8008f18:	d00f      	beq.n	8008f3a <HAL_ADC_Init+0x14e>
 8008f1a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008f1e:	d00c      	beq.n	8008f3a <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8008f20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008f24:	d009      	beq.n	8008f3a <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8008f26:	4d46      	ldr	r5, [pc, #280]	; (8009040 <HAL_ADC_Init+0x254>)
 8008f28:	f8d5 1708 	ldr.w	r1, [r5, #1800]	; 0x708
 8008f2c:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 8008f30:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8008f34:	430a      	orrs	r2, r1
 8008f36:	f8c5 2708 	str.w	r2, [r5, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8008f3a:	6825      	ldr	r5, [r4, #0]
 8008f3c:	6b62      	ldr	r2, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8008f3e:	6969      	ldr	r1, [r5, #20]
 8008f40:	f021 0107 	bic.w	r1, r1, #7
 8008f44:	430a      	orrs	r2, r1
 8008f46:	616a      	str	r2, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8008f48:	6821      	ldr	r1, [r4, #0]
 8008f4a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008f4c:	694a      	ldr	r2, [r1, #20]
 8008f4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008f52:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8008f56:	614a      	str	r2, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8008f58:	6922      	ldr	r2, [r4, #16]
 8008f5a:	2a00      	cmp	r2, #0
 8008f5c:	d133      	bne.n	8008fc6 <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8008f5e:	6822      	ldr	r2, [r4, #0]
 8008f60:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008f62:	f063 030f 	orn	r3, r3, #15
 8008f66:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8008f68:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8008f70:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d04c      	beq.n	8009010 <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8008f76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f78:	f023 0312 	bic.w	r3, r3, #18
 8008f7c:	f043 0310 	orr.w	r3, r3, #16
 8008f80:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008f82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008f84:	f043 0301 	orr.w	r3, r3, #1
 8008f88:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8008f8a:	2001      	movs	r0, #1
 8008f8c:	e04e      	b.n	800902c <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008f8e:	2000      	movs	r0, #0
 8008f90:	e76a      	b.n	8008e68 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8008f92:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8008f96:	e794      	b.n	8008ec2 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8008f98:	b916      	cbnz	r6, 8008fa0 <HAL_ADC_Init+0x1b4>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8008f9a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8008f9e:	e799      	b.n	8008ed4 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008fa0:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8008fa2:	f045 0520 	orr.w	r5, r5, #32
 8008fa6:	65a5      	str	r5, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008fa8:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8008faa:	f045 0501 	orr.w	r5, r5, #1
 8008fae:	65e5      	str	r5, [r4, #92]	; 0x5c
 8008fb0:	e790      	b.n	8008ed4 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8008fb2:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008fb4:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 8008fb6:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8008fb8:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 8008fba:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8008fbc:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8008fbe:	432a      	orrs	r2, r5
 8008fc0:	f042 0501 	orr.w	r5, r2, #1
 8008fc4:	e79f      	b.n	8008f06 <HAL_ADC_Init+0x11a>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008fc6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008fca:	d1cd      	bne.n	8008f68 <HAL_ADC_Init+0x17c>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8008fcc:	2b07      	cmp	r3, #7
 8008fce:	d808      	bhi.n	8008fe2 <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8008fd0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008fd2:	0099      	lsls	r1, r3, #2
 8008fd4:	40ca      	lsrs	r2, r1
 8008fd6:	f002 020f 	and.w	r2, r2, #15
 8008fda:	2a0f      	cmp	r2, #15
 8008fdc:	d001      	beq.n	8008fe2 <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8008fde:	3301      	adds	r3, #1
 8008fe0:	e7f4      	b.n	8008fcc <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d00e      	beq.n	8009004 <HAL_ADC_Init+0x218>
        MODIFY_REG(hadc->Instance->CHSELR,
 8008fe6:	6821      	ldr	r1, [r4, #0]
 8008fe8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8008fea:	69e3      	ldr	r3, [r4, #28]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	f003 031c 	and.w	r3, r3, #28
 8008ff4:	f06f 020f 	mvn.w	r2, #15
 8008ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008ffe:	4313      	orrs	r3, r2
 8009000:	628b      	str	r3, [r1, #40]	; 0x28
 8009002:	e7b1      	b.n	8008f68 <HAL_ADC_Init+0x17c>
        SET_BIT(hadc->Instance->CHSELR,
 8009004:	6822      	ldr	r2, [r4, #0]
 8009006:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009008:	f063 030f 	orn	r3, r3, #15
 800900c:	6293      	str	r3, [r2, #40]	; 0x28
 800900e:	e7ab      	b.n	8008f68 <HAL_ADC_Init+0x17c>
      ADC_CLEAR_ERRORCODE(hadc);
 8009010:	2300      	movs	r3, #0
 8009012:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8009014:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009016:	f023 0303 	bic.w	r3, r3, #3
 800901a:	f043 0301 	orr.w	r3, r3, #1
 800901e:	65a3      	str	r3, [r4, #88]	; 0x58
 8009020:	e004      	b.n	800902c <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009022:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009024:	f043 0310 	orr.w	r3, r3, #16
 8009028:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800902a:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 800902c:	b002      	add	sp, #8
 800902e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8009030:	2001      	movs	r0, #1
 8009032:	e7fb      	b.n	800902c <HAL_ADC_Init+0x240>
 8009034:	20000078 	.word	0x20000078
 8009038:	053e2d63 	.word	0x053e2d63
 800903c:	1ffffc02 	.word	0x1ffffc02
 8009040:	40012000 	.word	0x40012000

08009044 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8009044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009046:	4604      	mov	r4, r0
 8009048:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800904a:	6946      	ldr	r6, [r0, #20]
 800904c:	2e08      	cmp	r6, #8
 800904e:	d005      	beq.n	800905c <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8009050:	6803      	ldr	r3, [r0, #0]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	f013 0f01 	tst.w	r3, #1
 8009058:	d11e      	bne.n	8009098 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800905a:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800905c:	f7f8 feaa 	bl	8001db4 <HAL_GetTick>
 8009060:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	4232      	tst	r2, r6
 8009068:	d11c      	bne.n	80090a4 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800906a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800906e:	d0f8      	beq.n	8009062 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8009070:	f7f8 fea0 	bl	8001db4 <HAL_GetTick>
 8009074:	1bc3      	subs	r3, r0, r7
 8009076:	42ab      	cmp	r3, r5
 8009078:	d801      	bhi.n	800907e <HAL_ADC_PollForConversion+0x3a>
 800907a:	2d00      	cmp	r5, #0
 800907c:	d1f1      	bne.n	8009062 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4233      	tst	r3, r6
 8009084:	d1ed      	bne.n	8009062 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8009086:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009088:	f043 0304 	orr.w	r3, r3, #4
 800908c:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800908e:	2300      	movs	r3, #0
 8009090:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8009094:	2003      	movs	r0, #3
 8009096:	e028      	b.n	80090ea <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009098:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800909a:	f043 0320 	orr.w	r3, r3, #32
 800909e:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 80090a0:	2001      	movs	r0, #1
 80090a2:	e022      	b.n	80090ea <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80090a4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80090a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090aa:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80090ac:	68da      	ldr	r2, [r3, #12]
 80090ae:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80090b2:	d115      	bne.n	80090e0 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80090b4:	7ea2      	ldrb	r2, [r4, #26]
 80090b6:	b99a      	cbnz	r2, 80090e0 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	f012 0f08 	tst.w	r2, #8
 80090be:	d00f      	beq.n	80090e0 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80090c0:	689a      	ldr	r2, [r3, #8]
 80090c2:	f012 0f04 	tst.w	r2, #4
 80090c6:	d111      	bne.n	80090ec <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	f022 020c 	bic.w	r2, r2, #12
 80090ce:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80090d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090d6:	f023 0301 	bic.w	r3, r3, #1
 80090da:	f043 0301 	orr.w	r3, r3, #1
 80090de:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80090e0:	7e20      	ldrb	r0, [r4, #24]
 80090e2:	b960      	cbnz	r0, 80090fe <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	220c      	movs	r2, #12
 80090e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80090ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80090ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090ee:	f043 0320 	orr.w	r3, r3, #32
 80090f2:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80090f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80090f6:	f043 0301 	orr.w	r3, r3, #1
 80090fa:	65e3      	str	r3, [r4, #92]	; 0x5c
 80090fc:	e7f0      	b.n	80090e0 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 80090fe:	2000      	movs	r0, #0
 8009100:	e7f3      	b.n	80090ea <HAL_ADC_PollForConversion+0xa6>

08009102 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8009102:	6803      	ldr	r3, [r0, #0]
 8009104:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8009106:	4770      	bx	lr

08009108 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8009108:	b470      	push	{r4, r5, r6}
 800910a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800910c:	2200      	movs	r2, #0
 800910e:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009110:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8009112:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8009116:	2a01      	cmp	r2, #1
 8009118:	f000 8105 	beq.w	8009326 <HAL_ADC_ConfigChannel+0x21e>
 800911c:	4603      	mov	r3, r0
 800911e:	2201      	movs	r2, #1
 8009120:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009124:	6802      	ldr	r2, [r0, #0]
 8009126:	6890      	ldr	r0, [r2, #8]
 8009128:	f010 0f04 	tst.w	r0, #4
 800912c:	d00a      	beq.n	8009144 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800912e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009130:	f042 0220 	orr.w	r2, r2, #32
 8009134:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009136:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 800913e:	b003      	add	sp, #12
 8009140:	bc70      	pop	{r4, r5, r6}
 8009142:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8009144:	6848      	ldr	r0, [r1, #4]
 8009146:	2802      	cmp	r0, #2
 8009148:	f000 809e 	beq.w	8009288 <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800914c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8009150:	d029      	beq.n	80091a6 <HAL_ADC_ConfigChannel+0x9e>
 8009152:	4d76      	ldr	r5, [pc, #472]	; (800932c <HAL_ADC_ConfigChannel+0x224>)
 8009154:	42ac      	cmp	r4, r5
 8009156:	d026      	beq.n	80091a6 <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8009158:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800915a:	f000 001f 	and.w	r0, r0, #31
 800915e:	250f      	movs	r5, #15
 8009160:	4085      	lsls	r5, r0
 8009162:	ea24 0505 	bic.w	r5, r4, r5
 8009166:	680c      	ldr	r4, [r1, #0]
 8009168:	f3c4 0611 	ubfx	r6, r4, #0, #18
 800916c:	2e00      	cmp	r6, #0
 800916e:	d133      	bne.n	80091d8 <HAL_ADC_ConfigChannel+0xd0>
 8009170:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8009174:	fa04 f000 	lsl.w	r0, r4, r0
 8009178:	4328      	orrs	r0, r5
 800917a:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800917c:	684c      	ldr	r4, [r1, #4]
 800917e:	08a0      	lsrs	r0, r4, #2
 8009180:	3001      	adds	r0, #1
 8009182:	69dd      	ldr	r5, [r3, #28]
 8009184:	42a8      	cmp	r0, r5
 8009186:	d814      	bhi.n	80091b2 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8009188:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 800918a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800918c:	f004 041f 	and.w	r4, r4, #31
 8009190:	260f      	movs	r6, #15
 8009192:	40a6      	lsls	r6, r4
 8009194:	ea20 0006 	bic.w	r0, r0, r6
 8009198:	f3c5 6583 	ubfx	r5, r5, #26, #4
 800919c:	fa05 f404 	lsl.w	r4, r5, r4
 80091a0:	4304      	orrs	r4, r0
 80091a2:	6294      	str	r4, [r2, #40]	; 0x28
}
 80091a4:	e005      	b.n	80091b2 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80091a6:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80091a8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80091aa:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80091ae:	4320      	orrs	r0, r4
 80091b0:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80091b2:	681c      	ldr	r4, [r3, #0]
 80091b4:	680d      	ldr	r5, [r1, #0]
 80091b6:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 80091b8:	6960      	ldr	r0, [r4, #20]
 80091ba:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 80091be:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 80091c2:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 80091c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80091ca:	4302      	orrs	r2, r0
 80091cc:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80091ce:	680a      	ldr	r2, [r1, #0]
 80091d0:	2a00      	cmp	r2, #0
 80091d2:	db09      	blt.n	80091e8 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80091d4:	2000      	movs	r0, #0
 80091d6:	e7af      	b.n	8009138 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091d8:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80091dc:	b114      	cbz	r4, 80091e4 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80091de:	fab4 f484 	clz	r4, r4
 80091e2:	e7c7      	b.n	8009174 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 80091e4:	2420      	movs	r4, #32
 80091e6:	e7c5      	b.n	8009174 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80091e8:	4951      	ldr	r1, [pc, #324]	; (8009330 <HAL_ADC_ConfigChannel+0x228>)
 80091ea:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 80091ee:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80091f2:	4c50      	ldr	r4, [pc, #320]	; (8009334 <HAL_ADC_ConfigChannel+0x22c>)
 80091f4:	42a2      	cmp	r2, r4
 80091f6:	d007      	beq.n	8009208 <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80091f8:	4c4f      	ldr	r4, [pc, #316]	; (8009338 <HAL_ADC_ConfigChannel+0x230>)
 80091fa:	42a2      	cmp	r2, r4
 80091fc:	d026      	beq.n	800924c <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80091fe:	4c4f      	ldr	r4, [pc, #316]	; (800933c <HAL_ADC_ConfigChannel+0x234>)
 8009200:	42a2      	cmp	r2, r4
 8009202:	d032      	beq.n	800926a <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009204:	2000      	movs	r0, #0
 8009206:	e797      	b.n	8009138 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8009208:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800920c:	d1f4      	bne.n	80091f8 <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800920e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009212:	4847      	ldr	r0, [pc, #284]	; (8009330 <HAL_ADC_ConfigChannel+0x228>)
 8009214:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8009218:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800921c:	4311      	orrs	r1, r2
 800921e:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009222:	4a47      	ldr	r2, [pc, #284]	; (8009340 <HAL_ADC_ConfigChannel+0x238>)
 8009224:	6812      	ldr	r2, [r2, #0]
 8009226:	0992      	lsrs	r2, r2, #6
 8009228:	4946      	ldr	r1, [pc, #280]	; (8009344 <HAL_ADC_ConfigChannel+0x23c>)
 800922a:	fba1 1202 	umull	r1, r2, r1, r2
 800922e:	0992      	lsrs	r2, r2, #6
 8009230:	3201      	adds	r2, #1
 8009232:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009236:	0092      	lsls	r2, r2, #2
 8009238:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800923a:	e002      	b.n	8009242 <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 800923c:	9a01      	ldr	r2, [sp, #4]
 800923e:	3a01      	subs	r2, #1
 8009240:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8009242:	9a01      	ldr	r2, [sp, #4]
 8009244:	2a00      	cmp	r2, #0
 8009246:	d1f9      	bne.n	800923c <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009248:	2000      	movs	r0, #0
 800924a:	e775      	b.n	8009138 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800924c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8009250:	d1d5      	bne.n	80091fe <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009252:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8009256:	4836      	ldr	r0, [pc, #216]	; (8009330 <HAL_ADC_ConfigChannel+0x228>)
 8009258:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 800925c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8009260:	4311      	orrs	r1, r2
 8009262:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009266:	2000      	movs	r0, #0
}
 8009268:	e766      	b.n	8009138 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800926a:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800926e:	d158      	bne.n	8009322 <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009270:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009274:	482e      	ldr	r0, [pc, #184]	; (8009330 <HAL_ADC_ConfigChannel+0x228>)
 8009276:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 800927a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800927e:	430a      	orrs	r2, r1
 8009280:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009284:	2000      	movs	r0, #0
}
 8009286:	e757      	b.n	8009138 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009288:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800928c:	d002      	beq.n	8009294 <HAL_ADC_ConfigChannel+0x18c>
 800928e:	4827      	ldr	r0, [pc, #156]	; (800932c <HAL_ADC_ConfigChannel+0x224>)
 8009290:	4284      	cmp	r4, r0
 8009292:	d106      	bne.n	80092a2 <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8009294:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8009296:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8009298:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800929c:	ea20 0004 	bic.w	r0, r0, r4
 80092a0:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80092a2:	680a      	ldr	r2, [r1, #0]
 80092a4:	2a00      	cmp	r2, #0
 80092a6:	db01      	blt.n	80092ac <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80092a8:	2000      	movs	r0, #0
 80092aa:	e745      	b.n	8009138 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80092ac:	4920      	ldr	r1, [pc, #128]	; (8009330 <HAL_ADC_ConfigChannel+0x228>)
 80092ae:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80092b2:	4820      	ldr	r0, [pc, #128]	; (8009334 <HAL_ADC_ConfigChannel+0x22c>)
 80092b4:	4282      	cmp	r2, r0
 80092b6:	d007      	beq.n	80092c8 <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80092b8:	481f      	ldr	r0, [pc, #124]	; (8009338 <HAL_ADC_ConfigChannel+0x230>)
 80092ba:	4282      	cmp	r2, r0
 80092bc:	d013      	beq.n	80092e6 <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80092be:	481f      	ldr	r0, [pc, #124]	; (800933c <HAL_ADC_ConfigChannel+0x234>)
 80092c0:	4282      	cmp	r2, r0
 80092c2:	d01f      	beq.n	8009304 <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80092c4:	2000      	movs	r0, #0
 80092c6:	e737      	b.n	8009138 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80092c8:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80092cc:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 80092d0:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 80092d4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80092d8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80092dc:	4311      	orrs	r1, r2
 80092de:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80092e2:	2000      	movs	r0, #0
}
 80092e4:	e728      	b.n	8009138 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80092e6:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80092ea:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 80092ee:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 80092f2:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80092f6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80092fa:	430a      	orrs	r2, r1
 80092fc:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009300:	2000      	movs	r0, #0
}
 8009302:	e719      	b.n	8009138 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009304:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009308:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 800930c:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8009310:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8009314:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8009318:	430a      	orrs	r2, r1
 800931a:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800931e:	2000      	movs	r0, #0
}
 8009320:	e70a      	b.n	8009138 <HAL_ADC_ConfigChannel+0x30>
 8009322:	2000      	movs	r0, #0
 8009324:	e708      	b.n	8009138 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8009326:	2002      	movs	r0, #2
 8009328:	e709      	b.n	800913e <HAL_ADC_ConfigChannel+0x36>
 800932a:	bf00      	nop
 800932c:	80000004 	.word	0x80000004
 8009330:	40012000 	.word	0x40012000
 8009334:	b0001000 	.word	0xb0001000
 8009338:	b8004000 	.word	0xb8004000
 800933c:	b4002000 	.word	0xb4002000
 8009340:	20000078 	.word	0x20000078
 8009344:	053e2d63 	.word	0x053e2d63

08009348 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8009348:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800934a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800934c:	689a      	ldr	r2, [r3, #8]
 800934e:	f012 0f04 	tst.w	r2, #4
 8009352:	d02a      	beq.n	80093aa <ADC_ConversionStop+0x62>
 8009354:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8009356:	689a      	ldr	r2, [r3, #8]
 8009358:	f012 0f02 	tst.w	r2, #2
 800935c:	d107      	bne.n	800936e <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800935e:	689a      	ldr	r2, [r3, #8]
 8009360:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009364:	f022 0217 	bic.w	r2, r2, #23
 8009368:	f042 0210 	orr.w	r2, r2, #16
 800936c:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800936e:	f7f8 fd21 	bl	8001db4 <HAL_GetTick>
 8009372:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f013 0f04 	tst.w	r3, #4
 800937c:	d013      	beq.n	80093a6 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800937e:	f7f8 fd19 	bl	8001db4 <HAL_GetTick>
 8009382:	1b43      	subs	r3, r0, r5
 8009384:	2b02      	cmp	r3, #2
 8009386:	d9f5      	bls.n	8009374 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	f013 0f04 	tst.w	r3, #4
 8009390:	d0f0      	beq.n	8009374 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009392:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009394:	f043 0310 	orr.w	r3, r3, #16
 8009398:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800939a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800939c:	f043 0301 	orr.w	r3, r3, #1
 80093a0:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80093a2:	2001      	movs	r0, #1
 80093a4:	e002      	b.n	80093ac <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80093a6:	2000      	movs	r0, #0
 80093a8:	e000      	b.n	80093ac <ADC_ConversionStop+0x64>
 80093aa:	2000      	movs	r0, #0
}
 80093ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080093b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80093b0:	b530      	push	{r4, r5, lr}
 80093b2:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80093b4:	2300      	movs	r3, #0
 80093b6:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80093b8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80093ba:	689a      	ldr	r2, [r3, #8]
 80093bc:	f012 0f01 	tst.w	r2, #1
 80093c0:	d15b      	bne.n	800947a <ADC_Enable+0xca>
 80093c2:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80093c4:	6899      	ldr	r1, [r3, #8]
 80093c6:	4a2e      	ldr	r2, [pc, #184]	; (8009480 <ADC_Enable+0xd0>)
 80093c8:	4211      	tst	r1, r2
 80093ca:	d117      	bne.n	80093fc <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 80093cc:	689a      	ldr	r2, [r3, #8]
 80093ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80093d2:	f022 0217 	bic.w	r2, r2, #23
 80093d6:	f042 0201 	orr.w	r2, r2, #1
 80093da:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80093dc:	4b29      	ldr	r3, [pc, #164]	; (8009484 <ADC_Enable+0xd4>)
 80093de:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80093e2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80093e6:	d019      	beq.n	800941c <ADC_Enable+0x6c>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80093e8:	4b27      	ldr	r3, [pc, #156]	; (8009488 <ADC_Enable+0xd8>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	099b      	lsrs	r3, r3, #6
 80093ee:	4a27      	ldr	r2, [pc, #156]	; (800948c <ADC_Enable+0xdc>)
 80093f0:	fba2 2303 	umull	r2, r3, r2, r3
 80093f4:	099b      	lsrs	r3, r3, #6
 80093f6:	3301      	adds	r3, #1
 80093f8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80093fa:	e00c      	b.n	8009416 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80093fc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80093fe:	f043 0310 	orr.w	r3, r3, #16
 8009402:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009404:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8009406:	f043 0301 	orr.w	r3, r3, #1
 800940a:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 800940c:	2001      	movs	r0, #1
 800940e:	e035      	b.n	800947c <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8009410:	9b01      	ldr	r3, [sp, #4]
 8009412:	3b01      	subs	r3, #1
 8009414:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8009416:	9b01      	ldr	r3, [sp, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1f9      	bne.n	8009410 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800941c:	7e63      	ldrb	r3, [r4, #25]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d101      	bne.n	8009426 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009422:	2000      	movs	r0, #0
 8009424:	e02a      	b.n	800947c <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8009426:	f7f8 fcc5 	bl	8001db4 <HAL_GetTick>
 800942a:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	f012 0f01 	tst.w	r2, #1
 8009434:	d11f      	bne.n	8009476 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009436:	689a      	ldr	r2, [r3, #8]
 8009438:	f012 0f01 	tst.w	r2, #1
 800943c:	d107      	bne.n	800944e <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009444:	f022 0217 	bic.w	r2, r2, #23
 8009448:	f042 0201 	orr.w	r2, r2, #1
 800944c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800944e:	f7f8 fcb1 	bl	8001db4 <HAL_GetTick>
 8009452:	1b40      	subs	r0, r0, r5
 8009454:	2802      	cmp	r0, #2
 8009456:	d9e9      	bls.n	800942c <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f013 0f01 	tst.w	r3, #1
 8009460:	d1e4      	bne.n	800942c <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009462:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009464:	f043 0310 	orr.w	r3, r3, #16
 8009468:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800946a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800946c:	f043 0301 	orr.w	r3, r3, #1
 8009470:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8009472:	2001      	movs	r0, #1
 8009474:	e002      	b.n	800947c <ADC_Enable+0xcc>
  return HAL_OK;
 8009476:	2000      	movs	r0, #0
 8009478:	e000      	b.n	800947c <ADC_Enable+0xcc>
 800947a:	2000      	movs	r0, #0
}
 800947c:	b003      	add	sp, #12
 800947e:	bd30      	pop	{r4, r5, pc}
 8009480:	80000017 	.word	0x80000017
 8009484:	40012000 	.word	0x40012000
 8009488:	20000078 	.word	0x20000078
 800948c:	053e2d63 	.word	0x053e2d63

08009490 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009490:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f013 0f04 	tst.w	r3, #4
 8009498:	d128      	bne.n	80094ec <HAL_ADC_Start+0x5c>
{
 800949a:	b510      	push	{r4, lr}
 800949c:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800949e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d024      	beq.n	80094f0 <HAL_ADC_Start+0x60>
 80094a6:	2301      	movs	r3, #1
 80094a8:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 80094ac:	f7ff ff80 	bl	80093b0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80094b0:	b9c0      	cbnz	r0, 80094e4 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 80094b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80094b8:	f023 0301 	bic.w	r3, r3, #1
 80094bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094c0:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 80094c2:	2300      	movs	r3, #0
 80094c4:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80094c6:	6822      	ldr	r2, [r4, #0]
 80094c8:	211c      	movs	r1, #28
 80094ca:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 80094cc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 80094d0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80094d2:	6893      	ldr	r3, [r2, #8]
 80094d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094d8:	f023 0317 	bic.w	r3, r3, #23
 80094dc:	f043 0304 	orr.w	r3, r3, #4
 80094e0:	6093      	str	r3, [r2, #8]
}
 80094e2:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 80094e4:	2300      	movs	r3, #0
 80094e6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80094ea:	e7fa      	b.n	80094e2 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 80094ec:	2002      	movs	r0, #2
}
 80094ee:	4770      	bx	lr
    __HAL_LOCK(hadc);
 80094f0:	2002      	movs	r0, #2
 80094f2:	e7f6      	b.n	80094e2 <HAL_ADC_Start+0x52>

080094f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80094f8:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80094fa:	6893      	ldr	r3, [r2, #8]
 80094fc:	f013 0302 	ands.w	r3, r3, #2
 8009500:	d000      	beq.n	8009504 <ADC_Disable+0x10>
 8009502:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009504:	6891      	ldr	r1, [r2, #8]
 8009506:	f011 0f01 	tst.w	r1, #1
 800950a:	d039      	beq.n	8009580 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 800950c:	2b00      	cmp	r3, #0
 800950e:	d139      	bne.n	8009584 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009510:	6893      	ldr	r3, [r2, #8]
 8009512:	f003 0305 	and.w	r3, r3, #5
 8009516:	2b01      	cmp	r3, #1
 8009518:	d009      	beq.n	800952e <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800951a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800951c:	f043 0310 	orr.w	r3, r3, #16
 8009520:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009522:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009524:	f043 0301 	orr.w	r3, r3, #1
 8009528:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 800952a:	2001      	movs	r0, #1
 800952c:	e029      	b.n	8009582 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 800952e:	6893      	ldr	r3, [r2, #8]
 8009530:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009534:	f023 0317 	bic.w	r3, r3, #23
 8009538:	f043 0302 	orr.w	r3, r3, #2
 800953c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	2203      	movs	r2, #3
 8009542:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009544:	f7f8 fc36 	bl	8001db4 <HAL_GetTick>
 8009548:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	f013 0f01 	tst.w	r3, #1
 8009552:	d013      	beq.n	800957c <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009554:	f7f8 fc2e 	bl	8001db4 <HAL_GetTick>
 8009558:	1b40      	subs	r0, r0, r5
 800955a:	2802      	cmp	r0, #2
 800955c:	d9f5      	bls.n	800954a <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f013 0f01 	tst.w	r3, #1
 8009566:	d0f0      	beq.n	800954a <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009568:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800956a:	f043 0310 	orr.w	r3, r3, #16
 800956e:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009570:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009572:	f043 0301 	orr.w	r3, r3, #1
 8009576:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8009578:	2001      	movs	r0, #1
 800957a:	e002      	b.n	8009582 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800957c:	2000      	movs	r0, #0
 800957e:	e000      	b.n	8009582 <ADC_Disable+0x8e>
 8009580:	2000      	movs	r0, #0
}
 8009582:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8009584:	2000      	movs	r0, #0
 8009586:	e7fc      	b.n	8009582 <ADC_Disable+0x8e>

08009588 <HAL_ADC_DeInit>:
{
 8009588:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 800958a:	2800      	cmp	r0, #0
 800958c:	d04c      	beq.n	8009628 <HAL_ADC_DeInit+0xa0>
 800958e:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8009590:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8009592:	f043 0302 	orr.w	r3, r3, #2
 8009596:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8009598:	f7ff fed6 	bl	8009348 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800959c:	4606      	mov	r6, r0
 800959e:	2800      	cmp	r0, #0
 80095a0:	d033      	beq.n	800960a <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80095a2:	6822      	ldr	r2, [r4, #0]
 80095a4:	6853      	ldr	r3, [r2, #4]
 80095a6:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80095aa:	f023 0303 	bic.w	r3, r3, #3
 80095ae:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	f240 329f 	movw	r2, #927	; 0x39f
 80095b6:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80095b8:	6822      	ldr	r2, [r4, #0]
 80095ba:	68d1      	ldr	r1, [r2, #12]
 80095bc:	4b1b      	ldr	r3, [pc, #108]	; (800962c <HAL_ADC_DeInit+0xa4>)
 80095be:	400b      	ands	r3, r1
 80095c0:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80095c2:	6822      	ldr	r2, [r4, #0]
 80095c4:	6913      	ldr	r3, [r2, #16]
 80095c6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80095ca:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80095cc:	6822      	ldr	r2, [r4, #0]
 80095ce:	6953      	ldr	r3, [r2, #20]
 80095d0:	f023 0307 	bic.w	r3, r3, #7
 80095d4:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 80095d6:	6822      	ldr	r2, [r4, #0]
 80095d8:	6a13      	ldr	r3, [r2, #32]
 80095da:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80095de:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095e4:	2500      	movs	r5, #0
 80095e6:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80095e8:	4a11      	ldr	r2, [pc, #68]	; (8009630 <HAL_ADC_DeInit+0xa8>)
 80095ea:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 80095ee:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80095f2:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 80095f6:	4620      	mov	r0, r4
 80095f8:	f7f7 ff28 	bl	800144c <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80095fc:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 80095fe:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8009600:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8009602:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8009606:	4630      	mov	r0, r6
 8009608:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800960a:	4620      	mov	r0, r4
 800960c:	f7ff ff72 	bl	80094f4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8009610:	4606      	mov	r6, r0
 8009612:	b908      	cbnz	r0, 8009618 <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 8009614:	2301      	movs	r3, #1
 8009616:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8009618:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800961a:	6893      	ldr	r3, [r2, #8]
 800961c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8009620:	f023 0317 	bic.w	r3, r3, #23
 8009624:	6093      	str	r3, [r2, #8]
}
 8009626:	e7bc      	b.n	80095a2 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8009628:	2601      	movs	r6, #1
 800962a:	e7ec      	b.n	8009606 <HAL_ADC_DeInit+0x7e>
 800962c:	833e0200 	.word	0x833e0200
 8009630:	40012000 	.word	0x40012000

08009634 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8009634:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8009638:	2b01      	cmp	r3, #1
 800963a:	d019      	beq.n	8009670 <HAL_ADC_Stop+0x3c>
{
 800963c:	b510      	push	{r4, lr}
 800963e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8009640:	2301      	movs	r3, #1
 8009642:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8009646:	f7ff fe7f 	bl	8009348 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800964a:	b118      	cbz	r0, 8009654 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800964c:	2300      	movs	r3, #0
 800964e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8009652:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8009654:	4620      	mov	r0, r4
 8009656:	f7ff ff4d 	bl	80094f4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800965a:	2800      	cmp	r0, #0
 800965c:	d1f6      	bne.n	800964c <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800965e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009664:	f023 0301 	bic.w	r3, r3, #1
 8009668:	f043 0301 	orr.w	r3, r3, #1
 800966c:	65a3      	str	r3, [r4, #88]	; 0x58
 800966e:	e7ed      	b.n	800964c <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8009670:	2002      	movs	r0, #2
}
 8009672:	4770      	bx	lr

08009674 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8009674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009676:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8009678:	2300      	movs	r3, #0
 800967a:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800967c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8009680:	2b01      	cmp	r3, #1
 8009682:	f000 8094 	beq.w	80097ae <HAL_ADCEx_Calibration_Start+0x13a>
 8009686:	4604      	mov	r4, r0
 8009688:	2301      	movs	r3, #1
 800968a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800968e:	f7ff ff31 	bl	80094f4 <ADC_Disable>
 8009692:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009694:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009696:	689a      	ldr	r2, [r3, #8]
 8009698:	f012 0201 	ands.w	r2, r2, #1
 800969c:	d009      	beq.n	80096b2 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800969e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096a0:	f043 0310 	orr.w	r3, r3, #16
 80096a4:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80096a6:	2300      	movs	r3, #0
 80096a8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 80096ac:	4628      	mov	r0, r5
 80096ae:	b003      	add	sp, #12
 80096b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80096b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80096b4:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80096b8:	f041 0102 	orr.w	r1, r1, #2
 80096bc:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80096be:	68de      	ldr	r6, [r3, #12]
 80096c0:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 80096c4:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 80096c8:	0436      	lsls	r6, r6, #16
 80096ca:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80096cc:	68d9      	ldr	r1, [r3, #12]
 80096ce:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80096d2:	f021 0103 	bic.w	r1, r1, #3
 80096d6:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 80096d8:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80096da:	e005      	b.n	80096e8 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80096dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80096e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80096e4:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80096e6:	3201      	adds	r2, #1
 80096e8:	2a07      	cmp	r2, #7
 80096ea:	d81e      	bhi.n	800972a <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 80096ec:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80096ee:	688b      	ldr	r3, [r1, #8]
 80096f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096f4:	f023 0317 	bic.w	r3, r3, #23
 80096f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096fc:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80096fe:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8009700:	6899      	ldr	r1, [r3, #8]
 8009702:	2900      	cmp	r1, #0
 8009704:	daea      	bge.n	80096dc <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8009706:	9b01      	ldr	r3, [sp, #4]
 8009708:	3301      	adds	r3, #1
 800970a:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800970c:	9b01      	ldr	r3, [sp, #4]
 800970e:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8009712:	d3f4      	bcc.n	80096fe <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8009714:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009716:	f023 0312 	bic.w	r3, r3, #18
 800971a:	f043 0310 	orr.w	r3, r3, #16
 800971e:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8009720:	2300      	movs	r3, #0
 8009722:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8009726:	2501      	movs	r5, #1
 8009728:	e7c0      	b.n	80096ac <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 800972a:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 800972e:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8009730:	688b      	ldr	r3, [r1, #8]
 8009732:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009736:	f023 0317 	bic.w	r3, r3, #23
 800973a:	f043 0301 	orr.w	r3, r3, #1
 800973e:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8009740:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8009742:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8009746:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 800974a:	4302      	orrs	r2, r0
 800974c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8009750:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8009752:	6893      	ldr	r3, [r2, #8]
 8009754:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009758:	f023 0317 	bic.w	r3, r3, #23
 800975c:	f043 0302 	orr.w	r3, r3, #2
 8009760:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8009762:	f7f8 fb27 	bl	8001db4 <HAL_GetTick>
 8009766:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009768:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800976a:	689a      	ldr	r2, [r3, #8]
 800976c:	f012 0f01 	tst.w	r2, #1
 8009770:	d109      	bne.n	8009786 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8009772:	68da      	ldr	r2, [r3, #12]
 8009774:	4316      	orrs	r6, r2
 8009776:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8009778:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800977a:	f023 0303 	bic.w	r3, r3, #3
 800977e:	f043 0301 	orr.w	r3, r3, #1
 8009782:	65a3      	str	r3, [r4, #88]	; 0x58
 8009784:	e78f      	b.n	80096a6 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009786:	f7f8 fb15 	bl	8001db4 <HAL_GetTick>
 800978a:	1bc3      	subs	r3, r0, r7
 800978c:	2b02      	cmp	r3, #2
 800978e:	d9eb      	bls.n	8009768 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f013 0f01 	tst.w	r3, #1
 8009798:	d0e6      	beq.n	8009768 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800979a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800979c:	f043 0310 	orr.w	r3, r3, #16
 80097a0:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80097a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80097a4:	f043 0301 	orr.w	r3, r3, #1
 80097a8:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 80097aa:	2501      	movs	r5, #1
 80097ac:	e77e      	b.n	80096ac <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 80097ae:	2502      	movs	r5, #2
 80097b0:	e77c      	b.n	80096ac <HAL_ADCEx_Calibration_Start+0x38>
	...

080097b4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80097b4:	4a07      	ldr	r2, [pc, #28]	; (80097d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80097b6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80097b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80097bc:	041b      	lsls	r3, r3, #16
 80097be:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80097c0:	0200      	lsls	r0, r0, #8
 80097c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80097c6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80097c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80097cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80097d0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80097d2:	4770      	bx	lr
 80097d4:	e000ed00 	.word	0xe000ed00

080097d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80097d8:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80097da:	4b19      	ldr	r3, [pc, #100]	; (8009840 <HAL_NVIC_SetPriority+0x68>)
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80097e2:	f1c3 0c07 	rsb	ip, r3, #7
 80097e6:	f1bc 0f04 	cmp.w	ip, #4
 80097ea:	bf28      	it	cs
 80097ec:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097f0:	f103 0e04 	add.w	lr, r3, #4
 80097f4:	f1be 0f06 	cmp.w	lr, #6
 80097f8:	d918      	bls.n	800982c <HAL_NVIC_SetPriority+0x54>
 80097fa:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097fc:	f04f 3eff 	mov.w	lr, #4294967295
 8009800:	fa0e fc0c 	lsl.w	ip, lr, ip
 8009804:	ea21 010c 	bic.w	r1, r1, ip
 8009808:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800980a:	fa0e f303 	lsl.w	r3, lr, r3
 800980e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009812:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8009814:	2800      	cmp	r0, #0
 8009816:	db0b      	blt.n	8009830 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009818:	0109      	lsls	r1, r1, #4
 800981a:	b2c9      	uxtb	r1, r1
 800981c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8009820:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8009824:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009828:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800982c:	2300      	movs	r3, #0
 800982e:	e7e5      	b.n	80097fc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009830:	f000 000f 	and.w	r0, r0, #15
 8009834:	0109      	lsls	r1, r1, #4
 8009836:	b2c9      	uxtb	r1, r1
 8009838:	4b02      	ldr	r3, [pc, #8]	; (8009844 <HAL_NVIC_SetPriority+0x6c>)
 800983a:	5419      	strb	r1, [r3, r0]
 800983c:	e7f4      	b.n	8009828 <HAL_NVIC_SetPriority+0x50>
 800983e:	bf00      	nop
 8009840:	e000ed00 	.word	0xe000ed00
 8009844:	e000ed14 	.word	0xe000ed14

08009848 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8009848:	2800      	cmp	r0, #0
 800984a:	db07      	blt.n	800985c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800984c:	f000 021f 	and.w	r2, r0, #31
 8009850:	0940      	lsrs	r0, r0, #5
 8009852:	2301      	movs	r3, #1
 8009854:	4093      	lsls	r3, r2
 8009856:	4a02      	ldr	r2, [pc, #8]	; (8009860 <HAL_NVIC_EnableIRQ+0x18>)
 8009858:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	e000e100 	.word	0xe000e100

08009864 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8009864:	2800      	cmp	r0, #0
 8009866:	db0c      	blt.n	8009882 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009868:	f000 021f 	and.w	r2, r0, #31
 800986c:	0940      	lsrs	r0, r0, #5
 800986e:	2301      	movs	r3, #1
 8009870:	4093      	lsls	r3, r2
 8009872:	3020      	adds	r0, #32
 8009874:	4a03      	ldr	r2, [pc, #12]	; (8009884 <HAL_NVIC_DisableIRQ+0x20>)
 8009876:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800987a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800987e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8009882:	4770      	bx	lr
 8009884:	e000e100 	.word	0xe000e100

08009888 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009888:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800988a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800988c:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8009890:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009894:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8009896:	b124      	cbz	r4, 80098a2 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009898:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800989a:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 800989e:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80098a2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80098a4:	f004 0c1c 	and.w	ip, r4, #28
 80098a8:	2401      	movs	r4, #1
 80098aa:	fa04 f40c 	lsl.w	r4, r4, ip
 80098ae:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 80098b2:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80098b6:	6804      	ldr	r4, [r0, #0]
 80098b8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80098ba:	6883      	ldr	r3, [r0, #8]
 80098bc:	2b10      	cmp	r3, #16
 80098be:	d005      	beq.n	80098cc <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80098c0:	6803      	ldr	r3, [r0, #0]
 80098c2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80098c4:	6803      	ldr	r3, [r0, #0]
 80098c6:	60da      	str	r2, [r3, #12]
  }
}
 80098c8:	bc10      	pop	{r4}
 80098ca:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80098cc:	6803      	ldr	r3, [r0, #0]
 80098ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80098d0:	6803      	ldr	r3, [r0, #0]
 80098d2:	60d9      	str	r1, [r3, #12]
 80098d4:	e7f8      	b.n	80098c8 <DMA_SetConfig+0x40>
	...

080098d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80098d8:	6803      	ldr	r3, [r0, #0]
 80098da:	4a14      	ldr	r2, [pc, #80]	; (800992c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d816      	bhi.n	800990e <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80098e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098e2:	f022 0203 	bic.w	r2, r2, #3
 80098e6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80098ea:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 80098ee:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	3b08      	subs	r3, #8
 80098f4:	4a0e      	ldr	r2, [pc, #56]	; (8009930 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80098f6:	fba2 2303 	umull	r2, r3, r2, r3
 80098fa:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80098fc:	4a0d      	ldr	r2, [pc, #52]	; (8009934 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 80098fe:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009900:	f003 031f 	and.w	r3, r3, #31
 8009904:	2201      	movs	r2, #1
 8009906:	fa02 f303 	lsl.w	r3, r2, r3
 800990a:	6503      	str	r3, [r0, #80]	; 0x50
}
 800990c:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800990e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009910:	f022 0103 	bic.w	r1, r2, #3
 8009914:	4a08      	ldr	r2, [pc, #32]	; (8009938 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8009916:	440a      	add	r2, r1
 8009918:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800991a:	b2db      	uxtb	r3, r3
 800991c:	3b08      	subs	r3, #8
 800991e:	4a04      	ldr	r2, [pc, #16]	; (8009930 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8009920:	fba2 2303 	umull	r2, r3, r2, r3
 8009924:	091b      	lsrs	r3, r3, #4
 8009926:	3307      	adds	r3, #7
 8009928:	e7e8      	b.n	80098fc <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 800992a:	bf00      	nop
 800992c:	40020407 	.word	0x40020407
 8009930:	cccccccd 	.word	0xcccccccd
 8009934:	40020880 	.word	0x40020880
 8009938:	4002081c 	.word	0x4002081c

0800993c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800993c:	6843      	ldr	r3, [r0, #4]
 800993e:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009942:	4a07      	ldr	r2, [pc, #28]	; (8009960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8009944:	441a      	add	r2, r3
 8009946:	0092      	lsls	r2, r2, #2
 8009948:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800994a:	4a06      	ldr	r2, [pc, #24]	; (8009964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 800994c:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800994e:	3b01      	subs	r3, #1
 8009950:	f003 0303 	and.w	r3, r3, #3
 8009954:	2201      	movs	r2, #1
 8009956:	fa02 f303 	lsl.w	r3, r2, r3
 800995a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	1000823f 	.word	0x1000823f
 8009964:	40020940 	.word	0x40020940

08009968 <HAL_DMA_Init>:
  if (hdma == NULL)
 8009968:	2800      	cmp	r0, #0
 800996a:	d060      	beq.n	8009a2e <HAL_DMA_Init+0xc6>
{
 800996c:	b510      	push	{r4, lr}
 800996e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009970:	6802      	ldr	r2, [r0, #0]
 8009972:	4b30      	ldr	r3, [pc, #192]	; (8009a34 <HAL_DMA_Init+0xcc>)
 8009974:	429a      	cmp	r2, r3
 8009976:	d842      	bhi.n	80099fe <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009978:	4b2f      	ldr	r3, [pc, #188]	; (8009a38 <HAL_DMA_Init+0xd0>)
 800997a:	4413      	add	r3, r2
 800997c:	492f      	ldr	r1, [pc, #188]	; (8009a3c <HAL_DMA_Init+0xd4>)
 800997e:	fba1 1303 	umull	r1, r3, r1, r3
 8009982:	091b      	lsrs	r3, r3, #4
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009988:	4b2d      	ldr	r3, [pc, #180]	; (8009a40 <HAL_DMA_Init+0xd8>)
 800998a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800998c:	2302      	movs	r3, #2
 800998e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009992:	6813      	ldr	r3, [r2, #0]
 8009994:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800999c:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800999e:	6821      	ldr	r1, [r4, #0]
 80099a0:	680a      	ldr	r2, [r1, #0]
 80099a2:	68a3      	ldr	r3, [r4, #8]
 80099a4:	68e0      	ldr	r0, [r4, #12]
 80099a6:	4303      	orrs	r3, r0
 80099a8:	6920      	ldr	r0, [r4, #16]
 80099aa:	4303      	orrs	r3, r0
 80099ac:	6960      	ldr	r0, [r4, #20]
 80099ae:	4303      	orrs	r3, r0
 80099b0:	69a0      	ldr	r0, [r4, #24]
 80099b2:	4303      	orrs	r3, r0
 80099b4:	69e0      	ldr	r0, [r4, #28]
 80099b6:	4303      	orrs	r3, r0
 80099b8:	6a20      	ldr	r0, [r4, #32]
 80099ba:	4303      	orrs	r3, r0
 80099bc:	4313      	orrs	r3, r2
 80099be:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80099c0:	4620      	mov	r0, r4
 80099c2:	f7ff ff89 	bl	80098d8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80099c6:	68a3      	ldr	r3, [r4, #8]
 80099c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099cc:	d022      	beq.n	8009a14 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80099ce:	6863      	ldr	r3, [r4, #4]
 80099d0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80099d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099d6:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80099d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80099da:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80099dc:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80099de:	6863      	ldr	r3, [r4, #4]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	2b03      	cmp	r3, #3
 80099e4:	d919      	bls.n	8009a1a <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80099ea:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80099ec:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80099ee:	2000      	movs	r0, #0
 80099f0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80099f2:	2301      	movs	r3, #1
 80099f4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80099f8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80099fc:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80099fe:	4b11      	ldr	r3, [pc, #68]	; (8009a44 <HAL_DMA_Init+0xdc>)
 8009a00:	4413      	add	r3, r2
 8009a02:	490e      	ldr	r1, [pc, #56]	; (8009a3c <HAL_DMA_Init+0xd4>)
 8009a04:	fba1 1303 	umull	r1, r3, r1, r3
 8009a08:	091b      	lsrs	r3, r3, #4
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009a0e:	4b0e      	ldr	r3, [pc, #56]	; (8009a48 <HAL_DMA_Init+0xe0>)
 8009a10:	6403      	str	r3, [r0, #64]	; 0x40
 8009a12:	e7bb      	b.n	800998c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009a14:	2300      	movs	r3, #0
 8009a16:	6063      	str	r3, [r4, #4]
 8009a18:	e7d9      	b.n	80099ce <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	f7ff ff8e 	bl	800993c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009a20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009a22:	2200      	movs	r2, #0
 8009a24:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a28:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009a2a:	605a      	str	r2, [r3, #4]
 8009a2c:	e7df      	b.n	80099ee <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8009a2e:	2001      	movs	r0, #1
}
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	40020407 	.word	0x40020407
 8009a38:	bffdfff8 	.word	0xbffdfff8
 8009a3c:	cccccccd 	.word	0xcccccccd
 8009a40:	40020000 	.word	0x40020000
 8009a44:	bffdfbf8 	.word	0xbffdfbf8
 8009a48:	40020400 	.word	0x40020400

08009a4c <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d04b      	beq.n	8009ae8 <HAL_DMA_DeInit+0x9c>
{
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8009a54:	6802      	ldr	r2, [r0, #0]
 8009a56:	6813      	ldr	r3, [r2, #0]
 8009a58:	f023 0301 	bic.w	r3, r3, #1
 8009a5c:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009a5e:	6802      	ldr	r2, [r0, #0]
 8009a60:	4b22      	ldr	r3, [pc, #136]	; (8009aec <HAL_DMA_DeInit+0xa0>)
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d82c      	bhi.n	8009ac0 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009a66:	4b22      	ldr	r3, [pc, #136]	; (8009af0 <HAL_DMA_DeInit+0xa4>)
 8009a68:	4413      	add	r3, r2
 8009a6a:	4922      	ldr	r1, [pc, #136]	; (8009af4 <HAL_DMA_DeInit+0xa8>)
 8009a6c:	fba1 1303 	umull	r1, r3, r1, r3
 8009a70:	091b      	lsrs	r3, r3, #4
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009a76:	4b20      	ldr	r3, [pc, #128]	; (8009af8 <HAL_DMA_DeInit+0xac>)
 8009a78:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8009a7a:	2500      	movs	r5, #0
 8009a7c:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009a7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009a80:	f003 021c 	and.w	r2, r3, #28
 8009a84:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009a86:	2301      	movs	r3, #1
 8009a88:	4093      	lsls	r3, r2
 8009a8a:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f7ff ff23 	bl	80098d8 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8009a92:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009a94:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a96:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009a98:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009a9a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009a9c:	6863      	ldr	r3, [r4, #4]
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	2b03      	cmp	r3, #3
 8009aa2:	d918      	bls.n	8009ad6 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8009aa8:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8009aaa:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8009aac:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8009aae:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8009ab0:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8009ab2:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ab4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8009ab6:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8009aba:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8009abe:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009ac0:	4b0e      	ldr	r3, [pc, #56]	; (8009afc <HAL_DMA_DeInit+0xb0>)
 8009ac2:	4413      	add	r3, r2
 8009ac4:	490b      	ldr	r1, [pc, #44]	; (8009af4 <HAL_DMA_DeInit+0xa8>)
 8009ac6:	fba1 1303 	umull	r1, r3, r1, r3
 8009aca:	091b      	lsrs	r3, r3, #4
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009ad0:	4b0b      	ldr	r3, [pc, #44]	; (8009b00 <HAL_DMA_DeInit+0xb4>)
 8009ad2:	6403      	str	r3, [r0, #64]	; 0x40
 8009ad4:	e7d1      	b.n	8009a7a <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f7ff ff30 	bl	800993c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009adc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009ade:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ae0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ae2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009ae4:	605a      	str	r2, [r3, #4]
 8009ae6:	e7dd      	b.n	8009aa4 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8009ae8:	2001      	movs	r0, #1
}
 8009aea:	4770      	bx	lr
 8009aec:	40020407 	.word	0x40020407
 8009af0:	bffdfff8 	.word	0xbffdfff8
 8009af4:	cccccccd 	.word	0xcccccccd
 8009af8:	40020000 	.word	0x40020000
 8009afc:	bffdfbf8 	.word	0xbffdfbf8
 8009b00:	40020400 	.word	0x40020400

08009b04 <HAL_DMA_Start_IT>:
{
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8009b08:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8009b0c:	2801      	cmp	r0, #1
 8009b0e:	d043      	beq.n	8009b98 <HAL_DMA_Start_IT+0x94>
 8009b10:	2001      	movs	r0, #1
 8009b12:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8009b16:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8009b1a:	b2c0      	uxtb	r0, r0
 8009b1c:	2801      	cmp	r0, #1
 8009b1e:	d006      	beq.n	8009b2e <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009b20:	2380      	movs	r3, #128	; 0x80
 8009b22:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8009b24:	2300      	movs	r3, #0
 8009b26:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8009b2a:	2001      	movs	r0, #1
}
 8009b2c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b2e:	2002      	movs	r0, #2
 8009b30:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b34:	2000      	movs	r0, #0
 8009b36:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8009b38:	6825      	ldr	r5, [r4, #0]
 8009b3a:	6828      	ldr	r0, [r5, #0]
 8009b3c:	f020 0001 	bic.w	r0, r0, #1
 8009b40:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009b42:	4620      	mov	r0, r4
 8009b44:	f7ff fea0 	bl	8009888 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8009b48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009b4a:	b1d3      	cbz	r3, 8009b82 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b4c:	6822      	ldr	r2, [r4, #0]
 8009b4e:	6813      	ldr	r3, [r2, #0]
 8009b50:	f043 030e 	orr.w	r3, r3, #14
 8009b54:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009b56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8009b5e:	d003      	beq.n	8009b68 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b66:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8009b68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009b6a:	b11b      	cbz	r3, 8009b74 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b72:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8009b74:	6822      	ldr	r2, [r4, #0]
 8009b76:	6813      	ldr	r3, [r2, #0]
 8009b78:	f043 0301 	orr.w	r3, r3, #1
 8009b7c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b7e:	2000      	movs	r0, #0
 8009b80:	e7d4      	b.n	8009b2c <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009b82:	6822      	ldr	r2, [r4, #0]
 8009b84:	6813      	ldr	r3, [r2, #0]
 8009b86:	f023 0304 	bic.w	r3, r3, #4
 8009b8a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009b8c:	6822      	ldr	r2, [r4, #0]
 8009b8e:	6813      	ldr	r3, [r2, #0]
 8009b90:	f043 030a 	orr.w	r3, r3, #10
 8009b94:	6013      	str	r3, [r2, #0]
 8009b96:	e7de      	b.n	8009b56 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8009b98:	2002      	movs	r0, #2
 8009b9a:	e7c7      	b.n	8009b2c <HAL_DMA_Start_IT+0x28>

08009b9c <HAL_DMA_Abort>:
  if (NULL == hdma)
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d034      	beq.n	8009c0c <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009ba2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8009ba6:	b2d2      	uxtb	r2, r2
 8009ba8:	2a02      	cmp	r2, #2
 8009baa:	d006      	beq.n	8009bba <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009bac:	2204      	movs	r2, #4
 8009bae:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8009bb6:	2001      	movs	r0, #1
 8009bb8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009bba:	6801      	ldr	r1, [r0, #0]
 8009bbc:	680a      	ldr	r2, [r1, #0]
 8009bbe:	f022 020e 	bic.w	r2, r2, #14
 8009bc2:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009bc4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8009bc6:	680a      	ldr	r2, [r1, #0]
 8009bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bcc:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8009bce:	6801      	ldr	r1, [r0, #0]
 8009bd0:	680a      	ldr	r2, [r1, #0]
 8009bd2:	f022 0201 	bic.w	r2, r2, #1
 8009bd6:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009bd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009bda:	f002 011c 	and.w	r1, r2, #28
 8009bde:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8009be0:	2201      	movs	r2, #1
 8009be2:	408a      	lsls	r2, r1
 8009be4:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009be6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009be8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009bea:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8009bec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bee:	b132      	cbz	r2, 8009bfe <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009bf0:	6811      	ldr	r1, [r2, #0]
 8009bf2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009bf6:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009bf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009bfa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009bfc:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8009c04:	2000      	movs	r0, #0
 8009c06:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8009c0a:	4770      	bx	lr
    return HAL_ERROR;
 8009c0c:	2001      	movs	r0, #1
}
 8009c0e:	4770      	bx	lr

08009c10 <HAL_DMA_Abort_IT>:
{
 8009c10:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009c12:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d003      	beq.n	8009c24 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8009c20:	2001      	movs	r0, #1
}
 8009c22:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c24:	6802      	ldr	r2, [r0, #0]
 8009c26:	6813      	ldr	r3, [r2, #0]
 8009c28:	f023 030e 	bic.w	r3, r3, #14
 8009c2c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8009c2e:	6802      	ldr	r2, [r0, #0]
 8009c30:	6813      	ldr	r3, [r2, #0]
 8009c32:	f023 0301 	bic.w	r3, r3, #1
 8009c36:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009c38:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8009c3a:	6813      	ldr	r3, [r2, #0]
 8009c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c40:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009c42:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009c44:	f003 021c 	and.w	r2, r3, #28
 8009c48:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	4093      	lsls	r3, r2
 8009c4e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c50:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009c52:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009c54:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8009c56:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009c58:	b133      	cbz	r3, 8009c68 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c60:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009c62:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8009c64:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8009c66:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8009c6e:	2300      	movs	r3, #0
 8009c70:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8009c74:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009c76:	b113      	cbz	r3, 8009c7e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8009c78:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	e7d1      	b.n	8009c22 <HAL_DMA_Abort_IT+0x12>
 8009c7e:	2000      	movs	r0, #0
 8009c80:	e7cf      	b.n	8009c22 <HAL_DMA_Abort_IT+0x12>
	...

08009c84 <HAL_DMA_IRQHandler>:
{
 8009c84:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009c86:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009c88:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8009c8a:	6804      	ldr	r4, [r0, #0]
 8009c8c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009c8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009c90:	f003 031c 	and.w	r3, r3, #28
 8009c94:	2204      	movs	r2, #4
 8009c96:	409a      	lsls	r2, r3
 8009c98:	420a      	tst	r2, r1
 8009c9a:	d015      	beq.n	8009cc8 <HAL_DMA_IRQHandler+0x44>
 8009c9c:	f015 0f04 	tst.w	r5, #4
 8009ca0:	d012      	beq.n	8009cc8 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	f013 0f20 	tst.w	r3, #32
 8009ca8:	d103      	bne.n	8009cb2 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	f023 0304 	bic.w	r3, r3, #4
 8009cb0:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009cb2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009cb4:	f003 021c 	and.w	r2, r3, #28
 8009cb8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8009cba:	2304      	movs	r3, #4
 8009cbc:	4093      	lsls	r3, r2
 8009cbe:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8009cc0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009cc2:	b103      	cbz	r3, 8009cc6 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8009cc4:	4798      	blx	r3
}
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8009cc8:	2202      	movs	r2, #2
 8009cca:	409a      	lsls	r2, r3
 8009ccc:	420a      	tst	r2, r1
 8009cce:	d028      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x9e>
 8009cd0:	f015 0f02 	tst.w	r5, #2
 8009cd4:	d025      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009cd6:	6823      	ldr	r3, [r4, #0]
 8009cd8:	f013 0f20 	tst.w	r3, #32
 8009cdc:	d106      	bne.n	8009cec <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	f023 030a 	bic.w	r3, r3, #10
 8009ce4:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8009cec:	6802      	ldr	r2, [r0, #0]
 8009cee:	4b1c      	ldr	r3, [pc, #112]	; (8009d60 <HAL_DMA_IRQHandler+0xdc>)
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d90e      	bls.n	8009d12 <HAL_DMA_IRQHandler+0x8e>
 8009cf4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009cf6:	f003 021c 	and.w	r2, r3, #28
 8009cfa:	2302      	movs	r3, #2
 8009cfc:	4093      	lsls	r3, r2
 8009cfe:	4a19      	ldr	r2, [pc, #100]	; (8009d64 <HAL_DMA_IRQHandler+0xe0>)
 8009d00:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8009d02:	2300      	movs	r3, #0
 8009d04:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8009d08:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0db      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8009d0e:	4798      	blx	r3
 8009d10:	e7d9      	b.n	8009cc6 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8009d12:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009d14:	f003 021c 	and.w	r2, r3, #28
 8009d18:	2302      	movs	r3, #2
 8009d1a:	4093      	lsls	r3, r2
 8009d1c:	4a12      	ldr	r2, [pc, #72]	; (8009d68 <HAL_DMA_IRQHandler+0xe4>)
 8009d1e:	6053      	str	r3, [r2, #4]
 8009d20:	e7ef      	b.n	8009d02 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8009d22:	2208      	movs	r2, #8
 8009d24:	fa02 f303 	lsl.w	r3, r2, r3
 8009d28:	420b      	tst	r3, r1
 8009d2a:	d0cc      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0x42>
 8009d2c:	f015 0f08 	tst.w	r5, #8
 8009d30:	d0c9      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	f023 030e 	bic.w	r3, r3, #14
 8009d38:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009d3a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009d3c:	f003 031c 	and.w	r3, r3, #28
 8009d40:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8009d42:	2201      	movs	r2, #1
 8009d44:	fa02 f303 	lsl.w	r3, r2, r3
 8009d48:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009d4a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8009d4c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8009d50:	2300      	movs	r3, #0
 8009d52:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8009d56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d0b4      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8009d5c:	4798      	blx	r3
  return;
 8009d5e:	e7b2      	b.n	8009cc6 <HAL_DMA_IRQHandler+0x42>
 8009d60:	40020080 	.word	0x40020080
 8009d64:	40020400 	.word	0x40020400
 8009d68:	40020000 	.word	0x40020000

08009d6c <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8009d6c:	b178      	cbz	r0, 8009d8e <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8009d6e:	6803      	ldr	r3, [r0, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8009d72:	f011 0f10 	tst.w	r1, #16
 8009d76:	d004      	beq.n	8009d82 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8009d78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009d7c:	d004      	beq.n	8009d88 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8009d7e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8009d82:	601a      	str	r2, [r3, #0]
  return status;
 8009d84:	2000      	movs	r0, #0
 8009d86:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8009d88:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8009d8c:	e7f9      	b.n	8009d82 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8009d8e:	2001      	movs	r0, #1
}
 8009d90:	4770      	bx	lr
	...

08009d94 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009d94:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009d96:	4c05      	ldr	r4, [pc, #20]	; (8009dac <FLASH_Program_DoubleWord+0x18>)
 8009d98:	6961      	ldr	r1, [r4, #20]
 8009d9a:	f041 0101 	orr.w	r1, r1, #1
 8009d9e:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009da0:	6002      	str	r2, [r0, #0]
 8009da2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8009da6:	6043      	str	r3, [r0, #4]
}
 8009da8:	bc10      	pop	{r4}
 8009daa:	4770      	bx	lr
 8009dac:	58004000 	.word	0x58004000

08009db0 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8009db0:	4a0c      	ldr	r2, [pc, #48]	; (8009de4 <FLASH_Program_Fast+0x34>)
 8009db2:	6953      	ldr	r3, [r2, #20]
 8009db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009db8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dba:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009dbe:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8009dc0:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8009dc2:	f851 2b04 	ldr.w	r2, [r1], #4
 8009dc6:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8009dca:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8009dcc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8009dd0:	d1f7      	bne.n	8009dc2 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8009dd2:	4b04      	ldr	r3, [pc, #16]	; (8009de4 <FLASH_Program_Fast+0x34>)
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009dda:	d1fa      	bne.n	8009dd2 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ddc:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	58004000 	.word	0x58004000

08009de8 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009de8:	4b09      	ldr	r3, [pc, #36]	; (8009e10 <HAL_FLASH_Unlock+0x28>)
 8009dea:	695b      	ldr	r3, [r3, #20]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	db01      	blt.n	8009df4 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8009df0:	2000      	movs	r0, #0
 8009df2:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009df4:	4b06      	ldr	r3, [pc, #24]	; (8009e10 <HAL_FLASH_Unlock+0x28>)
 8009df6:	4a07      	ldr	r2, [pc, #28]	; (8009e14 <HAL_FLASH_Unlock+0x2c>)
 8009df8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009dfa:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8009dfe:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	db01      	blt.n	8009e0a <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8009e06:	2000      	movs	r0, #0
 8009e08:	4770      	bx	lr
      status = HAL_ERROR;
 8009e0a:	2001      	movs	r0, #1
}
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	58004000 	.word	0x58004000
 8009e14:	45670123 	.word	0x45670123

08009e18 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009e18:	4b05      	ldr	r3, [pc, #20]	; (8009e30 <HAL_FLASH_Lock+0x18>)
 8009e1a:	695a      	ldr	r2, [r3, #20]
 8009e1c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009e20:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8009e22:	695b      	ldr	r3, [r3, #20]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	db01      	blt.n	8009e2c <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8009e28:	2001      	movs	r0, #1
}
 8009e2a:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	4770      	bx	lr
 8009e30:	58004000 	.word	0x58004000

08009e34 <FLASH_WaitForLastOperation>:
{
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8009e38:	f7f7 ffbc 	bl	8001db4 <HAL_GetTick>
 8009e3c:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009e3e:	4b16      	ldr	r3, [pc, #88]	; (8009e98 <FLASH_WaitForLastOperation+0x64>)
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009e46:	d006      	beq.n	8009e56 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8009e48:	f7f7 ffb4 	bl	8001db4 <HAL_GetTick>
 8009e4c:	1b00      	subs	r0, r0, r4
 8009e4e:	42a8      	cmp	r0, r5
 8009e50:	d3f5      	bcc.n	8009e3e <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8009e52:	2003      	movs	r0, #3
}
 8009e54:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8009e56:	4b10      	ldr	r3, [pc, #64]	; (8009e98 <FLASH_WaitForLastOperation+0x64>)
 8009e58:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8009e5a:	f013 0f01 	tst.w	r3, #1
 8009e5e:	d002      	beq.n	8009e66 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009e60:	4a0d      	ldr	r2, [pc, #52]	; (8009e98 <FLASH_WaitForLastOperation+0x64>)
 8009e62:	2101      	movs	r1, #1
 8009e64:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8009e66:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	d001      	beq.n	8009e72 <FLASH_WaitForLastOperation+0x3e>
 8009e6e:	4a0a      	ldr	r2, [pc, #40]	; (8009e98 <FLASH_WaitForLastOperation+0x64>)
 8009e70:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8009e72:	b95b      	cbnz	r3, 8009e8c <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8009e74:	4b08      	ldr	r3, [pc, #32]	; (8009e98 <FLASH_WaitForLastOperation+0x64>)
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8009e7c:	d00a      	beq.n	8009e94 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8009e7e:	f7f7 ff99 	bl	8001db4 <HAL_GetTick>
 8009e82:	1b00      	subs	r0, r0, r4
 8009e84:	42a8      	cmp	r0, r5
 8009e86:	d3f5      	bcc.n	8009e74 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8009e88:	2003      	movs	r0, #3
 8009e8a:	e7e3      	b.n	8009e54 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8009e8c:	4a03      	ldr	r2, [pc, #12]	; (8009e9c <FLASH_WaitForLastOperation+0x68>)
 8009e8e:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8009e90:	2001      	movs	r0, #1
 8009e92:	e7df      	b.n	8009e54 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8009e94:	2000      	movs	r0, #0
 8009e96:	e7dd      	b.n	8009e54 <FLASH_WaitForLastOperation+0x20>
 8009e98:	58004000 	.word	0x58004000
 8009e9c:	200007d4 	.word	0x200007d4

08009ea0 <HAL_FLASH_Program>:
{
 8009ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea2:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8009ea4:	4b15      	ldr	r3, [pc, #84]	; (8009efc <HAL_FLASH_Program+0x5c>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d025      	beq.n	8009ef8 <HAL_FLASH_Program+0x58>
 8009eac:	4604      	mov	r4, r0
 8009eae:	460d      	mov	r5, r1
 8009eb0:	4616      	mov	r6, r2
 8009eb2:	4b12      	ldr	r3, [pc, #72]	; (8009efc <HAL_FLASH_Program+0x5c>)
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009eb8:	2200      	movs	r2, #0
 8009eba:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009ebc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009ec0:	f7ff ffb8 	bl	8009e34 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8009ec4:	b970      	cbnz	r0, 8009ee4 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8009ec6:	2c01      	cmp	r4, #1
 8009ec8:	d010      	beq.n	8009eec <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8009eca:	4631      	mov	r1, r6
 8009ecc:	4628      	mov	r0, r5
 8009ece:	f7ff ff6f 	bl	8009db0 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009ed2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009ed6:	f7ff ffad 	bl	8009e34 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8009eda:	4a09      	ldr	r2, [pc, #36]	; (8009f00 <HAL_FLASH_Program+0x60>)
 8009edc:	6953      	ldr	r3, [r2, #20]
 8009ede:	ea23 0404 	bic.w	r4, r3, r4
 8009ee2:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8009ee4:	4b05      	ldr	r3, [pc, #20]	; (8009efc <HAL_FLASH_Program+0x5c>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	701a      	strb	r2, [r3, #0]
}
 8009eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8009eec:	4632      	mov	r2, r6
 8009eee:	463b      	mov	r3, r7
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	f7ff ff4f 	bl	8009d94 <FLASH_Program_DoubleWord>
 8009ef6:	e7ec      	b.n	8009ed2 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8009ef8:	2002      	movs	r0, #2
 8009efa:	e7f6      	b.n	8009eea <HAL_FLASH_Program+0x4a>
 8009efc:	200007d4 	.word	0x200007d4
 8009f00:	58004000 	.word	0x58004000

08009f04 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8009f04:	4a03      	ldr	r2, [pc, #12]	; (8009f14 <FLASH_MassErase+0x10>)
 8009f06:	6953      	ldr	r3, [r2, #20]
 8009f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f0c:	f043 0304 	orr.w	r3, r3, #4
 8009f10:	6153      	str	r3, [r2, #20]
#endif
}
 8009f12:	4770      	bx	lr
 8009f14:	58004000 	.word	0x58004000

08009f18 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8009f18:	4b18      	ldr	r3, [pc, #96]	; (8009f7c <FLASH_FlushCaches+0x64>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d006      	beq.n	8009f32 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8009f24:	4b15      	ldr	r3, [pc, #84]	; (8009f7c <FLASH_FlushCaches+0x64>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d012      	beq.n	8009f56 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8009f30:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009f32:	4b12      	ldr	r3, [pc, #72]	; (8009f7c <FLASH_FlushCaches+0x64>)
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009f3a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f4a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f52:	601a      	str	r2, [r3, #0]
 8009f54:	e7e6      	b.n	8009f24 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8009f56:	4b09      	ldr	r3, [pc, #36]	; (8009f7c <FLASH_FlushCaches+0x64>)
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f5e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009f6e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f76:	601a      	str	r2, [r3, #0]
}
 8009f78:	e7da      	b.n	8009f30 <FLASH_FlushCaches+0x18>
 8009f7a:	bf00      	nop
 8009f7c:	58004000 	.word	0x58004000

08009f80 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8009f80:	4a03      	ldr	r2, [pc, #12]	; (8009f90 <FLASH_AcknowledgePageErase+0x10>)
 8009f82:	6953      	ldr	r3, [r2, #20]
 8009f84:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8009f88:	f023 0302 	bic.w	r3, r3, #2
 8009f8c:	6153      	str	r3, [r2, #20]
#endif
}
 8009f8e:	4770      	bx	lr
 8009f90:	58004000 	.word	0x58004000

08009f94 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8009f94:	4a05      	ldr	r2, [pc, #20]	; (8009fac <FLASH_PageErase+0x18>)
 8009f96:	6953      	ldr	r3, [r2, #20]
 8009f98:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8009f9c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8009fa0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8009fa4:	f040 0002 	orr.w	r0, r0, #2
 8009fa8:	6150      	str	r0, [r2, #20]
}
 8009faa:	4770      	bx	lr
 8009fac:	58004000 	.word	0x58004000

08009fb0 <HAL_FLASHEx_Erase>:
{
 8009fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8009fb2:	4b1e      	ldr	r3, [pc, #120]	; (800a02c <HAL_FLASHEx_Erase+0x7c>)
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d035      	beq.n	800a026 <HAL_FLASHEx_Erase+0x76>
 8009fba:	4605      	mov	r5, r0
 8009fbc:	460f      	mov	r7, r1
 8009fbe:	4b1b      	ldr	r3, [pc, #108]	; (800a02c <HAL_FLASHEx_Erase+0x7c>)
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009fcc:	f7ff ff32 	bl	8009e34 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8009fd0:	4606      	mov	r6, r0
 8009fd2:	bb18      	cbnz	r0, 800a01c <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	2b04      	cmp	r3, #4
 8009fd8:	d013      	beq.n	800a002 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8009fda:	f04f 33ff 	mov.w	r3, #4294967295
 8009fde:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8009fe0:	686c      	ldr	r4, [r5, #4]
 8009fe2:	686b      	ldr	r3, [r5, #4]
 8009fe4:	68aa      	ldr	r2, [r5, #8]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	42a3      	cmp	r3, r4
 8009fea:	d913      	bls.n	800a014 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8009fec:	4620      	mov	r0, r4
 8009fee:	f7ff ffd1 	bl	8009f94 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009ff2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009ff6:	f7ff ff1d 	bl	8009e34 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	b948      	cbnz	r0, 800a012 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8009ffe:	3401      	adds	r4, #1
 800a000:	e7ef      	b.n	8009fe2 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 800a002:	f7ff ff7f 	bl	8009f04 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a00a:	f7ff ff13 	bl	8009e34 <FLASH_WaitForLastOperation>
 800a00e:	4606      	mov	r6, r0
 800a010:	e002      	b.n	800a018 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 800a012:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 800a014:	f7ff ffb4 	bl	8009f80 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 800a018:	f7ff ff7e 	bl	8009f18 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800a01c:	4b03      	ldr	r3, [pc, #12]	; (800a02c <HAL_FLASHEx_Erase+0x7c>)
 800a01e:	2200      	movs	r2, #0
 800a020:	701a      	strb	r2, [r3, #0]
}
 800a022:	4630      	mov	r0, r6
 800a024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800a026:	2602      	movs	r6, #2
 800a028:	e7fb      	b.n	800a022 <HAL_FLASHEx_Erase+0x72>
 800a02a:	bf00      	nop
 800a02c:	200007d4 	.word	0x200007d4

0800a030 <HAL_FLASHEx_Erase_IT>:
{
 800a030:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 800a032:	4b17      	ldr	r3, [pc, #92]	; (800a090 <HAL_FLASHEx_Erase_IT+0x60>)
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d028      	beq.n	800a08c <HAL_FLASHEx_Erase_IT+0x5c>
 800a03a:	4604      	mov	r4, r0
 800a03c:	4b14      	ldr	r3, [pc, #80]	; (800a090 <HAL_FLASHEx_Erase_IT+0x60>)
 800a03e:	2201      	movs	r2, #1
 800a040:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a042:	2200      	movs	r2, #0
 800a044:	605a      	str	r2, [r3, #4]
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800a046:	6802      	ldr	r2, [r0, #0]
 800a048:	609a      	str	r2, [r3, #8]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a04a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a04e:	f7ff fef1 	bl	8009e34 <FLASH_WaitForLastOperation>
  if (status != HAL_OK)
 800a052:	4605      	mov	r5, r0
 800a054:	b120      	cbz	r0, 800a060 <HAL_FLASHEx_Erase_IT+0x30>
    __HAL_UNLOCK(&pFlash);
 800a056:	4b0e      	ldr	r3, [pc, #56]	; (800a090 <HAL_FLASHEx_Erase_IT+0x60>)
 800a058:	2200      	movs	r2, #0
 800a05a:	701a      	strb	r2, [r3, #0]
}
 800a05c:	4628      	mov	r0, r5
 800a05e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800a060:	4a0c      	ldr	r2, [pc, #48]	; (800a094 <HAL_FLASHEx_Erase_IT+0x64>)
 800a062:	6953      	ldr	r3, [r2, #20]
 800a064:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800a068:	6153      	str	r3, [r2, #20]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	2b04      	cmp	r3, #4
 800a06e:	d007      	beq.n	800a080 <HAL_FLASHEx_Erase_IT+0x50>
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 800a070:	68a2      	ldr	r2, [r4, #8]
 800a072:	4b07      	ldr	r3, [pc, #28]	; (800a090 <HAL_FLASHEx_Erase_IT+0x60>)
 800a074:	615a      	str	r2, [r3, #20]
      pFlash.Page = pEraseInit->Page;
 800a076:	6860      	ldr	r0, [r4, #4]
 800a078:	6118      	str	r0, [r3, #16]
      FLASH_PageErase(pEraseInit->Page);
 800a07a:	f7ff ff8b 	bl	8009f94 <FLASH_PageErase>
 800a07e:	e7ed      	b.n	800a05c <HAL_FLASHEx_Erase_IT+0x2c>
      pFlash.Page = 0;
 800a080:	4b03      	ldr	r3, [pc, #12]	; (800a090 <HAL_FLASHEx_Erase_IT+0x60>)
 800a082:	2200      	movs	r2, #0
 800a084:	611a      	str	r2, [r3, #16]
      FLASH_MassErase();
 800a086:	f7ff ff3d 	bl	8009f04 <FLASH_MassErase>
 800a08a:	e7e7      	b.n	800a05c <HAL_FLASHEx_Erase_IT+0x2c>
  __HAL_LOCK(&pFlash);
 800a08c:	2502      	movs	r5, #2
 800a08e:	e7e5      	b.n	800a05c <HAL_FLASHEx_Erase_IT+0x2c>
 800a090:	200007d4 	.word	0x200007d4
 800a094:	58004000 	.word	0x58004000

0800a098 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a098:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 800a09a:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a09c:	e069      	b.n	800a172 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a09e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a0a0:	005e      	lsls	r6, r3, #1
 800a0a2:	2403      	movs	r4, #3
 800a0a4:	40b4      	lsls	r4, r6
 800a0a6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a0aa:	68cc      	ldr	r4, [r1, #12]
 800a0ac:	40b4      	lsls	r4, r6
 800a0ae:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800a0b0:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a0b2:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a0b4:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a0b8:	684c      	ldr	r4, [r1, #4]
 800a0ba:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800a0be:	409c      	lsls	r4, r3
 800a0c0:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 800a0c4:	6044      	str	r4, [r0, #4]
 800a0c6:	e065      	b.n	800a194 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a0c8:	08dd      	lsrs	r5, r3, #3
 800a0ca:	3508      	adds	r5, #8
 800a0cc:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a0d0:	f003 0407 	and.w	r4, r3, #7
 800a0d4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a0d8:	240f      	movs	r4, #15
 800a0da:	fa04 f40c 	lsl.w	r4, r4, ip
 800a0de:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a0e2:	690c      	ldr	r4, [r1, #16]
 800a0e4:	fa04 f40c 	lsl.w	r4, r4, ip
 800a0e8:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800a0ec:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800a0f0:	e067      	b.n	800a1c2 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a0f2:	2402      	movs	r4, #2
 800a0f4:	e000      	b.n	800a0f8 <HAL_GPIO_Init+0x60>
 800a0f6:	2400      	movs	r4, #0
 800a0f8:	fa04 f40e 	lsl.w	r4, r4, lr
 800a0fc:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a0fe:	f10c 0c02 	add.w	ip, ip, #2
 800a102:	4d4b      	ldr	r5, [pc, #300]	; (800a230 <HAL_GPIO_Init+0x198>)
 800a104:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a108:	4c4a      	ldr	r4, [pc, #296]	; (800a234 <HAL_GPIO_Init+0x19c>)
 800a10a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800a10c:	43d4      	mvns	r4, r2
 800a10e:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a112:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800a116:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 800a11a:	d001      	beq.n	800a120 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 800a11c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800a120:	4d44      	ldr	r5, [pc, #272]	; (800a234 <HAL_GPIO_Init+0x19c>)
 800a122:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800a124:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800a126:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a12a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800a12e:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 800a132:	d001      	beq.n	800a138 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 800a134:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800a138:	4d3e      	ldr	r5, [pc, #248]	; (800a234 <HAL_GPIO_Init+0x19c>)
 800a13a:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800a13c:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800a140:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a144:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800a148:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 800a14c:	d001      	beq.n	800a152 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 800a14e:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800a152:	4d38      	ldr	r5, [pc, #224]	; (800a234 <HAL_GPIO_Init+0x19c>)
 800a154:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800a158:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800a15c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a15e:	684e      	ldr	r6, [r1, #4]
 800a160:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 800a164:	d001      	beq.n	800a16a <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 800a166:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800a16a:	4a32      	ldr	r2, [pc, #200]	; (800a234 <HAL_GPIO_Init+0x19c>)
 800a16c:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800a170:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a172:	680a      	ldr	r2, [r1, #0]
 800a174:	fa32 f403 	lsrs.w	r4, r2, r3
 800a178:	d058      	beq.n	800a22c <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a17a:	f04f 0c01 	mov.w	ip, #1
 800a17e:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800a182:	ea1c 0202 	ands.w	r2, ip, r2
 800a186:	d0f3      	beq.n	800a170 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a188:	684c      	ldr	r4, [r1, #4]
 800a18a:	f004 0403 	and.w	r4, r4, #3
 800a18e:	3c01      	subs	r4, #1
 800a190:	2c01      	cmp	r4, #1
 800a192:	d984      	bls.n	800a09e <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a194:	684c      	ldr	r4, [r1, #4]
 800a196:	f004 0403 	and.w	r4, r4, #3
 800a19a:	2c03      	cmp	r4, #3
 800a19c:	d00c      	beq.n	800a1b8 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 800a19e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a1a0:	005d      	lsls	r5, r3, #1
 800a1a2:	f04f 0c03 	mov.w	ip, #3
 800a1a6:	fa0c fc05 	lsl.w	ip, ip, r5
 800a1aa:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a1ae:	688c      	ldr	r4, [r1, #8]
 800a1b0:	40ac      	lsls	r4, r5
 800a1b2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800a1b6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a1b8:	684c      	ldr	r4, [r1, #4]
 800a1ba:	f004 0403 	and.w	r4, r4, #3
 800a1be:	2c02      	cmp	r4, #2
 800a1c0:	d082      	beq.n	800a0c8 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800a1c2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a1c4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800a1c8:	f04f 0c03 	mov.w	ip, #3
 800a1cc:	fa0c fc0e 	lsl.w	ip, ip, lr
 800a1d0:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a1d4:	684c      	ldr	r4, [r1, #4]
 800a1d6:	f004 0403 	and.w	r4, r4, #3
 800a1da:	fa04 f40e 	lsl.w	r4, r4, lr
 800a1de:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800a1e2:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a1e4:	684c      	ldr	r4, [r1, #4]
 800a1e6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800a1ea:	d0c1      	beq.n	800a170 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 800a1ec:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800a1f0:	f10c 0502 	add.w	r5, ip, #2
 800a1f4:	4c0e      	ldr	r4, [pc, #56]	; (800a230 <HAL_GPIO_Init+0x198>)
 800a1f6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800a1fa:	f003 0403 	and.w	r4, r3, #3
 800a1fe:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800a202:	2407      	movs	r4, #7
 800a204:	fa04 f40e 	lsl.w	r4, r4, lr
 800a208:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a20c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800a210:	f43f af71 	beq.w	800a0f6 <HAL_GPIO_Init+0x5e>
 800a214:	4c08      	ldr	r4, [pc, #32]	; (800a238 <HAL_GPIO_Init+0x1a0>)
 800a216:	42a0      	cmp	r0, r4
 800a218:	d006      	beq.n	800a228 <HAL_GPIO_Init+0x190>
 800a21a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a21e:	42a0      	cmp	r0, r4
 800a220:	f43f af67 	beq.w	800a0f2 <HAL_GPIO_Init+0x5a>
 800a224:	2407      	movs	r4, #7
 800a226:	e767      	b.n	800a0f8 <HAL_GPIO_Init+0x60>
 800a228:	2401      	movs	r4, #1
 800a22a:	e765      	b.n	800a0f8 <HAL_GPIO_Init+0x60>
  }
}
 800a22c:	bd70      	pop	{r4, r5, r6, pc}
 800a22e:	bf00      	nop
 800a230:	40010000 	.word	0x40010000
 800a234:	58000800 	.word	0x58000800
 800a238:	48000400 	.word	0x48000400

0800a23c <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 800a23c:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800a23e:	fa31 f203 	lsrs.w	r2, r1, r3
 800a242:	d071      	beq.n	800a328 <HAL_GPIO_DeInit+0xec>
{
 800a244:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a246:	e02e      	b.n	800a2a6 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a248:	2502      	movs	r5, #2
 800a24a:	e000      	b.n	800a24e <HAL_GPIO_DeInit+0x12>
 800a24c:	2500      	movs	r5, #0
 800a24e:	fa05 fc0c 	lsl.w	ip, r5, ip
 800a252:	45a4      	cmp	ip, r4
 800a254:	d049      	beq.n	800a2ea <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800a256:	6804      	ldr	r4, [r0, #0]
 800a258:	005d      	lsls	r5, r3, #1
 800a25a:	f04f 0c03 	mov.w	ip, #3
 800a25e:	fa0c fc05 	lsl.w	ip, ip, r5
 800a262:	ea44 040c 	orr.w	r4, r4, ip
 800a266:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800a268:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800a26c:	f10e 0e08 	add.w	lr, lr, #8
 800a270:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 800a274:	f003 0507 	and.w	r5, r3, #7
 800a278:	00ae      	lsls	r6, r5, #2
 800a27a:	250f      	movs	r5, #15
 800a27c:	40b5      	lsls	r5, r6
 800a27e:	ea24 0405 	bic.w	r4, r4, r5
 800a282:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a286:	6884      	ldr	r4, [r0, #8]
 800a288:	ea24 040c 	bic.w	r4, r4, ip
 800a28c:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a28e:	6844      	ldr	r4, [r0, #4]
 800a290:	ea24 0202 	bic.w	r2, r4, r2
 800a294:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a296:	68c2      	ldr	r2, [r0, #12]
 800a298:	ea22 020c 	bic.w	r2, r2, ip
 800a29c:	60c2      	str	r2, [r0, #12]
    }

    position++;
 800a29e:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800a2a0:	fa31 f203 	lsrs.w	r2, r1, r3
 800a2a4:	d03f      	beq.n	800a326 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800a2aa:	ea12 0701 	ands.w	r7, r2, r1
 800a2ae:	d0f6      	beq.n	800a29e <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800a2b0:	089e      	lsrs	r6, r3, #2
 800a2b2:	1cb5      	adds	r5, r6, #2
 800a2b4:	4c1d      	ldr	r4, [pc, #116]	; (800a32c <HAL_GPIO_DeInit+0xf0>)
 800a2b6:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800a2ba:	f003 0c03 	and.w	ip, r3, #3
 800a2be:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800a2c2:	f04f 0e07 	mov.w	lr, #7
 800a2c6:	fa0e fe0c 	lsl.w	lr, lr, ip
 800a2ca:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a2ce:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800a2d2:	d0bb      	beq.n	800a24c <HAL_GPIO_DeInit+0x10>
 800a2d4:	4d16      	ldr	r5, [pc, #88]	; (800a330 <HAL_GPIO_DeInit+0xf4>)
 800a2d6:	42a8      	cmp	r0, r5
 800a2d8:	d005      	beq.n	800a2e6 <HAL_GPIO_DeInit+0xaa>
 800a2da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a2de:	42a8      	cmp	r0, r5
 800a2e0:	d0b2      	beq.n	800a248 <HAL_GPIO_DeInit+0xc>
 800a2e2:	2507      	movs	r5, #7
 800a2e4:	e7b3      	b.n	800a24e <HAL_GPIO_DeInit+0x12>
 800a2e6:	2501      	movs	r5, #1
 800a2e8:	e7b1      	b.n	800a24e <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 800a2ea:	4c12      	ldr	r4, [pc, #72]	; (800a334 <HAL_GPIO_DeInit+0xf8>)
 800a2ec:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800a2f0:	ea25 0507 	bic.w	r5, r5, r7
 800a2f4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800a2f8:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800a2fc:	ea25 0507 	bic.w	r5, r5, r7
 800a300:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 800a304:	6825      	ldr	r5, [r4, #0]
 800a306:	ea25 0507 	bic.w	r5, r5, r7
 800a30a:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800a30c:	6865      	ldr	r5, [r4, #4]
 800a30e:	ea25 0707 	bic.w	r7, r5, r7
 800a312:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800a314:	4d05      	ldr	r5, [pc, #20]	; (800a32c <HAL_GPIO_DeInit+0xf0>)
 800a316:	3602      	adds	r6, #2
 800a318:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 800a31c:	ea24 040e 	bic.w	r4, r4, lr
 800a320:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 800a324:	e797      	b.n	800a256 <HAL_GPIO_DeInit+0x1a>
  }
}
 800a326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	40010000 	.word	0x40010000
 800a330:	48000400 	.word	0x48000400
 800a334:	58000800 	.word	0x58000800

0800a338 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a338:	b10a      	cbz	r2, 800a33e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a33a:	6181      	str	r1, [r0, #24]
 800a33c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a33e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800a340:	4770      	bx	lr

0800a342 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a342:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a344:	ea01 0203 	and.w	r2, r1, r3
 800a348:	ea21 0103 	bic.w	r1, r1, r3
 800a34c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a350:	6181      	str	r1, [r0, #24]
}
 800a352:	4770      	bx	lr

0800a354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a354:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a356:	4b05      	ldr	r3, [pc, #20]	; (800a36c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	4203      	tst	r3, r0
 800a35c:	d100      	bne.n	800a360 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800a35e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a360:	4b02      	ldr	r3, [pc, #8]	; (800a36c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800a362:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a364:	f7f8 fe2e 	bl	8002fc4 <HAL_GPIO_EXTI_Callback>
}
 800a368:	e7f9      	b.n	800a35e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800a36a:	bf00      	nop
 800a36c:	58000800 	.word	0x58000800

0800a370 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a370:	4a02      	ldr	r2, [pc, #8]	; (800a37c <HAL_PWR_EnableBkUpAccess+0xc>)
 800a372:	6813      	ldr	r3, [r2, #0]
 800a374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a378:	6013      	str	r3, [r2, #0]
}
 800a37a:	4770      	bx	lr
 800a37c:	58000400 	.word	0x58000400

0800a380 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800a380:	b510      	push	{r4, lr}
 800a382:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800a384:	b9a0      	cbnz	r0, 800a3b0 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800a386:	4b0f      	ldr	r3, [pc, #60]	; (800a3c4 <HAL_PWR_EnterSLEEPMode+0x44>)
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a38e:	d10a      	bne.n	800a3a6 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a390:	4a0d      	ldr	r2, [pc, #52]	; (800a3c8 <HAL_PWR_EnterSLEEPMode+0x48>)
 800a392:	6913      	ldr	r3, [r2, #16]
 800a394:	f023 0304 	bic.w	r3, r3, #4
 800a398:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800a39a:	2c01      	cmp	r4, #1
 800a39c:	d010      	beq.n	800a3c0 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800a39e:	bf40      	sev
    __WFE();
 800a3a0:	bf20      	wfe
    __WFE();
 800a3a2:	bf20      	wfe
  }
}
 800a3a4:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800a3a6:	f000 f821 	bl	800a3ec <HAL_PWREx_DisableLowPowerRunMode>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d0f0      	beq.n	800a390 <HAL_PWR_EnterSLEEPMode+0x10>
 800a3ae:	e7f9      	b.n	800a3a4 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800a3b0:	4b04      	ldr	r3, [pc, #16]	; (800a3c4 <HAL_PWR_EnterSLEEPMode+0x44>)
 800a3b2:	695b      	ldr	r3, [r3, #20]
 800a3b4:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a3b8:	d1ea      	bne.n	800a390 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800a3ba:	f000 f80f 	bl	800a3dc <HAL_PWREx_EnableLowPowerRunMode>
 800a3be:	e7e7      	b.n	800a390 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 800a3c0:	bf30      	wfi
 800a3c2:	e7ef      	b.n	800a3a4 <HAL_PWR_EnterSLEEPMode+0x24>
 800a3c4:	58000400 	.word	0x58000400
 800a3c8:	e000ed00 	.word	0xe000ed00

0800a3cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 800a3cc:	4b02      	ldr	r3, [pc, #8]	; (800a3d8 <HAL_PWREx_GetVoltageRange+0xc>)
 800a3ce:	6818      	ldr	r0, [r3, #0]
}
 800a3d0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	58000400 	.word	0x58000400

0800a3dc <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800a3dc:	4a02      	ldr	r2, [pc, #8]	; (800a3e8 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800a3de:	6813      	ldr	r3, [r2, #0]
 800a3e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3e4:	6013      	str	r3, [r2, #0]
}
 800a3e6:	4770      	bx	lr
 800a3e8:	58000400 	.word	0x58000400

0800a3ec <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800a3ec:	4a0f      	ldr	r2, [pc, #60]	; (800a42c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800a3ee:	6813      	ldr	r3, [r2, #0]
 800a3f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3f4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800a3f6:	4b0e      	ldr	r3, [pc, #56]	; (800a430 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2232      	movs	r2, #50	; 0x32
 800a3fc:	fb02 f303 	mul.w	r3, r2, r3
 800a400:	4a0c      	ldr	r2, [pc, #48]	; (800a434 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 800a402:	fba2 2303 	umull	r2, r3, r2, r3
 800a406:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a408:	e000      	b.n	800a40c <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 800a40a:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a40c:	4a07      	ldr	r2, [pc, #28]	; (800a42c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800a40e:	6952      	ldr	r2, [r2, #20]
 800a410:	f412 7f00 	tst.w	r2, #512	; 0x200
 800a414:	d001      	beq.n	800a41a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1f7      	bne.n	800a40a <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800a41a:	4b04      	ldr	r3, [pc, #16]	; (800a42c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800a41c:	695b      	ldr	r3, [r3, #20]
 800a41e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a422:	d101      	bne.n	800a428 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 800a424:	2000      	movs	r0, #0
 800a426:	4770      	bx	lr
    return HAL_TIMEOUT;
 800a428:	2003      	movs	r0, #3
}
 800a42a:	4770      	bx	lr
 800a42c:	58000400 	.word	0x58000400
 800a430:	20000078 	.word	0x20000078
 800a434:	431bde83 	.word	0x431bde83

0800a438 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800a438:	4a0c      	ldr	r2, [pc, #48]	; (800a46c <HAL_PWREx_EnterSTOP2Mode+0x34>)
 800a43a:	6813      	ldr	r3, [r2, #0]
 800a43c:	f023 0307 	bic.w	r3, r3, #7
 800a440:	f043 0302 	orr.w	r3, r3, #2
 800a444:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a446:	4a0a      	ldr	r2, [pc, #40]	; (800a470 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 800a448:	6913      	ldr	r3, [r2, #16]
 800a44a:	f043 0304 	orr.w	r3, r3, #4
 800a44e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800a450:	2801      	cmp	r0, #1
 800a452:	d008      	beq.n	800a466 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800a454:	bf40      	sev
    __WFE();
 800a456:	bf20      	wfe
    __WFE();
 800a458:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a45a:	4a05      	ldr	r2, [pc, #20]	; (800a470 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 800a45c:	6913      	ldr	r3, [r2, #16]
 800a45e:	f023 0304 	bic.w	r3, r3, #4
 800a462:	6113      	str	r3, [r2, #16]
}
 800a464:	4770      	bx	lr
    __WFI();
 800a466:	bf30      	wfi
 800a468:	e7f7      	b.n	800a45a <HAL_PWREx_EnterSTOP2Mode+0x22>
 800a46a:	bf00      	nop
 800a46c:	58000400 	.word	0x58000400
 800a470:	e000ed00 	.word	0xe000ed00

0800a474 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800a474:	b530      	push	{r4, r5, lr}
 800a476:	b089      	sub	sp, #36	; 0x24
 800a478:	4604      	mov	r4, r0
 800a47a:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800a47c:	4b2a      	ldr	r3, [pc, #168]	; (800a528 <RCC_SetFlashLatency+0xb4>)
 800a47e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a482:	9006      	str	r0, [sp, #24]
 800a484:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800a488:	f103 0208 	add.w	r2, r3, #8
 800a48c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a490:	9004      	str	r0, [sp, #16]
 800a492:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800a496:	ad01      	add	r5, sp, #4
 800a498:	3310      	adds	r3, #16
 800a49a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a49e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a4a2:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800a4a6:	d007      	beq.n	800a4b8 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	e014      	b.n	800a4d6 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 800a4ac:	aa08      	add	r2, sp, #32
 800a4ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4b2:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800a4b6:	e01e      	b.n	800a4f6 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	d808      	bhi.n	800a4d0 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800a4be:	aa08      	add	r2, sp, #32
 800a4c0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800a4c4:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 800a4c8:	42a2      	cmp	r2, r4
 800a4ca:	d2ef      	bcs.n	800a4ac <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	e7f4      	b.n	800a4ba <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800a4d0:	2500      	movs	r5, #0
 800a4d2:	e010      	b.n	800a4f6 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d80c      	bhi.n	800a4f4 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800a4da:	aa08      	add	r2, sp, #32
 800a4dc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800a4e0:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 800a4e4:	42a2      	cmp	r2, r4
 800a4e6:	d3f5      	bcc.n	800a4d4 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a4e8:	aa08      	add	r2, sp, #32
 800a4ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4ee:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800a4f2:	e000      	b.n	800a4f6 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800a4f4:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a4f6:	4a0d      	ldr	r2, [pc, #52]	; (800a52c <RCC_SetFlashLatency+0xb8>)
 800a4f8:	6813      	ldr	r3, [r2, #0]
 800a4fa:	f023 0307 	bic.w	r3, r3, #7
 800a4fe:	432b      	orrs	r3, r5
 800a500:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a502:	f7f7 fc57 	bl	8001db4 <HAL_GetTick>
 800a506:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a508:	4b08      	ldr	r3, [pc, #32]	; (800a52c <RCC_SetFlashLatency+0xb8>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 0307 	and.w	r3, r3, #7
 800a510:	42ab      	cmp	r3, r5
 800a512:	d006      	beq.n	800a522 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a514:	f7f7 fc4e 	bl	8001db4 <HAL_GetTick>
 800a518:	1b00      	subs	r0, r0, r4
 800a51a:	2802      	cmp	r0, #2
 800a51c:	d9f4      	bls.n	800a508 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 800a51e:	2003      	movs	r0, #3
 800a520:	e000      	b.n	800a524 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 800a522:	2000      	movs	r0, #0
}
 800a524:	b009      	add	sp, #36	; 0x24
 800a526:	bd30      	pop	{r4, r5, pc}
 800a528:	0801b214 	.word	0x0801b214
 800a52c:	58004000 	.word	0x58004000

0800a530 <RCC_SetFlashLatencyFromMSIRange>:
{
 800a530:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800a532:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800a536:	4b0c      	ldr	r3, [pc, #48]	; (800a568 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 800a538:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800a53c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a540:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800a544:	f003 030f 	and.w	r3, r3, #15
 800a548:	4a08      	ldr	r2, [pc, #32]	; (800a56c <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 800a54a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a54e:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800a552:	f7ff ff3b 	bl	800a3cc <HAL_PWREx_GetVoltageRange>
 800a556:	4601      	mov	r1, r0
 800a558:	4805      	ldr	r0, [pc, #20]	; (800a570 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 800a55a:	fba0 3004 	umull	r3, r0, r0, r4
 800a55e:	0c80      	lsrs	r0, r0, #18
 800a560:	f7ff ff88 	bl	800a474 <RCC_SetFlashLatency>
}
 800a564:	bd10      	pop	{r4, pc}
 800a566:	bf00      	nop
 800a568:	0801bbd0 	.word	0x0801bbd0
 800a56c:	0801bb70 	.word	0x0801bb70
 800a570:	431bde83 	.word	0x431bde83

0800a574 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a578:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a580:	f011 010c 	ands.w	r1, r1, #12
 800a584:	d00a      	beq.n	800a59c <HAL_RCC_GetSysClockFreq+0x28>
 800a586:	290c      	cmp	r1, #12
 800a588:	d006      	beq.n	800a598 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a58a:	2904      	cmp	r1, #4
 800a58c:	d047      	beq.n	800a61e <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a58e:	2908      	cmp	r1, #8
 800a590:	d03b      	beq.n	800a60a <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 800a592:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 800a594:	4610      	mov	r0, r2
 800a596:	e026      	b.n	800a5e6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d1f6      	bne.n	800a58a <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800a59c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f013 0308 	ands.w	r3, r3, #8
 800a5a6:	d00d      	beq.n	800a5c4 <HAL_RCC_GetSysClockFreq+0x50>
 800a5a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f013 0308 	ands.w	r3, r3, #8
 800a5b2:	d124      	bne.n	800a5fe <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800a5b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a5b8:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800a5bc:	4a2e      	ldr	r2, [pc, #184]	; (800a678 <HAL_RCC_GetSysClockFreq+0x104>)
 800a5be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a5c2:	e00e      	b.n	800a5e2 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800a5c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a5c8:	6812      	ldr	r2, [r2, #0]
 800a5ca:	f012 0f08 	tst.w	r2, #8
 800a5ce:	d112      	bne.n	800a5f6 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800a5d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5d8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800a5dc:	4a26      	ldr	r2, [pc, #152]	; (800a678 <HAL_RCC_GetSysClockFreq+0x104>)
 800a5de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a5e2:	b1d1      	cbz	r1, 800a61a <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 800a5e4:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a5e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a5f0:	2b0c      	cmp	r3, #12
 800a5f2:	d01a      	beq.n	800a62a <HAL_RCC_GetSysClockFreq+0xb6>
}
 800a5f4:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800a5f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a5fa:	6812      	ldr	r2, [r2, #0]
 800a5fc:	e7ee      	b.n	800a5dc <HAL_RCC_GetSysClockFreq+0x68>
 800a5fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a602:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800a604:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a608:	e7d8      	b.n	800a5bc <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a60a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 800a614:	d106      	bne.n	800a624 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 800a616:	4819      	ldr	r0, [pc, #100]	; (800a67c <HAL_RCC_GetSysClockFreq+0x108>)
 800a618:	e7e5      	b.n	800a5e6 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 800a61a:	4610      	mov	r0, r2
 800a61c:	e7e3      	b.n	800a5e6 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800a61e:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 800a620:	4817      	ldr	r0, [pc, #92]	; (800a680 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a622:	e7e0      	b.n	800a5e6 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800a624:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 800a626:	4816      	ldr	r0, [pc, #88]	; (800a680 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a628:	e7dd      	b.n	800a5e6 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a62a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800a634:	2b02      	cmp	r3, #2
 800a636:	d009      	beq.n	800a64c <HAL_RCC_GetSysClockFreq+0xd8>
 800a638:	2b03      	cmp	r3, #3
 800a63a:	d108      	bne.n	800a64e <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a63c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800a646:	d115      	bne.n	800a674 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800a648:	4a0c      	ldr	r2, [pc, #48]	; (800a67c <HAL_RCC_GetSysClockFreq+0x108>)
 800a64a:	e000      	b.n	800a64e <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 800a64c:	4a0c      	ldr	r2, [pc, #48]	; (800a680 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a64e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a652:	68d8      	ldr	r0, [r3, #12]
 800a654:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800a658:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a65c:	68d8      	ldr	r0, [r3, #12]
 800a65e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800a662:	3001      	adds	r0, #1
 800a664:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a668:	68d8      	ldr	r0, [r3, #12]
 800a66a:	0f40      	lsrs	r0, r0, #29
 800a66c:	3001      	adds	r0, #1
 800a66e:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 800a672:	e7bf      	b.n	800a5f4 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 800a674:	4a02      	ldr	r2, [pc, #8]	; (800a680 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a676:	e7ea      	b.n	800a64e <HAL_RCC_GetSysClockFreq+0xda>
 800a678:	0801bbd0 	.word	0x0801bbd0
 800a67c:	01e84800 	.word	0x01e84800
 800a680:	00f42400 	.word	0x00f42400

0800a684 <HAL_RCC_GetHCLKFreq>:
{
 800a684:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800a686:	f7ff ff75 	bl	800a574 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a68a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a694:	4a02      	ldr	r2, [pc, #8]	; (800a6a0 <HAL_RCC_GetHCLKFreq+0x1c>)
 800a696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800a69a:	fbb0 f0f3 	udiv	r0, r0, r3
 800a69e:	bd08      	pop	{r3, pc}
 800a6a0:	0801bb70 	.word	0x0801bb70

0800a6a4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	f000 8319 	beq.w	800acdc <HAL_RCC_OscConfig+0x638>
{
 800a6aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ac:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a6ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6b2:	689d      	ldr	r5, [r3, #8]
 800a6b4:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a6b8:	68de      	ldr	r6, [r3, #12]
 800a6ba:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a6be:	6803      	ldr	r3, [r0, #0]
 800a6c0:	f013 0f20 	tst.w	r3, #32
 800a6c4:	f000 808f 	beq.w	800a7e6 <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a6c8:	b1ed      	cbz	r5, 800a706 <HAL_RCC_OscConfig+0x62>
 800a6ca:	2d0c      	cmp	r5, #12
 800a6cc:	d019      	beq.n	800a702 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a6ce:	6a23      	ldr	r3, [r4, #32]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f000 80bc 	beq.w	800a84e <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800a6d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a6da:	6813      	ldr	r3, [r2, #0]
 800a6dc:	f043 0301 	orr.w	r3, r3, #1
 800a6e0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a6e2:	f7f7 fb67 	bl	8001db4 <HAL_GetTick>
 800a6e6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800a6e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f013 0f02 	tst.w	r3, #2
 800a6f2:	d165      	bne.n	800a7c0 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a6f4:	f7f7 fb5e 	bl	8001db4 <HAL_GetTick>
 800a6f8:	1bc0      	subs	r0, r0, r7
 800a6fa:	2802      	cmp	r0, #2
 800a6fc:	d9f4      	bls.n	800a6e8 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 800a6fe:	2003      	movs	r0, #3
 800a700:	e2f9      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a702:	2e01      	cmp	r6, #1
 800a704:	d1e3      	bne.n	800a6ce <HAL_RCC_OscConfig+0x2a>
 800a706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f013 0f02 	tst.w	r3, #2
 800a710:	d003      	beq.n	800a71a <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a712:	6a23      	ldr	r3, [r4, #32]
 800a714:	2b00      	cmp	r3, #0
 800a716:	f000 82e3 	beq.w	800ace0 <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a71a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a71c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f013 0f08 	tst.w	r3, #8
 800a726:	d029      	beq.n	800a77c <HAL_RCC_OscConfig+0xd8>
 800a728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a732:	4298      	cmp	r0, r3
 800a734:	d92a      	bls.n	800a78c <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a736:	f7ff fefb 	bl	800a530 <RCC_SetFlashLatencyFromMSIRange>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	f040 82d2 	bne.w	800ace4 <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	f042 0208 	orr.w	r2, r2, #8
 800a74a:	601a      	str	r2, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a752:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a754:	430a      	orrs	r2, r1
 800a756:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a758:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800a75a:	685a      	ldr	r2, [r3, #4]
 800a75c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800a760:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a764:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a766:	f7ff ff8d 	bl	800a684 <HAL_RCC_GetHCLKFreq>
 800a76a:	4bb0      	ldr	r3, [pc, #704]	; (800aa2c <HAL_RCC_OscConfig+0x388>)
 800a76c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800a76e:	4bb0      	ldr	r3, [pc, #704]	; (800aa30 <HAL_RCC_OscConfig+0x38c>)
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	f7f7 fb1d 	bl	8001db0 <HAL_InitTick>
        if (status != HAL_OK)
 800a776:	2800      	cmp	r0, #0
 800a778:	d035      	beq.n	800a7e6 <HAL_RCC_OscConfig+0x142>
 800a77a:	e2bc      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a77c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a784:	091b      	lsrs	r3, r3, #4
 800a786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a78a:	e7d2      	b.n	800a732 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a78c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	f042 0208 	orr.w	r2, r2, #8
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a79e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a7a0:	430a      	orrs	r2, r1
 800a7a2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a7a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800a7ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a7b0:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a7b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a7b4:	f7ff febc 	bl	800a530 <RCC_SetFlashLatencyFromMSIRange>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d0d4      	beq.n	800a766 <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 800a7bc:	2001      	movs	r0, #1
 800a7be:	e29a      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a7c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	f042 0208 	orr.w	r2, r2, #8
 800a7ca:	601a      	str	r2, [r3, #0]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a7d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a7d4:	430a      	orrs	r2, r1
 800a7d6:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a7d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a7da:	685a      	ldr	r2, [r3, #4]
 800a7dc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800a7e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a7e4:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7e6:	6823      	ldr	r3, [r4, #0]
 800a7e8:	f013 0f01 	tst.w	r3, #1
 800a7ec:	d051      	beq.n	800a892 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a7ee:	2d08      	cmp	r5, #8
 800a7f0:	d045      	beq.n	800a87e <HAL_RCC_OscConfig+0x1da>
 800a7f2:	2d0c      	cmp	r5, #12
 800a7f4:	d041      	beq.n	800a87a <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800a7f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a7fa:	6813      	ldr	r3, [r2, #0]
 800a7fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a800:	68a1      	ldr	r1, [r4, #8]
 800a802:	430b      	orrs	r3, r1
 800a804:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a806:	6863      	ldr	r3, [r4, #4]
 800a808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a80c:	d063      	beq.n	800a8d6 <HAL_RCC_OscConfig+0x232>
 800a80e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800a812:	d065      	beq.n	800a8e0 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800a814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a81e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a826:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a828:	6863      	ldr	r3, [r4, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d063      	beq.n	800a8f6 <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 800a82e:	f7f7 fac1 	bl	8001db4 <HAL_GetTick>
 800a832:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a83e:	d128      	bne.n	800a892 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a840:	f7f7 fab8 	bl	8001db4 <HAL_GetTick>
 800a844:	1bc0      	subs	r0, r0, r7
 800a846:	2864      	cmp	r0, #100	; 0x64
 800a848:	d9f4      	bls.n	800a834 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 800a84a:	2003      	movs	r0, #3
 800a84c:	e253      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800a84e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a852:	6813      	ldr	r3, [r2, #0]
 800a854:	f023 0301 	bic.w	r3, r3, #1
 800a858:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a85a:	f7f7 faab 	bl	8001db4 <HAL_GetTick>
 800a85e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800a860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f013 0f02 	tst.w	r3, #2
 800a86a:	d0bc      	beq.n	800a7e6 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a86c:	f7f7 faa2 	bl	8001db4 <HAL_GetTick>
 800a870:	1bc0      	subs	r0, r0, r7
 800a872:	2802      	cmp	r0, #2
 800a874:	d9f4      	bls.n	800a860 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 800a876:	2003      	movs	r0, #3
 800a878:	e23d      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a87a:	2e03      	cmp	r6, #3
 800a87c:	d1bb      	bne.n	800a7f6 <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a87e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a888:	d003      	beq.n	800a892 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a88a:	6863      	ldr	r3, [r4, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f000 822b 	beq.w	800ace8 <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a892:	6823      	ldr	r3, [r4, #0]
 800a894:	f013 0f02 	tst.w	r3, #2
 800a898:	d052      	beq.n	800a940 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a89a:	2d04      	cmp	r5, #4
 800a89c:	d03d      	beq.n	800a91a <HAL_RCC_OscConfig+0x276>
 800a89e:	2d0c      	cmp	r5, #12
 800a8a0:	d039      	beq.n	800a916 <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a8a2:	6923      	ldr	r3, [r4, #16]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 8091 	beq.w	800a9cc <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a8aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8ae:	6813      	ldr	r3, [r2, #0]
 800a8b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a8b6:	f7f7 fa7d 	bl	8001db4 <HAL_GetTick>
 800a8ba:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a8bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a8c6:	d177      	bne.n	800a9b8 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8c8:	f7f7 fa74 	bl	8001db4 <HAL_GetTick>
 800a8cc:	1b80      	subs	r0, r0, r6
 800a8ce:	2802      	cmp	r0, #2
 800a8d0:	d9f4      	bls.n	800a8bc <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 800a8d2:	2003      	movs	r0, #3
 800a8d4:	e20f      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a8d6:	6813      	ldr	r3, [r2, #0]
 800a8d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8dc:	6013      	str	r3, [r2, #0]
}
 800a8de:	e7a3      	b.n	800a828 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800a8e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800a8ea:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a8f2:	601a      	str	r2, [r3, #0]
}
 800a8f4:	e798      	b.n	800a828 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 800a8f6:	f7f7 fa5d 	bl	8001db4 <HAL_GetTick>
 800a8fa:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a8fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a906:	d0c4      	beq.n	800a892 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a908:	f7f7 fa54 	bl	8001db4 <HAL_GetTick>
 800a90c:	1bc0      	subs	r0, r0, r7
 800a90e:	2864      	cmp	r0, #100	; 0x64
 800a910:	d9f4      	bls.n	800a8fc <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 800a912:	2003      	movs	r0, #3
 800a914:	e1ef      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a916:	2e02      	cmp	r6, #2
 800a918:	d1c3      	bne.n	800a8a2 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a91a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a924:	d003      	beq.n	800a92e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a926:	6923      	ldr	r3, [r4, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 81df 	beq.w	800acec <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a92e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a934:	6853      	ldr	r3, [r2, #4]
 800a936:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a93a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a93e:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a940:	6823      	ldr	r3, [r4, #0]
 800a942:	f013 0f08 	tst.w	r3, #8
 800a946:	f000 808e 	beq.w	800aa66 <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a94a:	69a3      	ldr	r3, [r4, #24]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d071      	beq.n	800aa34 <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 800a950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800a958:	69e1      	ldr	r1, [r4, #28]
 800a95a:	f003 0210 	and.w	r2, r3, #16
 800a95e:	4291      	cmp	r1, r2
 800a960:	d011      	beq.n	800a986 <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800a962:	f003 0203 	and.w	r2, r3, #3
 800a966:	2a02      	cmp	r2, #2
 800a968:	f000 81c2 	beq.w	800acf0 <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800a96c:	f013 0f01 	tst.w	r3, #1
 800a970:	d142      	bne.n	800a9f8 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800a972:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a976:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800a97a:	f023 0310 	bic.w	r3, r3, #16
 800a97e:	69e1      	ldr	r1, [r4, #28]
 800a980:	430b      	orrs	r3, r1
 800a982:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800a986:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a98a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800a98e:	f043 0301 	orr.w	r3, r3, #1
 800a992:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800a996:	f7f7 fa0d 	bl	8001db4 <HAL_GetTick>
 800a99a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800a99c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9a4:	f013 0f02 	tst.w	r3, #2
 800a9a8:	d15d      	bne.n	800aa66 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9aa:	f7f7 fa03 	bl	8001db4 <HAL_GetTick>
 800a9ae:	1b80      	subs	r0, r0, r6
 800a9b0:	2811      	cmp	r0, #17
 800a9b2:	d9f3      	bls.n	800a99c <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 800a9b4:	2003      	movs	r0, #3
 800a9b6:	e19e      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9b8:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a9ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a9be:	6853      	ldr	r3, [r2, #4]
 800a9c0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a9c4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a9c8:	6053      	str	r3, [r2, #4]
}
 800a9ca:	e7b9      	b.n	800a940 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800a9cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a9d0:	6813      	ldr	r3, [r2, #0]
 800a9d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9d6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a9d8:	f7f7 f9ec 	bl	8001db4 <HAL_GetTick>
 800a9dc:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a9de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a9e8:	d0aa      	beq.n	800a940 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9ea:	f7f7 f9e3 	bl	8001db4 <HAL_GetTick>
 800a9ee:	1b80      	subs	r0, r0, r6
 800a9f0:	2802      	cmp	r0, #2
 800a9f2:	d9f4      	bls.n	800a9de <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 800a9f4:	2003      	movs	r0, #3
 800a9f6:	e17e      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800a9f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a9fc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800aa00:	f023 0301 	bic.w	r3, r3, #1
 800aa04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 800aa08:	f7f7 f9d4 	bl	8001db4 <HAL_GetTick>
 800aa0c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800aa0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa16:	f013 0f02 	tst.w	r3, #2
 800aa1a:	d0aa      	beq.n	800a972 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa1c:	f7f7 f9ca 	bl	8001db4 <HAL_GetTick>
 800aa20:	1b80      	subs	r0, r0, r6
 800aa22:	2811      	cmp	r0, #17
 800aa24:	d9f3      	bls.n	800aa0e <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 800aa26:	2003      	movs	r0, #3
 800aa28:	e165      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
 800aa2a:	bf00      	nop
 800aa2c:	20000078 	.word	0x20000078
 800aa30:	2000007c 	.word	0x2000007c
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800aa34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa38:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800aa3c:	f023 0301 	bic.w	r3, r3, #1
 800aa40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800aa44:	f7f7 f9b6 	bl	8001db4 <HAL_GetTick>
 800aa48:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800aa4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa52:	f013 0f02 	tst.w	r3, #2
 800aa56:	d006      	beq.n	800aa66 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa58:	f7f7 f9ac 	bl	8001db4 <HAL_GetTick>
 800aa5c:	1b80      	subs	r0, r0, r6
 800aa5e:	2811      	cmp	r0, #17
 800aa60:	d9f3      	bls.n	800aa4a <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 800aa62:	2003      	movs	r0, #3
 800aa64:	e147      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	f013 0f04 	tst.w	r3, #4
 800aa6c:	f000 80b1 	beq.w	800abd2 <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800aa70:	4ba8      	ldr	r3, [pc, #672]	; (800ad14 <HAL_RCC_OscConfig+0x670>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f413 7f80 	tst.w	r3, #256	; 0x100
 800aa78:	d110      	bne.n	800aa9c <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 800aa7a:	f7ff fc79 	bl	800a370 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 800aa7e:	f7f7 f999 	bl	8001db4 <HAL_GetTick>
 800aa82:	4606      	mov	r6, r0
 800aa84:	4ba3      	ldr	r3, [pc, #652]	; (800ad14 <HAL_RCC_OscConfig+0x670>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f413 7f80 	tst.w	r3, #256	; 0x100
 800aa8c:	d106      	bne.n	800aa9c <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa8e:	f7f7 f991 	bl	8001db4 <HAL_GetTick>
 800aa92:	1b80      	subs	r0, r0, r6
 800aa94:	2802      	cmp	r0, #2
 800aa96:	d9f5      	bls.n	800aa84 <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 800aa98:	2003      	movs	r0, #3
 800aa9a:	e12c      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa9c:	68e3      	ldr	r3, [r4, #12]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d061      	beq.n	800ab66 <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800aaa2:	2b85      	cmp	r3, #133	; 0x85
 800aaa4:	d001      	beq.n	800aaaa <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800aaa6:	2b05      	cmp	r3, #5
 800aaa8:	d107      	bne.n	800aaba <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800aaaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aaae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800aab2:	f043 0304 	orr.w	r3, r3, #4
 800aab6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800aaba:	f7f7 f97b 	bl	8001db4 <HAL_GetTick>
 800aabe:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800aac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aac4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800aac8:	f043 0301 	orr.w	r3, r3, #1
 800aacc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800aad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aad8:	f013 0f02 	tst.w	r3, #2
 800aadc:	d108      	bne.n	800aaf0 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aade:	f7f7 f969 	bl	8001db4 <HAL_GetTick>
 800aae2:	1b80      	subs	r0, r0, r6
 800aae4:	f241 3388 	movw	r3, #5000	; 0x1388
 800aae8:	4298      	cmp	r0, r3
 800aaea:	d9f1      	bls.n	800aad0 <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 800aaec:	2003      	movs	r0, #3
 800aaee:	e102      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800aaf0:	68e3      	ldr	r3, [r4, #12]
 800aaf2:	2b81      	cmp	r3, #129	; 0x81
 800aaf4:	d001      	beq.n	800aafa <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800aaf6:	2b85      	cmp	r3, #133	; 0x85
 800aaf8:	d11a      	bne.n	800ab30 <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 800aafa:	f7f7 f95b 	bl	8001db4 <HAL_GetTick>
 800aafe:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ab00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ab04:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800ab08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800ab10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab18:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800ab1c:	d159      	bne.n	800abd2 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab1e:	f7f7 f949 	bl	8001db4 <HAL_GetTick>
 800ab22:	1b80      	subs	r0, r0, r6
 800ab24:	f241 3388 	movw	r3, #5000	; 0x1388
 800ab28:	4298      	cmp	r0, r3
 800ab2a:	d9f1      	bls.n	800ab10 <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 800ab2c:	2003      	movs	r0, #3
 800ab2e:	e0e2      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 800ab30:	f7f7 f940 	bl	8001db4 <HAL_GetTick>
 800ab34:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ab36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ab3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800ab3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ab46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab4e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800ab52:	d03e      	beq.n	800abd2 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab54:	f7f7 f92e 	bl	8001db4 <HAL_GetTick>
 800ab58:	1b80      	subs	r0, r0, r6
 800ab5a:	f241 3388 	movw	r3, #5000	; 0x1388
 800ab5e:	4298      	cmp	r0, r3
 800ab60:	d9f1      	bls.n	800ab46 <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 800ab62:	2003      	movs	r0, #3
 800ab64:	e0c7      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 800ab66:	f7f7 f925 	bl	8001db4 <HAL_GetTick>
 800ab6a:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ab6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ab70:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800ab74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ab7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab84:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800ab88:	d008      	beq.n	800ab9c <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab8a:	f7f7 f913 	bl	8001db4 <HAL_GetTick>
 800ab8e:	1b80      	subs	r0, r0, r6
 800ab90:	f241 3388 	movw	r3, #5000	; 0x1388
 800ab94:	4298      	cmp	r0, r3
 800ab96:	d9f1      	bls.n	800ab7c <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 800ab98:	2003      	movs	r0, #3
 800ab9a:	e0ac      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 800ab9c:	f7f7 f90a 	bl	8001db4 <HAL_GetTick>
 800aba0:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800aba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aba6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800abaa:	f023 0301 	bic.w	r3, r3, #1
 800abae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800abb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abba:	f013 0f02 	tst.w	r3, #2
 800abbe:	d008      	beq.n	800abd2 <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abc0:	f7f7 f8f8 	bl	8001db4 <HAL_GetTick>
 800abc4:	1b80      	subs	r0, r0, r6
 800abc6:	f241 3388 	movw	r3, #5000	; 0x1388
 800abca:	4298      	cmp	r0, r3
 800abcc:	d9f1      	bls.n	800abb2 <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 800abce:	2003      	movs	r0, #3
 800abd0:	e091      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800abd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f000 808d 	beq.w	800acf4 <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800abda:	2d0c      	cmp	r5, #12
 800abdc:	d062      	beq.n	800aca4 <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d01f      	beq.n	800ac22 <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800abe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800abec:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800abee:	68da      	ldr	r2, [r3, #12]
 800abf0:	f022 0203 	bic.w	r2, r2, #3
 800abf4:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800abf6:	68da      	ldr	r2, [r3, #12]
 800abf8:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 800abfc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ac00:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 800ac02:	f7f7 f8d7 	bl	8001db4 <HAL_GetTick>
 800ac06:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800ac08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800ac12:	d073      	beq.n	800acfc <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac14:	f7f7 f8ce 	bl	8001db4 <HAL_GetTick>
 800ac18:	1b00      	subs	r0, r0, r4
 800ac1a:	280a      	cmp	r0, #10
 800ac1c:	d9f4      	bls.n	800ac08 <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 800ac1e:	2003      	movs	r0, #3
 800ac20:	e069      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800ac22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac26:	6813      	ldr	r3, [r2, #0]
 800ac28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac2c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800ac2e:	f7f7 f8c1 	bl	8001db4 <HAL_GetTick>
 800ac32:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800ac34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800ac3e:	d12a      	bne.n	800ac96 <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac44:	68d3      	ldr	r3, [r2, #12]
 800ac46:	4934      	ldr	r1, [pc, #208]	; (800ad18 <HAL_RCC_OscConfig+0x674>)
 800ac48:	4019      	ands	r1, r3
 800ac4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ac4c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ac4e:	4303      	orrs	r3, r0
 800ac50:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ac52:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800ac56:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ac58:	4303      	orrs	r3, r0
 800ac5a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800ac5c:	4303      	orrs	r3, r0
 800ac5e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ac60:	4303      	orrs	r3, r0
 800ac62:	430b      	orrs	r3, r1
 800ac64:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800ac66:	6813      	ldr	r3, [r2, #0]
 800ac68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac6c:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ac6e:	68d3      	ldr	r3, [r2, #12]
 800ac70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac74:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800ac76:	f7f7 f89d 	bl	8001db4 <HAL_GetTick>
 800ac7a:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800ac7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800ac86:	d137      	bne.n	800acf8 <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac88:	f7f7 f894 	bl	8001db4 <HAL_GetTick>
 800ac8c:	1b00      	subs	r0, r0, r4
 800ac8e:	280a      	cmp	r0, #10
 800ac90:	d9f4      	bls.n	800ac7c <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 800ac92:	2003      	movs	r0, #3
 800ac94:	e02f      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac96:	f7f7 f88d 	bl	8001db4 <HAL_GetTick>
 800ac9a:	1b40      	subs	r0, r0, r5
 800ac9c:	280a      	cmp	r0, #10
 800ac9e:	d9c9      	bls.n	800ac34 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 800aca0:	2003      	movs	r0, #3
 800aca2:	e028      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d02b      	beq.n	800ad00 <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 800aca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800acac:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800acae:	f003 0103 	and.w	r1, r3, #3
 800acb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800acb4:	4291      	cmp	r1, r2
 800acb6:	d125      	bne.n	800ad04 <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800acb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800acbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acbe:	428a      	cmp	r2, r1
 800acc0:	d122      	bne.n	800ad08 <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800acc2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800acc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800acc8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800accc:	d11e      	bne.n	800ad0c <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800acce:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800acd2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d11b      	bne.n	800ad10 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 800acd8:	2000      	movs	r0, #0
 800acda:	e00c      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 800acdc:	2001      	movs	r0, #1
}
 800acde:	4770      	bx	lr
        return HAL_ERROR;
 800ace0:	2001      	movs	r0, #1
 800ace2:	e008      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 800ace4:	2001      	movs	r0, #1
 800ace6:	e006      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 800ace8:	2001      	movs	r0, #1
 800acea:	e004      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 800acec:	2001      	movs	r0, #1
 800acee:	e002      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 800acf0:	2001      	movs	r0, #1
 800acf2:	e000      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 800acf4:	2000      	movs	r0, #0
}
 800acf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800acf8:	2000      	movs	r0, #0
 800acfa:	e7fc      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
 800acfc:	2000      	movs	r0, #0
 800acfe:	e7fa      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 800ad00:	2001      	movs	r0, #1
 800ad02:	e7f8      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 800ad04:	2001      	movs	r0, #1
 800ad06:	e7f6      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
 800ad08:	2001      	movs	r0, #1
 800ad0a:	e7f4      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
 800ad0c:	2001      	movs	r0, #1
 800ad0e:	e7f2      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
 800ad10:	2001      	movs	r0, #1
 800ad12:	e7f0      	b.n	800acf6 <HAL_RCC_OscConfig+0x652>
 800ad14:	58000400 	.word	0x58000400
 800ad18:	11c1808c 	.word	0x11c1808c

0800ad1c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	f000 8127 	beq.w	800af70 <HAL_RCC_ClockConfig+0x254>
{
 800ad22:	b570      	push	{r4, r5, r6, lr}
 800ad24:	460c      	mov	r4, r1
 800ad26:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad28:	4b93      	ldr	r3, [pc, #588]	; (800af78 <HAL_RCC_ClockConfig+0x25c>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 0307 	and.w	r3, r3, #7
 800ad30:	428b      	cmp	r3, r1
 800ad32:	d32d      	bcc.n	800ad90 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	f013 0f02 	tst.w	r3, #2
 800ad3a:	d13f      	bne.n	800adbc <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	f013 0f20 	tst.w	r3, #32
 800ad42:	d153      	bne.n	800adec <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800ad44:	682b      	ldr	r3, [r5, #0]
 800ad46:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ad4a:	d16a      	bne.n	800ae22 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	f013 0f04 	tst.w	r3, #4
 800ad52:	f040 8083 	bne.w	800ae5c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad56:	682b      	ldr	r3, [r5, #0]
 800ad58:	f013 0f08 	tst.w	r3, #8
 800ad5c:	f040 8097 	bne.w	800ae8e <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	f013 0f01 	tst.w	r3, #1
 800ad66:	f000 80de 	beq.w	800af26 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad6a:	686b      	ldr	r3, [r5, #4]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	f000 80a8 	beq.w	800aec2 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	f000 80ad 	beq.w	800aed2 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f040 80b2 	bne.w	800aee2 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800ad7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ad82:	6812      	ldr	r2, [r2, #0]
 800ad84:	f012 0f02 	tst.w	r2, #2
 800ad88:	f040 80b1 	bne.w	800aeee <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800ad8c:	2001      	movs	r0, #1
 800ad8e:	e0ee      	b.n	800af6e <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad90:	4a79      	ldr	r2, [pc, #484]	; (800af78 <HAL_RCC_ClockConfig+0x25c>)
 800ad92:	6813      	ldr	r3, [r2, #0]
 800ad94:	f023 0307 	bic.w	r3, r3, #7
 800ad98:	430b      	orrs	r3, r1
 800ad9a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800ad9c:	f7f7 f80a 	bl	8001db4 <HAL_GetTick>
 800ada0:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ada2:	4b75      	ldr	r3, [pc, #468]	; (800af78 <HAL_RCC_ClockConfig+0x25c>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f003 0307 	and.w	r3, r3, #7
 800adaa:	42a3      	cmp	r3, r4
 800adac:	d0c2      	beq.n	800ad34 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800adae:	f7f7 f801 	bl	8001db4 <HAL_GetTick>
 800adb2:	1b80      	subs	r0, r0, r6
 800adb4:	2802      	cmp	r0, #2
 800adb6:	d9f4      	bls.n	800ada2 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 800adb8:	2003      	movs	r0, #3
 800adba:	e0d8      	b.n	800af6e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800adbc:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800adbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800adc2:	688a      	ldr	r2, [r1, #8]
 800adc4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800adc8:	4313      	orrs	r3, r2
 800adca:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800adcc:	f7f6 fff2 	bl	8001db4 <HAL_GetTick>
 800add0:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800add2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800addc:	d1ae      	bne.n	800ad3c <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800adde:	f7f6 ffe9 	bl	8001db4 <HAL_GetTick>
 800ade2:	1b80      	subs	r0, r0, r6
 800ade4:	2802      	cmp	r0, #2
 800ade6:	d9f4      	bls.n	800add2 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 800ade8:	2003      	movs	r0, #3
 800adea:	e0c0      	b.n	800af6e <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800adec:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800adee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800adf2:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 800adf6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800adfa:	4313      	orrs	r3, r2
 800adfc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 800ae00:	f7f6 ffd8 	bl	8001db4 <HAL_GetTick>
 800ae04:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800ae06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ae0e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800ae12:	d197      	bne.n	800ad44 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ae14:	f7f6 ffce 	bl	8001db4 <HAL_GetTick>
 800ae18:	1b80      	subs	r0, r0, r6
 800ae1a:	2802      	cmp	r0, #2
 800ae1c:	d9f3      	bls.n	800ae06 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 800ae1e:	2003      	movs	r0, #3
 800ae20:	e0a5      	b.n	800af6e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800ae22:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800ae24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ae28:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 800ae2c:	f023 030f 	bic.w	r3, r3, #15
 800ae30:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 800ae34:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 800ae38:	f7f6 ffbc 	bl	8001db4 <HAL_GetTick>
 800ae3c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800ae3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae42:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ae46:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800ae4a:	f47f af7f 	bne.w	800ad4c <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ae4e:	f7f6 ffb1 	bl	8001db4 <HAL_GetTick>
 800ae52:	1b80      	subs	r0, r0, r6
 800ae54:	2802      	cmp	r0, #2
 800ae56:	d9f2      	bls.n	800ae3e <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 800ae58:	2003      	movs	r0, #3
 800ae5a:	e088      	b.n	800af6e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800ae5c:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800ae5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ae62:	688a      	ldr	r2, [r1, #8]
 800ae64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800ae6c:	f7f6 ffa2 	bl	8001db4 <HAL_GetTick>
 800ae70:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800ae72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800ae7c:	f47f af6b 	bne.w	800ad56 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ae80:	f7f6 ff98 	bl	8001db4 <HAL_GetTick>
 800ae84:	1b80      	subs	r0, r0, r6
 800ae86:	2802      	cmp	r0, #2
 800ae88:	d9f3      	bls.n	800ae72 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 800ae8a:	2003      	movs	r0, #3
 800ae8c:	e06f      	b.n	800af6e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800ae8e:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800ae90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ae94:	6893      	ldr	r3, [r2, #8]
 800ae96:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800ae9a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800ae9e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800aea0:	f7f6 ff88 	bl	8001db4 <HAL_GetTick>
 800aea4:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800aea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800aeb0:	f47f af56 	bne.w	800ad60 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800aeb4:	f7f6 ff7e 	bl	8001db4 <HAL_GetTick>
 800aeb8:	1b80      	subs	r0, r0, r6
 800aeba:	2802      	cmp	r0, #2
 800aebc:	d9f3      	bls.n	800aea6 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 800aebe:	2003      	movs	r0, #3
 800aec0:	e055      	b.n	800af6e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800aec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aec6:	6812      	ldr	r2, [r2, #0]
 800aec8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800aecc:	d10f      	bne.n	800aeee <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800aece:	2001      	movs	r0, #1
 800aed0:	e04d      	b.n	800af6e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800aed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aed6:	6812      	ldr	r2, [r2, #0]
 800aed8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800aedc:	d107      	bne.n	800aeee <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800aede:	2001      	movs	r0, #1
 800aee0:	e045      	b.n	800af6e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800aee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aee6:	6812      	ldr	r2, [r2, #0]
 800aee8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800aeec:	d042      	beq.n	800af74 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800aeee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aef2:	688a      	ldr	r2, [r1, #8]
 800aef4:	f022 0203 	bic.w	r2, r2, #3
 800aef8:	4313      	orrs	r3, r2
 800aefa:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800aefc:	f7f6 ff5a 	bl	8001db4 <HAL_GetTick>
 800af00:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800af02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af0c:	686a      	ldr	r2, [r5, #4]
 800af0e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800af12:	d008      	beq.n	800af26 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af14:	f7f6 ff4e 	bl	8001db4 <HAL_GetTick>
 800af18:	1b80      	subs	r0, r0, r6
 800af1a:	f241 3388 	movw	r3, #5000	; 0x1388
 800af1e:	4298      	cmp	r0, r3
 800af20:	d9ef      	bls.n	800af02 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 800af22:	2003      	movs	r0, #3
 800af24:	e023      	b.n	800af6e <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800af26:	4b14      	ldr	r3, [pc, #80]	; (800af78 <HAL_RCC_ClockConfig+0x25c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f003 0307 	and.w	r3, r3, #7
 800af2e:	42a3      	cmp	r3, r4
 800af30:	d915      	bls.n	800af5e <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af32:	4a11      	ldr	r2, [pc, #68]	; (800af78 <HAL_RCC_ClockConfig+0x25c>)
 800af34:	6813      	ldr	r3, [r2, #0]
 800af36:	f023 0307 	bic.w	r3, r3, #7
 800af3a:	4323      	orrs	r3, r4
 800af3c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800af3e:	f7f6 ff39 	bl	8001db4 <HAL_GetTick>
 800af42:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af44:	4b0c      	ldr	r3, [pc, #48]	; (800af78 <HAL_RCC_ClockConfig+0x25c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 0307 	and.w	r3, r3, #7
 800af4c:	42a3      	cmp	r3, r4
 800af4e:	d006      	beq.n	800af5e <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800af50:	f7f6 ff30 	bl	8001db4 <HAL_GetTick>
 800af54:	1b40      	subs	r0, r0, r5
 800af56:	2802      	cmp	r0, #2
 800af58:	d9f4      	bls.n	800af44 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 800af5a:	2003      	movs	r0, #3
 800af5c:	e007      	b.n	800af6e <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800af5e:	f7ff fb91 	bl	800a684 <HAL_RCC_GetHCLKFreq>
 800af62:	4b06      	ldr	r3, [pc, #24]	; (800af7c <HAL_RCC_ClockConfig+0x260>)
 800af64:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800af66:	4b06      	ldr	r3, [pc, #24]	; (800af80 <HAL_RCC_ClockConfig+0x264>)
 800af68:	6818      	ldr	r0, [r3, #0]
 800af6a:	f7f6 ff21 	bl	8001db0 <HAL_InitTick>
}
 800af6e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800af70:	2001      	movs	r0, #1
}
 800af72:	4770      	bx	lr
        return HAL_ERROR;
 800af74:	2001      	movs	r0, #1
 800af76:	e7fa      	b.n	800af6e <HAL_RCC_ClockConfig+0x252>
 800af78:	58004000 	.word	0x58004000
 800af7c:	20000078 	.word	0x20000078
 800af80:	2000007c 	.word	0x2000007c

0800af84 <HAL_RCC_GetPCLK1Freq>:
{
 800af84:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800af86:	f7ff fb7d 	bl	800a684 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800af8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800af94:	4a02      	ldr	r2, [pc, #8]	; (800afa0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800af96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800af9a:	40d8      	lsrs	r0, r3
 800af9c:	bd08      	pop	{r3, pc}
 800af9e:	bf00      	nop
 800afa0:	0801bbb0 	.word	0x0801bbb0

0800afa4 <HAL_RCC_GetPCLK2Freq>:
{
 800afa4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800afa6:	f7ff fb6d 	bl	800a684 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800afaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800afb4:	4a02      	ldr	r2, [pc, #8]	; (800afc0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800afb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800afba:	40d8      	lsrs	r0, r3
 800afbc:	bd08      	pop	{r3, pc}
 800afbe:	bf00      	nop
 800afc0:	0801bbb0 	.word	0x0801bbb0

0800afc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800afc4:	b570      	push	{r4, r5, r6, lr}
 800afc6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800afc8:	6803      	ldr	r3, [r0, #0]
 800afca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800afce:	f040 80ab 	bne.w	800b128 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800afd2:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800afd4:	6823      	ldr	r3, [r4, #0]
 800afd6:	f013 0f01 	tst.w	r3, #1
 800afda:	d00a      	beq.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800afdc:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800afde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800afe2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800afe6:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800afea:	b292      	uxth	r2, r2
 800afec:	4313      	orrs	r3, r2
 800afee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	f013 0f02 	tst.w	r3, #2
 800aff8:	d00a      	beq.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800affa:	68a2      	ldr	r2, [r4, #8]
 800affc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b000:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800b004:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800b008:	b292      	uxth	r2, r2
 800b00a:	4313      	orrs	r3, r2
 800b00c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b010:	6823      	ldr	r3, [r4, #0]
 800b012:	f013 0f20 	tst.w	r3, #32
 800b016:	d009      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b018:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800b01a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b01e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800b022:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b026:	4313      	orrs	r3, r2
 800b028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b032:	d00c      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b034:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800b036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b03a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800b03e:	0c02      	lsrs	r2, r0, #16
 800b040:	0412      	lsls	r2, r2, #16
 800b042:	ea23 0302 	bic.w	r3, r3, r2
 800b046:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b04a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800b054:	d00c      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b056:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b058:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b05c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800b060:	0c02      	lsrs	r2, r0, #16
 800b062:	0412      	lsls	r2, r2, #16
 800b064:	ea23 0302 	bic.w	r3, r3, r2
 800b068:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b06c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800b070:	6823      	ldr	r3, [r4, #0]
 800b072:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800b076:	d00c      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800b078:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b07a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b07e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800b082:	0c02      	lsrs	r2, r0, #16
 800b084:	0412      	lsls	r2, r2, #16
 800b086:	ea23 0302 	bic.w	r3, r3, r2
 800b08a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b08e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b092:	6823      	ldr	r3, [r4, #0]
 800b094:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b098:	f040 809e 	bne.w	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b09c:	6823      	ldr	r3, [r4, #0]
 800b09e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b0a2:	f040 80aa 	bne.w	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b0a6:	6823      	ldr	r3, [r4, #0]
 800b0a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b0ac:	f040 80b6 	bne.w	800b21c <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800b0b0:	6823      	ldr	r3, [r4, #0]
 800b0b2:	f013 0f10 	tst.w	r3, #16
 800b0b6:	d00e      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800b0b8:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800b0ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b0be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800b0c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800b0cc:	68e3      	ldr	r3, [r4, #12]
 800b0ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0d2:	f000 80b4 	beq.w	800b23e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800b0dc:	d00f      	beq.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b0de:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800b0e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b0e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800b0e8:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b0f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b0f4:	b91b      	cbnz	r3, 800b0fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800b0f6:	68cb      	ldr	r3, [r1, #12]
 800b0f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0fc:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b0fe:	6823      	ldr	r3, [r4, #0]
 800b100:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b104:	d00e      	beq.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b106:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800b108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b10c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800b110:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b114:	4313      	orrs	r3, r2
 800b116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800b11a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b11c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b120:	f000 8092 	beq.w	800b248 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 800b124:	4628      	mov	r0, r5
 800b126:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 800b128:	f7ff f922 	bl	800a370 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 800b12c:	f7f6 fe42 	bl	8001db4 <HAL_GetTick>
 800b130:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800b132:	4b48      	ldr	r3, [pc, #288]	; (800b254 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b13a:	d106      	bne.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b13c:	f7f6 fe3a 	bl	8001db4 <HAL_GetTick>
 800b140:	1b40      	subs	r0, r0, r5
 800b142:	2802      	cmp	r0, #2
 800b144:	d9f5      	bls.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 800b146:	2503      	movs	r5, #3
 800b148:	e000      	b.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800b14a:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 800b14c:	2d00      	cmp	r5, #0
 800b14e:	f47f af41 	bne.w	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800b152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b15a:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800b15e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b160:	429a      	cmp	r2, r3
 800b162:	d024      	beq.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b168:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b16c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b170:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800b174:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800b178:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b17c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800b180:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800b184:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800b188:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800b18c:	f012 0f02 	tst.w	r2, #2
 800b190:	d10f      	bne.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 800b192:	2d00      	cmp	r5, #0
 800b194:	f47f af1e 	bne.w	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b198:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800b19a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b19e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800b1a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800b1ac:	e712      	b.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	e7ec      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 800b1b2:	f7f6 fdff 	bl	8001db4 <HAL_GetTick>
 800b1b6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b1b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1c0:	f013 0f02 	tst.w	r3, #2
 800b1c4:	d1e5      	bne.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1c6:	f7f6 fdf5 	bl	8001db4 <HAL_GetTick>
 800b1ca:	1b80      	subs	r0, r0, r6
 800b1cc:	f241 3388 	movw	r3, #5000	; 0x1388
 800b1d0:	4298      	cmp	r0, r3
 800b1d2:	d9f1      	bls.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 800b1d4:	2503      	movs	r5, #3
 800b1d6:	e7dc      	b.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b1d8:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800b1da:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800b1de:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800b1e2:	0919      	lsrs	r1, r3, #4
 800b1e4:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800b1e8:	ea22 0201 	bic.w	r2, r2, r1
 800b1ec:	011b      	lsls	r3, r3, #4
 800b1ee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800b1f8:	e750      	b.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b1fa:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800b1fc:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800b200:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800b204:	0919      	lsrs	r1, r3, #4
 800b206:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800b20a:	ea22 0201 	bic.w	r2, r2, r1
 800b20e:	011b      	lsls	r3, r3, #4
 800b210:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800b214:	4313      	orrs	r3, r2
 800b216:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800b21a:	e744      	b.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b21c:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800b21e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800b222:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800b226:	0919      	lsrs	r1, r3, #4
 800b228:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800b22c:	ea22 0201 	bic.w	r2, r2, r1
 800b230:	011b      	lsls	r3, r3, #4
 800b232:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800b236:	4313      	orrs	r3, r2
 800b238:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800b23c:	e738      	b.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800b23e:	68cb      	ldr	r3, [r1, #12]
 800b240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b244:	60cb      	str	r3, [r1, #12]
 800b246:	e746      	b.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b248:	68cb      	ldr	r3, [r1, #12]
 800b24a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b24e:	60cb      	str	r3, [r1, #12]
 800b250:	e768      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800b252:	bf00      	nop
 800b254:	58000400 	.word	0x58000400

0800b258 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b258:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d036      	beq.n	800b2ce <HAL_RTC_DeactivateAlarm+0x76>
 800b260:	2301      	movs	r3, #1
 800b262:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b266:	2302      	movs	r3, #2
 800b268:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b26c:	4b19      	ldr	r3, [pc, #100]	; (800b2d4 <HAL_RTC_DeactivateAlarm+0x7c>)
 800b26e:	22ca      	movs	r2, #202	; 0xca
 800b270:	625a      	str	r2, [r3, #36]	; 0x24
 800b272:	2253      	movs	r2, #83	; 0x53
 800b274:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800b276:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b27a:	d019      	beq.n	800b2b0 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800b27c:	4b15      	ldr	r3, [pc, #84]	; (800b2d4 <HAL_RTC_DeactivateAlarm+0x7c>)
 800b27e:	699a      	ldr	r2, [r3, #24]
 800b280:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 800b284:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800b286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b288:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b28c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800b28e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800b290:	f022 0202 	bic.w	r2, r2, #2
 800b294:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800b296:	2202      	movs	r2, #2
 800b298:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b29a:	4b0e      	ldr	r3, [pc, #56]	; (800b2d4 <HAL_RTC_DeactivateAlarm+0x7c>)
 800b29c:	22ff      	movs	r2, #255	; 0xff
 800b29e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800b2b0:	699a      	ldr	r2, [r3, #24]
 800b2b2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800b2b6:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800b2b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b2be:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800b2c0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800b2c2:	f022 0201 	bic.w	r2, r2, #1
 800b2c6:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	65da      	str	r2, [r3, #92]	; 0x5c
 800b2cc:	e7e5      	b.n	800b29a <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 800b2ce:	2002      	movs	r0, #2
}
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	40002800 	.word	0x40002800

0800b2d8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800b2dc:	4b0d      	ldr	r3, [pc, #52]	; (800b314 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800b2de:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800b2e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b2e2:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800b2e4:	f015 0f01 	tst.w	r5, #1
 800b2e8:	d106      	bne.n	800b2f8 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800b2ea:	f015 0f02 	tst.w	r5, #2
 800b2ee:	d109      	bne.n	800b304 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800b2f6:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800b2f8:	4b06      	ldr	r3, [pc, #24]	; (800b314 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800b2fe:	f7f6 ff5f 	bl	80021c0 <HAL_RTC_AlarmAEventCallback>
 800b302:	e7f2      	b.n	800b2ea <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800b304:	4b03      	ldr	r3, [pc, #12]	; (800b314 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800b306:	2202      	movs	r2, #2
 800b308:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800b30a:	4620      	mov	r0, r4
 800b30c:	f000 f9e6 	bl	800b6dc <HAL_RTCEx_AlarmBEventCallback>
 800b310:	e7ee      	b.n	800b2f0 <HAL_RTC_AlarmIRQHandler+0x18>
 800b312:	bf00      	nop
 800b314:	40002800 	.word	0x40002800

0800b318 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b318:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800b31a:	4a0b      	ldr	r2, [pc, #44]	; (800b348 <HAL_RTC_WaitForSynchro+0x30>)
 800b31c:	68d3      	ldr	r3, [r2, #12]
 800b31e:	f023 0320 	bic.w	r3, r3, #32
 800b322:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800b324:	f7f6 fd46 	bl	8001db4 <HAL_GetTick>
 800b328:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800b32a:	4b07      	ldr	r3, [pc, #28]	; (800b348 <HAL_RTC_WaitForSynchro+0x30>)
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	f013 0f20 	tst.w	r3, #32
 800b332:	d107      	bne.n	800b344 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b334:	f7f6 fd3e 	bl	8001db4 <HAL_GetTick>
 800b338:	1b00      	subs	r0, r0, r4
 800b33a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b33e:	d9f4      	bls.n	800b32a <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 800b340:	2003      	movs	r0, #3
 800b342:	e000      	b.n	800b346 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800b344:	2000      	movs	r0, #0
}
 800b346:	bd10      	pop	{r4, pc}
 800b348:	40002800 	.word	0x40002800

0800b34c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b34c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800b34e:	4b11      	ldr	r3, [pc, #68]	; (800b394 <RTC_EnterInitMode+0x48>)
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b356:	d002      	beq.n	800b35e <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 800b358:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 800b35a:	4620      	mov	r0, r4
 800b35c:	bd70      	pop	{r4, r5, r6, pc}
 800b35e:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b360:	4a0c      	ldr	r2, [pc, #48]	; (800b394 <RTC_EnterInitMode+0x48>)
 800b362:	68d3      	ldr	r3, [r2, #12]
 800b364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b368:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800b36a:	f7f6 fd23 	bl	8001db4 <HAL_GetTick>
 800b36e:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 800b370:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b372:	4b08      	ldr	r3, [pc, #32]	; (800b394 <RTC_EnterInitMode+0x48>)
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b37a:	d1ee      	bne.n	800b35a <RTC_EnterInitMode+0xe>
 800b37c:	2c03      	cmp	r4, #3
 800b37e:	d0ec      	beq.n	800b35a <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b380:	f7f6 fd18 	bl	8001db4 <HAL_GetTick>
 800b384:	1b43      	subs	r3, r0, r5
 800b386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b38a:	d9f2      	bls.n	800b372 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b38c:	2403      	movs	r4, #3
 800b38e:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 800b392:	e7ee      	b.n	800b372 <RTC_EnterInitMode+0x26>
 800b394:	40002800 	.word	0x40002800

0800b398 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b398:	b510      	push	{r4, lr}
 800b39a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b39c:	4b11      	ldr	r3, [pc, #68]	; (800b3e4 <RTC_ExitInitMode+0x4c>)
 800b39e:	68da      	ldr	r2, [r3, #12]
 800b3a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3a4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b3a6:	699b      	ldr	r3, [r3, #24]
 800b3a8:	f013 0f20 	tst.w	r3, #32
 800b3ac:	d107      	bne.n	800b3be <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b3ae:	f7ff ffb3 	bl	800b318 <HAL_RTC_WaitForSynchro>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	b1a0      	cbz	r0, 800b3e0 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b3b6:	2303      	movs	r3, #3
 800b3b8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800b3bc:	e010      	b.n	800b3e0 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b3be:	4a09      	ldr	r2, [pc, #36]	; (800b3e4 <RTC_ExitInitMode+0x4c>)
 800b3c0:	6993      	ldr	r3, [r2, #24]
 800b3c2:	f023 0320 	bic.w	r3, r3, #32
 800b3c6:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b3c8:	f7ff ffa6 	bl	800b318 <HAL_RTC_WaitForSynchro>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	b110      	cbz	r0, 800b3d6 <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b3d6:	4903      	ldr	r1, [pc, #12]	; (800b3e4 <RTC_ExitInitMode+0x4c>)
 800b3d8:	698a      	ldr	r2, [r1, #24]
 800b3da:	f042 0220 	orr.w	r2, r2, #32
 800b3de:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	bd10      	pop	{r4, pc}
 800b3e4:	40002800 	.word	0x40002800

0800b3e8 <HAL_RTC_Init>:
  if (hrtc != NULL)
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	d04a      	beq.n	800b482 <HAL_RTC_Init+0x9a>
{
 800b3ec:	b538      	push	{r3, r4, r5, lr}
 800b3ee:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b3f0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800b3f4:	b19b      	cbz	r3, 800b41e <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b3f6:	2302      	movs	r3, #2
 800b3f8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b3fc:	4b22      	ldr	r3, [pc, #136]	; (800b488 <HAL_RTC_Init+0xa0>)
 800b3fe:	22ca      	movs	r2, #202	; 0xca
 800b400:	625a      	str	r2, [r3, #36]	; 0x24
 800b402:	2253      	movs	r2, #83	; 0x53
 800b404:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800b406:	4620      	mov	r0, r4
 800b408:	f7ff ffa0 	bl	800b34c <RTC_EnterInitMode>
    if (status == HAL_OK)
 800b40c:	b160      	cbz	r0, 800b428 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b40e:	4b1e      	ldr	r3, [pc, #120]	; (800b488 <HAL_RTC_Init+0xa0>)
 800b410:	22ff      	movs	r2, #255	; 0xff
 800b412:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800b414:	b910      	cbnz	r0, 800b41c <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 800b416:	2301      	movs	r3, #1
 800b418:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800b41c:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800b41e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 800b422:	f7f6 fb29 	bl	8001a78 <HAL_RTC_MspInit>
 800b426:	e7e6      	b.n	800b3f6 <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800b428:	4b17      	ldr	r3, [pc, #92]	; (800b488 <HAL_RTC_Init+0xa0>)
 800b42a:	699a      	ldr	r2, [r3, #24]
 800b42c:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 800b430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b434:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800b436:	6999      	ldr	r1, [r3, #24]
 800b438:	6862      	ldr	r2, [r4, #4]
 800b43a:	6920      	ldr	r0, [r4, #16]
 800b43c:	4302      	orrs	r2, r0
 800b43e:	69a0      	ldr	r0, [r4, #24]
 800b440:	4302      	orrs	r2, r0
 800b442:	430a      	orrs	r2, r1
 800b444:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800b446:	68e2      	ldr	r2, [r4, #12]
 800b448:	68a1      	ldr	r1, [r4, #8]
 800b44a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b44e:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800b450:	68da      	ldr	r2, [r3, #12]
 800b452:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800b456:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b458:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b45a:	4301      	orrs	r1, r0
 800b45c:	430a      	orrs	r2, r1
 800b45e:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 800b460:	4620      	mov	r0, r4
 800b462:	f7ff ff99 	bl	800b398 <RTC_ExitInitMode>
      if (status == HAL_OK)
 800b466:	2800      	cmp	r0, #0
 800b468:	d1d1      	bne.n	800b40e <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 800b46a:	4907      	ldr	r1, [pc, #28]	; (800b488 <HAL_RTC_Init+0xa0>)
 800b46c:	698b      	ldr	r3, [r1, #24]
 800b46e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800b472:	6a22      	ldr	r2, [r4, #32]
 800b474:	69e5      	ldr	r5, [r4, #28]
 800b476:	432a      	orrs	r2, r5
 800b478:	6965      	ldr	r5, [r4, #20]
 800b47a:	432a      	orrs	r2, r5
 800b47c:	4313      	orrs	r3, r2
 800b47e:	618b      	str	r3, [r1, #24]
 800b480:	e7c5      	b.n	800b40e <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 800b482:	2001      	movs	r0, #1
}
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	40002800 	.word	0x40002800

0800b48c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800b48c:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 800b48e:	e002      	b.n	800b496 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 800b490:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 800b492:	380a      	subs	r0, #10
 800b494:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 800b496:	2809      	cmp	r0, #9
 800b498:	d8fa      	bhi.n	800b490 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800b49a:	011b      	lsls	r3, r3, #4
 800b49c:	b2db      	uxtb	r3, r3
}
 800b49e:	4318      	orrs	r0, r3
 800b4a0:	4770      	bx	lr
	...

0800b4a4 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 800b4a4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	f000 80b0 	beq.w	800b60e <HAL_RTC_SetAlarm_IT+0x16a>
{
 800b4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b4bc:	2302      	movs	r3, #2
 800b4be:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800b4c2:	4b54      	ldr	r3, [pc, #336]	; (800b614 <HAL_RTC_SetAlarm_IT+0x170>)
 800b4c4:	68de      	ldr	r6, [r3, #12]
 800b4c6:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 800b4ca:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800b4ce:	d043      	beq.n	800b558 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 800b4d0:	bb12      	cbnz	r2, 800b518 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b4d8:	d101      	bne.n	800b4de <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800b4de:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b4e2:	7820      	ldrb	r0, [r4, #0]
 800b4e4:	f7ff ffd2 	bl	800b48c <RTC_ByteToBcd2>
 800b4e8:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b4ea:	7860      	ldrb	r0, [r4, #1]
 800b4ec:	f7ff ffce 	bl	800b48c <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b4f0:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800b4f4:	78a0      	ldrb	r0, [r4, #2]
 800b4f6:	f7ff ffc9 	bl	800b48c <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b4fa:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800b4fc:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800b4fe:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800b502:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800b506:	f7ff ffc1 	bl	800b48c <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800b50a:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800b50e:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800b510:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b512:	ea48 0000 	orr.w	r0, r8, r0
 800b516:	e020      	b.n	800b55a <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800b518:	6948      	ldr	r0, [r1, #20]
 800b51a:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 800b51e:	d009      	beq.n	800b534 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800b520:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800b524:	d006      	beq.n	800b534 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b526:	4b3b      	ldr	r3, [pc, #236]	; (800b614 <HAL_RTC_SetAlarm_IT+0x170>)
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b52e:	d101      	bne.n	800b534 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b530:	2300      	movs	r3, #0
 800b532:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b534:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b536:	7863      	ldrb	r3, [r4, #1]
 800b538:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b53a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800b53e:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b540:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800b542:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800b544:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800b548:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800b54c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800b550:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800b552:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b554:	4318      	orrs	r0, r3
 800b556:	e000      	b.n	800b55a <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 800b558:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b55a:	4b2e      	ldr	r3, [pc, #184]	; (800b614 <HAL_RTC_SetAlarm_IT+0x170>)
 800b55c:	22ca      	movs	r2, #202	; 0xca
 800b55e:	625a      	str	r2, [r3, #36]	; 0x24
 800b560:	2253      	movs	r2, #83	; 0x53
 800b562:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800b564:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b56a:	d02a      	beq.n	800b5c2 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800b56c:	4b29      	ldr	r3, [pc, #164]	; (800b614 <HAL_RTC_SetAlarm_IT+0x170>)
 800b56e:	699a      	ldr	r2, [r3, #24]
 800b570:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 800b574:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800b576:	2202      	movs	r2, #2
 800b578:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800b57a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800b57e:	d040      	beq.n	800b602 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800b580:	4b24      	ldr	r3, [pc, #144]	; (800b614 <HAL_RTC_SetAlarm_IT+0x170>)
 800b582:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800b584:	69a2      	ldr	r2, [r4, #24]
 800b586:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800b588:	6862      	ldr	r2, [r4, #4]
 800b58a:	4b22      	ldr	r3, [pc, #136]	; (800b614 <HAL_RTC_SetAlarm_IT+0x170>)
 800b58c:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800b58e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800b590:	f042 0202 	orr.w	r2, r2, #2
 800b594:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800b596:	699a      	ldr	r2, [r3, #24]
 800b598:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 800b59c:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800b59e:	4a1e      	ldr	r2, [pc, #120]	; (800b618 <HAL_RTC_SetAlarm_IT+0x174>)
 800b5a0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800b5a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b5ac:	4b19      	ldr	r3, [pc, #100]	; (800b614 <HAL_RTC_SetAlarm_IT+0x170>)
 800b5ae:	22ff      	movs	r2, #255	; 0xff
 800b5b0:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 800b5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800b5c2:	4b14      	ldr	r3, [pc, #80]	; (800b614 <HAL_RTC_SetAlarm_IT+0x170>)
 800b5c4:	699a      	ldr	r2, [r3, #24]
 800b5c6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800b5ca:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800b5d0:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800b5d4:	d00f      	beq.n	800b5f6 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800b5d6:	4b0f      	ldr	r3, [pc, #60]	; (800b614 <HAL_RTC_SetAlarm_IT+0x170>)
 800b5d8:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800b5da:	69a2      	ldr	r2, [r4, #24]
 800b5dc:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800b5de:	6862      	ldr	r2, [r4, #4]
 800b5e0:	4b0c      	ldr	r3, [pc, #48]	; (800b614 <HAL_RTC_SetAlarm_IT+0x170>)
 800b5e2:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800b5e4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800b5e6:	f042 0201 	orr.w	r2, r2, #1
 800b5ea:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800b5ec:	699a      	ldr	r2, [r3, #24]
 800b5ee:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 800b5f2:	619a      	str	r2, [r3, #24]
 800b5f4:	e7d3      	b.n	800b59e <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800b5f6:	69a3      	ldr	r3, [r4, #24]
 800b5f8:	69e2      	ldr	r2, [r4, #28]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	4a05      	ldr	r2, [pc, #20]	; (800b614 <HAL_RTC_SetAlarm_IT+0x170>)
 800b5fe:	6453      	str	r3, [r2, #68]	; 0x44
 800b600:	e7ed      	b.n	800b5de <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800b602:	69a3      	ldr	r3, [r4, #24]
 800b604:	69e2      	ldr	r2, [r4, #28]
 800b606:	4313      	orrs	r3, r2
 800b608:	4a02      	ldr	r2, [pc, #8]	; (800b614 <HAL_RTC_SetAlarm_IT+0x170>)
 800b60a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b60c:	e7bc      	b.n	800b588 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 800b60e:	2002      	movs	r0, #2
}
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	40002800 	.word	0x40002800
 800b618:	58000800 	.word	0x58000800

0800b61c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b61c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800b620:	2b01      	cmp	r3, #1
 800b622:	d017      	beq.n	800b654 <HAL_RTCEx_EnableBypassShadow+0x38>
 800b624:	2101      	movs	r1, #1
 800b626:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b62a:	2302      	movs	r3, #2
 800b62c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b630:	4b09      	ldr	r3, [pc, #36]	; (800b658 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 800b632:	22ca      	movs	r2, #202	; 0xca
 800b634:	625a      	str	r2, [r3, #36]	; 0x24
 800b636:	2253      	movs	r2, #83	; 0x53
 800b638:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b63a:	699a      	ldr	r2, [r3, #24]
 800b63c:	f042 0220 	orr.w	r2, r2, #32
 800b640:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b642:	22ff      	movs	r2, #255	; 0xff
 800b644:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b646:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b64a:	2300      	movs	r3, #0
 800b64c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 800b650:	4618      	mov	r0, r3
 800b652:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800b654:	2002      	movs	r0, #2
}
 800b656:	4770      	bx	lr
 800b658:	40002800 	.word	0x40002800

0800b65c <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b65c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800b660:	2b01      	cmp	r3, #1
 800b662:	d020      	beq.n	800b6a6 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 800b664:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 800b666:	2101      	movs	r1, #1
 800b668:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b66c:	2302      	movs	r3, #2
 800b66e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b672:	4b0e      	ldr	r3, [pc, #56]	; (800b6ac <HAL_RTCEx_SetSSRU_IT+0x50>)
 800b674:	22ca      	movs	r2, #202	; 0xca
 800b676:	625a      	str	r2, [r3, #36]	; 0x24
 800b678:	2253      	movs	r2, #83	; 0x53
 800b67a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800b67c:	699a      	ldr	r2, [r3, #24]
 800b67e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b682:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800b684:	4c0a      	ldr	r4, [pc, #40]	; (800b6b0 <HAL_RTCEx_SetSSRU_IT+0x54>)
 800b686:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800b68a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b68e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b692:	22ff      	movs	r2, #255	; 0xff
 800b694:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b696:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b69a:	2300      	movs	r3, #0
 800b69c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 800b6a0:	4618      	mov	r0, r3
}
 800b6a2:	bc10      	pop	{r4}
 800b6a4:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800b6a6:	2002      	movs	r0, #2
}
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	40002800 	.word	0x40002800
 800b6b0:	58000800 	.word	0x58000800

0800b6b4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800b6b4:	b510      	push	{r4, lr}
 800b6b6:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800b6b8:	4b07      	ldr	r3, [pc, #28]	; (800b6d8 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800b6ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b6c0:	d103      	bne.n	800b6ca <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800b6c8:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 800b6ca:	4b03      	ldr	r3, [pc, #12]	; (800b6d8 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800b6cc:	2240      	movs	r2, #64	; 0x40
 800b6ce:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800b6d0:	f7f6 fd7a 	bl	80021c8 <HAL_RTCEx_SSRUEventCallback>
 800b6d4:	e7f5      	b.n	800b6c2 <HAL_RTCEx_SSRUIRQHandler+0xe>
 800b6d6:	bf00      	nop
 800b6d8:	40002800 	.word	0x40002800

0800b6dc <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800b6dc:	4770      	bx	lr

0800b6de <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800b6de:	0089      	lsls	r1, r1, #2
 800b6e0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800b6e4:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800b6e8:	600a      	str	r2, [r1, #0]
}
 800b6ea:	4770      	bx	lr

0800b6ec <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800b6ec:	0089      	lsls	r1, r1, #2
 800b6ee:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800b6f2:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800b6f6:	6808      	ldr	r0, [r1, #0]
}
 800b6f8:	4770      	bx	lr
	...

0800b6fc <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800b6fc:	4b07      	ldr	r3, [pc, #28]	; (800b71c <SUBGHZSPI_Init+0x20>)
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b704:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800b706:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 800b70a:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800b70c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800b710:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b718:	601a      	str	r2, [r3, #0]
}
 800b71a:	4770      	bx	lr
 800b71c:	58010000 	.word	0x58010000

0800b720 <HAL_SUBGHZ_Init>:
{
 800b720:	b530      	push	{r4, r5, lr}
 800b722:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 800b724:	2800      	cmp	r0, #0
 800b726:	d04e      	beq.n	800b7c6 <HAL_SUBGHZ_Init+0xa6>
 800b728:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800b72a:	7983      	ldrb	r3, [r0, #6]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d03b      	beq.n	800b7a8 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800b730:	2302      	movs	r3, #2
 800b732:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800b734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b738:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800b73c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b740:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b744:	4b21      	ldr	r3, [pc, #132]	; (800b7cc <HAL_SUBGHZ_Init+0xac>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b74c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800b750:	2264      	movs	r2, #100	; 0x64
 800b752:	fb02 f303 	mul.w	r3, r2, r3
 800b756:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 800b758:	9b01      	ldr	r3, [sp, #4]
 800b75a:	b34b      	cbz	r3, 800b7b0 <HAL_SUBGHZ_Init+0x90>
    count--;
 800b75c:	9b01      	ldr	r3, [sp, #4]
 800b75e:	3b01      	subs	r3, #1
 800b760:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800b762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b76a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b76e:	d1f3      	bne.n	800b758 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 800b770:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b772:	4b17      	ldr	r3, [pc, #92]	; (800b7d0 <HAL_SUBGHZ_Init+0xb0>)
 800b774:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b778:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b77c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 800b780:	4914      	ldr	r1, [pc, #80]	; (800b7d4 <HAL_SUBGHZ_Init+0xb4>)
 800b782:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800b786:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b78a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800b78e:	689a      	ldr	r2, [r3, #8]
 800b790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b794:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800b796:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b79a:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 800b79c:	b15d      	cbz	r5, 800b7b6 <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	71a3      	strb	r3, [r4, #6]
}
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	b003      	add	sp, #12
 800b7a6:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 800b7a8:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 800b7aa:	f7f6 fa15 	bl	8001bd8 <HAL_SUBGHZ_MspInit>
 800b7ae:	e7bf      	b.n	800b730 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b7b0:	2501      	movs	r5, #1
 800b7b2:	60a5      	str	r5, [r4, #8]
      break;
 800b7b4:	e7dd      	b.n	800b772 <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800b7b6:	6820      	ldr	r0, [r4, #0]
 800b7b8:	f7ff ffa0 	bl	800b6fc <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	60a3      	str	r3, [r4, #8]
 800b7c4:	e7eb      	b.n	800b79e <HAL_SUBGHZ_Init+0x7e>
    return status;
 800b7c6:	2501      	movs	r5, #1
 800b7c8:	e7eb      	b.n	800b7a2 <HAL_SUBGHZ_Init+0x82>
 800b7ca:	bf00      	nop
 800b7cc:	20000078 	.word	0x20000078
 800b7d0:	58000400 	.word	0x58000400
 800b7d4:	58000800 	.word	0x58000800

0800b7d8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800b7d8:	b082      	sub	sp, #8
 800b7da:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b7dc:	4b1a      	ldr	r3, [pc, #104]	; (800b848 <SUBGHZSPI_Transmit+0x70>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b7e4:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800b7e8:	2064      	movs	r0, #100	; 0x64
 800b7ea:	fb00 f303 	mul.w	r3, r0, r3
 800b7ee:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800b7f0:	9b01      	ldr	r3, [sp, #4]
 800b7f2:	b14b      	cbz	r3, 800b808 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800b7f4:	9b01      	ldr	r3, [sp, #4]
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800b7fa:	4b14      	ldr	r3, [pc, #80]	; (800b84c <SUBGHZSPI_Transmit+0x74>)
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	f013 0f02 	tst.w	r3, #2
 800b802:	d0f5      	beq.n	800b7f0 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800b804:	2000      	movs	r0, #0
 800b806:	e001      	b.n	800b80c <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b808:	2001      	movs	r0, #1
 800b80a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 800b80c:	4b0f      	ldr	r3, [pc, #60]	; (800b84c <SUBGHZSPI_Transmit+0x74>)
 800b80e:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b810:	4b0d      	ldr	r3, [pc, #52]	; (800b848 <SUBGHZSPI_Transmit+0x70>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b818:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800b81c:	2164      	movs	r1, #100	; 0x64
 800b81e:	fb01 f303 	mul.w	r3, r1, r3
 800b822:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800b824:	9b01      	ldr	r3, [sp, #4]
 800b826:	b143      	cbz	r3, 800b83a <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800b828:	9b01      	ldr	r3, [sp, #4]
 800b82a:	3b01      	subs	r3, #1
 800b82c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800b82e:	4b07      	ldr	r3, [pc, #28]	; (800b84c <SUBGHZSPI_Transmit+0x74>)
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	f013 0f01 	tst.w	r3, #1
 800b836:	d0f5      	beq.n	800b824 <SUBGHZSPI_Transmit+0x4c>
 800b838:	e001      	b.n	800b83e <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b83a:	2001      	movs	r0, #1
 800b83c:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800b83e:	4b03      	ldr	r3, [pc, #12]	; (800b84c <SUBGHZSPI_Transmit+0x74>)
 800b840:	68db      	ldr	r3, [r3, #12]

  return status;
}
 800b842:	b002      	add	sp, #8
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	20000078 	.word	0x20000078
 800b84c:	58010000 	.word	0x58010000

0800b850 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800b850:	b082      	sub	sp, #8
 800b852:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b854:	4b1c      	ldr	r3, [pc, #112]	; (800b8c8 <SUBGHZSPI_Receive+0x78>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b85c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800b860:	2064      	movs	r0, #100	; 0x64
 800b862:	fb00 f303 	mul.w	r3, r0, r3
 800b866:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800b868:	9b01      	ldr	r3, [sp, #4]
 800b86a:	b14b      	cbz	r3, 800b880 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800b86c:	9b01      	ldr	r3, [sp, #4]
 800b86e:	3b01      	subs	r3, #1
 800b870:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800b872:	4b16      	ldr	r3, [pc, #88]	; (800b8cc <SUBGHZSPI_Receive+0x7c>)
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f013 0f02 	tst.w	r3, #2
 800b87a:	d0f5      	beq.n	800b868 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800b87c:	2000      	movs	r0, #0
 800b87e:	e001      	b.n	800b884 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b880:	2001      	movs	r0, #1
 800b882:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 800b884:	4b11      	ldr	r3, [pc, #68]	; (800b8cc <SUBGHZSPI_Receive+0x7c>)
 800b886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800b88a:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b88e:	4b0e      	ldr	r3, [pc, #56]	; (800b8c8 <SUBGHZSPI_Receive+0x78>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b896:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800b89a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800b89e:	fb0c f303 	mul.w	r3, ip, r3
 800b8a2:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800b8a4:	9b01      	ldr	r3, [sp, #4]
 800b8a6:	b143      	cbz	r3, 800b8ba <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800b8a8:	9b01      	ldr	r3, [sp, #4]
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800b8ae:	4b07      	ldr	r3, [pc, #28]	; (800b8cc <SUBGHZSPI_Receive+0x7c>)
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	f013 0f01 	tst.w	r3, #1
 800b8b6:	d0f5      	beq.n	800b8a4 <SUBGHZSPI_Receive+0x54>
 800b8b8:	e001      	b.n	800b8be <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b8ba:	2001      	movs	r0, #1
 800b8bc:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800b8be:	4b03      	ldr	r3, [pc, #12]	; (800b8cc <SUBGHZSPI_Receive+0x7c>)
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	700b      	strb	r3, [r1, #0]

  return status;
}
 800b8c4:	b002      	add	sp, #8
 800b8c6:	4770      	bx	lr
 800b8c8:	20000078 	.word	0x20000078
 800b8cc:	58010000 	.word	0x58010000

0800b8d0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b8d0:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800b8d2:	4b13      	ldr	r3, [pc, #76]	; (800b920 <SUBGHZ_WaitOnBusy+0x50>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b8da:	f3c3 434b 	ubfx	r3, r3, #17, #12
 800b8de:	2264      	movs	r2, #100	; 0x64
 800b8e0:	fb02 f303 	mul.w	r3, r2, r3
 800b8e4:	9301      	str	r3, [sp, #4]
 800b8e6:	e006      	b.n	800b8f6 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800b8e8:	2302      	movs	r3, #2
 800b8ea:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 800b8ec:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 800b8ee:	b002      	add	sp, #8
 800b8f0:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800b8f2:	4213      	tst	r3, r2
 800b8f4:	d012      	beq.n	800b91c <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800b8f6:	4b0b      	ldr	r3, [pc, #44]	; (800b924 <SUBGHZ_WaitOnBusy+0x54>)
 800b8f8:	695b      	ldr	r3, [r3, #20]
 800b8fa:	f013 0304 	ands.w	r3, r3, #4
 800b8fe:	d000      	beq.n	800b902 <SUBGHZ_WaitOnBusy+0x32>
 800b900:	2301      	movs	r3, #1
    if (count == 0U)
 800b902:	9a01      	ldr	r2, [sp, #4]
 800b904:	2a00      	cmp	r2, #0
 800b906:	d0ef      	beq.n	800b8e8 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 800b908:	9a01      	ldr	r2, [sp, #4]
 800b90a:	3a01      	subs	r2, #1
 800b90c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800b90e:	4a05      	ldr	r2, [pc, #20]	; (800b924 <SUBGHZ_WaitOnBusy+0x54>)
 800b910:	6952      	ldr	r2, [r2, #20]
 800b912:	f012 0202 	ands.w	r2, r2, #2
 800b916:	d0ec      	beq.n	800b8f2 <SUBGHZ_WaitOnBusy+0x22>
 800b918:	2201      	movs	r2, #1
 800b91a:	e7ea      	b.n	800b8f2 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 800b91c:	2000      	movs	r0, #0
 800b91e:	e7e6      	b.n	800b8ee <SUBGHZ_WaitOnBusy+0x1e>
 800b920:	20000078 	.word	0x20000078
 800b924:	58000400 	.word	0x58000400

0800b928 <SUBGHZ_CheckDeviceReady>:
{
 800b928:	b500      	push	{lr}
 800b92a:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800b92c:	7903      	ldrb	r3, [r0, #4]
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d004      	beq.n	800b93c <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800b932:	f7ff ffcd 	bl	800b8d0 <SUBGHZ_WaitOnBusy>
}
 800b936:	b003      	add	sp, #12
 800b938:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 800b93c:	4b0d      	ldr	r3, [pc, #52]	; (800b974 <SUBGHZ_CheckDeviceReady+0x4c>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b944:	f3c3 334f 	ubfx	r3, r3, #13, #16
 800b948:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b94a:	4a0b      	ldr	r2, [pc, #44]	; (800b978 <SUBGHZ_CheckDeviceReady+0x50>)
 800b94c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b950:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 800b958:	9b01      	ldr	r3, [sp, #4]
 800b95a:	3b01      	subs	r3, #1
 800b95c:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 800b95e:	9b01      	ldr	r3, [sp, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d1f9      	bne.n	800b958 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b964:	4a04      	ldr	r2, [pc, #16]	; (800b978 <SUBGHZ_CheckDeviceReady+0x50>)
 800b966:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b96a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b96e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b972:	e7de      	b.n	800b932 <SUBGHZ_CheckDeviceReady+0xa>
 800b974:	20000078 	.word	0x20000078
 800b978:	58000400 	.word	0x58000400

0800b97c <HAL_SUBGHZ_WriteRegisters>:
{
 800b97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b980:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b982:	7980      	ldrb	r0, [r0, #6]
 800b984:	fa5f f880 	uxtb.w	r8, r0
 800b988:	f1b8 0f01 	cmp.w	r8, #1
 800b98c:	d13e      	bne.n	800ba0c <HAL_SUBGHZ_WriteRegisters+0x90>
 800b98e:	460c      	mov	r4, r1
 800b990:	4617      	mov	r7, r2
 800b992:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800b994:	796b      	ldrb	r3, [r5, #5]
 800b996:	2b01      	cmp	r3, #1
 800b998:	d03b      	beq.n	800ba12 <HAL_SUBGHZ_WriteRegisters+0x96>
 800b99a:	2301      	movs	r3, #1
 800b99c:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800b99e:	2302      	movs	r3, #2
 800b9a0:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	f7ff ffc0 	bl	800b928 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b9a8:	4a1b      	ldr	r2, [pc, #108]	; (800ba18 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800b9aa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b9ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b9b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800b9b6:	210d      	movs	r1, #13
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	f7ff ff0d 	bl	800b7d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800b9be:	0a21      	lsrs	r1, r4, #8
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	f7ff ff09 	bl	800b7d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800b9c6:	b2e1      	uxtb	r1, r4
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	f7ff ff05 	bl	800b7d8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b9ce:	2400      	movs	r4, #0
 800b9d0:	e005      	b.n	800b9de <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800b9d2:	5d39      	ldrb	r1, [r7, r4]
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	f7ff feff 	bl	800b7d8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b9da:	3401      	adds	r4, #1
 800b9dc:	b2a4      	uxth	r4, r4
 800b9de:	42b4      	cmp	r4, r6
 800b9e0:	d3f7      	bcc.n	800b9d2 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b9e2:	4a0d      	ldr	r2, [pc, #52]	; (800ba18 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800b9e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b9e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	f7ff ff6d 	bl	800b8d0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b9f6:	68ab      	ldr	r3, [r5, #8]
 800b9f8:	b90b      	cbnz	r3, 800b9fe <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 800b9fa:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800ba02:	2300      	movs	r3, #0
 800ba04:	716b      	strb	r3, [r5, #5]
}
 800ba06:	4640      	mov	r0, r8
 800ba08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800ba0c:	f04f 0802 	mov.w	r8, #2
 800ba10:	e7f9      	b.n	800ba06 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 800ba12:	f04f 0802 	mov.w	r8, #2
 800ba16:	e7f6      	b.n	800ba06 <HAL_SUBGHZ_WriteRegisters+0x8a>
 800ba18:	58000400 	.word	0x58000400

0800ba1c <HAL_SUBGHZ_ReadRegisters>:
{
 800ba1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba20:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800ba22:	7980      	ldrb	r0, [r0, #6]
 800ba24:	fa5f f880 	uxtb.w	r8, r0
 800ba28:	f1b8 0f01 	cmp.w	r8, #1
 800ba2c:	d141      	bne.n	800bab2 <HAL_SUBGHZ_ReadRegisters+0x96>
 800ba2e:	460c      	mov	r4, r1
 800ba30:	4615      	mov	r5, r2
 800ba32:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800ba34:	7973      	ldrb	r3, [r6, #5]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d03e      	beq.n	800bab8 <HAL_SUBGHZ_ReadRegisters+0x9c>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800ba3e:	4630      	mov	r0, r6
 800ba40:	f7ff ff72 	bl	800b928 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800ba44:	4a1e      	ldr	r2, [pc, #120]	; (800bac0 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800ba46:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800ba4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ba4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800ba52:	211d      	movs	r1, #29
 800ba54:	4630      	mov	r0, r6
 800ba56:	f7ff febf 	bl	800b7d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800ba5a:	0a21      	lsrs	r1, r4, #8
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	f7ff febb 	bl	800b7d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800ba62:	b2e1      	uxtb	r1, r4
 800ba64:	4630      	mov	r0, r6
 800ba66:	f7ff feb7 	bl	800b7d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f7ff feb3 	bl	800b7d8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800ba72:	2400      	movs	r4, #0
 800ba74:	e006      	b.n	800ba84 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800ba76:	4629      	mov	r1, r5
 800ba78:	4630      	mov	r0, r6
 800ba7a:	f7ff fee9 	bl	800b850 <SUBGHZSPI_Receive>
      pData++;
 800ba7e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 800ba80:	3401      	adds	r4, #1
 800ba82:	b2a4      	uxth	r4, r4
 800ba84:	42bc      	cmp	r4, r7
 800ba86:	d3f6      	bcc.n	800ba76 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800ba88:	4a0d      	ldr	r2, [pc, #52]	; (800bac0 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800ba8a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800ba8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800ba96:	4630      	mov	r0, r6
 800ba98:	f7ff ff1a 	bl	800b8d0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800ba9c:	68b3      	ldr	r3, [r6, #8]
 800ba9e:	b90b      	cbnz	r3, 800baa4 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 800baa0:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800baa4:	2301      	movs	r3, #1
 800baa6:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800baa8:	2300      	movs	r3, #0
 800baaa:	7173      	strb	r3, [r6, #5]
}
 800baac:	4640      	mov	r0, r8
 800baae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800bab2:	f04f 0802 	mov.w	r8, #2
 800bab6:	e7f9      	b.n	800baac <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 800bab8:	f04f 0802 	mov.w	r8, #2
 800babc:	e7f6      	b.n	800baac <HAL_SUBGHZ_ReadRegisters+0x90>
 800babe:	bf00      	nop
 800bac0:	58000400 	.word	0x58000400

0800bac4 <HAL_SUBGHZ_ExecSetCmd>:
{
 800bac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bac8:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800baca:	7980      	ldrb	r0, [r0, #6]
 800bacc:	fa5f f980 	uxtb.w	r9, r0
 800bad0:	f1b9 0f01 	cmp.w	r9, #1
 800bad4:	d143      	bne.n	800bb5e <HAL_SUBGHZ_ExecSetCmd+0x9a>
 800bad6:	4688      	mov	r8, r1
 800bad8:	4617      	mov	r7, r2
 800bada:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800badc:	796b      	ldrb	r3, [r5, #5]
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d040      	beq.n	800bb64 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 800bae2:	2301      	movs	r3, #1
 800bae4:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800bae6:	4628      	mov	r0, r5
 800bae8:	f7ff ff1e 	bl	800b928 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800baec:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 800baf0:	d005      	beq.n	800bafe <HAL_SUBGHZ_ExecSetCmd+0x3a>
 800baf2:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 800baf6:	d002      	beq.n	800bafe <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800baf8:	2300      	movs	r3, #0
 800bafa:	712b      	strb	r3, [r5, #4]
 800bafc:	e001      	b.n	800bb02 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800bafe:	2301      	movs	r3, #1
 800bb00:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800bb02:	4a1a      	ldr	r2, [pc, #104]	; (800bb6c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800bb04:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800bb08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800bb10:	4641      	mov	r1, r8
 800bb12:	4628      	mov	r0, r5
 800bb14:	f7ff fe60 	bl	800b7d8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800bb18:	2400      	movs	r4, #0
 800bb1a:	e005      	b.n	800bb28 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800bb1c:	5d39      	ldrb	r1, [r7, r4]
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f7ff fe5a 	bl	800b7d8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800bb24:	3401      	adds	r4, #1
 800bb26:	b2a4      	uxth	r4, r4
 800bb28:	42b4      	cmp	r4, r6
 800bb2a:	d3f7      	bcc.n	800bb1c <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800bb2c:	4a0f      	ldr	r2, [pc, #60]	; (800bb6c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800bb2e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800bb32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 800bb3a:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 800bb3e:	d10a      	bne.n	800bb56 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800bb40:	68ab      	ldr	r3, [r5, #8]
 800bb42:	b90b      	cbnz	r3, 800bb48 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 800bb44:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	716b      	strb	r3, [r5, #5]
}
 800bb50:	4648      	mov	r0, r9
 800bb52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800bb56:	4628      	mov	r0, r5
 800bb58:	f7ff feba 	bl	800b8d0 <SUBGHZ_WaitOnBusy>
 800bb5c:	e7f0      	b.n	800bb40 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 800bb5e:	f04f 0902 	mov.w	r9, #2
 800bb62:	e7f5      	b.n	800bb50 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 800bb64:	f04f 0902 	mov.w	r9, #2
 800bb68:	e7f2      	b.n	800bb50 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 800bb6a:	bf00      	nop
 800bb6c:	58000400 	.word	0x58000400

0800bb70 <HAL_SUBGHZ_ExecGetCmd>:
{
 800bb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb74:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800bb76:	7980      	ldrb	r0, [r0, #6]
 800bb78:	fa5f f880 	uxtb.w	r8, r0
 800bb7c:	f1b8 0f01 	cmp.w	r8, #1
 800bb80:	d139      	bne.n	800bbf6 <HAL_SUBGHZ_ExecGetCmd+0x86>
 800bb82:	460c      	mov	r4, r1
 800bb84:	4615      	mov	r5, r2
 800bb86:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800bb88:	7973      	ldrb	r3, [r6, #5]
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d036      	beq.n	800bbfc <HAL_SUBGHZ_ExecGetCmd+0x8c>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800bb92:	4630      	mov	r0, r6
 800bb94:	f7ff fec8 	bl	800b928 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800bb98:	4a1a      	ldr	r2, [pc, #104]	; (800bc04 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800bb9a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800bb9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800bba6:	4621      	mov	r1, r4
 800bba8:	4630      	mov	r0, r6
 800bbaa:	f7ff fe15 	bl	800b7d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800bbae:	2100      	movs	r1, #0
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f7ff fe11 	bl	800b7d8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800bbb6:	2400      	movs	r4, #0
 800bbb8:	e006      	b.n	800bbc8 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800bbba:	4629      	mov	r1, r5
 800bbbc:	4630      	mov	r0, r6
 800bbbe:	f7ff fe47 	bl	800b850 <SUBGHZSPI_Receive>
      pData++;
 800bbc2:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 800bbc4:	3401      	adds	r4, #1
 800bbc6:	b2a4      	uxth	r4, r4
 800bbc8:	42bc      	cmp	r4, r7
 800bbca:	d3f6      	bcc.n	800bbba <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800bbcc:	4a0d      	ldr	r2, [pc, #52]	; (800bc04 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800bbce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800bbd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800bbda:	4630      	mov	r0, r6
 800bbdc:	f7ff fe78 	bl	800b8d0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800bbe0:	68b3      	ldr	r3, [r6, #8]
 800bbe2:	b90b      	cbnz	r3, 800bbe8 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 800bbe4:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800bbec:	2300      	movs	r3, #0
 800bbee:	7173      	strb	r3, [r6, #5]
}
 800bbf0:	4640      	mov	r0, r8
 800bbf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800bbf6:	f04f 0802 	mov.w	r8, #2
 800bbfa:	e7f9      	b.n	800bbf0 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 800bbfc:	f04f 0802 	mov.w	r8, #2
 800bc00:	e7f6      	b.n	800bbf0 <HAL_SUBGHZ_ExecGetCmd+0x80>
 800bc02:	bf00      	nop
 800bc04:	58000400 	.word	0x58000400

0800bc08 <HAL_SUBGHZ_IRQHandler>:
{
 800bc08:	b530      	push	{r4, r5, lr}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 800bc0e:	2300      	movs	r3, #0
 800bc10:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800bc14:	2302      	movs	r3, #2
 800bc16:	aa01      	add	r2, sp, #4
 800bc18:	2112      	movs	r1, #18
 800bc1a:	f7ff ffa9 	bl	800bb70 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800bc1e:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 800bc22:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bc26:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800bc2a:	f013 0f01 	tst.w	r3, #1
 800bc2e:	d126      	bne.n	800bc7e <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800bc30:	f014 0f02 	tst.w	r4, #2
 800bc34:	d127      	bne.n	800bc86 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800bc36:	f014 0f04 	tst.w	r4, #4
 800bc3a:	d128      	bne.n	800bc8e <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800bc3c:	f014 0f08 	tst.w	r4, #8
 800bc40:	d129      	bne.n	800bc96 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800bc42:	f014 0f10 	tst.w	r4, #16
 800bc46:	d12a      	bne.n	800bc9e <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800bc48:	f014 0f20 	tst.w	r4, #32
 800bc4c:	d12b      	bne.n	800bca6 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800bc4e:	f014 0f40 	tst.w	r4, #64	; 0x40
 800bc52:	d12c      	bne.n	800bcae <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800bc54:	f014 0f80 	tst.w	r4, #128	; 0x80
 800bc58:	d006      	beq.n	800bc68 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800bc5a:	f414 7f80 	tst.w	r4, #256	; 0x100
 800bc5e:	d02a      	beq.n	800bcb6 <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800bc60:	2101      	movs	r1, #1
 800bc62:	4628      	mov	r0, r5
 800bc64:	f00b fa4c 	bl	8017100 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800bc68:	f414 7f00 	tst.w	r4, #512	; 0x200
 800bc6c:	d128      	bne.n	800bcc0 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800bc6e:	2302      	movs	r3, #2
 800bc70:	aa01      	add	r2, sp, #4
 800bc72:	4619      	mov	r1, r3
 800bc74:	4628      	mov	r0, r5
 800bc76:	f7ff ff25 	bl	800bac4 <HAL_SUBGHZ_ExecSetCmd>
}
 800bc7a:	b003      	add	sp, #12
 800bc7c:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f00b fa26 	bl	80170d0 <HAL_SUBGHZ_TxCpltCallback>
 800bc84:	e7d4      	b.n	800bc30 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800bc86:	4628      	mov	r0, r5
 800bc88:	f00b fa2a 	bl	80170e0 <HAL_SUBGHZ_RxCpltCallback>
 800bc8c:	e7d3      	b.n	800bc36 <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800bc8e:	4628      	mov	r0, r5
 800bc90:	f00b fa5a 	bl	8017148 <HAL_SUBGHZ_PreambleDetectedCallback>
 800bc94:	e7d2      	b.n	800bc3c <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800bc96:	4628      	mov	r0, r5
 800bc98:	f00b fa5e 	bl	8017158 <HAL_SUBGHZ_SyncWordValidCallback>
 800bc9c:	e7d1      	b.n	800bc42 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800bc9e:	4628      	mov	r0, r5
 800bca0:	f00b fa62 	bl	8017168 <HAL_SUBGHZ_HeaderValidCallback>
 800bca4:	e7d0      	b.n	800bc48 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800bca6:	4628      	mov	r0, r5
 800bca8:	f00b fa46 	bl	8017138 <HAL_SUBGHZ_HeaderErrorCallback>
 800bcac:	e7cf      	b.n	800bc4e <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800bcae:	4628      	mov	r0, r5
 800bcb0:	f00b fa1e 	bl	80170f0 <HAL_SUBGHZ_CRCErrorCallback>
 800bcb4:	e7ce      	b.n	800bc54 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	4628      	mov	r0, r5
 800bcba:	f00b fa21 	bl	8017100 <HAL_SUBGHZ_CADStatusCallback>
 800bcbe:	e7d3      	b.n	800bc68 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	f00b fa2f 	bl	8017124 <HAL_SUBGHZ_RxTxTimeoutCallback>
 800bcc6:	e7d2      	b.n	800bc6e <HAL_SUBGHZ_IRQHandler+0x66>

0800bcc8 <HAL_SUBGHZ_WriteBuffer>:
{
 800bcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bccc:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800bcce:	7980      	ldrb	r0, [r0, #6]
 800bcd0:	fa5f f880 	uxtb.w	r8, r0
 800bcd4:	f1b8 0f01 	cmp.w	r8, #1
 800bcd8:	d138      	bne.n	800bd4c <HAL_SUBGHZ_WriteBuffer+0x84>
 800bcda:	460c      	mov	r4, r1
 800bcdc:	4617      	mov	r7, r2
 800bcde:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800bce0:	796b      	ldrb	r3, [r5, #5]
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d035      	beq.n	800bd52 <HAL_SUBGHZ_WriteBuffer+0x8a>
 800bce6:	2301      	movs	r3, #1
 800bce8:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800bcea:	4628      	mov	r0, r5
 800bcec:	f7ff fe1c 	bl	800b928 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800bcf0:	4a19      	ldr	r2, [pc, #100]	; (800bd58 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800bcf2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800bcf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bcfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800bcfe:	210e      	movs	r1, #14
 800bd00:	4628      	mov	r0, r5
 800bd02:	f7ff fd69 	bl	800b7d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800bd06:	4621      	mov	r1, r4
 800bd08:	4628      	mov	r0, r5
 800bd0a:	f7ff fd65 	bl	800b7d8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800bd0e:	2400      	movs	r4, #0
 800bd10:	e005      	b.n	800bd1e <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800bd12:	5d39      	ldrb	r1, [r7, r4]
 800bd14:	4628      	mov	r0, r5
 800bd16:	f7ff fd5f 	bl	800b7d8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800bd1a:	3401      	adds	r4, #1
 800bd1c:	b2a4      	uxth	r4, r4
 800bd1e:	42b4      	cmp	r4, r6
 800bd20:	d3f7      	bcc.n	800bd12 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800bd22:	4a0d      	ldr	r2, [pc, #52]	; (800bd58 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800bd24:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800bd28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800bd30:	4628      	mov	r0, r5
 800bd32:	f7ff fdcd 	bl	800b8d0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800bd36:	68ab      	ldr	r3, [r5, #8]
 800bd38:	b90b      	cbnz	r3, 800bd3e <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 800bd3a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800bd42:	2300      	movs	r3, #0
 800bd44:	716b      	strb	r3, [r5, #5]
}
 800bd46:	4640      	mov	r0, r8
 800bd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800bd4c:	f04f 0802 	mov.w	r8, #2
 800bd50:	e7f9      	b.n	800bd46 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 800bd52:	f04f 0802 	mov.w	r8, #2
 800bd56:	e7f6      	b.n	800bd46 <HAL_SUBGHZ_WriteBuffer+0x7e>
 800bd58:	58000400 	.word	0x58000400

0800bd5c <HAL_SUBGHZ_ReadBuffer>:
{
 800bd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd60:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800bd62:	7980      	ldrb	r0, [r0, #6]
 800bd64:	fa5f f880 	uxtb.w	r8, r0
 800bd68:	f1b8 0f01 	cmp.w	r8, #1
 800bd6c:	d13d      	bne.n	800bdea <HAL_SUBGHZ_ReadBuffer+0x8e>
 800bd6e:	460c      	mov	r4, r1
 800bd70:	4615      	mov	r5, r2
 800bd72:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800bd74:	7973      	ldrb	r3, [r6, #5]
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d03a      	beq.n	800bdf0 <HAL_SUBGHZ_ReadBuffer+0x94>
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f7ff fdd2 	bl	800b928 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800bd84:	4a1c      	ldr	r2, [pc, #112]	; (800bdf8 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800bd86:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800bd8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800bd92:	211e      	movs	r1, #30
 800bd94:	4630      	mov	r0, r6
 800bd96:	f7ff fd1f 	bl	800b7d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	f7ff fd1b 	bl	800b7d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800bda2:	2100      	movs	r1, #0
 800bda4:	4630      	mov	r0, r6
 800bda6:	f7ff fd17 	bl	800b7d8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800bdaa:	2400      	movs	r4, #0
 800bdac:	e006      	b.n	800bdbc <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800bdae:	4629      	mov	r1, r5
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	f7ff fd4d 	bl	800b850 <SUBGHZSPI_Receive>
      pData++;
 800bdb6:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 800bdb8:	3401      	adds	r4, #1
 800bdba:	b2a4      	uxth	r4, r4
 800bdbc:	42bc      	cmp	r4, r7
 800bdbe:	d3f6      	bcc.n	800bdae <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800bdc0:	4a0d      	ldr	r2, [pc, #52]	; (800bdf8 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800bdc2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800bdc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800bdce:	4630      	mov	r0, r6
 800bdd0:	f7ff fd7e 	bl	800b8d0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800bdd4:	68b3      	ldr	r3, [r6, #8]
 800bdd6:	b90b      	cbnz	r3, 800bddc <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 800bdd8:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800bddc:	2301      	movs	r3, #1
 800bdde:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800bde0:	2300      	movs	r3, #0
 800bde2:	7173      	strb	r3, [r6, #5]
}
 800bde4:	4640      	mov	r0, r8
 800bde6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800bdea:	f04f 0802 	mov.w	r8, #2
 800bdee:	e7f9      	b.n	800bde4 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 800bdf0:	f04f 0802 	mov.w	r8, #2
 800bdf4:	e7f6      	b.n	800bde4 <HAL_SUBGHZ_ReadBuffer+0x88>
 800bdf6:	bf00      	nop
 800bdf8:	58000400 	.word	0x58000400

0800bdfc <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bdfc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfe:	e852 3f00 	ldrex	r3, [r2]
 800be02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be06:	e842 3100 	strex	r1, r3, [r2]
 800be0a:	2900      	cmp	r1, #0
 800be0c:	d1f6      	bne.n	800bdfc <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800be0e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be10:	f102 0308 	add.w	r3, r2, #8
 800be14:	e853 3f00 	ldrex	r3, [r3]
 800be18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1c:	3208      	adds	r2, #8
 800be1e:	e842 3100 	strex	r1, r3, [r2]
 800be22:	2900      	cmp	r1, #0
 800be24:	d1f3      	bne.n	800be0e <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be26:	2320      	movs	r3, #32
 800be28:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 800be2c:	4770      	bx	lr

0800be2e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be2e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be30:	e852 3f00 	ldrex	r3, [r2]
 800be34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be38:	e842 3100 	strex	r1, r3, [r2]
 800be3c:	2900      	cmp	r1, #0
 800be3e:	d1f6      	bne.n	800be2e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be40:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be42:	f102 0308 	add.w	r3, r2, #8
 800be46:	e853 3f00 	ldrex	r3, [r3]
 800be4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be4e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be52:	3208      	adds	r2, #8
 800be54:	e842 3100 	strex	r1, r3, [r2]
 800be58:	2900      	cmp	r1, #0
 800be5a:	d1f1      	bne.n	800be40 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be5c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d006      	beq.n	800be70 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be62:	2320      	movs	r3, #32
 800be64:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be68:	2300      	movs	r3, #0
 800be6a:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be6c:	6703      	str	r3, [r0, #112]	; 0x70
}
 800be6e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be70:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be72:	e852 3f00 	ldrex	r3, [r2]
 800be76:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be7a:	e842 3100 	strex	r1, r3, [r2]
 800be7e:	2900      	cmp	r1, #0
 800be80:	d1f6      	bne.n	800be70 <UART_EndRxTransfer+0x42>
 800be82:	e7ee      	b.n	800be62 <UART_EndRxTransfer+0x34>

0800be84 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 800be84:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800be88:	2b20      	cmp	r3, #32
 800be8a:	d14c      	bne.n	800bf26 <HAL_UART_Transmit_DMA+0xa2>
{
 800be8c:	b510      	push	{r4, lr}
 800be8e:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800be90:	2900      	cmp	r1, #0
 800be92:	d04a      	beq.n	800bf2a <HAL_UART_Transmit_DMA+0xa6>
 800be94:	2a00      	cmp	r2, #0
 800be96:	d04a      	beq.n	800bf2e <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 800be98:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d048      	beq.n	800bf32 <HAL_UART_Transmit_DMA+0xae>
 800bea0:	2301      	movs	r3, #1
 800bea2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 800bea6:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bea8:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800beac:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beb0:	2300      	movs	r3, #0
 800beb2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800beb6:	2321      	movs	r3, #33	; 0x21
 800beb8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 800bebc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800bebe:	b1f3      	cbz	r3, 800befe <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bec0:	491d      	ldr	r1, [pc, #116]	; (800bf38 <HAL_UART_Transmit_DMA+0xb4>)
 800bec2:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bec4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800bec6:	491d      	ldr	r1, [pc, #116]	; (800bf3c <HAL_UART_Transmit_DMA+0xb8>)
 800bec8:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800beca:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800becc:	491c      	ldr	r1, [pc, #112]	; (800bf40 <HAL_UART_Transmit_DMA+0xbc>)
 800bece:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 800bed0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800bed2:	2100      	movs	r1, #0
 800bed4:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bed6:	6801      	ldr	r1, [r0, #0]
 800bed8:	4613      	mov	r3, r2
 800beda:	f101 0228 	add.w	r2, r1, #40	; 0x28
 800bede:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800bee0:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800bee2:	f7fd fe0f 	bl	8009b04 <HAL_DMA_Start_IT>
 800bee6:	b150      	cbz	r0, 800befe <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bee8:	2310      	movs	r3, #16
 800beea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 800beee:	2300      	movs	r3, #0
 800bef0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800bef4:	2320      	movs	r3, #32
 800bef6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 800befa:	2001      	movs	r0, #1
 800befc:	e012      	b.n	800bf24 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800befe:	6823      	ldr	r3, [r4, #0]
 800bf00:	2240      	movs	r2, #64	; 0x40
 800bf02:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800bf04:	2300      	movs	r3, #0
 800bf06:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf0a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0c:	f102 0308 	add.w	r3, r2, #8
 800bf10:	e853 3f00 	ldrex	r3, [r3]
 800bf14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf18:	3208      	adds	r2, #8
 800bf1a:	e842 3100 	strex	r1, r3, [r2]
 800bf1e:	2900      	cmp	r1, #0
 800bf20:	d1f3      	bne.n	800bf0a <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 800bf22:	2000      	movs	r0, #0
}
 800bf24:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800bf26:	2002      	movs	r0, #2
}
 800bf28:	4770      	bx	lr
      return HAL_ERROR;
 800bf2a:	2001      	movs	r0, #1
 800bf2c:	e7fa      	b.n	800bf24 <HAL_UART_Transmit_DMA+0xa0>
 800bf2e:	2001      	movs	r0, #1
 800bf30:	e7f8      	b.n	800bf24 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 800bf32:	2002      	movs	r0, #2
 800bf34:	e7f6      	b.n	800bf24 <HAL_UART_Transmit_DMA+0xa0>
 800bf36:	bf00      	nop
 800bf38:	0800bf45 	.word	0x0800bf45
 800bf3c:	0800bfb3 	.word	0x0800bfb3
 800bf40:	0800bfbf 	.word	0x0800bfbf

0800bf44 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bf44:	b508      	push	{r3, lr}
 800bf46:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf48:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f013 0f20 	tst.w	r3, #32
 800bf52:	d118      	bne.n	800bf86 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800bf54:	2300      	movs	r3, #0
 800bf56:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf5a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5c:	f102 0308 	add.w	r3, r2, #8
 800bf60:	e853 3f00 	ldrex	r3, [r3]
 800bf64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf68:	3208      	adds	r2, #8
 800bf6a:	e842 3100 	strex	r1, r3, [r2]
 800bf6e:	2900      	cmp	r1, #0
 800bf70:	d1f3      	bne.n	800bf5a <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf72:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf74:	e852 3f00 	ldrex	r3, [r2]
 800bf78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7c:	e842 3100 	strex	r1, r3, [r2]
 800bf80:	2900      	cmp	r1, #0
 800bf82:	d1f6      	bne.n	800bf72 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bf84:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800bf86:	f7f6 fa5f 	bl	8002448 <HAL_UART_TxCpltCallback>
}
 800bf8a:	e7fb      	b.n	800bf84 <UART_DMATransmitCplt+0x40>

0800bf8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf8c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf8e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf90:	e852 3f00 	ldrex	r3, [r2]
 800bf94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf98:	e842 3100 	strex	r1, r3, [r2]
 800bf9c:	2900      	cmp	r1, #0
 800bf9e:	d1f6      	bne.n	800bf8e <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bfa0:	2320      	movs	r3, #32
 800bfa2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bfaa:	f7f6 fa4d 	bl	8002448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfae:	bd08      	pop	{r3, pc}

0800bfb0 <HAL_UART_TxHalfCpltCallback>:
}
 800bfb0:	4770      	bx	lr

0800bfb2 <UART_DMATxHalfCplt>:
{
 800bfb2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800bfb4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800bfb6:	f7ff fffb 	bl	800bfb0 <HAL_UART_TxHalfCpltCallback>
}
 800bfba:	bd08      	pop	{r3, pc}

0800bfbc <HAL_UART_ErrorCallback>:
}
 800bfbc:	4770      	bx	lr

0800bfbe <UART_DMAError>:
{
 800bfbe:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfc0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bfc2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bfc6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bfca:	6823      	ldr	r3, [r4, #0]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bfd2:	d001      	beq.n	800bfd8 <UART_DMAError+0x1a>
 800bfd4:	2a21      	cmp	r2, #33	; 0x21
 800bfd6:	d010      	beq.n	800bffa <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bfd8:	6823      	ldr	r3, [r4, #0]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bfe0:	d001      	beq.n	800bfe6 <UART_DMAError+0x28>
 800bfe2:	2d22      	cmp	r5, #34	; 0x22
 800bfe4:	d010      	beq.n	800c008 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bfe6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800bfea:	f043 0310 	orr.w	r3, r3, #16
 800bfee:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 800bff2:	4620      	mov	r0, r4
 800bff4:	f7ff ffe2 	bl	800bfbc <HAL_UART_ErrorCallback>
}
 800bff8:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800bffa:	2300      	movs	r3, #0
 800bffc:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c000:	4620      	mov	r0, r4
 800c002:	f7ff fefb 	bl	800bdfc <UART_EndTxTransfer>
 800c006:	e7e7      	b.n	800bfd8 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800c008:	2300      	movs	r3, #0
 800c00a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c00e:	4620      	mov	r0, r4
 800c010:	f7ff ff0d 	bl	800be2e <UART_EndRxTransfer>
 800c014:	e7e7      	b.n	800bfe6 <UART_DMAError+0x28>

0800c016 <UART_DMAAbortOnError>:
{
 800c016:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c018:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800c01a:	2300      	movs	r3, #0
 800c01c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c020:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800c024:	f7ff ffca 	bl	800bfbc <HAL_UART_ErrorCallback>
}
 800c028:	bd08      	pop	{r3, pc}

0800c02a <HAL_UARTEx_RxEventCallback>:
}
 800c02a:	4770      	bx	lr

0800c02c <HAL_UART_IRQHandler>:
{
 800c02c:	b570      	push	{r4, r5, r6, lr}
 800c02e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c030:	6801      	ldr	r1, [r0, #0]
 800c032:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c034:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c036:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c038:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 800c03c:	401a      	ands	r2, r3
 800c03e:	d108      	bne.n	800c052 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c040:	f013 0f20 	tst.w	r3, #32
 800c044:	d005      	beq.n	800c052 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c046:	f010 0f20 	tst.w	r0, #32
 800c04a:	d134      	bne.n	800c0b6 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c04c:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800c050:	d131      	bne.n	800c0b6 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 800c052:	b12a      	cbz	r2, 800c060 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c054:	4a95      	ldr	r2, [pc, #596]	; (800c2ac <HAL_UART_IRQHandler+0x280>)
 800c056:	402a      	ands	r2, r5
 800c058:	d133      	bne.n	800c0c2 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c05a:	4e95      	ldr	r6, [pc, #596]	; (800c2b0 <HAL_UART_IRQHandler+0x284>)
 800c05c:	4230      	tst	r0, r6
 800c05e:	d130      	bne.n	800c0c2 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c060:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800c062:	2a01      	cmp	r2, #1
 800c064:	f000 80c3 	beq.w	800c1ee <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c068:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c06c:	d003      	beq.n	800c076 <HAL_UART_IRQHandler+0x4a>
 800c06e:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800c072:	f040 815b 	bne.w	800c32c <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c076:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c07a:	d007      	beq.n	800c08c <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c07c:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c080:	f040 815b 	bne.w	800c33a <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c084:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 800c088:	f040 8157 	bne.w	800c33a <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c08c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c090:	d003      	beq.n	800c09a <HAL_UART_IRQHandler+0x6e>
 800c092:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c096:	f040 8157 	bne.w	800c348 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c09a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800c09e:	d003      	beq.n	800c0a8 <HAL_UART_IRQHandler+0x7c>
 800c0a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c0a4:	f040 8154 	bne.w	800c350 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c0a8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800c0ac:	d002      	beq.n	800c0b4 <HAL_UART_IRQHandler+0x88>
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	f2c0 8152 	blt.w	800c358 <HAL_UART_IRQHandler+0x32c>
}
 800c0b4:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800c0b6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d0fb      	beq.n	800c0b4 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 800c0bc:	4620      	mov	r0, r4
 800c0be:	4798      	blx	r3
      return;
 800c0c0:	e7f8      	b.n	800c0b4 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c0c2:	f013 0f01 	tst.w	r3, #1
 800c0c6:	d009      	beq.n	800c0dc <HAL_UART_IRQHandler+0xb0>
 800c0c8:	f410 7f80 	tst.w	r0, #256	; 0x100
 800c0cc:	d006      	beq.n	800c0dc <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c0ce:	2601      	movs	r6, #1
 800c0d0:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0d2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800c0d6:	4331      	orrs	r1, r6
 800c0d8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0dc:	f013 0f02 	tst.w	r3, #2
 800c0e0:	d00b      	beq.n	800c0fa <HAL_UART_IRQHandler+0xce>
 800c0e2:	f015 0f01 	tst.w	r5, #1
 800c0e6:	d008      	beq.n	800c0fa <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c0e8:	6821      	ldr	r1, [r4, #0]
 800c0ea:	2602      	movs	r6, #2
 800c0ec:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0ee:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800c0f2:	f041 0104 	orr.w	r1, r1, #4
 800c0f6:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0fa:	f013 0f04 	tst.w	r3, #4
 800c0fe:	d00b      	beq.n	800c118 <HAL_UART_IRQHandler+0xec>
 800c100:	f015 0f01 	tst.w	r5, #1
 800c104:	d008      	beq.n	800c118 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c106:	6821      	ldr	r1, [r4, #0]
 800c108:	2604      	movs	r6, #4
 800c10a:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c10c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800c110:	f041 0102 	orr.w	r1, r1, #2
 800c114:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c118:	f013 0f08 	tst.w	r3, #8
 800c11c:	d00b      	beq.n	800c136 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c11e:	f010 0f20 	tst.w	r0, #32
 800c122:	d100      	bne.n	800c126 <HAL_UART_IRQHandler+0xfa>
 800c124:	b13a      	cbz	r2, 800c136 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c126:	6822      	ldr	r2, [r4, #0]
 800c128:	2108      	movs	r1, #8
 800c12a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c12c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800c130:	430a      	orrs	r2, r1
 800c132:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c136:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800c13a:	d00c      	beq.n	800c156 <HAL_UART_IRQHandler+0x12a>
 800c13c:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800c140:	d009      	beq.n	800c156 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c142:	6822      	ldr	r2, [r4, #0]
 800c144:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c148:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c14a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800c14e:	f042 0220 	orr.w	r2, r2, #32
 800c152:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c156:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800c15a:	2a00      	cmp	r2, #0
 800c15c:	d0aa      	beq.n	800c0b4 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c15e:	f013 0f20 	tst.w	r3, #32
 800c162:	d009      	beq.n	800c178 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c164:	f010 0f20 	tst.w	r0, #32
 800c168:	d102      	bne.n	800c170 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c16a:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800c16e:	d003      	beq.n	800c178 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 800c170:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c172:	b10b      	cbz	r3, 800c178 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 800c174:	4620      	mov	r0, r4
 800c176:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800c178:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c17c:	6823      	ldr	r3, [r4, #0]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c184:	d102      	bne.n	800c18c <HAL_UART_IRQHandler+0x160>
 800c186:	f012 0f28 	tst.w	r2, #40	; 0x28
 800c18a:	d029      	beq.n	800c1e0 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 800c18c:	4620      	mov	r0, r4
 800c18e:	f7ff fe4e 	bl	800be2e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c192:	6823      	ldr	r3, [r4, #0]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c19a:	d01d      	beq.n	800c1d8 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c19c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c19e:	f102 0308 	add.w	r3, r2, #8
 800c1a2:	e853 3f00 	ldrex	r3, [r3]
 800c1a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1aa:	3208      	adds	r2, #8
 800c1ac:	e842 3100 	strex	r1, r3, [r2]
 800c1b0:	2900      	cmp	r1, #0
 800c1b2:	d1f3      	bne.n	800c19c <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 800c1b4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c1b6:	b15b      	cbz	r3, 800c1d0 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c1b8:	4a3e      	ldr	r2, [pc, #248]	; (800c2b4 <HAL_UART_IRQHandler+0x288>)
 800c1ba:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c1bc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c1be:	f7fd fd27 	bl	8009c10 <HAL_DMA_Abort_IT>
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	f43f af76 	beq.w	800c0b4 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c1c8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c1ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c1cc:	4798      	blx	r3
 800c1ce:	e771      	b.n	800c0b4 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f7ff fef3 	bl	800bfbc <HAL_UART_ErrorCallback>
 800c1d6:	e76d      	b.n	800c0b4 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f7ff feef 	bl	800bfbc <HAL_UART_ErrorCallback>
 800c1de:	e769      	b.n	800c0b4 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	f7ff feeb 	bl	800bfbc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 800c1ec:	e762      	b.n	800c0b4 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800c1ee:	f013 0f10 	tst.w	r3, #16
 800c1f2:	f43f af39 	beq.w	800c068 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800c1f6:	f010 0f10 	tst.w	r0, #16
 800c1fa:	f43f af35 	beq.w	800c068 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1fe:	2310      	movs	r3, #16
 800c200:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c202:	6823      	ldr	r3, [r4, #0]
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c20a:	d055      	beq.n	800c2b8 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c20c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800c20e:	6813      	ldr	r3, [r2, #0]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 800c214:	2b00      	cmp	r3, #0
 800c216:	f43f af4d 	beq.w	800c0b4 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800c21a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800c21e:	4299      	cmp	r1, r3
 800c220:	f67f af48 	bls.w	800c0b4 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 800c224:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c228:	6813      	ldr	r3, [r2, #0]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f013 0f20 	tst.w	r3, #32
 800c230:	d131      	bne.n	800c296 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c232:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c234:	e852 3f00 	ldrex	r3, [r2]
 800c238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c23c:	e842 3100 	strex	r1, r3, [r2]
 800c240:	2900      	cmp	r1, #0
 800c242:	d1f6      	bne.n	800c232 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c244:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c246:	f102 0308 	add.w	r3, r2, #8
 800c24a:	e853 3f00 	ldrex	r3, [r3]
 800c24e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c252:	3208      	adds	r2, #8
 800c254:	e842 3100 	strex	r1, r3, [r2]
 800c258:	2900      	cmp	r1, #0
 800c25a:	d1f3      	bne.n	800c244 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c25c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c25e:	f102 0308 	add.w	r3, r2, #8
 800c262:	e853 3f00 	ldrex	r3, [r3]
 800c266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c26a:	3208      	adds	r2, #8
 800c26c:	e842 3100 	strex	r1, r3, [r2]
 800c270:	2900      	cmp	r1, #0
 800c272:	d1f3      	bne.n	800c25c <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 800c274:	2320      	movs	r3, #32
 800c276:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c27a:	2300      	movs	r3, #0
 800c27c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c27e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c280:	e852 3f00 	ldrex	r3, [r2]
 800c284:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c288:	e842 3100 	strex	r1, r3, [r2]
 800c28c:	2900      	cmp	r1, #0
 800c28e:	d1f6      	bne.n	800c27e <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c290:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c292:	f7fd fc83 	bl	8009b9c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c296:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800c29a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	1ac9      	subs	r1, r1, r3
 800c2a2:	b289      	uxth	r1, r1
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f7ff fec0 	bl	800c02a <HAL_UARTEx_RxEventCallback>
      return;
 800c2aa:	e703      	b.n	800c0b4 <HAL_UART_IRQHandler+0x88>
 800c2ac:	10000001 	.word	0x10000001
 800c2b0:	04000120 	.word	0x04000120
 800c2b4:	0800c017 	.word	0x0800c017
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c2b8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800c2bc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	1ac9      	subs	r1, r1, r3
 800c2c4:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 800c2c6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f43f aef1 	beq.w	800c0b4 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 800c2d2:	2900      	cmp	r1, #0
 800c2d4:	f43f aeee 	beq.w	800c0b4 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2d8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2da:	e852 3f00 	ldrex	r3, [r2]
 800c2de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e2:	e842 3000 	strex	r0, r3, [r2]
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	d1f6      	bne.n	800c2d8 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2ea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ec:	f102 0308 	add.w	r3, r2, #8
 800c2f0:	e853 3f00 	ldrex	r3, [r3]
 800c2f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2f8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2fc:	3208      	adds	r2, #8
 800c2fe:	e842 3000 	strex	r0, r3, [r2]
 800c302:	2800      	cmp	r0, #0
 800c304:	d1f1      	bne.n	800c2ea <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 800c306:	2320      	movs	r3, #32
 800c308:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c30c:	2300      	movs	r3, #0
 800c30e:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800c310:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c312:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c314:	e852 3f00 	ldrex	r3, [r2]
 800c318:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31c:	e842 3000 	strex	r0, r3, [r2]
 800c320:	2800      	cmp	r0, #0
 800c322:	d1f6      	bne.n	800c312 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c324:	4620      	mov	r0, r4
 800c326:	f7ff fe80 	bl	800c02a <HAL_UARTEx_RxEventCallback>
      return;
 800c32a:	e6c3      	b.n	800c0b4 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c32c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c330:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800c332:	4620      	mov	r0, r4
 800c334:	f000 fe1c 	bl	800cf70 <HAL_UARTEx_WakeupCallback>
    return;
 800c338:	e6bc      	b.n	800c0b4 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 800c33a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f43f aeb9 	beq.w	800c0b4 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 800c342:	4620      	mov	r0, r4
 800c344:	4798      	blx	r3
    return;
 800c346:	e6b5      	b.n	800c0b4 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 800c348:	4620      	mov	r0, r4
 800c34a:	f7ff fe1f 	bl	800bf8c <UART_EndTransmit_IT>
    return;
 800c34e:	e6b1      	b.n	800c0b4 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c350:	4620      	mov	r0, r4
 800c352:	f000 fe0f 	bl	800cf74 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800c356:	e6ad      	b.n	800c0b4 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c358:	4620      	mov	r0, r4
 800c35a:	f000 fe0a 	bl	800cf72 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800c35e:	e6a9      	b.n	800c0b4 <HAL_UART_IRQHandler+0x88>

0800c360 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c360:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800c362:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c366:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800c36a:	2a22      	cmp	r2, #34	; 0x22
 800c36c:	d005      	beq.n	800c37a <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c36e:	6802      	ldr	r2, [r0, #0]
 800c370:	6993      	ldr	r3, [r2, #24]
 800c372:	f043 0308 	orr.w	r3, r3, #8
 800c376:	6193      	str	r3, [r2, #24]
  }
}
 800c378:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c37a:	6802      	ldr	r2, [r0, #0]
 800c37c:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800c382:	400b      	ands	r3, r1
 800c384:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800c386:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800c388:	3301      	adds	r3, #1
 800c38a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800c38c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800c390:	b29b      	uxth	r3, r3
 800c392:	3b01      	subs	r3, #1
 800c394:	b29b      	uxth	r3, r3
 800c396:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800c39a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d1e9      	bne.n	800c378 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3a4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a6:	e852 3f00 	ldrex	r3, [r2]
 800c3aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ae:	e842 3100 	strex	r1, r3, [r2]
 800c3b2:	2900      	cmp	r1, #0
 800c3b4:	d1f6      	bne.n	800c3a4 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3b6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b8:	f102 0308 	add.w	r3, r2, #8
 800c3bc:	e853 3f00 	ldrex	r3, [r3]
 800c3c0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c4:	3208      	adds	r2, #8
 800c3c6:	e842 3100 	strex	r1, r3, [r2]
 800c3ca:	2900      	cmp	r1, #0
 800c3cc:	d1f3      	bne.n	800c3b6 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800c3ce:	2320      	movs	r3, #32
 800c3d0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3d8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d116      	bne.n	800c40c <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3e2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e4:	e852 3f00 	ldrex	r3, [r2]
 800c3e8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ec:	e842 3100 	strex	r1, r3, [r2]
 800c3f0:	2900      	cmp	r1, #0
 800c3f2:	d1f6      	bne.n	800c3e2 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3f4:	6803      	ldr	r3, [r0, #0]
 800c3f6:	69da      	ldr	r2, [r3, #28]
 800c3f8:	f012 0f10 	tst.w	r2, #16
 800c3fc:	d001      	beq.n	800c402 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3fe:	2210      	movs	r2, #16
 800c400:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c402:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800c406:	f7ff fe10 	bl	800c02a <HAL_UARTEx_RxEventCallback>
 800c40a:	e7b5      	b.n	800c378 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800c40c:	f7f6 f82c 	bl	8002468 <HAL_UART_RxCpltCallback>
 800c410:	e7b2      	b.n	800c378 <UART_RxISR_8BIT+0x18>

0800c412 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c412:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c414:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c418:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800c41c:	2b22      	cmp	r3, #34	; 0x22
 800c41e:	d005      	beq.n	800c42c <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c420:	6802      	ldr	r2, [r0, #0]
 800c422:	6993      	ldr	r3, [r2, #24]
 800c424:	f043 0308 	orr.w	r3, r3, #8
 800c428:	6193      	str	r3, [r2, #24]
  }
}
 800c42a:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c42c:	6803      	ldr	r3, [r0, #0]
 800c42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c430:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800c432:	4013      	ands	r3, r2
 800c434:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800c436:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800c438:	3302      	adds	r3, #2
 800c43a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800c43c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800c440:	b29b      	uxth	r3, r3
 800c442:	3b01      	subs	r3, #1
 800c444:	b29b      	uxth	r3, r3
 800c446:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800c44a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800c44e:	b29b      	uxth	r3, r3
 800c450:	2b00      	cmp	r3, #0
 800c452:	d1ea      	bne.n	800c42a <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c454:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c456:	e852 3f00 	ldrex	r3, [r2]
 800c45a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c45e:	e842 3100 	strex	r1, r3, [r2]
 800c462:	2900      	cmp	r1, #0
 800c464:	d1f6      	bne.n	800c454 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c466:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c468:	f102 0308 	add.w	r3, r2, #8
 800c46c:	e853 3f00 	ldrex	r3, [r3]
 800c470:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c474:	3208      	adds	r2, #8
 800c476:	e842 3100 	strex	r1, r3, [r2]
 800c47a:	2900      	cmp	r1, #0
 800c47c:	d1f3      	bne.n	800c466 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 800c47e:	2320      	movs	r3, #32
 800c480:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 800c484:	2300      	movs	r3, #0
 800c486:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c488:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	d116      	bne.n	800c4bc <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c48e:	2300      	movs	r3, #0
 800c490:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c492:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c494:	e852 3f00 	ldrex	r3, [r2]
 800c498:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c49c:	e842 3100 	strex	r1, r3, [r2]
 800c4a0:	2900      	cmp	r1, #0
 800c4a2:	d1f6      	bne.n	800c492 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c4a4:	6803      	ldr	r3, [r0, #0]
 800c4a6:	69da      	ldr	r2, [r3, #28]
 800c4a8:	f012 0f10 	tst.w	r2, #16
 800c4ac:	d001      	beq.n	800c4b2 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4ae:	2210      	movs	r2, #16
 800c4b0:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4b2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800c4b6:	f7ff fdb8 	bl	800c02a <HAL_UARTEx_RxEventCallback>
 800c4ba:	e7b6      	b.n	800c42a <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800c4bc:	f7f5 ffd4 	bl	8002468 <HAL_UART_RxCpltCallback>
 800c4c0:	e7b3      	b.n	800c42a <UART_RxISR_16BIT+0x18>
	...

0800c4c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 800c4c8:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c4cc:	6803      	ldr	r3, [r0, #0]
 800c4ce:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c4d0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c4d4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4d8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800c4dc:	2a22      	cmp	r2, #34	; 0x22
 800c4de:	d005      	beq.n	800c4ec <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c4e0:	699a      	ldr	r2, [r3, #24]
 800c4e2:	f042 0208 	orr.w	r2, r2, #8
 800c4e6:	619a      	str	r2, [r3, #24]
  }
}
 800c4e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ec:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800c4ee:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c4f2:	e008      	b.n	800c506 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4f4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d14c      	bne.n	800c596 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 800c4fc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c500:	b29b      	uxth	r3, r3
 800c502:	2b00      	cmp	r3, #0
 800c504:	d04e      	beq.n	800c5a4 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c506:	2f00      	cmp	r7, #0
 800c508:	f000 8087 	beq.w	800c61a <UART_RxISR_8BIT_FIFOEN+0x156>
 800c50c:	f015 0f20 	tst.w	r5, #32
 800c510:	f000 8083 	beq.w	800c61a <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c514:	6823      	ldr	r3, [r4, #0]
 800c516:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c518:	b2f3      	uxtb	r3, r6
 800c51a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800c51c:	400b      	ands	r3, r1
 800c51e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800c520:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c522:	3301      	adds	r3, #1
 800c524:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800c526:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	3b01      	subs	r3, #1
 800c52e:	b29b      	uxth	r3, r3
 800c530:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c534:	6823      	ldr	r3, [r4, #0]
 800c536:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c538:	f015 0f07 	tst.w	r5, #7
 800c53c:	d0de      	beq.n	800c4fc <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c53e:	f015 0f01 	tst.w	r5, #1
 800c542:	d009      	beq.n	800c558 <UART_RxISR_8BIT_FIFOEN+0x94>
 800c544:	f419 7f80 	tst.w	r9, #256	; 0x100
 800c548:	d006      	beq.n	800c558 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c54a:	2201      	movs	r2, #1
 800c54c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c54e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c552:	4313      	orrs	r3, r2
 800c554:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c558:	f015 0f02 	tst.w	r5, #2
 800c55c:	d00b      	beq.n	800c576 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800c55e:	f018 0f01 	tst.w	r8, #1
 800c562:	d008      	beq.n	800c576 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c564:	6823      	ldr	r3, [r4, #0]
 800c566:	2202      	movs	r2, #2
 800c568:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c56a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c56e:	f043 0304 	orr.w	r3, r3, #4
 800c572:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c576:	f015 0f04 	tst.w	r5, #4
 800c57a:	d0bb      	beq.n	800c4f4 <UART_RxISR_8BIT_FIFOEN+0x30>
 800c57c:	f018 0f01 	tst.w	r8, #1
 800c580:	d0b8      	beq.n	800c4f4 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c582:	6823      	ldr	r3, [r4, #0]
 800c584:	2204      	movs	r2, #4
 800c586:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c588:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c58c:	f043 0302 	orr.w	r3, r3, #2
 800c590:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800c594:	e7ae      	b.n	800c4f4 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800c596:	4620      	mov	r0, r4
 800c598:	f7ff fd10 	bl	800bfbc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c59c:	2300      	movs	r3, #0
 800c59e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800c5a2:	e7ab      	b.n	800c4fc <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5a4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a6:	e852 3f00 	ldrex	r3, [r2]
 800c5aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ae:	e842 3100 	strex	r1, r3, [r2]
 800c5b2:	2900      	cmp	r1, #0
 800c5b4:	d1f6      	bne.n	800c5a4 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5b6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b8:	f102 0308 	add.w	r3, r2, #8
 800c5bc:	e853 3f00 	ldrex	r3, [r3]
 800c5c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5c4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c8:	3208      	adds	r2, #8
 800c5ca:	e842 3100 	strex	r1, r3, [r2]
 800c5ce:	2900      	cmp	r1, #0
 800c5d0:	d1f1      	bne.n	800c5b6 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 800c5d2:	2320      	movs	r3, #32
 800c5d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5dc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d003      	beq.n	800c5ea <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f7f5 ff40 	bl	8002468 <HAL_UART_RxCpltCallback>
 800c5e8:	e78d      	b.n	800c506 <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f0:	e852 3f00 	ldrex	r3, [r2]
 800c5f4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f8:	e842 3100 	strex	r1, r3, [r2]
 800c5fc:	2900      	cmp	r1, #0
 800c5fe:	d1f6      	bne.n	800c5ee <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c600:	6823      	ldr	r3, [r4, #0]
 800c602:	69da      	ldr	r2, [r3, #28]
 800c604:	f012 0f10 	tst.w	r2, #16
 800c608:	d001      	beq.n	800c60e <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c60a:	2210      	movs	r2, #16
 800c60c:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c60e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800c612:	4620      	mov	r0, r4
 800c614:	f7ff fd09 	bl	800c02a <HAL_UARTEx_RxEventCallback>
 800c618:	e775      	b.n	800c506 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800c61a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c61e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c620:	2b00      	cmp	r3, #0
 800c622:	f43f af61 	beq.w	800c4e8 <UART_RxISR_8BIT_FIFOEN+0x24>
 800c626:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800c62a:	429a      	cmp	r2, r3
 800c62c:	f67f af5c 	bls.w	800c4e8 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c630:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c632:	f102 0308 	add.w	r3, r2, #8
 800c636:	e853 3f00 	ldrex	r3, [r3]
 800c63a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c63e:	3208      	adds	r2, #8
 800c640:	e842 3100 	strex	r1, r3, [r2]
 800c644:	2900      	cmp	r1, #0
 800c646:	d1f3      	bne.n	800c630 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 800c648:	4b05      	ldr	r3, [pc, #20]	; (800c660 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 800c64a:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c64c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64e:	e852 3f00 	ldrex	r3, [r2]
 800c652:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c656:	e842 3100 	strex	r1, r3, [r2]
 800c65a:	2900      	cmp	r1, #0
 800c65c:	d1f6      	bne.n	800c64c <UART_RxISR_8BIT_FIFOEN+0x188>
 800c65e:	e743      	b.n	800c4e8 <UART_RxISR_8BIT_FIFOEN+0x24>
 800c660:	0800c361 	.word	0x0800c361

0800c664 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c668:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c66c:	6803      	ldr	r3, [r0, #0]
 800c66e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c670:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c674:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c678:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800c67c:	2a22      	cmp	r2, #34	; 0x22
 800c67e:	d005      	beq.n	800c68c <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c680:	699a      	ldr	r2, [r3, #24]
 800c682:	f042 0208 	orr.w	r2, r2, #8
 800c686:	619a      	str	r2, [r3, #24]
  }
}
 800c688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c68c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800c68e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c692:	e008      	b.n	800c6a6 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c694:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d14b      	bne.n	800c734 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 800c69c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d04d      	beq.n	800c742 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c6a6:	2f00      	cmp	r7, #0
 800c6a8:	f000 8086 	beq.w	800c7b8 <UART_RxISR_16BIT_FIFOEN+0x154>
 800c6ac:	f015 0f20 	tst.w	r5, #32
 800c6b0:	f000 8082 	beq.w	800c7b8 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c6b8:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800c6ba:	4033      	ands	r3, r6
 800c6bc:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800c6be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6c0:	3302      	adds	r3, #2
 800c6c2:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800c6c4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c6d2:	6823      	ldr	r3, [r4, #0]
 800c6d4:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c6d6:	f015 0f07 	tst.w	r5, #7
 800c6da:	d0df      	beq.n	800c69c <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c6dc:	f015 0f01 	tst.w	r5, #1
 800c6e0:	d009      	beq.n	800c6f6 <UART_RxISR_16BIT_FIFOEN+0x92>
 800c6e2:	f419 7f80 	tst.w	r9, #256	; 0x100
 800c6e6:	d006      	beq.n	800c6f6 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c6ec:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c6f6:	f015 0f02 	tst.w	r5, #2
 800c6fa:	d00b      	beq.n	800c714 <UART_RxISR_16BIT_FIFOEN+0xb0>
 800c6fc:	f018 0f01 	tst.w	r8, #1
 800c700:	d008      	beq.n	800c714 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c702:	6823      	ldr	r3, [r4, #0]
 800c704:	2202      	movs	r2, #2
 800c706:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c708:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c70c:	f043 0304 	orr.w	r3, r3, #4
 800c710:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c714:	f015 0f04 	tst.w	r5, #4
 800c718:	d0bc      	beq.n	800c694 <UART_RxISR_16BIT_FIFOEN+0x30>
 800c71a:	f018 0f01 	tst.w	r8, #1
 800c71e:	d0b9      	beq.n	800c694 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c720:	6823      	ldr	r3, [r4, #0]
 800c722:	2204      	movs	r2, #4
 800c724:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c726:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c72a:	f043 0302 	orr.w	r3, r3, #2
 800c72e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800c732:	e7af      	b.n	800c694 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800c734:	4620      	mov	r0, r4
 800c736:	f7ff fc41 	bl	800bfbc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c73a:	2300      	movs	r3, #0
 800c73c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800c740:	e7ac      	b.n	800c69c <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c742:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c744:	e852 3f00 	ldrex	r3, [r2]
 800c748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c74c:	e842 3100 	strex	r1, r3, [r2]
 800c750:	2900      	cmp	r1, #0
 800c752:	d1f6      	bne.n	800c742 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c754:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c756:	f102 0308 	add.w	r3, r2, #8
 800c75a:	e853 3f00 	ldrex	r3, [r3]
 800c75e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c762:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c766:	3208      	adds	r2, #8
 800c768:	e842 3100 	strex	r1, r3, [r2]
 800c76c:	2900      	cmp	r1, #0
 800c76e:	d1f1      	bne.n	800c754 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 800c770:	2320      	movs	r3, #32
 800c772:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800c776:	2300      	movs	r3, #0
 800c778:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c77a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d003      	beq.n	800c788 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 800c780:	4620      	mov	r0, r4
 800c782:	f7f5 fe71 	bl	8002468 <HAL_UART_RxCpltCallback>
 800c786:	e78e      	b.n	800c6a6 <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c788:	2300      	movs	r3, #0
 800c78a:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c78c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c78e:	e852 3f00 	ldrex	r3, [r2]
 800c792:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c796:	e842 3100 	strex	r1, r3, [r2]
 800c79a:	2900      	cmp	r1, #0
 800c79c:	d1f6      	bne.n	800c78c <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	69da      	ldr	r2, [r3, #28]
 800c7a2:	f012 0f10 	tst.w	r2, #16
 800c7a6:	d001      	beq.n	800c7ac <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7a8:	2210      	movs	r2, #16
 800c7aa:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7ac:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f7ff fc3a 	bl	800c02a <HAL_UARTEx_RxEventCallback>
 800c7b6:	e776      	b.n	800c6a6 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800c7b8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800c7bc:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f43f af62 	beq.w	800c688 <UART_RxISR_16BIT_FIFOEN+0x24>
 800c7c4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	f67f af5d 	bls.w	800c688 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c7ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d0:	f102 0308 	add.w	r3, r2, #8
 800c7d4:	e853 3f00 	ldrex	r3, [r3]
 800c7d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7dc:	3208      	adds	r2, #8
 800c7de:	e842 3100 	strex	r1, r3, [r2]
 800c7e2:	2900      	cmp	r1, #0
 800c7e4:	d1f3      	bne.n	800c7ce <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 800c7e6:	4b06      	ldr	r3, [pc, #24]	; (800c800 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 800c7e8:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c7ea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ec:	e852 3f00 	ldrex	r3, [r2]
 800c7f0:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f4:	e842 3100 	strex	r1, r3, [r2]
 800c7f8:	2900      	cmp	r1, #0
 800c7fa:	d1f6      	bne.n	800c7ea <UART_RxISR_16BIT_FIFOEN+0x186>
 800c7fc:	e744      	b.n	800c688 <UART_RxISR_16BIT_FIFOEN+0x24>
 800c7fe:	bf00      	nop
 800c800:	0800c413 	.word	0x0800c413

0800c804 <UART_SetConfig>:
{
 800c804:	b570      	push	{r4, r5, r6, lr}
 800c806:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800c808:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c80a:	6883      	ldr	r3, [r0, #8]
 800c80c:	6902      	ldr	r2, [r0, #16]
 800c80e:	4313      	orrs	r3, r2
 800c810:	6942      	ldr	r2, [r0, #20]
 800c812:	4313      	orrs	r3, r2
 800c814:	69c2      	ldr	r2, [r0, #28]
 800c816:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c818:	6808      	ldr	r0, [r1, #0]
 800c81a:	4a9d      	ldr	r2, [pc, #628]	; (800ca90 <UART_SetConfig+0x28c>)
 800c81c:	4002      	ands	r2, r0
 800c81e:	4313      	orrs	r3, r2
 800c820:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c822:	6822      	ldr	r2, [r4, #0]
 800c824:	6853      	ldr	r3, [r2, #4]
 800c826:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c82a:	68e1      	ldr	r1, [r4, #12]
 800c82c:	430b      	orrs	r3, r1
 800c82e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c830:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c832:	6822      	ldr	r2, [r4, #0]
 800c834:	4b97      	ldr	r3, [pc, #604]	; (800ca94 <UART_SetConfig+0x290>)
 800c836:	429a      	cmp	r2, r3
 800c838:	d001      	beq.n	800c83e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800c83a:	6a23      	ldr	r3, [r4, #32]
 800c83c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c83e:	6893      	ldr	r3, [r2, #8]
 800c840:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c844:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c848:	430b      	orrs	r3, r1
 800c84a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c84c:	6822      	ldr	r2, [r4, #0]
 800c84e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c850:	f023 030f 	bic.w	r3, r3, #15
 800c854:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c856:	430b      	orrs	r3, r1
 800c858:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c85a:	6823      	ldr	r3, [r4, #0]
 800c85c:	4a8e      	ldr	r2, [pc, #568]	; (800ca98 <UART_SetConfig+0x294>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d01c      	beq.n	800c89c <UART_SetConfig+0x98>
 800c862:	4a8e      	ldr	r2, [pc, #568]	; (800ca9c <UART_SetConfig+0x298>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d031      	beq.n	800c8cc <UART_SetConfig+0xc8>
 800c868:	4a8a      	ldr	r2, [pc, #552]	; (800ca94 <UART_SetConfig+0x290>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d04b      	beq.n	800c906 <UART_SetConfig+0x102>
 800c86e:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 800c870:	4988      	ldr	r1, [pc, #544]	; (800ca94 <UART_SetConfig+0x290>)
 800c872:	428b      	cmp	r3, r1
 800c874:	d068      	beq.n	800c948 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c876:	69e0      	ldr	r0, [r4, #28]
 800c878:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c87c:	f000 80a5 	beq.w	800c9ca <UART_SetConfig+0x1c6>
    switch (clocksource)
 800c880:	2a08      	cmp	r2, #8
 800c882:	f200 811f 	bhi.w	800cac4 <UART_SetConfig+0x2c0>
 800c886:	e8df f012 	tbh	[pc, r2, lsl #1]
 800c88a:	00d3      	.short	0x00d3
 800c88c:	00d100f5 	.word	0x00d100f5
 800c890:	00f8011d 	.word	0x00f8011d
 800c894:	011d011d 	.word	0x011d011d
 800c898:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800c89c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c8a0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800c8a4:	f002 0203 	and.w	r2, r2, #3
 800c8a8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c8ac:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 800c8b0:	2a03      	cmp	r2, #3
 800c8b2:	d809      	bhi.n	800c8c8 <UART_SetConfig+0xc4>
 800c8b4:	e8df f002 	tbb	[pc, r2]
 800c8b8:	063c0402 	.word	0x063c0402
 800c8bc:	2201      	movs	r2, #1
 800c8be:	e7d7      	b.n	800c870 <UART_SetConfig+0x6c>
 800c8c0:	2204      	movs	r2, #4
 800c8c2:	e7d5      	b.n	800c870 <UART_SetConfig+0x6c>
 800c8c4:	2208      	movs	r2, #8
 800c8c6:	e7d3      	b.n	800c870 <UART_SetConfig+0x6c>
 800c8c8:	2210      	movs	r2, #16
 800c8ca:	e7d1      	b.n	800c870 <UART_SetConfig+0x6c>
 800c8cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c8d0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800c8d4:	f002 020c 	and.w	r2, r2, #12
 800c8d8:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800c8dc:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 800c8e0:	2a0c      	cmp	r2, #12
 800c8e2:	d80e      	bhi.n	800c902 <UART_SetConfig+0xfe>
 800c8e4:	e8df f002 	tbb	[pc, r2]
 800c8e8:	0d0d0d07 	.word	0x0d0d0d07
 800c8ec:	0d0d0d09 	.word	0x0d0d0d09
 800c8f0:	0d0d0d26 	.word	0x0d0d0d26
 800c8f4:	0b          	.byte	0x0b
 800c8f5:	00          	.byte	0x00
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	e7ba      	b.n	800c870 <UART_SetConfig+0x6c>
 800c8fa:	2204      	movs	r2, #4
 800c8fc:	e7b8      	b.n	800c870 <UART_SetConfig+0x6c>
 800c8fe:	2208      	movs	r2, #8
 800c900:	e7b6      	b.n	800c870 <UART_SetConfig+0x6c>
 800c902:	2210      	movs	r2, #16
 800c904:	e7b4      	b.n	800c870 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800c906:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c90a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800c90e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800c912:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800c916:	d00f      	beq.n	800c938 <UART_SetConfig+0x134>
 800c918:	d805      	bhi.n	800c926 <UART_SetConfig+0x122>
 800c91a:	b17a      	cbz	r2, 800c93c <UART_SetConfig+0x138>
 800c91c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c920:	d10e      	bne.n	800c940 <UART_SetConfig+0x13c>
 800c922:	2204      	movs	r2, #4
 800c924:	e7a4      	b.n	800c870 <UART_SetConfig+0x6c>
 800c926:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800c92a:	d10b      	bne.n	800c944 <UART_SetConfig+0x140>
 800c92c:	2208      	movs	r2, #8
 800c92e:	e79f      	b.n	800c870 <UART_SetConfig+0x6c>
 800c930:	2202      	movs	r2, #2
 800c932:	e79d      	b.n	800c870 <UART_SetConfig+0x6c>
 800c934:	2202      	movs	r2, #2
 800c936:	e79b      	b.n	800c870 <UART_SetConfig+0x6c>
 800c938:	2202      	movs	r2, #2
 800c93a:	e799      	b.n	800c870 <UART_SetConfig+0x6c>
 800c93c:	2200      	movs	r2, #0
 800c93e:	e797      	b.n	800c870 <UART_SetConfig+0x6c>
 800c940:	2210      	movs	r2, #16
 800c942:	e795      	b.n	800c870 <UART_SetConfig+0x6c>
 800c944:	2210      	movs	r2, #16
 800c946:	e793      	b.n	800c870 <UART_SetConfig+0x6c>
    switch (clocksource)
 800c948:	2a08      	cmp	r2, #8
 800c94a:	f200 809c 	bhi.w	800ca86 <UART_SetConfig+0x282>
 800c94e:	e8df f002 	tbb	[pc, r2]
 800c952:	9a08      	.short	0x9a08
 800c954:	9a379a3a 	.word	0x9a379a3a
 800c958:	9a9a      	.short	0x9a9a
 800c95a:	05          	.byte	0x05
 800c95b:	00          	.byte	0x00
 800c95c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c960:	e004      	b.n	800c96c <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c962:	f7fe fb0f 	bl	800af84 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c966:	2800      	cmp	r0, #0
 800c968:	f000 808f 	beq.w	800ca8a <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c96c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c96e:	4b4c      	ldr	r3, [pc, #304]	; (800caa0 <UART_SetConfig+0x29c>)
 800c970:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c974:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c978:	6865      	ldr	r5, [r4, #4]
 800c97a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c97e:	4299      	cmp	r1, r3
 800c980:	f200 8094 	bhi.w	800caac <UART_SetConfig+0x2a8>
 800c984:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800c988:	f200 8092 	bhi.w	800cab0 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c98c:	2600      	movs	r6, #0
 800c98e:	4633      	mov	r3, r6
 800c990:	4631      	mov	r1, r6
 800c992:	f7f4 fb5f 	bl	8001054 <__aeabi_uldivmod>
 800c996:	0209      	lsls	r1, r1, #8
 800c998:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800c99c:	0200      	lsls	r0, r0, #8
 800c99e:	086b      	lsrs	r3, r5, #1
 800c9a0:	18c0      	adds	r0, r0, r3
 800c9a2:	462a      	mov	r2, r5
 800c9a4:	4633      	mov	r3, r6
 800c9a6:	f141 0100 	adc.w	r1, r1, #0
 800c9aa:	f7f4 fb53 	bl	8001054 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c9ae:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800c9b2:	4b3c      	ldr	r3, [pc, #240]	; (800caa4 <UART_SetConfig+0x2a0>)
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d87d      	bhi.n	800cab4 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 800c9b8:	6823      	ldr	r3, [r4, #0]
 800c9ba:	60d8      	str	r0, [r3, #12]
 800c9bc:	4630      	mov	r0, r6
 800c9be:	e050      	b.n	800ca62 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 800c9c0:	f7fd fdd8 	bl	800a574 <HAL_RCC_GetSysClockFreq>
        break;
 800c9c4:	e7cf      	b.n	800c966 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 800c9c6:	4838      	ldr	r0, [pc, #224]	; (800caa8 <UART_SetConfig+0x2a4>)
 800c9c8:	e7d0      	b.n	800c96c <UART_SetConfig+0x168>
    switch (clocksource)
 800c9ca:	2a08      	cmp	r2, #8
 800c9cc:	d874      	bhi.n	800cab8 <UART_SetConfig+0x2b4>
 800c9ce:	e8df f002 	tbb	[pc, r2]
 800c9d2:	2707      	.short	0x2707
 800c9d4:	732a7305 	.word	0x732a7305
 800c9d8:	7373      	.short	0x7373
 800c9da:	0b          	.byte	0x0b
 800c9db:	00          	.byte	0x00
 800c9dc:	4832      	ldr	r0, [pc, #200]	; (800caa8 <UART_SetConfig+0x2a4>)
 800c9de:	e003      	b.n	800c9e8 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9e0:	f7fe fad0 	bl	800af84 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d069      	beq.n	800cabc <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c9ea:	4b2d      	ldr	r3, [pc, #180]	; (800caa0 <UART_SetConfig+0x29c>)
 800c9ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c9f0:	fbb0 f0f3 	udiv	r0, r0, r3
 800c9f4:	6862      	ldr	r2, [r4, #4]
 800c9f6:	0853      	lsrs	r3, r2, #1
 800c9f8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800c9fc:	fbb0 f0f2 	udiv	r0, r0, r2
 800ca00:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca02:	f1a0 0210 	sub.w	r2, r0, #16
 800ca06:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d858      	bhi.n	800cac0 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca0e:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca12:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800ca16:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800ca18:	6823      	ldr	r3, [r4, #0]
 800ca1a:	60d8      	str	r0, [r3, #12]
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	e020      	b.n	800ca62 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca20:	f7fe fac0 	bl	800afa4 <HAL_RCC_GetPCLK2Freq>
        break;
 800ca24:	e7de      	b.n	800c9e4 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 800ca26:	f7fd fda5 	bl	800a574 <HAL_RCC_GetSysClockFreq>
        break;
 800ca2a:	e7db      	b.n	800c9e4 <UART_SetConfig+0x1e0>
    switch (clocksource)
 800ca2c:	481e      	ldr	r0, [pc, #120]	; (800caa8 <UART_SetConfig+0x2a4>)
 800ca2e:	e003      	b.n	800ca38 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca30:	f7fe faa8 	bl	800af84 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d047      	beq.n	800cac8 <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ca3a:	4b19      	ldr	r3, [pc, #100]	; (800caa0 <UART_SetConfig+0x29c>)
 800ca3c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ca40:	fbb0 f0f3 	udiv	r0, r0, r3
 800ca44:	6863      	ldr	r3, [r4, #4]
 800ca46:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800ca4a:	fbb0 f0f3 	udiv	r0, r0, r3
 800ca4e:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca50:	f1a0 0210 	sub.w	r2, r0, #16
 800ca54:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d837      	bhi.n	800cacc <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	60d8      	str	r0, [r3, #12]
 800ca60:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800ca62:	2301      	movs	r3, #1
 800ca64:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ca68:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800ca70:	6763      	str	r3, [r4, #116]	; 0x74
}
 800ca72:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca74:	f7fe fa96 	bl	800afa4 <HAL_RCC_GetPCLK2Freq>
        break;
 800ca78:	e7dc      	b.n	800ca34 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 800ca7a:	f7fd fd7b 	bl	800a574 <HAL_RCC_GetSysClockFreq>
        break;
 800ca7e:	e7d9      	b.n	800ca34 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 800ca80:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ca84:	e7d8      	b.n	800ca38 <UART_SetConfig+0x234>
    switch (clocksource)
 800ca86:	2001      	movs	r0, #1
 800ca88:	e7eb      	b.n	800ca62 <UART_SetConfig+0x25e>
 800ca8a:	2000      	movs	r0, #0
 800ca8c:	e7e9      	b.n	800ca62 <UART_SetConfig+0x25e>
 800ca8e:	bf00      	nop
 800ca90:	cfff69f3 	.word	0xcfff69f3
 800ca94:	40008000 	.word	0x40008000
 800ca98:	40013800 	.word	0x40013800
 800ca9c:	40004400 	.word	0x40004400
 800caa0:	0801bc10 	.word	0x0801bc10
 800caa4:	000ffcff 	.word	0x000ffcff
 800caa8:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 800caac:	2001      	movs	r0, #1
 800caae:	e7d8      	b.n	800ca62 <UART_SetConfig+0x25e>
 800cab0:	2001      	movs	r0, #1
 800cab2:	e7d6      	b.n	800ca62 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 800cab4:	2001      	movs	r0, #1
 800cab6:	e7d4      	b.n	800ca62 <UART_SetConfig+0x25e>
    switch (clocksource)
 800cab8:	2001      	movs	r0, #1
 800caba:	e7d2      	b.n	800ca62 <UART_SetConfig+0x25e>
 800cabc:	2000      	movs	r0, #0
 800cabe:	e7d0      	b.n	800ca62 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800cac0:	2001      	movs	r0, #1
 800cac2:	e7ce      	b.n	800ca62 <UART_SetConfig+0x25e>
    switch (clocksource)
 800cac4:	2001      	movs	r0, #1
 800cac6:	e7cc      	b.n	800ca62 <UART_SetConfig+0x25e>
 800cac8:	2000      	movs	r0, #0
 800caca:	e7ca      	b.n	800ca62 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800cacc:	2001      	movs	r0, #1
 800cace:	e7c8      	b.n	800ca62 <UART_SetConfig+0x25e>

0800cad0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cad0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cad2:	f013 0f01 	tst.w	r3, #1
 800cad6:	d006      	beq.n	800cae6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cad8:	6802      	ldr	r2, [r0, #0]
 800cada:	6853      	ldr	r3, [r2, #4]
 800cadc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cae0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800cae2:	430b      	orrs	r3, r1
 800cae4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cae6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cae8:	f013 0f02 	tst.w	r3, #2
 800caec:	d006      	beq.n	800cafc <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800caee:	6802      	ldr	r2, [r0, #0]
 800caf0:	6853      	ldr	r3, [r2, #4]
 800caf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800caf6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800caf8:	430b      	orrs	r3, r1
 800cafa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cafc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cafe:	f013 0f04 	tst.w	r3, #4
 800cb02:	d006      	beq.n	800cb12 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb04:	6802      	ldr	r2, [r0, #0]
 800cb06:	6853      	ldr	r3, [r2, #4]
 800cb08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cb0c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800cb0e:	430b      	orrs	r3, r1
 800cb10:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb12:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cb14:	f013 0f08 	tst.w	r3, #8
 800cb18:	d006      	beq.n	800cb28 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb1a:	6802      	ldr	r2, [r0, #0]
 800cb1c:	6853      	ldr	r3, [r2, #4]
 800cb1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb22:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800cb24:	430b      	orrs	r3, r1
 800cb26:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cb2a:	f013 0f10 	tst.w	r3, #16
 800cb2e:	d006      	beq.n	800cb3e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb30:	6802      	ldr	r2, [r0, #0]
 800cb32:	6893      	ldr	r3, [r2, #8]
 800cb34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb38:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800cb3a:	430b      	orrs	r3, r1
 800cb3c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cb40:	f013 0f20 	tst.w	r3, #32
 800cb44:	d006      	beq.n	800cb54 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cb46:	6802      	ldr	r2, [r0, #0]
 800cb48:	6893      	ldr	r3, [r2, #8]
 800cb4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb4e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800cb50:	430b      	orrs	r3, r1
 800cb52:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cb56:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cb5a:	d00a      	beq.n	800cb72 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cb5c:	6802      	ldr	r2, [r0, #0]
 800cb5e:	6853      	ldr	r3, [r2, #4]
 800cb60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cb64:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800cb66:	430b      	orrs	r3, r1
 800cb68:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb6a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cb6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb70:	d00b      	beq.n	800cb8a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cb74:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cb78:	d006      	beq.n	800cb88 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb7a:	6802      	ldr	r2, [r0, #0]
 800cb7c:	6853      	ldr	r3, [r2, #4]
 800cb7e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800cb82:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800cb84:	430b      	orrs	r3, r1
 800cb86:	6053      	str	r3, [r2, #4]
}
 800cb88:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb8a:	6802      	ldr	r2, [r0, #0]
 800cb8c:	6853      	ldr	r3, [r2, #4]
 800cb8e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800cb92:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800cb94:	430b      	orrs	r3, r1
 800cb96:	6053      	str	r3, [r2, #4]
 800cb98:	e7eb      	b.n	800cb72 <UART_AdvFeatureConfig+0xa2>

0800cb9a <UART_WaitOnFlagUntilTimeout>:
{
 800cb9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb9e:	4605      	mov	r5, r0
 800cba0:	460f      	mov	r7, r1
 800cba2:	4616      	mov	r6, r2
 800cba4:	4699      	mov	r9, r3
 800cba6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbaa:	682c      	ldr	r4, [r5, #0]
 800cbac:	69e4      	ldr	r4, [r4, #28]
 800cbae:	ea37 0304 	bics.w	r3, r7, r4
 800cbb2:	bf0c      	ite	eq
 800cbb4:	f04f 0c01 	moveq.w	ip, #1
 800cbb8:	f04f 0c00 	movne.w	ip, #0
 800cbbc:	45b4      	cmp	ip, r6
 800cbbe:	d157      	bne.n	800cc70 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 800cbc0:	f1b8 3fff 	cmp.w	r8, #4294967295
 800cbc4:	d0f1      	beq.n	800cbaa <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbc6:	f7f5 f8f5 	bl	8001db4 <HAL_GetTick>
 800cbca:	eba0 0009 	sub.w	r0, r0, r9
 800cbce:	4540      	cmp	r0, r8
 800cbd0:	d82f      	bhi.n	800cc32 <UART_WaitOnFlagUntilTimeout+0x98>
 800cbd2:	f1b8 0f00 	cmp.w	r8, #0
 800cbd6:	d02c      	beq.n	800cc32 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cbd8:	682b      	ldr	r3, [r5, #0]
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	f012 0f04 	tst.w	r2, #4
 800cbe0:	d0e3      	beq.n	800cbaa <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cbe2:	69da      	ldr	r2, [r3, #28]
 800cbe4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800cbe8:	d0df      	beq.n	800cbaa <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cbea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cbee:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cbf0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf2:	e852 3f00 	ldrex	r3, [r2]
 800cbf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfa:	e842 3100 	strex	r1, r3, [r2]
 800cbfe:	2900      	cmp	r1, #0
 800cc00:	d1f6      	bne.n	800cbf0 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc02:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc04:	f102 0308 	add.w	r3, r2, #8
 800cc08:	e853 3f00 	ldrex	r3, [r3]
 800cc0c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc10:	3208      	adds	r2, #8
 800cc12:	e842 3100 	strex	r1, r3, [r2]
 800cc16:	2900      	cmp	r1, #0
 800cc18:	d1f3      	bne.n	800cc02 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 800cc1a:	2320      	movs	r3, #32
 800cc1c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cc20:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc24:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800cc28:	2300      	movs	r3, #0
 800cc2a:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 800cc2e:	2003      	movs	r0, #3
 800cc30:	e01f      	b.n	800cc72 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cc32:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc34:	e852 3f00 	ldrex	r3, [r2]
 800cc38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc3c:	e842 3100 	strex	r1, r3, [r2]
 800cc40:	2900      	cmp	r1, #0
 800cc42:	d1f6      	bne.n	800cc32 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc44:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc46:	f102 0308 	add.w	r3, r2, #8
 800cc4a:	e853 3f00 	ldrex	r3, [r3]
 800cc4e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc52:	3208      	adds	r2, #8
 800cc54:	e842 3100 	strex	r1, r3, [r2]
 800cc58:	2900      	cmp	r1, #0
 800cc5a:	d1f3      	bne.n	800cc44 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 800cc5c:	2320      	movs	r3, #32
 800cc5e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cc62:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800cc66:	2300      	movs	r3, #0
 800cc68:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 800cc6c:	2003      	movs	r0, #3
 800cc6e:	e000      	b.n	800cc72 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 800cc70:	2000      	movs	r0, #0
}
 800cc72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800cc76 <UART_CheckIdleState>:
{
 800cc76:	b530      	push	{r4, r5, lr}
 800cc78:	b083      	sub	sp, #12
 800cc7a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800cc82:	f7f5 f897 	bl	8001db4 <HAL_GetTick>
 800cc86:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc88:	6822      	ldr	r2, [r4, #0]
 800cc8a:	6812      	ldr	r2, [r2, #0]
 800cc8c:	f012 0f08 	tst.w	r2, #8
 800cc90:	d10f      	bne.n	800ccb2 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f013 0f04 	tst.w	r3, #4
 800cc9a:	d118      	bne.n	800ccce <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800cc9c:	2320      	movs	r3, #32
 800cc9e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cca2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cca6:	2000      	movs	r0, #0
 800cca8:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800ccaa:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800ccae:	b003      	add	sp, #12
 800ccb0:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	4603      	mov	r3, r0
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f7ff ff6a 	bl	800cb9a <UART_WaitOnFlagUntilTimeout>
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d0e3      	beq.n	800cc92 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800ccca:	2003      	movs	r0, #3
 800cccc:	e7ef      	b.n	800ccae <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ccd2:	9300      	str	r3, [sp, #0]
 800ccd4:	462b      	mov	r3, r5
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f7ff ff5c 	bl	800cb9a <UART_WaitOnFlagUntilTimeout>
 800cce2:	2800      	cmp	r0, #0
 800cce4:	d0da      	beq.n	800cc9c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800cce6:	2003      	movs	r0, #3
 800cce8:	e7e1      	b.n	800ccae <UART_CheckIdleState+0x38>

0800ccea <HAL_UART_Init>:
  if (huart == NULL)
 800ccea:	b378      	cbz	r0, 800cd4c <HAL_UART_Init+0x62>
{
 800ccec:	b510      	push	{r4, lr}
 800ccee:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800ccf0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800ccf4:	b30b      	cbz	r3, 800cd3a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800ccf6:	2324      	movs	r3, #36	; 0x24
 800ccf8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800ccfc:	6822      	ldr	r2, [r4, #0]
 800ccfe:	6813      	ldr	r3, [r2, #0]
 800cd00:	f023 0301 	bic.w	r3, r3, #1
 800cd04:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd06:	4620      	mov	r0, r4
 800cd08:	f7ff fd7c 	bl	800c804 <UART_SetConfig>
 800cd0c:	2801      	cmp	r0, #1
 800cd0e:	d013      	beq.n	800cd38 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd12:	b9bb      	cbnz	r3, 800cd44 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd14:	6822      	ldr	r2, [r4, #0]
 800cd16:	6853      	ldr	r3, [r2, #4]
 800cd18:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800cd1c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd1e:	6822      	ldr	r2, [r4, #0]
 800cd20:	6893      	ldr	r3, [r2, #8]
 800cd22:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800cd26:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800cd28:	6822      	ldr	r2, [r4, #0]
 800cd2a:	6813      	ldr	r3, [r2, #0]
 800cd2c:	f043 0301 	orr.w	r3, r3, #1
 800cd30:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800cd32:	4620      	mov	r0, r4
 800cd34:	f7ff ff9f 	bl	800cc76 <UART_CheckIdleState>
}
 800cd38:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800cd3a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800cd3e:	f7f5 fa7f 	bl	8002240 <HAL_UART_MspInit>
 800cd42:	e7d8      	b.n	800ccf6 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800cd44:	4620      	mov	r0, r4
 800cd46:	f7ff fec3 	bl	800cad0 <UART_AdvFeatureConfig>
 800cd4a:	e7e3      	b.n	800cd14 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800cd4c:	2001      	movs	r0, #1
}
 800cd4e:	4770      	bx	lr

0800cd50 <UART_Start_Receive_IT>:
{
 800cd50:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 800cd52:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cd54:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cd58:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 800cd60:	6883      	ldr	r3, [r0, #8]
 800cd62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd66:	d006      	beq.n	800cd76 <UART_Start_Receive_IT+0x26>
 800cd68:	b9a3      	cbnz	r3, 800cd94 <UART_Start_Receive_IT+0x44>
 800cd6a:	6903      	ldr	r3, [r0, #16]
 800cd6c:	b973      	cbnz	r3, 800cd8c <UART_Start_Receive_IT+0x3c>
 800cd6e:	23ff      	movs	r3, #255	; 0xff
 800cd70:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800cd74:	e014      	b.n	800cda0 <UART_Start_Receive_IT+0x50>
 800cd76:	6903      	ldr	r3, [r0, #16]
 800cd78:	b923      	cbnz	r3, 800cd84 <UART_Start_Receive_IT+0x34>
 800cd7a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800cd7e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800cd82:	e00d      	b.n	800cda0 <UART_Start_Receive_IT+0x50>
 800cd84:	23ff      	movs	r3, #255	; 0xff
 800cd86:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800cd8a:	e009      	b.n	800cda0 <UART_Start_Receive_IT+0x50>
 800cd8c:	237f      	movs	r3, #127	; 0x7f
 800cd8e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800cd92:	e005      	b.n	800cda0 <UART_Start_Receive_IT+0x50>
 800cd94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd98:	d030      	beq.n	800cdfc <UART_Start_Receive_IT+0xac>
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cda0:	2300      	movs	r3, #0
 800cda2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cda6:	2322      	movs	r3, #34	; 0x22
 800cda8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdac:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdae:	f101 0308 	add.w	r3, r1, #8
 800cdb2:	e853 3f00 	ldrex	r3, [r3]
 800cdb6:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdba:	3108      	adds	r1, #8
 800cdbc:	e841 3400 	strex	r4, r3, [r1]
 800cdc0:	2c00      	cmp	r4, #0
 800cdc2:	d1f3      	bne.n	800cdac <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cdc4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800cdc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdca:	d021      	beq.n	800ce10 <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdcc:	6883      	ldr	r3, [r0, #8]
 800cdce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdd2:	d048      	beq.n	800ce66 <UART_Start_Receive_IT+0x116>
      huart->RxISR = UART_RxISR_8BIT;
 800cdd4:	4b2c      	ldr	r3, [pc, #176]	; (800ce88 <UART_Start_Receive_IT+0x138>)
 800cdd6:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800cdd8:	2300      	movs	r3, #0
 800cdda:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cdde:	6903      	ldr	r3, [r0, #16]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d046      	beq.n	800ce72 <UART_Start_Receive_IT+0x122>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cde4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde6:	e852 3f00 	ldrex	r3, [r2]
 800cdea:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdee:	e842 3100 	strex	r1, r3, [r2]
 800cdf2:	2900      	cmp	r1, #0
 800cdf4:	d1f6      	bne.n	800cde4 <UART_Start_Receive_IT+0x94>
}
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	bc10      	pop	{r4}
 800cdfa:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800cdfc:	6903      	ldr	r3, [r0, #16]
 800cdfe:	b91b      	cbnz	r3, 800ce08 <UART_Start_Receive_IT+0xb8>
 800ce00:	237f      	movs	r3, #127	; 0x7f
 800ce02:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800ce06:	e7cb      	b.n	800cda0 <UART_Start_Receive_IT+0x50>
 800ce08:	233f      	movs	r3, #63	; 0x3f
 800ce0a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800ce0e:	e7c7      	b.n	800cda0 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ce10:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d8d9      	bhi.n	800cdcc <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce18:	6883      	ldr	r3, [r0, #8]
 800ce1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce1e:	d01c      	beq.n	800ce5a <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ce20:	4b1a      	ldr	r3, [pc, #104]	; (800ce8c <UART_Start_Receive_IT+0x13c>)
 800ce22:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800ce24:	2300      	movs	r3, #0
 800ce26:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ce2a:	6903      	ldr	r3, [r0, #16]
 800ce2c:	b143      	cbz	r3, 800ce40 <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce2e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce30:	e852 3f00 	ldrex	r3, [r2]
 800ce34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce38:	e842 3100 	strex	r1, r3, [r2]
 800ce3c:	2900      	cmp	r1, #0
 800ce3e:	d1f6      	bne.n	800ce2e <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ce40:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce42:	f102 0308 	add.w	r3, r2, #8
 800ce46:	e853 3f00 	ldrex	r3, [r3]
 800ce4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce4e:	3208      	adds	r2, #8
 800ce50:	e842 3100 	strex	r1, r3, [r2]
 800ce54:	2900      	cmp	r1, #0
 800ce56:	d1f3      	bne.n	800ce40 <UART_Start_Receive_IT+0xf0>
 800ce58:	e7cd      	b.n	800cdf6 <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce5a:	6903      	ldr	r3, [r0, #16]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1df      	bne.n	800ce20 <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ce60:	4b0b      	ldr	r3, [pc, #44]	; (800ce90 <UART_Start_Receive_IT+0x140>)
 800ce62:	6703      	str	r3, [r0, #112]	; 0x70
 800ce64:	e7de      	b.n	800ce24 <UART_Start_Receive_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce66:	6903      	ldr	r3, [r0, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d1b3      	bne.n	800cdd4 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 800ce6c:	4b09      	ldr	r3, [pc, #36]	; (800ce94 <UART_Start_Receive_IT+0x144>)
 800ce6e:	6703      	str	r3, [r0, #112]	; 0x70
 800ce70:	e7b2      	b.n	800cdd8 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ce72:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce74:	e852 3f00 	ldrex	r3, [r2]
 800ce78:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce7c:	e842 3100 	strex	r1, r3, [r2]
 800ce80:	2900      	cmp	r1, #0
 800ce82:	d1f6      	bne.n	800ce72 <UART_Start_Receive_IT+0x122>
 800ce84:	e7b7      	b.n	800cdf6 <UART_Start_Receive_IT+0xa6>
 800ce86:	bf00      	nop
 800ce88:	0800c361 	.word	0x0800c361
 800ce8c:	0800c4c5 	.word	0x0800c4c5
 800ce90:	0800c665 	.word	0x0800c665
 800ce94:	0800c413 	.word	0x0800c413

0800ce98 <HAL_UART_Receive_IT>:
{
 800ce98:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800ce9a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800ce9e:	2b20      	cmp	r3, #32
 800cea0:	d11e      	bne.n	800cee0 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 800cea2:	b1f9      	cbz	r1, 800cee4 <HAL_UART_Receive_IT+0x4c>
 800cea4:	b302      	cbz	r2, 800cee8 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 800cea6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d01e      	beq.n	800ceec <HAL_UART_Receive_IT+0x54>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ceb8:	6803      	ldr	r3, [r0, #0]
 800ceba:	4c0d      	ldr	r4, [pc, #52]	; (800cef0 <HAL_UART_Receive_IT+0x58>)
 800cebc:	42a3      	cmp	r3, r4
 800cebe:	d00c      	beq.n	800ceda <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800cec6:	d008      	beq.n	800ceda <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cec8:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceca:	e854 3f00 	ldrex	r3, [r4]
 800cece:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced2:	e844 3500 	strex	r5, r3, [r4]
 800ced6:	2d00      	cmp	r5, #0
 800ced8:	d1f6      	bne.n	800cec8 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 800ceda:	f7ff ff39 	bl	800cd50 <UART_Start_Receive_IT>
 800cede:	e000      	b.n	800cee2 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 800cee0:	2002      	movs	r0, #2
}
 800cee2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800cee4:	2001      	movs	r0, #1
 800cee6:	e7fc      	b.n	800cee2 <HAL_UART_Receive_IT+0x4a>
 800cee8:	2001      	movs	r0, #1
 800ceea:	e7fa      	b.n	800cee2 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 800ceec:	2002      	movs	r0, #2
 800ceee:	e7f8      	b.n	800cee2 <HAL_UART_Receive_IT+0x4a>
 800cef0:	40008000 	.word	0x40008000

0800cef4 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800cef4:	b082      	sub	sp, #8
 800cef6:	ab02      	add	r3, sp, #8
 800cef8:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800cefc:	6802      	ldr	r2, [r0, #0]
 800cefe:	6853      	ldr	r3, [r2, #4]
 800cf00:	f023 0310 	bic.w	r3, r3, #16
 800cf04:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800cf08:	430b      	orrs	r3, r1
 800cf0a:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800cf0c:	6802      	ldr	r2, [r0, #0]
 800cf0e:	6853      	ldr	r3, [r2, #4]
 800cf10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cf14:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800cf18:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800cf1c:	6053      	str	r3, [r2, #4]
}
 800cf1e:	b002      	add	sp, #8
 800cf20:	4770      	bx	lr
	...

0800cf24 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cf24:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800cf26:	b92b      	cbnz	r3, 800cf34 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cf2e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800cf32:	4770      	bx	lr
{
 800cf34:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cf36:	6803      	ldr	r3, [r0, #0]
 800cf38:	689a      	ldr	r2, [r3, #8]
 800cf3a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cf3e:	6899      	ldr	r1, [r3, #8]
 800cf40:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf42:	4d09      	ldr	r5, [pc, #36]	; (800cf68 <UARTEx_SetNbDataToProcess+0x44>)
 800cf44:	5c6b      	ldrb	r3, [r5, r1]
 800cf46:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cf48:	4c08      	ldr	r4, [pc, #32]	; (800cf6c <UARTEx_SetNbDataToProcess+0x48>)
 800cf4a:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf4c:	fb93 f3f1 	sdiv	r3, r3, r1
 800cf50:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf54:	5cab      	ldrb	r3, [r5, r2]
 800cf56:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cf58:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf5a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf5e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800cf62:	bc30      	pop	{r4, r5}
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	0801bc30 	.word	0x0801bc30
 800cf6c:	0801bc28 	.word	0x0801bc28

0800cf70 <HAL_UARTEx_WakeupCallback>:
}
 800cf70:	4770      	bx	lr

0800cf72 <HAL_UARTEx_RxFifoFullCallback>:
}
 800cf72:	4770      	bx	lr

0800cf74 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800cf74:	4770      	bx	lr

0800cf76 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800cf76:	b510      	push	{r4, lr}
 800cf78:	b084      	sub	sp, #16
 800cf7a:	ab04      	add	r3, sp, #16
 800cf7c:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 800cf80:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d035      	beq.n	800cff4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 800cf88:	4604      	mov	r4, r0
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800cf90:	2324      	movs	r3, #36	; 0x24
 800cf92:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800cf96:	6802      	ldr	r2, [r0, #0]
 800cf98:	6813      	ldr	r3, [r2, #0]
 800cf9a:	f023 0301 	bic.w	r3, r3, #1
 800cf9e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800cfa0:	6801      	ldr	r1, [r0, #0]
 800cfa2:	688b      	ldr	r3, [r1, #8]
 800cfa4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cfa8:	9a02      	ldr	r2, [sp, #8]
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800cfae:	b1aa      	cbz	r2, 800cfdc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 800cfb0:	6822      	ldr	r2, [r4, #0]
 800cfb2:	6813      	ldr	r3, [r2, #0]
 800cfb4:	f043 0301 	orr.w	r3, r3, #1
 800cfb8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800cfba:	f7f4 fefb 	bl	8001db4 <HAL_GetTick>
 800cfbe:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfc0:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800cfc4:	9200      	str	r2, [sp, #0]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f7ff fde4 	bl	800cb9a <UART_WaitOnFlagUntilTimeout>
 800cfd2:	b948      	cbnz	r0, 800cfe8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 800cfd4:	2320      	movs	r3, #32
 800cfd6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800cfda:	e006      	b.n	800cfea <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800cfdc:	ab04      	add	r3, sp, #16
 800cfde:	e913 0006 	ldmdb	r3, {r1, r2}
 800cfe2:	f7ff ff87 	bl	800cef4 <UARTEx_Wakeup_AddressConfig>
 800cfe6:	e7e3      	b.n	800cfb0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 800cfe8:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 800cfea:	2300      	movs	r3, #0
 800cfec:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800cff0:	b004      	add	sp, #16
 800cff2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800cff4:	2002      	movs	r0, #2
 800cff6:	e7fb      	b.n	800cff0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

0800cff8 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 800cff8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d010      	beq.n	800d022 <HAL_UARTEx_EnableStopMode+0x2a>
 800d000:	2301      	movs	r3, #1
 800d002:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800d006:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d008:	e852 3f00 	ldrex	r3, [r2]
 800d00c:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d010:	e842 3100 	strex	r1, r3, [r2]
 800d014:	2900      	cmp	r1, #0
 800d016:	d1f6      	bne.n	800d006 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 800d018:	2300      	movs	r3, #0
 800d01a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800d01e:	4618      	mov	r0, r3
 800d020:	4770      	bx	lr
  __HAL_LOCK(huart);
 800d022:	2002      	movs	r0, #2
}
 800d024:	4770      	bx	lr

0800d026 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800d026:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d01d      	beq.n	800d06a <HAL_UARTEx_EnableFifoMode+0x44>
{
 800d02e:	b510      	push	{r4, lr}
 800d030:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800d032:	2301      	movs	r3, #1
 800d034:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800d038:	2324      	movs	r3, #36	; 0x24
 800d03a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d03e:	6802      	ldr	r2, [r0, #0]
 800d040:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800d042:	6811      	ldr	r1, [r2, #0]
 800d044:	f021 0101 	bic.w	r1, r1, #1
 800d048:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d04a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800d04e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800d052:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d054:	6802      	ldr	r2, [r0, #0]
 800d056:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 800d058:	f7ff ff64 	bl	800cf24 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800d05c:	2320      	movs	r3, #32
 800d05e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800d062:	2000      	movs	r0, #0
 800d064:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800d068:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800d06a:	2002      	movs	r0, #2
}
 800d06c:	4770      	bx	lr

0800d06e <HAL_UARTEx_SetTxFifoThreshold>:
{
 800d06e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800d070:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800d074:	2b01      	cmp	r3, #1
 800d076:	d01d      	beq.n	800d0b4 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800d078:	4604      	mov	r4, r0
 800d07a:	2301      	movs	r3, #1
 800d07c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800d080:	2324      	movs	r3, #36	; 0x24
 800d082:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d086:	6803      	ldr	r3, [r0, #0]
 800d088:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	f022 0201 	bic.w	r2, r2, #1
 800d090:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d092:	6802      	ldr	r2, [r0, #0]
 800d094:	6893      	ldr	r3, [r2, #8]
 800d096:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800d09a:	4319      	orrs	r1, r3
 800d09c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800d09e:	f7ff ff41 	bl	800cf24 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0a2:	6823      	ldr	r3, [r4, #0]
 800d0a4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800d0a6:	2320      	movs	r3, #32
 800d0a8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800d0ac:	2000      	movs	r0, #0
 800d0ae:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800d0b2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800d0b4:	2002      	movs	r0, #2
 800d0b6:	e7fc      	b.n	800d0b2 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800d0b8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800d0b8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800d0ba:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d01d      	beq.n	800d0fe <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800d0ca:	2324      	movs	r3, #36	; 0x24
 800d0cc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0d0:	6803      	ldr	r3, [r0, #0]
 800d0d2:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	f022 0201 	bic.w	r2, r2, #1
 800d0da:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d0dc:	6802      	ldr	r2, [r0, #0]
 800d0de:	6893      	ldr	r3, [r2, #8]
 800d0e0:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800d0e4:	4319      	orrs	r1, r3
 800d0e6:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800d0e8:	f7ff ff1c 	bl	800cf24 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0ec:	6823      	ldr	r3, [r4, #0]
 800d0ee:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800d0f0:	2320      	movs	r3, #32
 800d0f2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800d0f6:	2000      	movs	r0, #0
 800d0f8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800d0fc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800d0fe:	2002      	movs	r0, #2
 800d100:	e7fc      	b.n	800d0fc <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

0800d104 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800d104:	2804      	cmp	r0, #4
 800d106:	d807      	bhi.n	800d118 <LmHandlerPackageIsInitialized+0x14>
{
 800d108:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800d10a:	4b05      	ldr	r3, [pc, #20]	; (800d120 <LmHandlerPackageIsInitialized+0x1c>)
 800d10c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	b11b      	cbz	r3, 800d11c <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800d114:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 800d116:	bd08      	pop	{r3, pc}
        return false;
 800d118:	2000      	movs	r0, #0
}
 800d11a:	4770      	bx	lr
        return false;
 800d11c:	2000      	movs	r0, #0
 800d11e:	e7fa      	b.n	800d116 <LmHandlerPackageIsInitialized+0x12>
 800d120:	200008ec 	.word	0x200008ec

0800d124 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800d124:	b570      	push	{r4, r5, r6, lr}
 800d126:	4605      	mov	r5, r0
 800d128:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d12a:	2400      	movs	r4, #0
 800d12c:	e005      	b.n	800d13a <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d12e:	699b      	ldr	r3, [r3, #24]
 800d130:	b10b      	cbz	r3, 800d136 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800d132:	4630      	mov	r0, r6
 800d134:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d136:	3401      	adds	r4, #1
 800d138:	b264      	sxtb	r4, r4
 800d13a:	2c04      	cmp	r4, #4
 800d13c:	dc24      	bgt.n	800d188 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 800d13e:	4b13      	ldr	r3, [pc, #76]	; (800d18c <LmHandlerPackagesNotify+0x68>)
 800d140:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d0f6      	beq.n	800d136 <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 800d148:	2d03      	cmp	r5, #3
 800d14a:	d8f4      	bhi.n	800d136 <LmHandlerPackagesNotify+0x12>
 800d14c:	a201      	add	r2, pc, #4	; (adr r2, 800d154 <LmHandlerPackagesNotify+0x30>)
 800d14e:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800d152:	bf00      	nop
 800d154:	0800d12f 	.word	0x0800d12f
 800d158:	0800d165 	.word	0x0800d165
 800d15c:	0800d171 	.word	0x0800d171
 800d160:	0800d17d 	.word	0x0800d17d
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800d164:	69db      	ldr	r3, [r3, #28]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d0e5      	beq.n	800d136 <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800d16a:	4630      	mov	r0, r6
 800d16c:	4798      	blx	r3
 800d16e:	e7e2      	b.n	800d136 <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d170:	6a1b      	ldr	r3, [r3, #32]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d0df      	beq.n	800d136 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800d176:	4630      	mov	r0, r6
 800d178:	4798      	blx	r3
 800d17a:	e7dc      	b.n	800d136 <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800d17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d0d9      	beq.n	800d136 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800d182:	4630      	mov	r0, r6
 800d184:	4798      	blx	r3
 800d186:	e7d6      	b.n	800d136 <LmHandlerPackagesNotify+0x12>
                    break;
                }
            }
        }
    }
}
 800d188:	bd70      	pop	{r4, r5, r6, pc}
 800d18a:	bf00      	nop
 800d18c:	200008ec 	.word	0x200008ec

0800d190 <MlmeIndication>:
{
 800d190:	b510      	push	{r4, lr}
 800d192:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 800d194:	4b14      	ldr	r3, [pc, #80]	; (800d1e8 <MlmeIndication+0x58>)
 800d196:	2200      	movs	r2, #0
 800d198:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800d19a:	7842      	ldrb	r2, [r0, #1]
 800d19c:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800d19e:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800d1a2:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d1a4:	f9b1 2000 	ldrsh.w	r2, [r1]
 800d1a8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d1aa:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800d1ae:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d1b0:	78ca      	ldrb	r2, [r1, #3]
 800d1b2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800d1b4:	6842      	ldr	r2, [r0, #4]
 800d1b6:	60da      	str	r2, [r3, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800d1b8:	7803      	ldrb	r3, [r0, #0]
 800d1ba:	2b0a      	cmp	r3, #10
 800d1bc:	d007      	beq.n	800d1ce <MlmeIndication+0x3e>
 800d1be:	2b0e      	cmp	r3, #14
 800d1c0:	d005      	beq.n	800d1ce <MlmeIndication+0x3e>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800d1c2:	4b0a      	ldr	r3, [pc, #40]	; (800d1ec <MlmeIndication+0x5c>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c8:	4907      	ldr	r1, [pc, #28]	; (800d1e8 <MlmeIndication+0x58>)
 800d1ca:	2000      	movs	r0, #0
 800d1cc:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800d1ce:	4621      	mov	r1, r4
 800d1d0:	2003      	movs	r0, #3
 800d1d2:	f7ff ffa7 	bl	800d124 <LmHandlerPackagesNotify>
    switch( mlmeIndication->MlmeIndication )
 800d1d6:	7823      	ldrb	r3, [r4, #0]
 800d1d8:	2b06      	cmp	r3, #6
 800d1da:	d000      	beq.n	800d1de <MlmeIndication+0x4e>
}
 800d1dc:	bd10      	pop	{r4, pc}
            IsUplinkTxPending = true;
 800d1de:	4b04      	ldr	r3, [pc, #16]	; (800d1f0 <MlmeIndication+0x60>)
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	701a      	strb	r2, [r3, #0]
}
 800d1e4:	e7fa      	b.n	800d1dc <MlmeIndication+0x4c>
 800d1e6:	bf00      	nop
 800d1e8:	200000a0 	.word	0x200000a0
 800d1ec:	200008e8 	.word	0x200008e8
 800d1f0:	200008e4 	.word	0x200008e4

0800d1f4 <McpsConfirm>:
{
 800d1f4:	b510      	push	{r4, lr}
 800d1f6:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 800d1f8:	480c      	ldr	r0, [pc, #48]	; (800d22c <McpsConfirm+0x38>)
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 800d1fe:	7863      	ldrb	r3, [r4, #1]
 800d200:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800d202:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800d206:	7283      	strb	r3, [r0, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800d208:	68e3      	ldr	r3, [r4, #12]
 800d20a:	60c3      	str	r3, [r0, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800d20c:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800d210:	7603      	strb	r3, [r0, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800d212:	6923      	ldr	r3, [r4, #16]
 800d214:	7643      	strb	r3, [r0, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800d216:	7923      	ldrb	r3, [r4, #4]
 800d218:	7243      	strb	r3, [r0, #9]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800d21a:	4b05      	ldr	r3, [pc, #20]	; (800d230 <McpsConfirm+0x3c>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d220:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800d222:	4621      	mov	r1, r4
 800d224:	2000      	movs	r0, #0
 800d226:	f7ff ff7d 	bl	800d124 <LmHandlerPackagesNotify>
}
 800d22a:	bd10      	pop	{r4, pc}
 800d22c:	200000b4 	.word	0x200000b4
 800d230:	200008e8 	.word	0x200008e8

0800d234 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800d234:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d236:	2400      	movs	r4, #0
 800d238:	e001      	b.n	800d23e <LmHandlerPackageIsTxPending+0xa>
 800d23a:	3401      	adds	r4, #1
 800d23c:	b264      	sxtb	r4, r4
 800d23e:	2c04      	cmp	r4, #4
 800d240:	dc0a      	bgt.n	800d258 <LmHandlerPackageIsTxPending+0x24>
    {
        if( LmHandlerPackages[i] != NULL )
 800d242:	4b07      	ldr	r3, [pc, #28]	; (800d260 <LmHandlerPackageIsTxPending+0x2c>)
 800d244:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d0f6      	beq.n	800d23a <LmHandlerPackageIsTxPending+0x6>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	4798      	blx	r3
 800d250:	4603      	mov	r3, r0
 800d252:	2800      	cmp	r0, #0
 800d254:	d0f1      	beq.n	800d23a <LmHandlerPackageIsTxPending+0x6>
 800d256:	e000      	b.n	800d25a <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	bd10      	pop	{r4, pc}
 800d25e:	bf00      	nop
 800d260:	200008ec 	.word	0x200008ec

0800d264 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800d264:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d266:	2400      	movs	r4, #0
 800d268:	e001      	b.n	800d26e <LmHandlerPackagesProcess+0xa>
 800d26a:	3401      	adds	r4, #1
 800d26c:	b264      	sxtb	r4, r4
 800d26e:	2c04      	cmp	r4, #4
 800d270:	dc12      	bgt.n	800d298 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d272:	4b0a      	ldr	r3, [pc, #40]	; (800d29c <LmHandlerPackagesProcess+0x38>)
 800d274:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d0f6      	beq.n	800d26a <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d27c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0f3      	beq.n	800d26a <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d282:	b2e0      	uxtb	r0, r4
 800d284:	f7ff ff3e 	bl	800d104 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d288:	2800      	cmp	r0, #0
 800d28a:	d0ee      	beq.n	800d26a <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 800d28c:	4b03      	ldr	r3, [pc, #12]	; (800d29c <LmHandlerPackagesProcess+0x38>)
 800d28e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d292:	691b      	ldr	r3, [r3, #16]
 800d294:	4798      	blx	r3
 800d296:	e7e8      	b.n	800d26a <LmHandlerPackagesProcess+0x6>
        }
    }
}
 800d298:	bd38      	pop	{r3, r4, r5, pc}
 800d29a:	bf00      	nop
 800d29c:	200008ec 	.word	0x200008ec

0800d2a0 <LmHandlerJoin>:
{
 800d2a0:	b510      	push	{r4, lr}
 800d2a2:	b08e      	sub	sp, #56	; 0x38
 800d2a4:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d2ac:	4b26      	ldr	r3, [pc, #152]	; (800d348 <LmHandlerJoin+0xa8>)
 800d2ae:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d2b2:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if ( mode == ACTIVATION_TYPE_OTAA )
 800d2b6:	2802      	cmp	r0, #2
 800d2b8:	d021      	beq.n	800d2fe <LmHandlerJoin+0x5e>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d2ba:	2101      	movs	r1, #1
 800d2bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d2c0:	4b22      	ldr	r3, [pc, #136]	; (800d34c <LmHandlerJoin+0xac>)
 800d2c2:	7199      	strb	r1, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800d2c4:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	7159      	strb	r1, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800d2ca:	71dc      	strb	r4, [r3, #7]
        if (CtxRestoreDone == false)
 800d2cc:	4b20      	ldr	r3, [pc, #128]	; (800d350 <LmHandlerJoin+0xb0>)
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	b1f3      	cbz	r3, 800d310 <LmHandlerJoin+0x70>
        LoRaMacStart();
 800d2d2:	f003 fa4d 	bl	8010770 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d2dc:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d2e0:	4668      	mov	r0, sp
 800d2e2:	f003 fc4d 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800d2e6:	4b1a      	ldr	r3, [pc, #104]	; (800d350 <LmHandlerJoin+0xb0>)
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	b103      	cbz	r3, 800d2ee <LmHandlerJoin+0x4e>
 800d2ec:	b114      	cbz	r4, 800d2f4 <LmHandlerJoin+0x54>
        LoRaMacMlmeRequest( &mlmeReq );
 800d2ee:	a809      	add	r0, sp, #36	; 0x24
 800d2f0:	f003 fecc 	bl	801108c <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800d2f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d2f6:	4b17      	ldr	r3, [pc, #92]	; (800d354 <LmHandlerJoin+0xb4>)
 800d2f8:	601a      	str	r2, [r3, #0]
}
 800d2fa:	b00e      	add	sp, #56	; 0x38
 800d2fc:	bd10      	pop	{r4, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d2fe:	2202      	movs	r2, #2
 800d300:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d304:	4b11      	ldr	r3, [pc, #68]	; (800d34c <LmHandlerJoin+0xac>)
 800d306:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800d308:	71d9      	strb	r1, [r3, #7]
        LoRaMacStart();
 800d30a:	f003 fa31 	bl	8010770 <LoRaMacStart>
 800d30e:	e7ea      	b.n	800d2e6 <LmHandlerJoin+0x46>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800d310:	231f      	movs	r3, #31
 800d312:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800d316:	f88d 2004 	strb.w	r2, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d31a:	4668      	mov	r0, sp
 800d31c:	f003 fc30 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800d320:	2320      	movs	r3, #32
 800d322:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800d326:	4b08      	ldr	r3, [pc, #32]	; (800d348 <LmHandlerJoin+0xa8>)
 800d328:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d32c:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d330:	4668      	mov	r0, sp
 800d332:	f003 fc25 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800d336:	2329      	movs	r3, #41	; 0x29
 800d338:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800d33c:	4b06      	ldr	r3, [pc, #24]	; (800d358 <LmHandlerJoin+0xb8>)
 800d33e:	9301      	str	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800d340:	4668      	mov	r0, sp
 800d342:	f003 fc1d 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
 800d346:	e7c4      	b.n	800d2d2 <LmHandlerJoin+0x32>
 800d348:	20000900 	.word	0x20000900
 800d34c:	20000098 	.word	0x20000098
 800d350:	200008de 	.word	0x200008de
 800d354:	200008e0 	.word	0x200008e0
 800d358:	01000400 	.word	0x01000400

0800d35c <LmHandlerDeviceTimeReq>:
{
 800d35c:	b500      	push	{lr}
 800d35e:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 800d360:	2309      	movs	r3, #9
 800d362:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800d366:	a801      	add	r0, sp, #4
 800d368:	f003 fe90 	bl	801108c <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800d36c:	9a05      	ldr	r2, [sp, #20]
 800d36e:	4b04      	ldr	r3, [pc, #16]	; (800d380 <LmHandlerDeviceTimeReq+0x24>)
 800d370:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800d372:	b910      	cbnz	r0, 800d37a <LmHandlerDeviceTimeReq+0x1e>
}
 800d374:	b007      	add	sp, #28
 800d376:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800d37a:	f04f 30ff 	mov.w	r0, #4294967295
 800d37e:	e7f9      	b.n	800d374 <LmHandlerDeviceTimeReq+0x18>
 800d380:	200008e0 	.word	0x200008e0

0800d384 <LmHandlerGetDutyCycleWaitTime>:
}
 800d384:	4b01      	ldr	r3, [pc, #4]	; (800d38c <LmHandlerGetDutyCycleWaitTime+0x8>)
 800d386:	6818      	ldr	r0, [r3, #0]
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop
 800d38c:	200008e0 	.word	0x200008e0

0800d390 <LmHandlerJoinStatus>:
{
 800d390:	b500      	push	{lr}
 800d392:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d394:	2301      	movs	r3, #1
 800d396:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800d39a:	a801      	add	r0, sp, #4
 800d39c:	f003 faa2 	bl	80108e4 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 800d3a0:	b920      	cbnz	r0, 800d3ac <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d3a2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800d3a6:	b110      	cbz	r0, 800d3ae <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 800d3a8:	2001      	movs	r0, #1
 800d3aa:	e000      	b.n	800d3ae <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 800d3ac:	2000      	movs	r0, #0
}
 800d3ae:	b00b      	add	sp, #44	; 0x2c
 800d3b0:	f85d fb04 	ldr.w	pc, [sp], #4

0800d3b4 <LmHandlerSend>:
{
 800d3b4:	b570      	push	{r4, r5, r6, lr}
 800d3b6:	b086      	sub	sp, #24
 800d3b8:	4604      	mov	r4, r0
 800d3ba:	460d      	mov	r5, r1
 800d3bc:	4616      	mov	r6, r2
    if (LoRaMacIsBusy() == true)
 800d3be:	f002 ff91 	bl	80102e4 <LoRaMacIsBusy>
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	d164      	bne.n	800d490 <LmHandlerSend+0xdc>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800d3c6:	f7ff ffe3 	bl	800d390 <LmHandlerJoinStatus>
 800d3ca:	2801      	cmp	r0, #1
 800d3cc:	d137      	bne.n	800d43e <LmHandlerSend+0x8a>
    TxParams.MsgType = isTxConfirmed;
 800d3ce:	4b33      	ldr	r3, [pc, #204]	; (800d49c <LmHandlerSend+0xe8>)
 800d3d0:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800d3d2:	3d00      	subs	r5, #0
 800d3d4:	bf18      	it	ne
 800d3d6:	2501      	movne	r5, #1
 800d3d8:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800d3dc:	4b30      	ldr	r3, [pc, #192]	; (800d4a0 <LmHandlerSend+0xec>)
 800d3de:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d3e2:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800d3e6:	4669      	mov	r1, sp
 800d3e8:	7860      	ldrb	r0, [r4, #1]
 800d3ea:	f003 fa0f 	bl	801080c <LoRaMacQueryTxPossible>
 800d3ee:	b370      	cbz	r0, 800d44e <LmHandlerSend+0x9a>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800d3f6:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800d3f8:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800d3fc:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 800d400:	4b26      	ldr	r3, [pc, #152]	; (800d49c <LmHandlerSend+0xe8>)
 800d402:	f103 0c10 	add.w	ip, r3, #16
 800d406:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d40a:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800d40e:	4a24      	ldr	r2, [pc, #144]	; (800d4a0 <LmHandlerSend+0xec>)
 800d410:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800d414:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800d416:	4631      	mov	r1, r6
 800d418:	a801      	add	r0, sp, #4
 800d41a:	f003 ff31 	bl	8011280 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800d41e:	9a05      	ldr	r2, [sp, #20]
 800d420:	4b20      	ldr	r3, [pc, #128]	; (800d4a4 <LmHandlerSend+0xf0>)
 800d422:	601a      	str	r2, [r3, #0]
    switch (status)
 800d424:	2811      	cmp	r0, #17
 800d426:	d830      	bhi.n	800d48a <LmHandlerSend+0xd6>
 800d428:	e8df f000 	tbb	[pc, r0]
 800d42c:	2f2f1c21 	.word	0x2f2f1c21
 800d430:	352f2f2f 	.word	0x352f2f2f
 800d434:	2c2f2f2f 	.word	0x2c2f2f2f
 800d438:	1c1c2f2f 	.word	0x1c1c2f2f
 800d43c:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800d43e:	4b1a      	ldr	r3, [pc, #104]	; (800d4a8 <LmHandlerSend+0xf4>)
 800d440:	79d9      	ldrb	r1, [r3, #7]
 800d442:	7998      	ldrb	r0, [r3, #6]
 800d444:	f7ff ff2c 	bl	800d2a0 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d448:	f06f 0502 	mvn.w	r5, #2
 800d44c:	e00c      	b.n	800d468 <LmHandlerSend+0xb4>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800d44e:	7823      	ldrb	r3, [r4, #0]
 800d450:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800d454:	7863      	ldrb	r3, [r4, #1]
 800d456:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800d45a:	6863      	ldr	r3, [r4, #4]
 800d45c:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d45e:	f04f 35ff 	mov.w	r5, #4294967295
 800d462:	e7cd      	b.n	800d400 <LmHandlerSend+0x4c>
    switch (status)
 800d464:	f06f 0501 	mvn.w	r5, #1
}
 800d468:	4628      	mov	r0, r5
 800d46a:	b006      	add	sp, #24
 800d46c:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 800d46e:	4b0f      	ldr	r3, [pc, #60]	; (800d4ac <LmHandlerSend+0xf8>)
 800d470:	2200      	movs	r2, #0
 800d472:	701a      	strb	r2, [r3, #0]
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800d474:	f115 0f07 	cmn.w	r5, #7
 800d478:	d0f6      	beq.n	800d468 <LmHandlerSend+0xb4>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d47a:	2500      	movs	r5, #0
 800d47c:	e7f4      	b.n	800d468 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800d47e:	f06f 0504 	mvn.w	r5, #4
            break;
 800d482:	e7f1      	b.n	800d468 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800d484:	f06f 0505 	mvn.w	r5, #5
            break;
 800d488:	e7ee      	b.n	800d468 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d48a:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 800d48e:	e7eb      	b.n	800d468 <LmHandlerSend+0xb4>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d490:	f06f 0501 	mvn.w	r5, #1
 800d494:	e7e8      	b.n	800d468 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d496:	f06f 0502 	mvn.w	r5, #2
 800d49a:	e7e5      	b.n	800d468 <LmHandlerSend+0xb4>
 800d49c:	200000b4 	.word	0x200000b4
 800d4a0:	20000900 	.word	0x20000900
 800d4a4:	200008e0 	.word	0x200008e0
 800d4a8:	20000098 	.word	0x20000098
 800d4ac:	200008e4 	.word	0x200008e4

0800d4b0 <LmHandlerProcess>:
{
 800d4b0:	b500      	push	{lr}
 800d4b2:	b083      	sub	sp, #12
    LoRaMacProcess( );
 800d4b4:	f002 ff30 	bl	8010318 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800d4b8:	f7ff fed4 	bl	800d264 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 800d4bc:	f7ff feba 	bl	800d234 <LmHandlerPackageIsTxPending>
 800d4c0:	b910      	cbnz	r0, 800d4c8 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 800d4c2:	4b0b      	ldr	r3, [pc, #44]	; (800d4f0 <LmHandlerProcess+0x40>)
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	b913      	cbnz	r3, 800d4ce <LmHandlerProcess+0x1e>
}
 800d4c8:	b003      	add	sp, #12
 800d4ca:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f88d 2000 	strb.w	r2, [sp]
 800d4d4:	f88d 2001 	strb.w	r2, [sp, #1]
 800d4d8:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800d4da:	4b06      	ldr	r3, [pc, #24]	; (800d4f4 <LmHandlerProcess+0x44>)
 800d4dc:	78d9      	ldrb	r1, [r3, #3]
 800d4de:	4668      	mov	r0, sp
 800d4e0:	f7ff ff68 	bl	800d3b4 <LmHandlerSend>
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	d1ef      	bne.n	800d4c8 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 800d4e8:	4b01      	ldr	r3, [pc, #4]	; (800d4f0 <LmHandlerProcess+0x40>)
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	701a      	strb	r2, [r3, #0]
 800d4ee:	e7eb      	b.n	800d4c8 <LmHandlerProcess+0x18>
 800d4f0:	200008e4 	.word	0x200008e4
 800d4f4:	20000900 	.word	0x20000900

0800d4f8 <LmHandlerRequestClass>:
{
 800d4f8:	b510      	push	{r4, lr}
 800d4fa:	b08a      	sub	sp, #40	; 0x28
 800d4fc:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 800d4fe:	f002 fef1 	bl	80102e4 <LoRaMacIsBusy>
 800d502:	2800      	cmp	r0, #0
 800d504:	d136      	bne.n	800d574 <LmHandlerRequestClass+0x7c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800d506:	f7ff ff43 	bl	800d390 <LmHandlerJoinStatus>
 800d50a:	2801      	cmp	r0, #1
 800d50c:	d135      	bne.n	800d57a <LmHandlerRequestClass+0x82>
    mibReq.Type = MIB_DEVICE_CLASS;
 800d50e:	2300      	movs	r3, #0
 800d510:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d514:	a801      	add	r0, sp, #4
 800d516:	f003 f9e5 	bl	80108e4 <LoRaMacMibGetRequestConfirm>
 800d51a:	bb88      	cbnz	r0, 800d580 <LmHandlerRequestClass+0x88>
    currentClass = mibReq.Param.Class;
 800d51c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 800d520:	42a3      	cmp	r3, r4
 800d522:	d030      	beq.n	800d586 <LmHandlerRequestClass+0x8e>
        switch( newClass )
 800d524:	2c01      	cmp	r4, #1
 800d526:	d030      	beq.n	800d58a <LmHandlerRequestClass+0x92>
 800d528:	2c02      	cmp	r4, #2
 800d52a:	d014      	beq.n	800d556 <LmHandlerRequestClass+0x5e>
 800d52c:	b114      	cbz	r4, 800d534 <LmHandlerRequestClass+0x3c>
 800d52e:	2000      	movs	r0, #0
}
 800d530:	b00a      	add	sp, #40	; 0x28
 800d532:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 800d534:	b90b      	cbnz	r3, 800d53a <LmHandlerRequestClass+0x42>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d536:	2000      	movs	r0, #0
 800d538:	e7fa      	b.n	800d530 <LmHandlerRequestClass+0x38>
                    mibReq.Param.Class = newClass;
 800d53a:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d53e:	a801      	add	r0, sp, #4
 800d540:	f003 fb1e 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
 800d544:	bb20      	cbnz	r0, 800d590 <LmHandlerRequestClass+0x98>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800d546:	4b19      	ldr	r3, [pc, #100]	; (800d5ac <LmHandlerRequestClass+0xb4>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d54c:	b31b      	cbz	r3, 800d596 <LmHandlerRequestClass+0x9e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800d54e:	4620      	mov	r0, r4
 800d550:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d552:	2000      	movs	r0, #0
 800d554:	e7ec      	b.n	800d530 <LmHandlerRequestClass+0x38>
                if( currentClass != CLASS_A )
 800d556:	bb03      	cbnz	r3, 800d59a <LmHandlerRequestClass+0xa2>
                    mibReq.Param.Class = newClass;
 800d558:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d55c:	a801      	add	r0, sp, #4
 800d55e:	f003 fb0f 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
 800d562:	b9e8      	cbnz	r0, 800d5a0 <LmHandlerRequestClass+0xa8>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800d564:	4b11      	ldr	r3, [pc, #68]	; (800d5ac <LmHandlerRequestClass+0xb4>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d56a:	b1e3      	cbz	r3, 800d5a6 <LmHandlerRequestClass+0xae>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800d56c:	4620      	mov	r0, r4
 800d56e:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d570:	2000      	movs	r0, #0
 800d572:	e7dd      	b.n	800d530 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d574:	f06f 0001 	mvn.w	r0, #1
 800d578:	e7da      	b.n	800d530 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d57a:	f06f 0002 	mvn.w	r0, #2
 800d57e:	e7d7      	b.n	800d530 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_ERROR;
 800d580:	f04f 30ff 	mov.w	r0, #4294967295
 800d584:	e7d4      	b.n	800d530 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d586:	2000      	movs	r0, #0
 800d588:	e7d2      	b.n	800d530 <LmHandlerRequestClass+0x38>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800d58a:	f04f 30ff 	mov.w	r0, #4294967295
 800d58e:	e7cf      	b.n	800d530 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800d590:	f04f 30ff 	mov.w	r0, #4294967295
 800d594:	e7cc      	b.n	800d530 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d596:	2000      	movs	r0, #0
 800d598:	e7ca      	b.n	800d530 <LmHandlerRequestClass+0x38>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800d59a:	f04f 30ff 	mov.w	r0, #4294967295
 800d59e:	e7c7      	b.n	800d530 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800d5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a4:	e7c4      	b.n	800d530 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d5a6:	2000      	movs	r0, #0
 800d5a8:	e7c2      	b.n	800d530 <LmHandlerRequestClass+0x38>
 800d5aa:	bf00      	nop
 800d5ac:	200008e8 	.word	0x200008e8

0800d5b0 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 800d5b0:	b170      	cbz	r0, 800d5d0 <LmHandlerGetCurrentClass+0x20>
{
 800d5b2:	b510      	push	{r4, lr}
 800d5b4:	b08a      	sub	sp, #40	; 0x28
 800d5b6:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800d5be:	a801      	add	r0, sp, #4
 800d5c0:	f003 f990 	bl	80108e4 <LoRaMacMibGetRequestConfirm>
 800d5c4:	b938      	cbnz	r0, 800d5d6 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800d5c6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d5ca:	7023      	strb	r3, [r4, #0]
}
 800d5cc:	b00a      	add	sp, #40	; 0x28
 800d5ce:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800d5d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d5d4:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800d5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5da:	e7f7      	b.n	800d5cc <LmHandlerGetCurrentClass+0x1c>

0800d5dc <McpsIndication>:
{
 800d5dc:	b530      	push	{r4, r5, lr}
 800d5de:	b085      	sub	sp, #20
 800d5e0:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	f88d 2007 	strb.w	r2, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 800d5e8:	491d      	ldr	r1, [pc, #116]	; (800d660 <McpsIndication+0x84>)
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 800d5ee:	7842      	ldrb	r2, [r0, #1]
 800d5f0:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800d5f2:	bb5a      	cbnz	r2, 800d64c <McpsIndication+0x70>
 800d5f4:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800d5f6:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800d5fa:	720a      	strb	r2, [r1, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d5fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d600:	724a      	strb	r2, [r1, #9]
    RxParams.Snr = rxStatus->Snr;
 800d602:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d606:	728a      	strb	r2, [r1, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d608:	78db      	ldrb	r3, [r3, #3]
 800d60a:	740b      	strb	r3, [r1, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800d60c:	6903      	ldr	r3, [r0, #16]
 800d60e:	60cb      	str	r3, [r1, #12]
    appData.Port = mcpsIndication->Port;
 800d610:	78c3      	ldrb	r3, [r0, #3]
 800d612:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 800d616:	7b03      	ldrb	r3, [r0, #12]
 800d618:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 800d61c:	6883      	ldr	r3, [r0, #8]
 800d61e:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800d620:	4d10      	ldr	r5, [pc, #64]	; (800d664 <McpsIndication+0x88>)
 800d622:	682b      	ldr	r3, [r5, #0]
 800d624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d626:	a802      	add	r0, sp, #8
 800d628:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800d62a:	682b      	ldr	r3, [r5, #0]
 800d62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d62e:	b113      	cbz	r3, 800d636 <McpsIndication+0x5a>
 800d630:	7e22      	ldrb	r2, [r4, #24]
 800d632:	b102      	cbz	r2, 800d636 <McpsIndication+0x5a>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800d634:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800d636:	4621      	mov	r1, r4
 800d638:	2001      	movs	r0, #1
 800d63a:	f7ff fd73 	bl	800d124 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 800d63e:	f10d 0007 	add.w	r0, sp, #7
 800d642:	f7ff ffb5 	bl	800d5b0 <LmHandlerGetCurrentClass>
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800d646:	7963      	ldrb	r3, [r4, #5]
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d001      	beq.n	800d650 <McpsIndication+0x74>
}
 800d64c:	b005      	add	sp, #20
 800d64e:	bd30      	pop	{r4, r5, pc}
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800d650:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d1f9      	bne.n	800d64c <McpsIndication+0x70>
        IsUplinkTxPending = true;
 800d658:	4b03      	ldr	r3, [pc, #12]	; (800d668 <McpsIndication+0x8c>)
 800d65a:	2201      	movs	r2, #1
 800d65c:	701a      	strb	r2, [r3, #0]
 800d65e:	e7f5      	b.n	800d64c <McpsIndication+0x70>
 800d660:	200000a0 	.word	0x200000a0
 800d664:	200008e8 	.word	0x200008e8
 800d668:	200008e4 	.word	0x200008e4

0800d66c <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 800d66c:	b180      	cbz	r0, 800d690 <LmHandlerGetTxDatarate+0x24>
{
 800d66e:	b510      	push	{r4, lr}
 800d670:	b08a      	sub	sp, #40	; 0x28
 800d672:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800d674:	2320      	movs	r3, #32
 800d676:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800d67a:	a801      	add	r0, sp, #4
 800d67c:	f003 f932 	bl	80108e4 <LoRaMacMibGetRequestConfirm>
 800d680:	b948      	cbnz	r0, 800d696 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800d682:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 800d686:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800d688:	4a04      	ldr	r2, [pc, #16]	; (800d69c <LmHandlerGetTxDatarate+0x30>)
 800d68a:	7113      	strb	r3, [r2, #4]
}
 800d68c:	b00a      	add	sp, #40	; 0x28
 800d68e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800d690:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d694:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800d696:	f04f 30ff 	mov.w	r0, #4294967295
 800d69a:	e7f7      	b.n	800d68c <LmHandlerGetTxDatarate+0x20>
 800d69c:	20000900 	.word	0x20000900

0800d6a0 <MlmeConfirm>:
{
 800d6a0:	b510      	push	{r4, lr}
 800d6a2:	b08a      	sub	sp, #40	; 0x28
 800d6a4:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 800d6a6:	4824      	ldr	r0, [pc, #144]	; (800d738 <MlmeConfirm+0x98>)
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 800d6ac:	7863      	ldrb	r3, [r4, #1]
 800d6ae:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800d6b0:	4b22      	ldr	r3, [pc, #136]	; (800d73c <MlmeConfirm+0x9c>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6b6:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	2002      	movs	r0, #2
 800d6bc:	f7ff fd32 	bl	800d124 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 800d6c0:	7823      	ldrb	r3, [r4, #0]
 800d6c2:	2b04      	cmp	r3, #4
 800d6c4:	d029      	beq.n	800d71a <MlmeConfirm+0x7a>
 800d6c6:	2b0b      	cmp	r3, #11
 800d6c8:	d02f      	beq.n	800d72a <MlmeConfirm+0x8a>
 800d6ca:	2b01      	cmp	r3, #1
 800d6cc:	d001      	beq.n	800d6d2 <MlmeConfirm+0x32>
}
 800d6ce:	b00a      	add	sp, #40	; 0x28
 800d6d0:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 800d6d2:	2306      	movs	r3, #6
 800d6d4:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d6d8:	a801      	add	r0, sp, #4
 800d6da:	f003 f903 	bl	80108e4 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d6de:	9a02      	ldr	r2, [sp, #8]
 800d6e0:	4b17      	ldr	r3, [pc, #92]	; (800d740 <MlmeConfirm+0xa0>)
 800d6e2:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800d6e4:	4817      	ldr	r0, [pc, #92]	; (800d744 <MlmeConfirm+0xa4>)
 800d6e6:	f7ff ffc1 	bl	800d66c <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d6ea:	7863      	ldrb	r3, [r4, #1]
 800d6ec:	b16b      	cbz	r3, 800d70a <MlmeConfirm+0x6a>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800d6ee:	4b16      	ldr	r3, [pc, #88]	; (800d748 <MlmeConfirm+0xa8>)
 800d6f0:	22ff      	movs	r2, #255	; 0xff
 800d6f2:	715a      	strb	r2, [r3, #5]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d6f4:	4b11      	ldr	r3, [pc, #68]	; (800d73c <MlmeConfirm+0x9c>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fa:	4813      	ldr	r0, [pc, #76]	; (800d748 <MlmeConfirm+0xa8>)
 800d6fc:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d6fe:	7863      	ldrb	r3, [r4, #1]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d1e4      	bne.n	800d6ce <MlmeConfirm+0x2e>
                SecureElementPrintSessionKeys();
 800d704:	f007 fe72 	bl	80153ec <SecureElementPrintSessionKeys>
        break;
 800d708:	e7e1      	b.n	800d6ce <MlmeConfirm+0x2e>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d70a:	4b0f      	ldr	r3, [pc, #60]	; (800d748 <MlmeConfirm+0xa8>)
 800d70c:	2200      	movs	r2, #0
 800d70e:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800d710:	4b0e      	ldr	r3, [pc, #56]	; (800d74c <MlmeConfirm+0xac>)
 800d712:	7858      	ldrb	r0, [r3, #1]
 800d714:	f7ff fef0 	bl	800d4f8 <LmHandlerRequestClass>
 800d718:	e7ec      	b.n	800d6f4 <MlmeConfirm+0x54>
            RxParams.LinkCheck = true;
 800d71a:	4b0d      	ldr	r3, [pc, #52]	; (800d750 <MlmeConfirm+0xb0>)
 800d71c:	2201      	movs	r2, #1
 800d71e:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800d720:	7a22      	ldrb	r2, [r4, #8]
 800d722:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800d724:	7a62      	ldrb	r2, [r4, #9]
 800d726:	74da      	strb	r2, [r3, #19]
        break;
 800d728:	e7d1      	b.n	800d6ce <MlmeConfirm+0x2e>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d72a:	7863      	ldrb	r3, [r4, #1]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d0ce      	beq.n	800d6ce <MlmeConfirm+0x2e>
                LmHandlerDeviceTimeReq( );
 800d730:	f7ff fe14 	bl	800d35c <LmHandlerDeviceTimeReq>
}
 800d734:	e7cb      	b.n	800d6ce <MlmeConfirm+0x2e>
 800d736:	bf00      	nop
 800d738:	200000b4 	.word	0x200000b4
 800d73c:	200008e8 	.word	0x200008e8
 800d740:	20000080 	.word	0x20000080
 800d744:	2000009c 	.word	0x2000009c
 800d748:	20000098 	.word	0x20000098
 800d74c:	20000900 	.word	0x20000900
 800d750:	200000a0 	.word	0x200000a0

0800d754 <LmHandlerSetSystemMaxRxError>:
{
 800d754:	b500      	push	{lr}
 800d756:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d758:	2323      	movs	r3, #35	; 0x23
 800d75a:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800d75e:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d760:	a801      	add	r0, sp, #4
 800d762:	f003 fa0d 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
 800d766:	b910      	cbnz	r0, 800d76e <LmHandlerSetSystemMaxRxError+0x1a>
}
 800d768:	b00b      	add	sp, #44	; 0x2c
 800d76a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800d76e:	f04f 30ff 	mov.w	r0, #4294967295
 800d772:	e7f9      	b.n	800d768 <LmHandlerSetSystemMaxRxError+0x14>

0800d774 <LmHandlerConfigure>:
{
 800d774:	b570      	push	{r4, r5, r6, lr}
 800d776:	b090      	sub	sp, #64	; 0x40
 800d778:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800d77a:	4c78      	ldr	r4, [pc, #480]	; (800d95c <LmHandlerConfigure+0x1e8>)
 800d77c:	2214      	movs	r2, #20
 800d77e:	4620      	mov	r0, r4
 800d780:	f009 ff5a 	bl	8017638 <UTIL_MEM_cpy_8>
    IsUplinkTxPending = false;
 800d784:	4b76      	ldr	r3, [pc, #472]	; (800d960 <LmHandlerConfigure+0x1ec>)
 800d786:	2200      	movs	r2, #0
 800d788:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 800d78a:	f7f5 fc3b 	bl	8003004 <LoraInfo_GetPtr>
    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800d78e:	7822      	ldrb	r2, [r4, #0]
 800d790:	2301      	movs	r3, #1
 800d792:	4093      	lsls	r3, r2
 800d794:	6841      	ldr	r1, [r0, #4]
 800d796:	420b      	tst	r3, r1
 800d798:	d106      	bne.n	800d7a8 <LmHandlerConfigure+0x34>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800d79a:	4b72      	ldr	r3, [pc, #456]	; (800d964 <LmHandlerConfigure+0x1f0>)
 800d79c:	2201      	movs	r2, #1
 800d79e:	2100      	movs	r1, #0
 800d7a0:	4608      	mov	r0, r1
 800d7a2:	f009 fe33 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800d7a6:	e7fe      	b.n	800d7a6 <LmHandlerConfigure+0x32>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800d7a8:	496f      	ldr	r1, [pc, #444]	; (800d968 <LmHandlerConfigure+0x1f4>)
 800d7aa:	4870      	ldr	r0, [pc, #448]	; (800d96c <LmHandlerConfigure+0x1f8>)
 800d7ac:	f002 fdfe 	bl	80103ac <LoRaMacInitialization>
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	f040 80cf 	bne.w	800d954 <LmHandlerConfigure+0x1e0>
    mibReq.Type = MIB_NVM_CTXS;
 800d7b6:	2327      	movs	r3, #39	; 0x27
 800d7b8:	f88d 301c 	strb.w	r3, [sp, #28]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d7bc:	a807      	add	r0, sp, #28
 800d7be:	f003 f9df 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	f040 8087 	bne.w	800d8d6 <LmHandlerConfigure+0x162>
        CtxRestoreDone = true;
 800d7c8:	4b69      	ldr	r3, [pc, #420]	; (800d970 <LmHandlerConfigure+0x1fc>)
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	701a      	strb	r2, [r3, #0]
    if (CtxRestoreDone == true)
 800d7ce:	4b68      	ldr	r3, [pc, #416]	; (800d970 <LmHandlerConfigure+0x1fc>)
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f000 80a8 	beq.w	800d928 <LmHandlerConfigure+0x1b4>
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800d7d8:	4b66      	ldr	r3, [pc, #408]	; (800d974 <LmHandlerConfigure+0x200>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	69db      	ldr	r3, [r3, #28]
 800d7de:	b10b      	cbz	r3, 800d7e4 <LmHandlerConfigure+0x70>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800d7e0:	2000      	movs	r0, #0
 800d7e2:	4798      	blx	r3
        mibReq.Type = MIB_DEV_ADDR;
 800d7e4:	2306      	movs	r3, #6
 800d7e6:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800d7ea:	a807      	add	r0, sp, #28
 800d7ec:	f003 f87a 	bl	80108e4 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d7f0:	9a08      	ldr	r2, [sp, #32]
 800d7f2:	4b61      	ldr	r3, [pc, #388]	; (800d978 <LmHandlerConfigure+0x204>)
 800d7f4:	615a      	str	r2, [r3, #20]
        mibReq.Type = MIB_NVM_CTXS;
 800d7f6:	2327      	movs	r3, #39	; 0x27
 800d7f8:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800d7fc:	a807      	add	r0, sp, #28
 800d7fe:	f003 f871 	bl	80108e4 <LoRaMacMibGetRequestConfirm>
        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800d802:	9a08      	ldr	r2, [sp, #32]
 800d804:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 800d808:	4b54      	ldr	r3, [pc, #336]	; (800d95c <LmHandlerConfigure+0x1e8>)
 800d80a:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800d80c:	f892 1104 	ldrb.w	r1, [r2, #260]	; 0x104
 800d810:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800d812:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 800d816:	709a      	strb	r2, [r3, #2]
    mibReq.Type = MIB_DEV_EUI;
 800d818:	2502      	movs	r5, #2
 800d81a:	f88d 501c 	strb.w	r5, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d81e:	a807      	add	r0, sp, #28
 800d820:	f003 f860 	bl	80108e4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800d824:	4c54      	ldr	r4, [pc, #336]	; (800d978 <LmHandlerConfigure+0x204>)
 800d826:	2208      	movs	r2, #8
 800d828:	9908      	ldr	r1, [sp, #32]
 800d82a:	4620      	mov	r0, r4
 800d82c:	f007 ff45 	bl	80156ba <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 800d830:	2303      	movs	r3, #3
 800d832:	f88d 301c 	strb.w	r3, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d836:	a807      	add	r0, sp, #28
 800d838:	f003 f854 	bl	80108e4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800d83c:	2208      	movs	r2, #8
 800d83e:	9908      	ldr	r1, [sp, #32]
 800d840:	18a0      	adds	r0, r4, r2
 800d842:	f007 ff3a 	bl	80156ba <memcpy1>
    SecureElementPrintKeys();
 800d846:	f007 fd71 	bl	801532c <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800d84a:	7de3      	ldrb	r3, [r4, #23]
 800d84c:	7da2      	ldrb	r2, [r4, #22]
 800d84e:	7d61      	ldrb	r1, [r4, #21]
 800d850:	7d20      	ldrb	r0, [r4, #20]
 800d852:	9003      	str	r0, [sp, #12]
 800d854:	9102      	str	r1, [sp, #8]
 800d856:	9201      	str	r2, [sp, #4]
 800d858:	9300      	str	r3, [sp, #0]
 800d85a:	4b48      	ldr	r3, [pc, #288]	; (800d97c <LmHandlerConfigure+0x208>)
 800d85c:	2200      	movs	r2, #0
 800d85e:	4611      	mov	r1, r2
 800d860:	4628      	mov	r0, r5
 800d862:	f009 fdd3 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800d866:	260f      	movs	r6, #15
 800d868:	f88d 601c 	strb.w	r6, [sp, #28]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d86c:	2301      	movs	r3, #1
 800d86e:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d872:	a807      	add	r0, sp, #28
 800d874:	f003 f984 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800d878:	2310      	movs	r3, #16
 800d87a:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d87e:	2500      	movs	r5, #0
 800d880:	f88d 5020 	strb.w	r5, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d884:	a807      	add	r0, sp, #28
 800d886:	f003 f97b 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 800d88a:	2304      	movs	r3, #4
 800d88c:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d890:	4c32      	ldr	r4, [pc, #200]	; (800d95c <LmHandlerConfigure+0x1e8>)
 800d892:	78a3      	ldrb	r3, [r4, #2]
 800d894:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d898:	a807      	add	r0, sp, #28
 800d89a:	f003 f971 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800d89e:	2338      	movs	r3, #56	; 0x38
 800d8a0:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800d8a4:	6923      	ldr	r3, [r4, #16]
 800d8a6:	9308      	str	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d8a8:	a807      	add	r0, sp, #28
 800d8aa:	f003 f969 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d8ae:	f88d 6014 	strb.w	r6, [sp, #20]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800d8b2:	a905      	add	r1, sp, #20
 800d8b4:	7820      	ldrb	r0, [r4, #0]
 800d8b6:	f004 fe6d 	bl	8012594 <RegionGetPhyParam>
 800d8ba:	9004      	str	r0, [sp, #16]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800d8bc:	1b43      	subs	r3, r0, r5
 800d8be:	bf18      	it	ne
 800d8c0:	2301      	movne	r3, #1
 800d8c2:	71a3      	strb	r3, [r4, #6]
    LmHandlerSetSystemMaxRxError( 20 );
 800d8c4:	2014      	movs	r0, #20
 800d8c6:	f7ff ff45 	bl	800d754 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800d8ca:	79a0      	ldrb	r0, [r4, #6]
 800d8cc:	f003 fdc6 	bl	801145c <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 800d8d0:	4628      	mov	r0, r5
}
 800d8d2:	b010      	add	sp, #64	; 0x40
 800d8d4:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800d8d6:	2328      	movs	r3, #40	; 0x28
 800d8d8:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800d8dc:	4b25      	ldr	r3, [pc, #148]	; (800d974 <LmHandlerConfigure+0x200>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	691b      	ldr	r3, [r3, #16]
 800d8e2:	b14b      	cbz	r3, 800d8f8 <LmHandlerConfigure+0x184>
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d8e4:	a807      	add	r0, sp, #28
 800d8e6:	f002 fffd 	bl	80108e4 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800d8ea:	4b22      	ldr	r3, [pc, #136]	; (800d974 <LmHandlerConfigure+0x200>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	691b      	ldr	r3, [r3, #16]
 800d8f0:	f240 518c 	movw	r1, #1420	; 0x58c
 800d8f4:	9808      	ldr	r0, [sp, #32]
 800d8f6:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800d8f8:	2327      	movs	r3, #39	; 0x27
 800d8fa:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d8fe:	a807      	add	r0, sp, #28
 800d900:	f003 f93e 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
 800d904:	2800      	cmp	r0, #0
 800d906:	f47f af62 	bne.w	800d7ce <LmHandlerConfigure+0x5a>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d90a:	2301      	movs	r3, #1
 800d90c:	f88d 301c 	strb.w	r3, [sp, #28]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d910:	a807      	add	r0, sp, #28
 800d912:	f002 ffe7 	bl	80108e4 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800d916:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f43f af57 	beq.w	800d7ce <LmHandlerConfigure+0x5a>
                CtxRestoreDone = true;
 800d920:	4b13      	ldr	r3, [pc, #76]	; (800d970 <LmHandlerConfigure+0x1fc>)
 800d922:	2201      	movs	r2, #1
 800d924:	701a      	strb	r2, [r3, #0]
 800d926:	e752      	b.n	800d7ce <LmHandlerConfigure+0x5a>
        mibReq.Type = MIB_NET_ID;
 800d928:	2305      	movs	r3, #5
 800d92a:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800d92e:	2300      	movs	r3, #0
 800d930:	9308      	str	r3, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800d932:	a807      	add	r0, sp, #28
 800d934:	f003 f924 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800d938:	4b0e      	ldr	r3, [pc, #56]	; (800d974 <LmHandlerConfigure+0x200>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	4798      	blx	r3
 800d940:	4b0d      	ldr	r3, [pc, #52]	; (800d978 <LmHandlerConfigure+0x204>)
 800d942:	6158      	str	r0, [r3, #20]
        mibReq.Type = MIB_DEV_ADDR;
 800d944:	2306      	movs	r3, #6
 800d946:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800d94a:	9008      	str	r0, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800d94c:	a807      	add	r0, sp, #28
 800d94e:	f003 f917 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
 800d952:	e761      	b.n	800d818 <LmHandlerConfigure+0xa4>
        return LORAMAC_HANDLER_ERROR;
 800d954:	f04f 30ff 	mov.w	r0, #4294967295
 800d958:	e7bb      	b.n	800d8d2 <LmHandlerConfigure+0x15e>
 800d95a:	bf00      	nop
 800d95c:	20000900 	.word	0x20000900
 800d960:	200008e4 	.word	0x200008e4
 800d964:	0801bc38 	.word	0x0801bc38
 800d968:	20000924 	.word	0x20000924
 800d96c:	20000938 	.word	0x20000938
 800d970:	200008de 	.word	0x200008de
 800d974:	200008e8 	.word	0x200008e8
 800d978:	20000080 	.word	0x20000080
 800d97c:	0801bc84 	.word	0x0801bc84

0800d980 <LmHandlerPackageRegister>:
    switch( id )
 800d980:	b9f0      	cbnz	r0, 800d9c0 <LmHandlerPackageRegister+0x40>
{
 800d982:	b538      	push	{r3, r4, r5, lr}
 800d984:	460c      	mov	r4, r1
 800d986:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 800d988:	f000 fb76 	bl	800e078 <LmhpCompliancePackageFactory>
    if( package != NULL )
 800d98c:	b1a8      	cbz	r0, 800d9ba <LmHandlerPackageRegister+0x3a>
        LmHandlerPackages[id] = package;
 800d98e:	4a0e      	ldr	r2, [pc, #56]	; (800d9c8 <LmHandlerPackageRegister+0x48>)
 800d990:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d994:	4a0d      	ldr	r2, [pc, #52]	; (800d9cc <LmHandlerPackageRegister+0x4c>)
 800d996:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800d998:	4a0d      	ldr	r2, [pc, #52]	; (800d9d0 <LmHandlerPackageRegister+0x50>)
 800d99a:	6812      	ldr	r2, [r2, #0]
 800d99c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800d99e:	6301      	str	r1, [r0, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800d9a0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800d9a2:	6341      	str	r1, [r0, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d9a4:	490b      	ldr	r1, [pc, #44]	; (800d9d4 <LmHandlerPackageRegister+0x54>)
 800d9a6:	62c1      	str	r1, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800d9a8:	6992      	ldr	r2, [r2, #24]
 800d9aa:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800d9ac:	6843      	ldr	r3, [r0, #4]
 800d9ae:	22f2      	movs	r2, #242	; 0xf2
 800d9b0:	4909      	ldr	r1, [pc, #36]	; (800d9d8 <LmHandlerPackageRegister+0x58>)
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800d9b6:	2000      	movs	r0, #0
}
 800d9b8:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 800d9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d9be:	e7fb      	b.n	800d9b8 <LmHandlerPackageRegister+0x38>
 800d9c0:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop
 800d9c8:	200008ec 	.word	0x200008ec
 800d9cc:	0800d2a1 	.word	0x0800d2a1
 800d9d0:	200008e8 	.word	0x200008e8
 800d9d4:	0800d35d 	.word	0x0800d35d
 800d9d8:	200007ec 	.word	0x200007ec

0800d9dc <LmHandlerInit>:
{
 800d9dc:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 800d9de:	4b13      	ldr	r3, [pc, #76]	; (800da2c <LmHandlerInit+0x50>)
 800d9e0:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d9e2:	4b13      	ldr	r3, [pc, #76]	; (800da30 <LmHandlerInit+0x54>)
 800d9e4:	4a13      	ldr	r2, [pc, #76]	; (800da34 <LmHandlerInit+0x58>)
 800d9e6:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d9e8:	4a13      	ldr	r2, [pc, #76]	; (800da38 <LmHandlerInit+0x5c>)
 800d9ea:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d9ec:	4a13      	ldr	r2, [pc, #76]	; (800da3c <LmHandlerInit+0x60>)
 800d9ee:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d9f0:	4a13      	ldr	r2, [pc, #76]	; (800da40 <LmHandlerInit+0x64>)
 800d9f2:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800d9f4:	6802      	ldr	r2, [r0, #0]
 800d9f6:	4b13      	ldr	r3, [pc, #76]	; (800da44 <LmHandlerInit+0x68>)
 800d9f8:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800d9fa:	6842      	ldr	r2, [r0, #4]
 800d9fc:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800d9fe:	6882      	ldr	r2, [r0, #8]
 800da00:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800da02:	4a11      	ldr	r2, [pc, #68]	; (800da48 <LmHandlerInit+0x6c>)
 800da04:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800da06:	6982      	ldr	r2, [r0, #24]
 800da08:	611a      	str	r2, [r3, #16]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800da0a:	4b10      	ldr	r3, [pc, #64]	; (800da4c <LmHandlerInit+0x70>)
 800da0c:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800da0e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800da10:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800da12:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800da14:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800da16:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da18:	60da      	str	r2, [r3, #12]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800da1a:	4619      	mov	r1, r3
 800da1c:	2000      	movs	r0, #0
 800da1e:	f7ff ffaf 	bl	800d980 <LmHandlerPackageRegister>
 800da22:	b900      	cbnz	r0, 800da26 <LmHandlerInit+0x4a>
}
 800da24:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 800da26:	f04f 30ff 	mov.w	r0, #4294967295
 800da2a:	e7fb      	b.n	800da24 <LmHandlerInit+0x48>
 800da2c:	200008e8 	.word	0x200008e8
 800da30:	20000938 	.word	0x20000938
 800da34:	0800d1f5 	.word	0x0800d1f5
 800da38:	0800d5dd 	.word	0x0800d5dd
 800da3c:	0800d6a1 	.word	0x0800d6a1
 800da40:	0800d191 	.word	0x0800d191
 800da44:	20000924 	.word	0x20000924
 800da48:	0801253d 	.word	0x0801253d
 800da4c:	20000914 	.word	0x20000914

0800da50 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
    if (featureVersion == NULL)
 800da50:	b161      	cbz	r1, 800da6c <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch(lmhType)
 800da52:	b118      	cbz	r0, 800da5c <LmHandlerGetVersion+0xc>
 800da54:	2801      	cmp	r0, #1
 800da56:	d005      	beq.n	800da64 <LmHandlerGetVersion+0x14>
 800da58:	2000      	movs	r0, #0
 800da5a:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 800da5c:	4a05      	ldr	r2, [pc, #20]	; (800da74 <LmHandlerGetVersion+0x24>)
 800da5e:	600a      	str	r2, [r1, #0]
            break;
        default:
          break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 800da60:	2000      	movs	r0, #0
            break;
 800da62:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 800da64:	4a04      	ldr	r2, [pc, #16]	; (800da78 <LmHandlerGetVersion+0x28>)
 800da66:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800da68:	2000      	movs	r0, #0
            break;
 800da6a:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800da6c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	01000400 	.word	0x01000400
 800da78:	02010001 	.word	0x02010001

0800da7c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800da7c:	b508      	push	{r3, lr}
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800da7e:	f003 fd01 	bl	8011484 <LoRaMacDeInitialization>
 800da82:	b900      	cbnz	r0, 800da86 <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800da84:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800da86:	f06f 0001 	mvn.w	r0, #1
 800da8a:	e7fb      	b.n	800da84 <LmHandlerStop+0x8>

0800da8c <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800da8c:	b508      	push	{r3, lr}
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800da8e:	f002 fe8b 	bl	80107a8 <LoRaMacHalt>
 800da92:	b900      	cbnz	r0, 800da96 <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800da94:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800da96:	f06f 0001 	mvn.w	r0, #1
 800da9a:	e7fb      	b.n	800da94 <LmHandlerHalt+0x8>

0800da9c <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800da9c:	b510      	push	{r4, lr}
 800da9e:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 800daa0:	f7ff fff4 	bl	800da8c <LmHandlerHalt>

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800daa4:	4604      	mov	r4, r0
 800daa6:	b148      	cbz	r0, 800dabc <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800daa8:	b92c      	cbnz	r4, 800dab6 <LmHandlerNvmDataStore+0x1a>
 800daaa:	4b18      	ldr	r3, [pc, #96]	; (800db0c <LmHandlerNvmDataStore+0x70>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	69db      	ldr	r3, [r3, #28]
 800dab0:	b10b      	cbz	r3, 800dab6 <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800dab2:	2001      	movs	r0, #1
 800dab4:	4798      	blx	r3
    }

    return lmhStatus;
}
 800dab6:	4620      	mov	r0, r4
 800dab8:	b00a      	add	sp, #40	; 0x28
 800daba:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 800dabc:	f004 fd46 	bl	801254c <NvmDataMgmtStoreBegin>
        if (status == NVM_DATA_NO_UPDATED_DATA)
 800dac0:	f110 0f02 	cmn.w	r0, #2
 800dac4:	d012      	beq.n	800daec <LmHandlerNvmDataStore+0x50>
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800dac6:	b9d0      	cbnz	r0, 800dafe <LmHandlerNvmDataStore+0x62>
 800dac8:	4b10      	ldr	r3, [pc, #64]	; (800db0c <LmHandlerNvmDataStore+0x70>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	695b      	ldr	r3, [r3, #20]
 800dace:	b1cb      	cbz	r3, 800db04 <LmHandlerNvmDataStore+0x68>
          mibReq.Type = MIB_NVM_CTXS;
 800dad0:	2327      	movs	r3, #39	; 0x27
 800dad2:	f88d 3004 	strb.w	r3, [sp, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800dad6:	a801      	add	r0, sp, #4
 800dad8:	f002 ff04 	bl	80108e4 <LoRaMacMibGetRequestConfirm>
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800dadc:	4b0b      	ldr	r3, [pc, #44]	; (800db0c <LmHandlerNvmDataStore+0x70>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	695b      	ldr	r3, [r3, #20]
 800dae2:	f44f 61b2 	mov.w	r1, #1424	; 0x590
 800dae6:	9802      	ldr	r0, [sp, #8]
 800dae8:	4798      	blx	r3
 800daea:	e001      	b.n	800daf0 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800daec:	f06f 0407 	mvn.w	r4, #7
        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800daf0:	f004 fd3c 	bl	801256c <NvmDataMgmtStoreEnd>
 800daf4:	2800      	cmp	r0, #0
 800daf6:	d0d7      	beq.n	800daa8 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800daf8:	f04f 34ff 	mov.w	r4, #4294967295
 800dafc:	e7db      	b.n	800dab6 <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800dafe:	f04f 34ff 	mov.w	r4, #4294967295
 800db02:	e7f5      	b.n	800daf0 <LmHandlerNvmDataStore+0x54>
 800db04:	f04f 34ff 	mov.w	r4, #4294967295
 800db08:	e7f2      	b.n	800daf0 <LmHandlerNvmDataStore+0x54>
 800db0a:	bf00      	nop
 800db0c:	200008e8 	.word	0x200008e8

0800db10 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 800db10:	4b01      	ldr	r3, [pc, #4]	; (800db18 <LmhpComplianceIsInitialized+0x8>)
 800db12:	7818      	ldrb	r0, [r3, #0]
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop
 800db18:	2000094c 	.word	0x2000094c

0800db1c <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 800db1c:	4b01      	ldr	r3, [pc, #4]	; (800db24 <LmhpComplianceIsTxPending+0x8>)
 800db1e:	7858      	ldrb	r0, [r3, #1]
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop
 800db24:	2000094c 	.word	0x2000094c

0800db28 <LmhpComplianceOnMlmeConfirm>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800db28:	4770      	bx	lr

0800db2a <LmhpComplianceOnMlmeIndication>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800db2a:	4770      	bx	lr

0800db2c <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800db2c:	b508      	push	{r3, lr}
    ComplianceTestState.IsTxPending = true;
 800db2e:	4b03      	ldr	r3, [pc, #12]	; (800db3c <OnProcessTimer+0x10>)
 800db30:	2201      	movs	r2, #1
 800db32:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800db34:	4b02      	ldr	r3, [pc, #8]	; (800db40 <OnProcessTimer+0x14>)
 800db36:	695b      	ldr	r3, [r3, #20]
 800db38:	4798      	blx	r3
}
 800db3a:	bd08      	pop	{r3, pc}
 800db3c:	2000094c 	.word	0x2000094c
 800db40:	200000d0 	.word	0x200000d0

0800db44 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 800db44:	4b8d      	ldr	r3, [pc, #564]	; (800dd7c <LmhpComplianceOnMcpsIndication+0x238>)
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	f000 81fd 	beq.w	800df48 <LmhpComplianceOnMcpsIndication+0x404>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800db4e:	78c3      	ldrb	r3, [r0, #3]
 800db50:	b90b      	cbnz	r3, 800db56 <LmhpComplianceOnMcpsIndication+0x12>
 800db52:	7b83      	ldrb	r3, [r0, #14]
 800db54:	b11b      	cbz	r3, 800db5e <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 800db56:	4a89      	ldr	r2, [pc, #548]	; (800dd7c <LmhpComplianceOnMcpsIndication+0x238>)
 800db58:	8a13      	ldrh	r3, [r2, #16]
 800db5a:	3301      	adds	r3, #1
 800db5c:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 800db5e:	7b43      	ldrb	r3, [r0, #13]
 800db60:	2b00      	cmp	r3, #0
 800db62:	f000 81f1 	beq.w	800df48 <LmhpComplianceOnMcpsIndication+0x404>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800db66:	78c3      	ldrb	r3, [r0, #3]
 800db68:	2be0      	cmp	r3, #224	; 0xe0
 800db6a:	f040 81ed 	bne.w	800df48 <LmhpComplianceOnMcpsIndication+0x404>
{
 800db6e:	b570      	push	{r4, r5, r6, lr}
 800db70:	b094      	sub	sp, #80	; 0x50
    ComplianceTestState.DataBufferSize = 0;
 800db72:	4b82      	ldr	r3, [pc, #520]	; (800dd7c <LmhpComplianceOnMcpsIndication+0x238>)
 800db74:	2200      	movs	r2, #0
 800db76:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 800db78:	6884      	ldr	r4, [r0, #8]
 800db7a:	7823      	ldrb	r3, [r4, #0]
 800db7c:	2b7f      	cmp	r3, #127	; 0x7f
 800db7e:	f200 8093 	bhi.w	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
 800db82:	e8df f013 	tbh	[pc, r3, lsl #1]
 800db86:	0080      	.short	0x0080
 800db88:	00a600a1 	.word	0x00a600a1
 800db8c:	00b400ac 	.word	0x00b400ac
 800db90:	00c800c1 	.word	0x00c800c1
 800db94:	00f200e1 	.word	0x00f200e1
 800db98:	0133011f 	.word	0x0133011f
 800db9c:	00910091 	.word	0x00910091
 800dba0:	00910091 	.word	0x00910091
 800dba4:	00910091 	.word	0x00910091
 800dba8:	00910091 	.word	0x00910091
 800dbac:	00910091 	.word	0x00910091
 800dbb0:	00910091 	.word	0x00910091
 800dbb4:	00910091 	.word	0x00910091
 800dbb8:	00910091 	.word	0x00910091
 800dbbc:	00910091 	.word	0x00910091
 800dbc0:	00910091 	.word	0x00910091
 800dbc4:	01370091 	.word	0x01370091
 800dbc8:	0142013e 	.word	0x0142013e
 800dbcc:	00910091 	.word	0x00910091
 800dbd0:	00910091 	.word	0x00910091
 800dbd4:	00910091 	.word	0x00910091
 800dbd8:	00910091 	.word	0x00910091
 800dbdc:	00910091 	.word	0x00910091
 800dbe0:	00910091 	.word	0x00910091
 800dbe4:	00910091 	.word	0x00910091
 800dbe8:	00910091 	.word	0x00910091
 800dbec:	00910091 	.word	0x00910091
 800dbf0:	00910091 	.word	0x00910091
 800dbf4:	00910091 	.word	0x00910091
 800dbf8:	00910091 	.word	0x00910091
 800dbfc:	00910091 	.word	0x00910091
 800dc00:	00910091 	.word	0x00910091
 800dc04:	00910091 	.word	0x00910091
 800dc08:	00910091 	.word	0x00910091
 800dc0c:	00910091 	.word	0x00910091
 800dc10:	00910091 	.word	0x00910091
 800dc14:	00910091 	.word	0x00910091
 800dc18:	00910091 	.word	0x00910091
 800dc1c:	00910091 	.word	0x00910091
 800dc20:	00910091 	.word	0x00910091
 800dc24:	00910091 	.word	0x00910091
 800dc28:	00910091 	.word	0x00910091
 800dc2c:	00910091 	.word	0x00910091
 800dc30:	00910091 	.word	0x00910091
 800dc34:	00910091 	.word	0x00910091
 800dc38:	00910091 	.word	0x00910091
 800dc3c:	00910091 	.word	0x00910091
 800dc40:	00910091 	.word	0x00910091
 800dc44:	00910091 	.word	0x00910091
 800dc48:	00910091 	.word	0x00910091
 800dc4c:	00910091 	.word	0x00910091
 800dc50:	00910091 	.word	0x00910091
 800dc54:	00910091 	.word	0x00910091
 800dc58:	00910091 	.word	0x00910091
 800dc5c:	00910091 	.word	0x00910091
 800dc60:	00910091 	.word	0x00910091
 800dc64:	00910091 	.word	0x00910091
 800dc68:	00910091 	.word	0x00910091
 800dc6c:	00910091 	.word	0x00910091
 800dc70:	00910091 	.word	0x00910091
 800dc74:	00910091 	.word	0x00910091
 800dc78:	00910091 	.word	0x00910091
 800dc7c:	00910091 	.word	0x00910091
 800dc80:	016e014d 	.word	0x016e014d
 800dc84:	017c      	.short	0x017c
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800dc86:	4b3d      	ldr	r3, [pc, #244]	; (800dd7c <LmhpComplianceOnMcpsIndication+0x238>)
 800dc88:	68da      	ldr	r2, [r3, #12]
 800dc8a:	2101      	movs	r1, #1
 800dc8c:	7299      	strb	r1, [r3, #10]
 800dc8e:	2000      	movs	r0, #0
 800dc90:	7010      	strb	r0, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800dc92:	68d8      	ldr	r0, [r3, #12]
 800dc94:	7a9a      	ldrb	r2, [r3, #10]
 800dc96:	1854      	adds	r4, r2, r1
 800dc98:	729c      	strb	r4, [r3, #10]
 800dc9a:	2406      	movs	r4, #6
 800dc9c:	5484      	strb	r4, [r0, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800dc9e:	68d8      	ldr	r0, [r3, #12]
 800dca0:	7a9a      	ldrb	r2, [r3, #10]
 800dca2:	1854      	adds	r4, r2, r1
 800dca4:	729c      	strb	r4, [r3, #10]
 800dca6:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 800dca8:	4b34      	ldr	r3, [pc, #208]	; (800dd7c <LmhpComplianceOnMcpsIndication+0x238>)
 800dcaa:	7a9b      	ldrb	r3, [r3, #10]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f000 8144 	beq.w	800df3a <LmhpComplianceOnMcpsIndication+0x3f6>
        TimerSetValue( &ProcessTimer, 1000 );
 800dcb2:	4c33      	ldr	r4, [pc, #204]	; (800dd80 <LmhpComplianceOnMcpsIndication+0x23c>)
 800dcb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dcb8:	4620      	mov	r0, r4
 800dcba:	f009 ff9b 	bl	8017bf4 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f009 ff52 	bl	8017b68 <UTIL_TIMER_Start>
}
 800dcc4:	b014      	add	sp, #80	; 0x50
 800dcc6:	bd70      	pop	{r4, r5, r6, pc}
        ComplianceTestState.IsResetCmdPending = true;
 800dcc8:	4b2c      	ldr	r3, [pc, #176]	; (800dd7c <LmhpComplianceOnMcpsIndication+0x238>)
 800dcca:	2201      	movs	r2, #1
 800dccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800dcd0:	e7ea      	b.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800dcd2:	4b2c      	ldr	r3, [pc, #176]	; (800dd84 <LmhpComplianceOnMcpsIndication+0x240>)
 800dcd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcd6:	2101      	movs	r1, #1
 800dcd8:	2002      	movs	r0, #2
 800dcda:	4798      	blx	r3
        break;
 800dcdc:	e7e4      	b.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800dcde:	7862      	ldrb	r2, [r4, #1]
 800dce0:	4b26      	ldr	r3, [pc, #152]	; (800dd7c <LmhpComplianceOnMcpsIndication+0x238>)
 800dce2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800dce6:	2201      	movs	r2, #1
 800dce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 800dcec:	e7dc      	b.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type            = MIB_ADR;
 800dcee:	2304      	movs	r3, #4
 800dcf0:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800dcf4:	7863      	ldrb	r3, [r4, #1]
 800dcf6:	3b00      	subs	r3, #0
 800dcf8:	bf18      	it	ne
 800dcfa:	2301      	movne	r3, #1
 800dcfc:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800dd00:	4668      	mov	r0, sp
 800dd02:	f002 ff3d 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
        break;
 800dd06:	e7cf      	b.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800dd08:	7860      	ldrb	r0, [r4, #1]
 800dd0a:	3800      	subs	r0, #0
 800dd0c:	bf18      	it	ne
 800dd0e:	2001      	movne	r0, #1
 800dd10:	f003 fba4 	bl	801145c <LoRaMacTestSetDutyCycleOn>
        break;
 800dd14:	e7c8      	b.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800dd16:	466d      	mov	r5, sp
 800dd18:	4e1b      	ldr	r6, [pc, #108]	; (800dd88 <LmhpComplianceOnMcpsIndication+0x244>)
 800dd1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dd1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dd20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd22:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800dd26:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800dd2a:	7863      	ldrb	r3, [r4, #1]
        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800dd2c:	2b0a      	cmp	r3, #10
 800dd2e:	d8bb      	bhi.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800dd30:	4a16      	ldr	r2, [pc, #88]	; (800dd8c <LmhpComplianceOnMcpsIndication+0x248>)
 800dd32:	6812      	ldr	r2, [r2, #0]
 800dd34:	6852      	ldr	r2, [r2, #4]
 800dd36:	2a00      	cmp	r2, #0
 800dd38:	d0b6      	beq.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800dd3a:	a914      	add	r1, sp, #80	; 0x50
 800dd3c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800dd40:	f853 0c50 	ldr.w	r0, [r3, #-80]
 800dd44:	4790      	blx	r2
        break;
 800dd46:	e7af      	b.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800dd48:	7862      	ldrb	r2, [r4, #1]
        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800dd4a:	1e53      	subs	r3, r2, #1
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d8aa      	bhi.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800dd52:	1e50      	subs	r0, r2, #1
 800dd54:	bf18      	it	ne
 800dd56:	2001      	movne	r0, #1
 800dd58:	4b08      	ldr	r3, [pc, #32]	; (800dd7c <LmhpComplianceOnMcpsIndication+0x238>)
 800dd5a:	7218      	strb	r0, [r3, #8]
            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800dd5c:	4b0b      	ldr	r3, [pc, #44]	; (800dd8c <LmhpComplianceOnMcpsIndication+0x248>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	689b      	ldr	r3, [r3, #8]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d0a0      	beq.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800dd66:	4798      	blx	r3
 800dd68:	e79e      	b.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800dd6a:	4b04      	ldr	r3, [pc, #16]	; (800dd7c <LmhpComplianceOnMcpsIndication+0x238>)
 800dd6c:	68da      	ldr	r2, [r3, #12]
 800dd6e:	2101      	movs	r1, #1
 800dd70:	7299      	strb	r1, [r3, #10]
 800dd72:	2308      	movs	r3, #8
 800dd74:	7013      	strb	r3, [r2, #0]
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800dd76:	460b      	mov	r3, r1
 800dd78:	e01b      	b.n	800ddb2 <LmhpComplianceOnMcpsIndication+0x26e>
 800dd7a:	bf00      	nop
 800dd7c:	2000094c 	.word	0x2000094c
 800dd80:	20000984 	.word	0x20000984
 800dd84:	200000d0 	.word	0x200000d0
 800dd88:	0801b230 	.word	0x0801b230
 800dd8c:	20000948 	.word	0x20000948
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800dd90:	6882      	ldr	r2, [r0, #8]
 800dd92:	f101 0c01 	add.w	ip, r1, #1
 800dd96:	5c52      	ldrb	r2, [r2, r1]
 800dd98:	496c      	ldr	r1, [pc, #432]	; (800df4c <LmhpComplianceOnMcpsIndication+0x408>)
 800dd9a:	68cd      	ldr	r5, [r1, #12]
 800dd9c:	7a8c      	ldrb	r4, [r1, #10]
 800dd9e:	f104 0e01 	add.w	lr, r4, #1
 800dda2:	f881 e00a 	strb.w	lr, [r1, #10]
 800dda6:	3201      	adds	r2, #1
 800dda8:	552a      	strb	r2, [r5, r4]
             i++ )
 800ddaa:	3301      	adds	r3, #1
 800ddac:	b2db      	uxtb	r3, r3
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800ddae:	fa5f f18c 	uxtb.w	r1, ip
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800ddb2:	4a66      	ldr	r2, [pc, #408]	; (800df4c <LmhpComplianceOnMcpsIndication+0x408>)
 800ddb4:	7a52      	ldrb	r2, [r2, #9]
 800ddb6:	7b04      	ldrb	r4, [r0, #12]
 800ddb8:	42a2      	cmp	r2, r4
 800ddba:	bf28      	it	cs
 800ddbc:	4622      	movcs	r2, r4
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d8e6      	bhi.n	800dd90 <LmhpComplianceOnMcpsIndication+0x24c>
 800ddc2:	e771      	b.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800ddc4:	4b61      	ldr	r3, [pc, #388]	; (800df4c <LmhpComplianceOnMcpsIndication+0x408>)
 800ddc6:	68da      	ldr	r2, [r3, #12]
 800ddc8:	2101      	movs	r1, #1
 800ddca:	7299      	strb	r1, [r3, #10]
 800ddcc:	2109      	movs	r1, #9
 800ddce:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800ddd0:	8a18      	ldrh	r0, [r3, #16]
 800ddd2:	68d9      	ldr	r1, [r3, #12]
 800ddd4:	7a9a      	ldrb	r2, [r3, #10]
 800ddd6:	1c54      	adds	r4, r2, #1
 800ddd8:	729c      	strb	r4, [r3, #10]
 800ddda:	5488      	strb	r0, [r1, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800dddc:	8a1a      	ldrh	r2, [r3, #16]
 800ddde:	68d8      	ldr	r0, [r3, #12]
 800dde0:	7a99      	ldrb	r1, [r3, #10]
 800dde2:	1c4c      	adds	r4, r1, #1
 800dde4:	729c      	strb	r4, [r3, #10]
 800dde6:	0a13      	lsrs	r3, r2, #8
 800dde8:	5443      	strb	r3, [r0, r1]
        break;
 800ddea:	e75d      	b.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.RxAppCnt = 0;
 800ddec:	4b57      	ldr	r3, [pc, #348]	; (800df4c <LmhpComplianceOnMcpsIndication+0x408>)
 800ddee:	2200      	movs	r2, #0
 800ddf0:	821a      	strh	r2, [r3, #16]
        break;
 800ddf2:	e759      	b.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        mlmeReq.Type = MLME_LINK_CHECK;
 800ddf4:	2304      	movs	r3, #4
 800ddf6:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMlmeRequest( &mlmeReq );
 800ddfa:	4668      	mov	r0, sp
 800ddfc:	f003 f946 	bl	801108c <LoRaMacMlmeRequest>
        break;
 800de00:	e752      	b.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnDeviceTimeRequest( );
 800de02:	4b53      	ldr	r3, [pc, #332]	; (800df50 <LmhpComplianceOnMcpsIndication+0x40c>)
 800de04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de06:	4798      	blx	r3
        break;
 800de08:	e74e      	b.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800de0a:	7860      	ldrb	r0, [r4, #1]
 800de0c:	4b4f      	ldr	r3, [pc, #316]	; (800df4c <LmhpComplianceOnMcpsIndication+0x408>)
 800de0e:	7558      	strb	r0, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800de10:	4b50      	ldr	r3, [pc, #320]	; (800df54 <LmhpComplianceOnMcpsIndication+0x410>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	2b00      	cmp	r3, #0
 800de18:	f43f af46 	beq.w	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800de1c:	4798      	blx	r3
 800de1e:	e743      	b.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        if( mcpsIndication->BufferSize == 7 )
 800de20:	7b03      	ldrb	r3, [r0, #12]
 800de22:	2b07      	cmp	r3, #7
 800de24:	f47f af40 	bne.w	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
            mlmeReq.Type = MLME_TXCW;
 800de28:	2305      	movs	r3, #5
 800de2a:	f88d 3000 	strb.w	r3, [sp]
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800de2e:	7863      	ldrb	r3, [r4, #1]
 800de30:	78a2      	ldrb	r2, [r4, #2]
 800de32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            mlmeReq.Req.TxCw.Timeout =
 800de36:	f8ad 3004 	strh.w	r3, [sp, #4]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800de3a:	78e3      	ldrb	r3, [r4, #3]
 800de3c:	7922      	ldrb	r2, [r4, #4]
 800de3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800de42:	7962      	ldrb	r2, [r4, #5]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800de44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800de48:	2264      	movs	r2, #100	; 0x64
 800de4a:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800de4e:	9302      	str	r3, [sp, #8]
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800de50:	6883      	ldr	r3, [r0, #8]
 800de52:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800de56:	f88d 300c 	strb.w	r3, [sp, #12]
            LoRaMacMlmeRequest( &mlmeReq );
 800de5a:	4668      	mov	r0, sp
 800de5c:	f003 f916 	bl	801108c <LoRaMacMlmeRequest>
        break;
 800de60:	e722      	b.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800de62:	2339      	movs	r3, #57	; 0x39
 800de64:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        mibReq.Param.IsCertPortOn = false;
 800de68:	2300      	movs	r3, #0
 800de6a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        LoRaMacMibSetRequestConfirm( &mibReq );
 800de6e:	a80b      	add	r0, sp, #44	; 0x2c
 800de70:	f002 fe86 	bl	8010b80 <LoRaMacMibSetRequestConfirm>
        ComplianceTestState.IsResetCmdPending = true;
 800de74:	4b35      	ldr	r3, [pc, #212]	; (800df4c <LmhpComplianceOnMcpsIndication+0x408>)
 800de76:	2201      	movs	r2, #1
 800de78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800de7c:	e714      	b.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_LORAWAN_VERSION;
 800de7e:	232a      	movs	r3, #42	; 0x2a
 800de80:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800de84:	4668      	mov	r0, sp
 800de86:	f002 fd2d 	bl	80108e4 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800de8a:	9901      	ldr	r1, [sp, #4]
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800de8c:	9a02      	ldr	r2, [sp, #8]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800de8e:	4b2f      	ldr	r3, [pc, #188]	; (800df4c <LmhpComplianceOnMcpsIndication+0x408>)
 800de90:	68dc      	ldr	r4, [r3, #12]
 800de92:	7a98      	ldrb	r0, [r3, #10]
 800de94:	1c45      	adds	r5, r0, #1
 800de96:	729d      	strb	r5, [r3, #10]
 800de98:	257f      	movs	r5, #127	; 0x7f
 800de9a:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800de9c:	482d      	ldr	r0, [pc, #180]	; (800df54 <LmhpComplianceOnMcpsIndication+0x410>)
 800de9e:	6800      	ldr	r0, [r0, #0]
 800dea0:	68dd      	ldr	r5, [r3, #12]
 800dea2:	7a9c      	ldrb	r4, [r3, #10]
 800dea4:	1c66      	adds	r6, r4, #1
 800dea6:	729e      	strb	r6, [r3, #10]
 800dea8:	78c6      	ldrb	r6, [r0, #3]
 800deaa:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800deac:	68dd      	ldr	r5, [r3, #12]
 800deae:	7a9c      	ldrb	r4, [r3, #10]
 800deb0:	1c66      	adds	r6, r4, #1
 800deb2:	729e      	strb	r6, [r3, #10]
 800deb4:	7886      	ldrb	r6, [r0, #2]
 800deb6:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800deb8:	68dd      	ldr	r5, [r3, #12]
 800deba:	7a9c      	ldrb	r4, [r3, #10]
 800debc:	1c66      	adds	r6, r4, #1
 800debe:	729e      	strb	r6, [r3, #10]
 800dec0:	7846      	ldrb	r6, [r0, #1]
 800dec2:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800dec4:	68dd      	ldr	r5, [r3, #12]
 800dec6:	7a9c      	ldrb	r4, [r3, #10]
 800dec8:	1c66      	adds	r6, r4, #1
 800deca:	729e      	strb	r6, [r3, #10]
 800decc:	7800      	ldrb	r0, [r0, #0]
 800dece:	5528      	strb	r0, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800ded0:	68dc      	ldr	r4, [r3, #12]
 800ded2:	7a98      	ldrb	r0, [r3, #10]
 800ded4:	1c45      	adds	r5, r0, #1
 800ded6:	729d      	strb	r5, [r3, #10]
 800ded8:	f3c1 6507 	ubfx	r5, r1, #24, #8
 800dedc:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800dede:	68dc      	ldr	r4, [r3, #12]
 800dee0:	7a98      	ldrb	r0, [r3, #10]
 800dee2:	1c45      	adds	r5, r0, #1
 800dee4:	729d      	strb	r5, [r3, #10]
 800dee6:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800deea:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800deec:	68dc      	ldr	r4, [r3, #12]
 800deee:	7a98      	ldrb	r0, [r3, #10]
 800def0:	1c45      	adds	r5, r0, #1
 800def2:	729d      	strb	r5, [r3, #10]
 800def4:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800def8:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800defa:	68dc      	ldr	r4, [r3, #12]
 800defc:	7a98      	ldrb	r0, [r3, #10]
 800defe:	1c45      	adds	r5, r0, #1
 800df00:	729d      	strb	r5, [r3, #10]
 800df02:	5421      	strb	r1, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800df04:	68d8      	ldr	r0, [r3, #12]
 800df06:	7a99      	ldrb	r1, [r3, #10]
 800df08:	1c4c      	adds	r4, r1, #1
 800df0a:	729c      	strb	r4, [r3, #10]
 800df0c:	f3c2 6407 	ubfx	r4, r2, #24, #8
 800df10:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800df12:	68d8      	ldr	r0, [r3, #12]
 800df14:	7a99      	ldrb	r1, [r3, #10]
 800df16:	1c4c      	adds	r4, r1, #1
 800df18:	729c      	strb	r4, [r3, #10]
 800df1a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800df1e:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800df20:	68d8      	ldr	r0, [r3, #12]
 800df22:	7a99      	ldrb	r1, [r3, #10]
 800df24:	1c4c      	adds	r4, r1, #1
 800df26:	729c      	strb	r4, [r3, #10]
 800df28:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800df2c:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800df2e:	68d8      	ldr	r0, [r3, #12]
 800df30:	7a99      	ldrb	r1, [r3, #10]
 800df32:	1c4c      	adds	r4, r1, #1
 800df34:	729c      	strb	r4, [r3, #10]
 800df36:	5442      	strb	r2, [r0, r1]
        break;
 800df38:	e6b6      	b.n	800dca8 <LmhpComplianceOnMcpsIndication+0x164>
        TimerStop(&ProcessTimer);
 800df3a:	4807      	ldr	r0, [pc, #28]	; (800df58 <LmhpComplianceOnMcpsIndication+0x414>)
 800df3c:	f009 fdba 	bl	8017ab4 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800df40:	4b02      	ldr	r3, [pc, #8]	; (800df4c <LmhpComplianceOnMcpsIndication+0x408>)
 800df42:	2200      	movs	r2, #0
 800df44:	705a      	strb	r2, [r3, #1]
 800df46:	e6bd      	b.n	800dcc4 <LmhpComplianceOnMcpsIndication+0x180>
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	2000094c 	.word	0x2000094c
 800df50:	200000d0 	.word	0x200000d0
 800df54:	20000948 	.word	0x20000948
 800df58:	20000984 	.word	0x20000984

0800df5c <LmhpComplianceProcess>:
{
 800df5c:	b530      	push	{r4, r5, lr}
 800df5e:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 800df60:	4b28      	ldr	r3, [pc, #160]	; (800e004 <LmhpComplianceProcess+0xa8>)
 800df62:	785b      	ldrb	r3, [r3, #1]
 800df64:	b993      	cbnz	r3, 800df8c <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800df66:	4b27      	ldr	r3, [pc, #156]	; (800e004 <LmhpComplianceProcess+0xa8>)
 800df68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d13f      	bne.n	800dff0 <LmhpComplianceProcess+0x94>
    if( ComplianceTestState.IsResetCmdPending == true )
 800df70:	4b24      	ldr	r3, [pc, #144]	; (800e004 <LmhpComplianceProcess+0xa8>)
 800df72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df76:	b13b      	cbz	r3, 800df88 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 800df78:	4b22      	ldr	r3, [pc, #136]	; (800e004 <LmhpComplianceProcess+0xa8>)
 800df7a:	2200      	movs	r2, #0
 800df7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if (CompliancePackage.OnSystemReset != NULL)
 800df80:	4b21      	ldr	r3, [pc, #132]	; (800e008 <LmhpComplianceProcess+0xac>)
 800df82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df84:	b103      	cbz	r3, 800df88 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 800df86:	4798      	blx	r3
}
 800df88:	b003      	add	sp, #12
 800df8a:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 800df8c:	f009 fd52 	bl	8017a34 <UTIL_TIMER_GetCurrentTime>
 800df90:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800df92:	4b1c      	ldr	r3, [pc, #112]	; (800e004 <LmhpComplianceProcess+0xa8>)
 800df94:	685d      	ldr	r5, [r3, #4]
 800df96:	f7ff f9f5 	bl	800d384 <LmHandlerGetDutyCycleWaitTime>
 800df9a:	4405      	add	r5, r0
 800df9c:	42a5      	cmp	r5, r4
 800df9e:	d2e7      	bcs.n	800df70 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 800dfa0:	4b18      	ldr	r3, [pc, #96]	; (800e004 <LmhpComplianceProcess+0xa8>)
 800dfa2:	7a9b      	ldrb	r3, [r3, #10]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d0e3      	beq.n	800df70 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData = {
 800dfa8:	22e0      	movs	r2, #224	; 0xe0
 800dfaa:	f88d 2000 	strb.w	r2, [sp]
 800dfae:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800dfb2:	4b14      	ldr	r3, [pc, #80]	; (800e004 <LmhpComplianceProcess+0xa8>)
 800dfb4:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData = {
 800dfb6:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800dfb8:	2201      	movs	r2, #1
 800dfba:	7a19      	ldrb	r1, [r3, #8]
 800dfbc:	4668      	mov	r0, sp
 800dfbe:	f7ff f9f9 	bl	800d3b4 <LmHandlerSend>
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800dfc2:	f110 0f02 	cmn.w	r0, #2
 800dfc6:	d009      	beq.n	800dfdc <LmhpComplianceProcess+0x80>
 800dfc8:	f110 0f06 	cmn.w	r0, #6
 800dfcc:	d006      	beq.n	800dfdc <LmhpComplianceProcess+0x80>
                    ComplianceTestState.IsTxPending = false;
 800dfce:	4b0d      	ldr	r3, [pc, #52]	; (800e004 <LmhpComplianceProcess+0xa8>)
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800dfd4:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 800dfd6:	4b0b      	ldr	r3, [pc, #44]	; (800e004 <LmhpComplianceProcess+0xa8>)
 800dfd8:	605c      	str	r4, [r3, #4]
 800dfda:	e7c9      	b.n	800df70 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1000 );
 800dfdc:	4d0b      	ldr	r5, [pc, #44]	; (800e00c <LmhpComplianceProcess+0xb0>)
 800dfde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	f009 fe06 	bl	8017bf4 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800dfe8:	4628      	mov	r0, r5
 800dfea:	f009 fdbd 	bl	8017b68 <UTIL_TIMER_Start>
 800dfee:	e7f2      	b.n	800dfd6 <LmhpComplianceProcess+0x7a>
            ComplianceTestState.IsClassReqCmdPending = false;
 800dff0:	4b04      	ldr	r3, [pc, #16]	; (800e004 <LmhpComplianceProcess+0xa8>)
 800dff2:	2200      	movs	r2, #0
 800dff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800dff8:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 800dffc:	f7ff fa7c 	bl	800d4f8 <LmHandlerRequestClass>
 800e000:	e7b6      	b.n	800df70 <LmhpComplianceProcess+0x14>
 800e002:	bf00      	nop
 800e004:	2000094c 	.word	0x2000094c
 800e008:	200000d0 	.word	0x200000d0
 800e00c:	20000984 	.word	0x20000984

0800e010 <LmhpComplianceInit>:
{
 800e010:	b530      	push	{r4, r5, lr}
 800e012:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800e014:	b188      	cbz	r0, 800e03a <LmhpComplianceInit+0x2a>
 800e016:	4603      	mov	r3, r0
 800e018:	b179      	cbz	r1, 800e03a <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800e01a:	4813      	ldr	r0, [pc, #76]	; (800e068 <LmhpComplianceInit+0x58>)
 800e01c:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800e01e:	4b13      	ldr	r3, [pc, #76]	; (800e06c <LmhpComplianceInit+0x5c>)
 800e020:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800e022:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 800e024:	2201      	movs	r2, #1
 800e026:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800e028:	2200      	movs	r2, #0
 800e02a:	9200      	str	r2, [sp, #0]
 800e02c:	4b10      	ldr	r3, [pc, #64]	; (800e070 <LmhpComplianceInit+0x60>)
 800e02e:	f04f 31ff 	mov.w	r1, #4294967295
 800e032:	4810      	ldr	r0, [pc, #64]	; (800e074 <LmhpComplianceInit+0x64>)
 800e034:	f009 fce0 	bl	80179f8 <UTIL_TIMER_Create>
 800e038:	e004      	b.n	800e044 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 800e03a:	2300      	movs	r3, #0
 800e03c:	4a0a      	ldr	r2, [pc, #40]	; (800e068 <LmhpComplianceInit+0x58>)
 800e03e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 800e040:	4a0a      	ldr	r2, [pc, #40]	; (800e06c <LmhpComplianceInit+0x5c>)
 800e042:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 800e044:	4c09      	ldr	r4, [pc, #36]	; (800e06c <LmhpComplianceInit+0x5c>)
 800e046:	2500      	movs	r5, #0
 800e048:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800e04a:	2220      	movs	r2, #32
 800e04c:	4629      	mov	r1, r5
 800e04e:	f104 0014 	add.w	r0, r4, #20
 800e052:	f007 fb4a 	bl	80156ea <memset1>
    ComplianceTestState.IsTxPending = false;
 800e056:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800e058:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800e05a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800e05e:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800e062:	b003      	add	sp, #12
 800e064:	bd30      	pop	{r4, r5, pc}
 800e066:	bf00      	nop
 800e068:	20000948 	.word	0x20000948
 800e06c:	2000094c 	.word	0x2000094c
 800e070:	0800db2d 	.word	0x0800db2d
 800e074:	20000984 	.word	0x20000984

0800e078 <LmhpCompliancePackageFactory>:
}
 800e078:	4800      	ldr	r0, [pc, #0]	; (800e07c <LmhpCompliancePackageFactory+0x4>)
 800e07a:	4770      	bx	lr
 800e07c:	200000d0 	.word	0x200000d0

0800e080 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 800e080:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800e082:	4a06      	ldr	r2, [pc, #24]	; (800e09c <OnRadioRxError+0x1c>)
 800e084:	7813      	ldrb	r3, [r2, #0]
 800e086:	f043 0304 	orr.w	r3, r3, #4
 800e08a:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e08c:	4b04      	ldr	r3, [pc, #16]	; (800e0a0 <OnRadioRxError+0x20>)
 800e08e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e092:	b113      	cbz	r3, 800e09a <OnRadioRxError+0x1a>
 800e094:	691b      	ldr	r3, [r3, #16]
 800e096:	b103      	cbz	r3, 800e09a <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e098:	4798      	blx	r3
    }
}
 800e09a:	bd08      	pop	{r3, pc}
 800e09c:	2000099c 	.word	0x2000099c
 800e0a0:	200009a0 	.word	0x200009a0

0800e0a4 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e0a4:	4b07      	ldr	r3, [pc, #28]	; (800e0c4 <UpdateRxSlotIdleState+0x20>)
 800e0a6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e0aa:	2b02      	cmp	r3, #2
 800e0ac:	d004      	beq.n	800e0b8 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e0ae:	4b06      	ldr	r3, [pc, #24]	; (800e0c8 <UpdateRxSlotIdleState+0x24>)
 800e0b0:	2206      	movs	r2, #6
 800e0b2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 800e0b6:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e0b8:	4b03      	ldr	r3, [pc, #12]	; (800e0c8 <UpdateRxSlotIdleState+0x24>)
 800e0ba:	2202      	movs	r2, #2
 800e0bc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop
 800e0c4:	20008000 	.word	0x20008000
 800e0c8:	200009a0 	.word	0x200009a0

0800e0cc <LoRaMacEnableRequests>:
    return true;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 800e0cc:	4b01      	ldr	r3, [pc, #4]	; (800e0d4 <LoRaMacEnableRequests+0x8>)
 800e0ce:	f883 0496 	strb.w	r0, [r3, #1174]	; 0x496
}
 800e0d2:	4770      	bx	lr
 800e0d4:	200009a0 	.word	0x200009a0

0800e0d8 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 800e0d8:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e0da:	4b15      	ldr	r3, [pc, #84]	; (800e130 <LoRaMacHandleIndicationEvents+0x58>)
 800e0dc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e0e0:	f013 0f08 	tst.w	r3, #8
 800e0e4:	d00e      	beq.n	800e104 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e0e6:	4812      	ldr	r0, [pc, #72]	; (800e130 <LoRaMacHandleIndicationEvents+0x58>)
 800e0e8:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 800e0ec:	f36f 03c3 	bfc	r3, #3, #1
 800e0f0:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e0f4:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800e0f8:	68db      	ldr	r3, [r3, #12]
 800e0fa:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 800e0fe:	f200 406c 	addw	r0, r0, #1132	; 0x46c
 800e102:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e104:	4b0a      	ldr	r3, [pc, #40]	; (800e130 <LoRaMacHandleIndicationEvents+0x58>)
 800e106:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e10a:	f013 0f02 	tst.w	r3, #2
 800e10e:	d00e      	beq.n	800e12e <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e110:	4807      	ldr	r0, [pc, #28]	; (800e130 <LoRaMacHandleIndicationEvents+0x58>)
 800e112:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 800e116:	f36f 0341 	bfc	r3, #1, #1
 800e11a:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e11e:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 800e128:	f200 4024 	addw	r0, r0, #1060	; 0x424
 800e12c:	4798      	blx	r3
    }
}
 800e12e:	bd08      	pop	{r3, pc}
 800e130:	200009a0 	.word	0x200009a0

0800e134 <CheckForMinimumAbpDatarate>:
}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 800e134:	b110      	cbz	r0, 800e13c <CheckForMinimumAbpDatarate+0x8>
 800e136:	2901      	cmp	r1, #1
 800e138:	d001      	beq.n	800e13e <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 800e13a:	2000      	movs	r0, #0
}
 800e13c:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800e13e:	2a00      	cmp	r2, #0
 800e140:	d0fc      	beq.n	800e13c <CheckForMinimumAbpDatarate+0x8>
    return false;
 800e142:	2000      	movs	r0, #0
 800e144:	4770      	bx	lr
	...

0800e148 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e148:	4b07      	ldr	r3, [pc, #28]	; (800e168 <LoRaMacCheckForRxAbort+0x20>)
 800e14a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e14e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e152:	d008      	beq.n	800e166 <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e154:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800e158:	4a03      	ldr	r2, [pc, #12]	; (800e168 <LoRaMacCheckForRxAbort+0x20>)
 800e15a:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e15e:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 800e162:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800e166:	4770      	bx	lr
 800e168:	200009a0 	.word	0x200009a0

0800e16c <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800e16c:	4b06      	ldr	r3, [pc, #24]	; (800e188 <CalculateBackOff+0x1c>)
 800e16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e170:	b94b      	cbnz	r3, 800e186 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800e172:	4a05      	ldr	r2, [pc, #20]	; (800e188 <CalculateBackOff+0x1c>)
 800e174:	f8b2 310c 	ldrh.w	r3, [r2, #268]	; 0x10c
 800e178:	4904      	ldr	r1, [pc, #16]	; (800e18c <CalculateBackOff+0x20>)
 800e17a:	f8d1 1420 	ldr.w	r1, [r1, #1056]	; 0x420
 800e17e:	3b01      	subs	r3, #1
 800e180:	fb01 f303 	mul.w	r3, r1, r3
 800e184:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800e186:	4770      	bx	lr
 800e188:	20008000 	.word	0x20008000
 800e18c:	200009a0 	.word	0x200009a0

0800e190 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800e190:	b508      	push	{r3, lr}
 800e192:	4684      	mov	ip, r0
 800e194:	4608      	mov	r0, r1
 800e196:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800e198:	4b06      	ldr	r3, [pc, #24]	; (800e1b4 <SetTxContinuousWave+0x24>)
 800e19a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e19c:	4662      	mov	r2, ip
 800e19e:	b249      	sxtb	r1, r1
 800e1a0:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800e1a2:	4a05      	ldr	r2, [pc, #20]	; (800e1b8 <SetTxContinuousWave+0x28>)
 800e1a4:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800e1a8:	f043 0302 	orr.w	r3, r3, #2
 800e1ac:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	bd08      	pop	{r3, pc}
 800e1b4:	0801c3a0 	.word	0x0801c3a0
 800e1b8:	200009a0 	.word	0x200009a0

0800e1bc <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800e1bc:	4602      	mov	r2, r0
 800e1be:	b1f8      	cbz	r0, 800e200 <DetermineFrameType+0x44>
 800e1c0:	b301      	cbz	r1, 800e204 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800e1c2:	7b03      	ldrb	r3, [r0, #12]
 800e1c4:	f013 030f 	ands.w	r3, r3, #15
 800e1c8:	d005      	beq.n	800e1d6 <DetermineFrameType+0x1a>
 800e1ca:	f890 0020 	ldrb.w	r0, [r0, #32]
 800e1ce:	b110      	cbz	r0, 800e1d6 <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 800e1d0:	2000      	movs	r0, #0
 800e1d2:	7008      	strb	r0, [r1, #0]
 800e1d4:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800e1d6:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 800e1da:	b910      	cbnz	r0, 800e1e2 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 800e1dc:	2301      	movs	r3, #1
 800e1de:	700b      	strb	r3, [r1, #0]
 800e1e0:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800e1e2:	b92b      	cbnz	r3, 800e1f0 <DetermineFrameType+0x34>
 800e1e4:	f892 0020 	ldrb.w	r0, [r2, #32]
 800e1e8:	b910      	cbnz	r0, 800e1f0 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 800e1ea:	2302      	movs	r3, #2
 800e1ec:	700b      	strb	r3, [r1, #0]
 800e1ee:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800e1f0:	b953      	cbnz	r3, 800e208 <DetermineFrameType+0x4c>
 800e1f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 800e1f6:	b14a      	cbz	r2, 800e20c <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 800e1f8:	2203      	movs	r2, #3
 800e1fa:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 800e1fc:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 800e1fe:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e200:	2003      	movs	r0, #3
 800e202:	4770      	bx	lr
 800e204:	2003      	movs	r0, #3
 800e206:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 800e208:	2018      	movs	r0, #24
 800e20a:	4770      	bx	lr
 800e20c:	2018      	movs	r0, #24
}
 800e20e:	4770      	bx	lr

0800e210 <CheckRetrans>:
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 800e210:	4288      	cmp	r0, r1
 800e212:	d201      	bcs.n	800e218 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 800e214:	2000      	movs	r0, #0
 800e216:	4770      	bx	lr
        return true;
 800e218:	2001      	movs	r0, #1
}
 800e21a:	4770      	bx	lr

0800e21c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800e21c:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800e21e:	4b0b      	ldr	r3, [pc, #44]	; (800e24c <CheckRetransUnconfirmedUplink+0x30>)
 800e220:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 800e224:	4b0a      	ldr	r3, [pc, #40]	; (800e250 <CheckRetransUnconfirmedUplink+0x34>)
 800e226:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800e22a:	f7ff fff1 	bl	800e210 <CheckRetrans>
 800e22e:	b950      	cbnz	r0, 800e246 <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e230:	4b07      	ldr	r3, [pc, #28]	; (800e250 <CheckRetransUnconfirmedUplink+0x34>)
 800e232:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e236:	f013 0f02 	tst.w	r3, #2
 800e23a:	d004      	beq.n	800e246 <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e23c:	4b04      	ldr	r3, [pc, #16]	; (800e250 <CheckRetransUnconfirmedUplink+0x34>)
 800e23e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e242:	2b01      	cmp	r3, #1
 800e244:	d900      	bls.n	800e248 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 800e246:	bd08      	pop	{r3, pc}
            return true;
 800e248:	2001      	movs	r0, #1
 800e24a:	e7fc      	b.n	800e246 <CheckRetransUnconfirmedUplink+0x2a>
 800e24c:	20008000 	.word	0x20008000
 800e250:	200009a0 	.word	0x200009a0

0800e254 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800e254:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800e256:	4b09      	ldr	r3, [pc, #36]	; (800e27c <CheckRetransConfirmedUplink+0x28>)
 800e258:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 800e25c:	4b08      	ldr	r3, [pc, #32]	; (800e280 <CheckRetransConfirmedUplink+0x2c>)
 800e25e:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800e262:	f7ff ffd5 	bl	800e210 <CheckRetrans>
 800e266:	b940      	cbnz	r0, 800e27a <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e268:	4b05      	ldr	r3, [pc, #20]	; (800e280 <CheckRetransConfirmedUplink+0x2c>)
 800e26a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e26e:	f013 0f02 	tst.w	r3, #2
 800e272:	d002      	beq.n	800e27a <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e274:	4b02      	ldr	r3, [pc, #8]	; (800e280 <CheckRetransConfirmedUplink+0x2c>)
 800e276:	f893 0448 	ldrb.w	r0, [r3, #1096]	; 0x448
        {
            return true;
        }
    }
    return false;
}
 800e27a:	bd08      	pop	{r3, pc}
 800e27c:	20008000 	.word	0x20008000
 800e280:	200009a0 	.word	0x200009a0

0800e284 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 800e284:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e288:	d000      	beq.n	800e28c <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 800e28a:	3001      	adds	r0, #1
    }
    return counter;
}
 800e28c:	4770      	bx	lr
	...

0800e290 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800e290:	b510      	push	{r4, lr}
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800e292:	4b12      	ldr	r3, [pc, #72]	; (800e2dc <StopRetransmission+0x4c>)
 800e294:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e298:	f013 0f02 	tst.w	r3, #2
 800e29c:	d004      	beq.n	800e2a8 <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e29e:	4b0f      	ldr	r3, [pc, #60]	; (800e2dc <StopRetransmission+0x4c>)
 800e2a0:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d908      	bls.n	800e2ba <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800e2a8:	4b0d      	ldr	r3, [pc, #52]	; (800e2e0 <StopRetransmission+0x50>)
 800e2aa:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800e2ae:	b123      	cbz	r3, 800e2ba <StopRetransmission+0x2a>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 800e2b0:	4c0b      	ldr	r4, [pc, #44]	; (800e2e0 <StopRetransmission+0x50>)
 800e2b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e2b4:	f7ff ffe6 	bl	800e284 <IncreaseAdrAckCounter>
 800e2b8:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800e2ba:	4b08      	ldr	r3, [pc, #32]	; (800e2dc <StopRetransmission+0x4c>)
 800e2bc:	2200      	movs	r2, #0
 800e2be:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 800e2c2:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 800e2c6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e2ca:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800e2ce:	f022 0202 	bic.w	r2, r2, #2
 800e2d2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 800e2d6:	2001      	movs	r0, #1
 800e2d8:	bd10      	pop	{r4, pc}
 800e2da:	bf00      	nop
 800e2dc:	200009a0 	.word	0x200009a0
 800e2e0:	20008000 	.word	0x20008000

0800e2e4 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800e2e4:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800e2e6:	4b04      	ldr	r3, [pc, #16]	; (800e2f8 <CallNvmDataChangeCallback+0x14>)
 800e2e8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e2ec:	b113      	cbz	r3, 800e2f4 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800e2ee:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800e2f0:	b103      	cbz	r3, 800e2f4 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800e2f2:	4798      	blx	r3
    }
}
 800e2f4:	bd08      	pop	{r3, pc}
 800e2f6:	bf00      	nop
 800e2f8:	200009a0 	.word	0x200009a0

0800e2fc <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800e2fc:	4b04      	ldr	r3, [pc, #16]	; (800e310 <IsRequestPending+0x14>)
 800e2fe:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
 800e302:	f010 0005 	ands.w	r0, r0, #5
 800e306:	d100      	bne.n	800e30a <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 800e308:	4770      	bx	lr
        return 1;
 800e30a:	2001      	movs	r0, #1
 800e30c:	e7fc      	b.n	800e308 <IsRequestPending+0xc>
 800e30e:	bf00      	nop
 800e310:	200009a0 	.word	0x200009a0

0800e314 <GetMaxAppPayloadWithoutFOptsLength>:
{
 800e314:	b500      	push	{lr}
 800e316:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e318:	4b0d      	ldr	r3, [pc, #52]	; (800e350 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800e31a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800e31e:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 800e322:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e326:	220d      	movs	r2, #13
 800e328:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e32c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e330:	b113      	cbz	r3, 800e338 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e332:	230e      	movs	r3, #14
 800e334:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e338:	a902      	add	r1, sp, #8
 800e33a:	4b05      	ldr	r3, [pc, #20]	; (800e350 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800e33c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e340:	f004 f928 	bl	8012594 <RegionGetPhyParam>
 800e344:	9001      	str	r0, [sp, #4]
}
 800e346:	b2c0      	uxtb	r0, r0
 800e348:	b005      	add	sp, #20
 800e34a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e34e:	bf00      	nop
 800e350:	20008000 	.word	0x20008000

0800e354 <ValidatePayloadLength>:
{
 800e354:	b538      	push	{r3, r4, r5, lr}
 800e356:	4605      	mov	r5, r0
 800e358:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800e35a:	4608      	mov	r0, r1
 800e35c:	f7ff ffda 	bl	800e314 <GetMaxAppPayloadWithoutFOptsLength>
 800e360:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 800e362:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800e364:	4293      	cmp	r3, r2
 800e366:	d303      	bcc.n	800e370 <ValidatePayloadLength+0x1c>
 800e368:	2aff      	cmp	r2, #255	; 0xff
 800e36a:	d903      	bls.n	800e374 <ValidatePayloadLength+0x20>
    return false;
 800e36c:	2000      	movs	r0, #0
 800e36e:	e000      	b.n	800e372 <ValidatePayloadLength+0x1e>
 800e370:	2000      	movs	r0, #0
}
 800e372:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 800e374:	2001      	movs	r0, #1
 800e376:	e7fc      	b.n	800e372 <ValidatePayloadLength+0x1e>

0800e378 <ProcessRadioTxDone>:
{
 800e378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e37a:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e37c:	4b35      	ldr	r3, [pc, #212]	; (800e454 <ProcessRadioTxDone+0xdc>)
 800e37e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e382:	2b02      	cmp	r3, #2
 800e384:	d002      	beq.n	800e38c <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800e386:	4b34      	ldr	r3, [pc, #208]	; (800e458 <ProcessRadioTxDone+0xe0>)
 800e388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e38a:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800e38c:	4c33      	ldr	r4, [pc, #204]	; (800e45c <ProcessRadioTxDone+0xe4>)
 800e38e:	f504 7560 	add.w	r5, r4, #896	; 0x380
 800e392:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 800e396:	4628      	mov	r0, r5
 800e398:	f009 fc2c 	bl	8017bf4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e39c:	4628      	mov	r0, r5
 800e39e:	f009 fbe3 	bl	8017b68 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800e3a2:	f504 7566 	add.w	r5, r4, #920	; 0x398
 800e3a6:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800e3aa:	4628      	mov	r0, r5
 800e3ac:	f009 fc22 	bl	8017bf4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	f009 fbd9 	bl	8017b68 <UTIL_TIMER_Start>
    if( MacCtx.NodeAckRequested == true )
 800e3b6:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d134      	bne.n	800e428 <ProcessRadioTxDone+0xb0>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e3be:	4b27      	ldr	r3, [pc, #156]	; (800e45c <ProcessRadioTxDone+0xe4>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800e3c6:	4b26      	ldr	r3, [pc, #152]	; (800e460 <ProcessRadioTxDone+0xe8>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4c22      	ldr	r4, [pc, #136]	; (800e454 <ProcessRadioTxDone+0xdc>)
 800e3cc:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800e3ce:	4f23      	ldr	r7, [pc, #140]	; (800e45c <ProcessRadioTxDone+0xe4>)
 800e3d0:	f897 241f 	ldrb.w	r2, [r7, #1055]	; 0x41f
 800e3d4:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e3d8:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800e3da:	ae0c      	add	r6, sp, #48	; 0x30
 800e3dc:	4630      	mov	r0, r6
 800e3de:	f009 fa9d 	bl	801791c <SysTimeGetMcuTime>
 800e3e2:	ad02      	add	r5, sp, #8
 800e3e4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800e3ee:	e896 0006 	ldmia.w	r6, {r1, r2}
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	f009 fa2f 	bl	8017856 <SysTimeSub>
 800e3f8:	ab07      	add	r3, sp, #28
 800e3fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e3fe:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e402:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800e406:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 800e408:	2301      	movs	r3, #1
 800e40a:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e40e:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800e412:	b90b      	cbnz	r3, 800e418 <ProcessRadioTxDone+0xa0>
        txDone.Joined  = false;
 800e414:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800e418:	a904      	add	r1, sp, #16
 800e41a:	4b0e      	ldr	r3, [pc, #56]	; (800e454 <ProcessRadioTxDone+0xdc>)
 800e41c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e420:	f004 f8d0 	bl	80125c4 <RegionSetBandTxDone>
}
 800e424:	b00f      	add	sp, #60	; 0x3c
 800e426:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800e428:	2315      	movs	r3, #21
 800e42a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e42e:	a90a      	add	r1, sp, #40	; 0x28
 800e430:	4b08      	ldr	r3, [pc, #32]	; (800e454 <ProcessRadioTxDone+0xdc>)
 800e432:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e436:	f004 f8ad 	bl	8012594 <RegionGetPhyParam>
 800e43a:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e43c:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800e440:	f204 4404 	addw	r4, r4, #1028	; 0x404
 800e444:	4401      	add	r1, r0
 800e446:	4620      	mov	r0, r4
 800e448:	f009 fbd4 	bl	8017bf4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800e44c:	4620      	mov	r0, r4
 800e44e:	f009 fb8b 	bl	8017b68 <UTIL_TIMER_Start>
 800e452:	e7b8      	b.n	800e3c6 <ProcessRadioTxDone+0x4e>
 800e454:	20008000 	.word	0x20008000
 800e458:	0801c3a0 	.word	0x0801c3a0
 800e45c:	200009a0 	.word	0x200009a0
 800e460:	20000f60 	.word	0x20000f60

0800e464 <OnRetransmitTimeoutTimerEvent>:
{
 800e464:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800e466:	4c09      	ldr	r4, [pc, #36]	; (800e48c <OnRetransmitTimeoutTimerEvent+0x28>)
 800e468:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800e46c:	f009 fb22 	bl	8017ab4 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800e470:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800e474:	b113      	cbz	r3, 800e47c <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 800e476:	2201      	movs	r2, #1
 800e478:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e47c:	4b03      	ldr	r3, [pc, #12]	; (800e48c <OnRetransmitTimeoutTimerEvent+0x28>)
 800e47e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e482:	b113      	cbz	r3, 800e48a <OnRetransmitTimeoutTimerEvent+0x26>
 800e484:	691b      	ldr	r3, [r3, #16]
 800e486:	b103      	cbz	r3, 800e48a <OnRetransmitTimeoutTimerEvent+0x26>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e488:	4798      	blx	r3
}
 800e48a:	bd10      	pop	{r4, pc}
 800e48c:	200009a0 	.word	0x200009a0

0800e490 <PrepareRxDoneAbort>:
{
 800e490:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e492:	4b0e      	ldr	r3, [pc, #56]	; (800e4cc <PrepareRxDoneAbort+0x3c>)
 800e494:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800e498:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e49c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 800e4a0:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800e4a4:	b973      	cbnz	r3, 800e4c4 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e4a6:	4b09      	ldr	r3, [pc, #36]	; (800e4cc <PrepareRxDoneAbort+0x3c>)
 800e4a8:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800e4ac:	f042 0202 	orr.w	r2, r2, #2
 800e4b0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e4b4:	b2d2      	uxtb	r2, r2
 800e4b6:	f042 0220 	orr.w	r2, r2, #32
 800e4ba:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800e4be:	f7ff fdf1 	bl	800e0a4 <UpdateRxSlotIdleState>
}
 800e4c2:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	f7ff ffcd 	bl	800e464 <OnRetransmitTimeoutTimerEvent>
 800e4ca:	e7ec      	b.n	800e4a6 <PrepareRxDoneAbort+0x16>
 800e4cc:	200009a0 	.word	0x200009a0

0800e4d0 <LoRaMacCheckForBeaconAcquisition>:
{
 800e4d0:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e4d2:	200b      	movs	r0, #11
 800e4d4:	f003 faf2 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800e4d8:	b188      	cbz	r0, 800e4fe <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e4da:	4b0b      	ldr	r3, [pc, #44]	; (800e508 <LoRaMacCheckForBeaconAcquisition+0x38>)
 800e4dc:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e4e0:	f010 0f01 	tst.w	r0, #1
 800e4e4:	d10d      	bne.n	800e502 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e4e6:	f010 0004 	ands.w	r0, r0, #4
 800e4ea:	d009      	beq.n	800e500 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e4f2:	f023 0302 	bic.w	r3, r3, #2
 800e4f6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800e4fa:	2001      	movs	r0, #1
 800e4fc:	e000      	b.n	800e500 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 800e4fe:	2000      	movs	r0, #0
}
 800e500:	bd08      	pop	{r3, pc}
    return 0x00;
 800e502:	2000      	movs	r0, #0
 800e504:	e7fc      	b.n	800e500 <LoRaMacCheckForBeaconAcquisition+0x30>
 800e506:	bf00      	nop
 800e508:	200009a0 	.word	0x200009a0

0800e50c <GetFCntDown>:
{
 800e50c:	b538      	push	{r3, r4, r5, lr}
 800e50e:	9c04      	ldr	r4, [sp, #16]
 800e510:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800e512:	b1f2      	cbz	r2, 800e552 <GetFCntDown+0x46>
 800e514:	4694      	mov	ip, r2
 800e516:	b1f4      	cbz	r4, 800e556 <GetFCntDown+0x4a>
 800e518:	b1fd      	cbz	r5, 800e55a <GetFCntDown+0x4e>
    switch( addrID )
 800e51a:	b188      	cbz	r0, 800e540 <GetFCntDown+0x34>
 800e51c:	2801      	cmp	r0, #1
 800e51e:	d11e      	bne.n	800e55e <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 800e520:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800e524:	2b01      	cmp	r3, #1
 800e526:	d002      	beq.n	800e52e <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 800e528:	2303      	movs	r3, #3
 800e52a:	7023      	strb	r3, [r4, #0]
 800e52c:	e00a      	b.n	800e544 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800e52e:	b121      	cbz	r1, 800e53a <GetFCntDown+0x2e>
 800e530:	2903      	cmp	r1, #3
 800e532:	d002      	beq.n	800e53a <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 800e534:	2301      	movs	r3, #1
 800e536:	7023      	strb	r3, [r4, #0]
 800e538:	e004      	b.n	800e544 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800e53a:	2302      	movs	r3, #2
 800e53c:	7023      	strb	r3, [r4, #0]
 800e53e:	e001      	b.n	800e544 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 800e540:	2304      	movs	r3, #4
 800e542:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800e544:	462a      	mov	r2, r5
 800e546:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 800e54a:	7820      	ldrb	r0, [r4, #0]
 800e54c:	f003 fcd8 	bl	8011f00 <LoRaMacCryptoGetFCntDown>
}
 800e550:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e552:	2009      	movs	r0, #9
 800e554:	e7fc      	b.n	800e550 <GetFCntDown+0x44>
 800e556:	2009      	movs	r0, #9
 800e558:	e7fa      	b.n	800e550 <GetFCntDown+0x44>
 800e55a:	2009      	movs	r0, #9
 800e55c:	e7f8      	b.n	800e550 <GetFCntDown+0x44>
    switch( addrID )
 800e55e:	2005      	movs	r0, #5
 800e560:	e7f6      	b.n	800e550 <GetFCntDown+0x44>

0800e562 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800e562:	2801      	cmp	r0, #1
 800e564:	d900      	bls.n	800e568 <RemoveMacCommands+0x6>
 800e566:	4770      	bx	lr
{
 800e568:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 800e56a:	2a01      	cmp	r2, #1
 800e56c:	d105      	bne.n	800e57a <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 800e56e:	f011 0f20 	tst.w	r1, #32
 800e572:	d004      	beq.n	800e57e <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800e574:	f003 f93e 	bl	80117f4 <LoRaMacCommandsRemoveStickyAnsCmds>
 800e578:	e001      	b.n	800e57e <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800e57a:	f003 f93b 	bl	80117f4 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800e57e:	bd08      	pop	{r3, pc}

0800e580 <ProcessMacCommands>:
{
 800e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	b08f      	sub	sp, #60	; 0x3c
 800e586:	4698      	mov	r8, r3
    uint8_t status = 0;
 800e588:	2300      	movs	r3, #0
 800e58a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800e58e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800e592:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800e596:	2b01      	cmp	r3, #1
 800e598:	f200 82d9 	bhi.w	800eb4e <ProcessMacCommands+0x5ce>
 800e59c:	4605      	mov	r5, r0
 800e59e:	460c      	mov	r4, r1
 800e5a0:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 800e5a2:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 800e5a6:	42bc      	cmp	r4, r7
 800e5a8:	f080 82d1 	bcs.w	800eb4e <ProcessMacCommands+0x5ce>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800e5ac:	5d28      	ldrb	r0, [r5, r4]
 800e5ae:	f003 f989 	bl	80118c4 <LoRaMacCommandsGetCmdSize>
 800e5b2:	4420      	add	r0, r4
 800e5b4:	42b8      	cmp	r0, r7
 800e5b6:	f300 82ca 	bgt.w	800eb4e <ProcessMacCommands+0x5ce>
        switch( payload[macIndex++] )
 800e5ba:	1c66      	adds	r6, r4, #1
 800e5bc:	b2f6      	uxtb	r6, r6
 800e5be:	5d2b      	ldrb	r3, [r5, r4]
 800e5c0:	3b02      	subs	r3, #2
 800e5c2:	2b11      	cmp	r3, #17
 800e5c4:	f200 82c3 	bhi.w	800eb4e <ProcessMacCommands+0x5ce>
 800e5c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e5cc:	00280012 	.word	0x00280012
 800e5d0:	00c000ad 	.word	0x00c000ad
 800e5d4:	011e0106 	.word	0x011e0106
 800e5d8:	01740157 	.word	0x01740157
 800e5dc:	02c101bf 	.word	0x02c101bf
 800e5e0:	01ef02c1 	.word	0x01ef02c1
 800e5e4:	02c102c1 	.word	0x02c102c1
 800e5e8:	02680251 	.word	0x02680251
 800e5ec:	02a10287 	.word	0x02a10287
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800e5f0:	2004      	movs	r0, #4
 800e5f2:	f003 fa63 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800e5f6:	b908      	cbnz	r0, 800e5fc <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 800e5f8:	4634      	mov	r4, r6
 800e5fa:	e7d4      	b.n	800e5a6 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800e5fc:	2104      	movs	r1, #4
 800e5fe:	2000      	movs	r0, #0
 800e600:	f003 fa10 	bl	8011a24 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800e604:	1ca3      	adds	r3, r4, #2
 800e606:	b2db      	uxtb	r3, r3
 800e608:	5da9      	ldrb	r1, [r5, r6]
 800e60a:	4aa7      	ldr	r2, [pc, #668]	; (800e8a8 <ProcessMacCommands+0x328>)
 800e60c:	f882 1460 	strb.w	r1, [r2, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800e610:	3403      	adds	r4, #3
 800e612:	b2e4      	uxtb	r4, r4
 800e614:	5ceb      	ldrb	r3, [r5, r3]
 800e616:	f882 3461 	strb.w	r3, [r2, #1121]	; 0x461
 800e61a:	e7c4      	b.n	800e5a6 <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 800e61c:	2300      	movs	r3, #0
 800e61e:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800e622:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800e626:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800e62a:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800e62e:	f1b9 0f00 	cmp.w	r9, #0
 800e632:	d036      	beq.n	800e6a2 <ProcessMacCommands+0x122>
                    macIndex += 4;
 800e634:	3405      	adds	r4, #5
 800e636:	b2e4      	uxtb	r4, r4
 800e638:	e7b5      	b.n	800e5a6 <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 800e63a:	2305      	movs	r3, #5
 800e63c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800e640:	e050      	b.n	800e6e4 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800e642:	4b9a      	ldr	r3, [pc, #616]	; (800e8ac <ProcessMacCommands+0x32c>)
 800e644:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e648:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 800e64c:	4293      	cmp	r3, r2
 800e64e:	da03      	bge.n	800e658 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800e650:	4b96      	ldr	r3, [pc, #600]	; (800e8ac <ProcessMacCommands+0x32c>)
 800e652:	2101      	movs	r1, #1
 800e654:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800e658:	4b94      	ldr	r3, [pc, #592]	; (800e8ac <ProcessMacCommands+0x32c>)
 800e65a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800e65e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800e662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800e666:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800e66a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800e66e:	e04d      	b.n	800e70c <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800e670:	2201      	movs	r2, #1
 800e672:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800e676:	2003      	movs	r0, #3
 800e678:	f003 f85c 	bl	8011734 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e67c:	3401      	adds	r4, #1
 800e67e:	b2e4      	uxtb	r4, r4
 800e680:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e684:	498a      	ldr	r1, [pc, #552]	; (800e8b0 <ProcessMacCommands+0x330>)
 800e686:	fba1 2103 	umull	r2, r1, r1, r3
 800e68a:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 800e68e:	d3ef      	bcc.n	800e670 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 800e690:	441e      	add	r6, r3
 800e692:	b2f6      	uxtb	r6, r6
 800e694:	1e74      	subs	r4, r6, #1
 800e696:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 800e698:	42a7      	cmp	r7, r4
 800e69a:	d93a      	bls.n	800e712 <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800e69c:	5d2b      	ldrb	r3, [r5, r4]
 800e69e:	2b03      	cmp	r3, #3
 800e6a0:	d136      	bne.n	800e710 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800e6a2:	1e73      	subs	r3, r6, #1
 800e6a4:	442b      	add	r3, r5
 800e6a6:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800e6a8:	4b80      	ldr	r3, [pc, #512]	; (800e8ac <ProcessMacCommands+0x32c>)
 800e6aa:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800e6ae:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e6b2:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
 800e6b6:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800e6ba:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800e6be:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e6c2:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800e6c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e6ca:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 800e6ce:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800e6d2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800e6d6:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800e6d8:	2a00      	cmp	r2, #0
 800e6da:	d0ae      	beq.n	800e63a <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800e6dc:	1bbb      	subs	r3, r7, r6
 800e6de:	3301      	adds	r3, #1
 800e6e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800e6e4:	ab05      	add	r3, sp, #20
 800e6e6:	9301      	str	r3, [sp, #4]
 800e6e8:	ab03      	add	r3, sp, #12
 800e6ea:	9300      	str	r3, [sp, #0]
 800e6ec:	f10d 030b 	add.w	r3, sp, #11
 800e6f0:	f10d 020a 	add.w	r2, sp, #10
 800e6f4:	a907      	add	r1, sp, #28
 800e6f6:	486d      	ldr	r0, [pc, #436]	; (800e8ac <ProcessMacCommands+0x32c>)
 800e6f8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800e6fc:	f003 ffe2 	bl	80126c4 <RegionLinkAdrReq>
 800e700:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 800e704:	f000 0007 	and.w	r0, r0, #7
 800e708:	2807      	cmp	r0, #7
 800e70a:	d09a      	beq.n	800e642 <ProcessMacCommands+0xc2>
{
 800e70c:	2400      	movs	r4, #0
 800e70e:	e7b7      	b.n	800e680 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800e710:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 800e712:	42bc      	cmp	r4, r7
 800e714:	d204      	bcs.n	800e720 <ProcessMacCommands+0x1a0>
                        macIndex--;
 800e716:	3c01      	subs	r4, #1
 800e718:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 800e71a:	f04f 0901 	mov.w	r9, #1
 800e71e:	e742      	b.n	800e5a6 <ProcessMacCommands+0x26>
 800e720:	f04f 0901 	mov.w	r9, #1
                break;
 800e724:	e73f      	b.n	800e5a6 <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800e726:	3402      	adds	r4, #2
 800e728:	b2e4      	uxtb	r4, r4
 800e72a:	5dab      	ldrb	r3, [r5, r6]
 800e72c:	f003 030f 	and.w	r3, r3, #15
 800e730:	495e      	ldr	r1, [pc, #376]	; (800e8ac <ProcessMacCommands+0x32c>)
 800e732:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800e736:	2201      	movs	r2, #1
 800e738:	fa02 f303 	lsl.w	r3, r2, r3
 800e73c:	f8a1 310c 	strh.w	r3, [r1, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800e740:	2200      	movs	r2, #0
 800e742:	a90b      	add	r1, sp, #44	; 0x2c
 800e744:	2004      	movs	r0, #4
 800e746:	f002 fff5 	bl	8011734 <LoRaMacCommandsAddCmd>
                break;
 800e74a:	e72c      	b.n	800e5a6 <ProcessMacCommands+0x26>
                status = 0x07;
 800e74c:	2307      	movs	r3, #7
 800e74e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800e752:	5dab      	ldrb	r3, [r5, r6]
 800e754:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e758:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800e75c:	57ab      	ldrsb	r3, [r5, r6]
 800e75e:	f003 030f 	and.w	r3, r3, #15
 800e762:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800e766:	1ca3      	adds	r3, r4, #2
 800e768:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800e76a:	1ce1      	adds	r1, r4, #3
 800e76c:	b2c9      	uxtb	r1, r1
 800e76e:	5ceb      	ldrb	r3, [r5, r3]
 800e770:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e772:	1d22      	adds	r2, r4, #4
 800e774:	b2d2      	uxtb	r2, r2
 800e776:	5c69      	ldrb	r1, [r5, r1]
 800e778:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e77c:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e77e:	3405      	adds	r4, #5
 800e780:	b2e4      	uxtb	r4, r4
 800e782:	5caa      	ldrb	r2, [r5, r2]
 800e784:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e788:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800e78a:	2264      	movs	r2, #100	; 0x64
 800e78c:	fb02 f303 	mul.w	r3, r2, r3
 800e790:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800e792:	a907      	add	r1, sp, #28
 800e794:	4b45      	ldr	r3, [pc, #276]	; (800e8ac <ProcessMacCommands+0x32c>)
 800e796:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e79a:	f003 ffaf 	bl	80126fc <RegionRxParamSetupReq>
 800e79e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800e7a2:	f000 0307 	and.w	r3, r0, #7
 800e7a6:	2b07      	cmp	r3, #7
 800e7a8:	d007      	beq.n	800e7ba <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 800e7aa:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	a90b      	add	r1, sp, #44	; 0x2c
 800e7b2:	2005      	movs	r0, #5
 800e7b4:	f002 ffbe 	bl	8011734 <LoRaMacCommandsAddCmd>
                break;
 800e7b8:	e6f5      	b.n	800e5a6 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800e7ba:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800e7be:	4b3b      	ldr	r3, [pc, #236]	; (800e8ac <ProcessMacCommands+0x32c>)
 800e7c0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800e7c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800e7c8:	9a08      	ldr	r2, [sp, #32]
 800e7ca:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800e7cc:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800e7ce:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800e7d2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800e7d6:	e7e8      	b.n	800e7aa <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800e7d8:	4b33      	ldr	r3, [pc, #204]	; (800e8a8 <ProcessMacCommands+0x328>)
 800e7da:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e7de:	b17b      	cbz	r3, 800e800 <ProcessMacCommands+0x280>
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	b17b      	cbz	r3, 800e804 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800e7e4:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800e7e6:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800e7ea:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800e7ee:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800e7f2:	2202      	movs	r2, #2
 800e7f4:	a90b      	add	r1, sp, #44	; 0x2c
 800e7f6:	2006      	movs	r0, #6
 800e7f8:	f002 ff9c 	bl	8011734 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800e7fc:	4634      	mov	r4, r6
                break;
 800e7fe:	e6d2      	b.n	800e5a6 <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800e800:	20ff      	movs	r0, #255	; 0xff
 800e802:	e7f0      	b.n	800e7e6 <ProcessMacCommands+0x266>
 800e804:	20ff      	movs	r0, #255	; 0xff
 800e806:	e7ee      	b.n	800e7e6 <ProcessMacCommands+0x266>
                status = 0x03;
 800e808:	2303      	movs	r3, #3
 800e80a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800e80e:	1ca3      	adds	r3, r4, #2
 800e810:	b2db      	uxtb	r3, r3
 800e812:	57aa      	ldrsb	r2, [r5, r6]
 800e814:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800e818:	aa07      	add	r2, sp, #28
 800e81a:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800e81c:	1ce2      	adds	r2, r4, #3
 800e81e:	b2d2      	uxtb	r2, r2
 800e820:	5ceb      	ldrb	r3, [r5, r3]
 800e822:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e824:	1d21      	adds	r1, r4, #4
 800e826:	b2c9      	uxtb	r1, r1
 800e828:	5caa      	ldrb	r2, [r5, r2]
 800e82a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e82e:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e830:	1d62      	adds	r2, r4, #5
 800e832:	b2d2      	uxtb	r2, r2
 800e834:	5c69      	ldrb	r1, [r5, r1]
 800e836:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800e83a:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800e83c:	2164      	movs	r1, #100	; 0x64
 800e83e:	fb01 f303 	mul.w	r3, r1, r3
 800e842:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800e844:	2300      	movs	r3, #0
 800e846:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800e848:	3406      	adds	r4, #6
 800e84a:	b2e4      	uxtb	r4, r4
 800e84c:	56ab      	ldrsb	r3, [r5, r2]
 800e84e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800e852:	a905      	add	r1, sp, #20
 800e854:	4b15      	ldr	r3, [pc, #84]	; (800e8ac <ProcessMacCommands+0x32c>)
 800e856:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e85a:	f003 ff5e 	bl	801271a <RegionNewChannelReq>
 800e85e:	b2c3      	uxtb	r3, r0
 800e860:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800e864:	2800      	cmp	r0, #0
 800e866:	f6ff ae9e 	blt.w	800e5a6 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800e86a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800e86e:	2201      	movs	r2, #1
 800e870:	a90b      	add	r1, sp, #44	; 0x2c
 800e872:	2007      	movs	r0, #7
 800e874:	f002 ff5e 	bl	8011734 <LoRaMacCommandsAddCmd>
                break;
 800e878:	e695      	b.n	800e5a6 <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800e87a:	3402      	adds	r4, #2
 800e87c:	b2e4      	uxtb	r4, r4
 800e87e:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 800e880:	f013 030f 	ands.w	r3, r3, #15
 800e884:	d100      	bne.n	800e888 <ProcessMacCommands+0x308>
                    delay++;
 800e886:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800e888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e88c:	fb02 f303 	mul.w	r3, r2, r3
 800e890:	4a06      	ldr	r2, [pc, #24]	; (800e8ac <ProcessMacCommands+0x32c>)
 800e892:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e894:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e898:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800e89a:	2200      	movs	r2, #0
 800e89c:	a90b      	add	r1, sp, #44	; 0x2c
 800e89e:	2008      	movs	r0, #8
 800e8a0:	f002 ff48 	bl	8011734 <LoRaMacCommandsAddCmd>
                break;
 800e8a4:	e67f      	b.n	800e5a6 <ProcessMacCommands+0x26>
 800e8a6:	bf00      	nop
 800e8a8:	200009a0 	.word	0x200009a0
 800e8ac:	20008000 	.word	0x20008000
 800e8b0:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 800e8b4:	3402      	adds	r4, #2
 800e8b6:	b2e4      	uxtb	r4, r4
 800e8b8:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800e8c0:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800e8c4:	f013 0f20 	tst.w	r3, #32
 800e8c8:	d002      	beq.n	800e8d0 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800e8d0:	f013 0f10 	tst.w	r3, #16
 800e8d4:	d002      	beq.n	800e8dc <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800e8dc:	f003 030f 	and.w	r3, r3, #15
 800e8e0:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800e8e4:	a903      	add	r1, sp, #12
 800e8e6:	4b9b      	ldr	r3, [pc, #620]	; (800eb54 <ProcessMacCommands+0x5d4>)
 800e8e8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e8ec:	f003 ff24 	bl	8012738 <RegionTxParamSetupReq>
 800e8f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e8f4:	f43f ae57 	beq.w	800e5a6 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800e8f8:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800e8fc:	4e95      	ldr	r6, [pc, #596]	; (800eb54 <ProcessMacCommands+0x5d4>)
 800e8fe:	f886 a074 	strb.w	sl, [r6, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800e902:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800e906:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800e90a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800e90e:	4a92      	ldr	r2, [pc, #584]	; (800eb58 <ProcessMacCommands+0x5d8>)
 800e910:	5cd0      	ldrb	r0, [r2, r3]
 800e912:	f7f2 faab 	bl	8000e6c <__aeabi_ui2f>
 800e916:	67b0      	str	r0, [r6, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800e918:	2302      	movs	r3, #2
 800e91a:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e91e:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e922:	a907      	add	r1, sp, #28
 800e924:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800e928:	f003 fe34 	bl	8012594 <RegionGetPhyParam>
 800e92c:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800e92e:	b240      	sxtb	r0, r0
 800e930:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800e934:	4298      	cmp	r0, r3
 800e936:	bfb8      	it	lt
 800e938:	4618      	movlt	r0, r3
 800e93a:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800e93e:	2200      	movs	r2, #0
 800e940:	a90b      	add	r1, sp, #44	; 0x2c
 800e942:	2009      	movs	r0, #9
 800e944:	f002 fef6 	bl	8011734 <LoRaMacCommandsAddCmd>
                break;
 800e948:	e62d      	b.n	800e5a6 <ProcessMacCommands+0x26>
                status = 0x03;
 800e94a:	2303      	movs	r3, #3
 800e94c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800e950:	1ca3      	adds	r3, r4, #2
 800e952:	b2db      	uxtb	r3, r3
 800e954:	5daa      	ldrb	r2, [r5, r6]
 800e956:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800e95a:	1ce1      	adds	r1, r4, #3
 800e95c:	b2c9      	uxtb	r1, r1
 800e95e:	5ceb      	ldrb	r3, [r5, r3]
 800e960:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e962:	1d22      	adds	r2, r4, #4
 800e964:	b2d2      	uxtb	r2, r2
 800e966:	5c69      	ldrb	r1, [r5, r1]
 800e968:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e96c:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e96e:	3405      	adds	r4, #5
 800e970:	b2e4      	uxtb	r4, r4
 800e972:	5caa      	ldrb	r2, [r5, r2]
 800e974:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e978:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800e97a:	2264      	movs	r2, #100	; 0x64
 800e97c:	fb02 f303 	mul.w	r3, r2, r3
 800e980:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800e982:	a907      	add	r1, sp, #28
 800e984:	4b73      	ldr	r3, [pc, #460]	; (800eb54 <ProcessMacCommands+0x5d4>)
 800e986:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e98a:	f003 fee4 	bl	8012756 <RegionDlChannelReq>
 800e98e:	b2c3      	uxtb	r3, r0
 800e990:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800e994:	2800      	cmp	r0, #0
 800e996:	f6ff ae06 	blt.w	800e5a6 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800e99a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800e99e:	2201      	movs	r2, #1
 800e9a0:	a90b      	add	r1, sp, #44	; 0x2c
 800e9a2:	200a      	movs	r0, #10
 800e9a4:	f002 fec6 	bl	8011734 <LoRaMacCommandsAddCmd>
                break;
 800e9a8:	e5fd      	b.n	800e5a6 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800e9aa:	2009      	movs	r0, #9
 800e9ac:	f003 f886 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800e9b0:	b928      	cbnz	r0, 800e9be <ProcessMacCommands+0x43e>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e9b2:	4b6a      	ldr	r3, [pc, #424]	; (800eb5c <ProcessMacCommands+0x5dc>)
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
        switch( payload[macIndex++] )
 800e9ba:	4634      	mov	r4, r6
 800e9bc:	e5f3      	b.n	800e5a6 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800e9be:	2109      	movs	r1, #9
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	f003 f82f 	bl	8011a24 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800e9c6:	a803      	add	r0, sp, #12
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	9303      	str	r3, [sp, #12]
 800e9cc:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800e9ce:	f10d 0a14 	add.w	sl, sp, #20
 800e9d2:	9305      	str	r3, [sp, #20]
 800e9d4:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800e9d6:	f10d 0b1c 	add.w	fp, sp, #28
 800e9da:	9307      	str	r3, [sp, #28]
 800e9dc:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800e9de:	1ca1      	adds	r1, r4, #2
 800e9e0:	b2c9      	uxtb	r1, r1
 800e9e2:	5dab      	ldrb	r3, [r5, r6]
 800e9e4:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800e9e6:	1ce2      	adds	r2, r4, #3
 800e9e8:	b2d2      	uxtb	r2, r2
 800e9ea:	5c69      	ldrb	r1, [r5, r1]
 800e9ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e9f0:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800e9f2:	1d21      	adds	r1, r4, #4
 800e9f4:	b2c9      	uxtb	r1, r1
 800e9f6:	5caa      	ldrb	r2, [r5, r2]
 800e9f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9fc:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800e9fe:	1d62      	adds	r2, r4, #5
 800ea00:	b2d2      	uxtb	r2, r2
 800ea02:	5c69      	ldrb	r1, [r5, r1]
 800ea04:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ea08:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800ea0a:	3406      	adds	r4, #6
 800ea0c:	b2e4      	uxtb	r4, r4
 800ea0e:	5caa      	ldrb	r2, [r5, r2]
 800ea10:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800ea14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ea18:	fb01 f202 	mul.w	r2, r1, r2
 800ea1c:	0a12      	lsrs	r2, r2, #8
 800ea1e:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800ea22:	c803      	ldmia	r0, {r0, r1}
 800ea24:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800ea28:	4a4d      	ldr	r2, [pc, #308]	; (800eb60 <ProcessMacCommands+0x5e0>)
 800ea2a:	441a      	add	r2, r3
 800ea2c:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800ea2e:	4658      	mov	r0, fp
 800ea30:	f008 ff52 	bl	80178d8 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800ea34:	4e49      	ldr	r6, [pc, #292]	; (800eb5c <ProcessMacCommands+0x5dc>)
 800ea36:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 800ea3a:	9300      	str	r3, [sp, #0]
 800ea3c:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 800ea40:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800ea44:	a80c      	add	r0, sp, #48	; 0x30
 800ea46:	f008 ff06 	bl	8017856 <SysTimeSub>
 800ea4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea4c:	9300      	str	r3, [sp, #0]
 800ea4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea50:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800ea54:	4650      	mov	r0, sl
 800ea56:	f008 fedf 	bl	8017818 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800ea5a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ea5e:	f008 ff19 	bl	8017894 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800ea62:	f002 fdcb 	bl	80115fc <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800ea66:	2301      	movs	r3, #1
 800ea68:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 800ea6c:	e59b      	b.n	800e5a6 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800ea6e:	200c      	movs	r0, #12
 800ea70:	f003 f824 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800ea74:	b908      	cbnz	r0, 800ea7a <ProcessMacCommands+0x4fa>
        switch( payload[macIndex++] )
 800ea76:	4634      	mov	r4, r6
 800ea78:	e595      	b.n	800e5a6 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800ea7a:	210c      	movs	r1, #12
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	f002 ffd1 	bl	8011a24 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800ea82:	4b36      	ldr	r3, [pc, #216]	; (800eb5c <ProcessMacCommands+0x5dc>)
 800ea84:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800ea88:	3b04      	subs	r3, #4
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d801      	bhi.n	800ea94 <ProcessMacCommands+0x514>
        switch( payload[macIndex++] )
 800ea90:	4634      	mov	r4, r6
 800ea92:	e588      	b.n	800e5a6 <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 800ea94:	f002 fdae 	bl	80115f4 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800ea98:	4634      	mov	r4, r6
 800ea9a:	e584      	b.n	800e5a6 <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 800ea9c:	1ca2      	adds	r2, r4, #2
 800ea9e:	b2d2      	uxtb	r2, r2
 800eaa0:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800eaa2:	1ce1      	adds	r1, r4, #3
 800eaa4:	b2c9      	uxtb	r1, r1
 800eaa6:	5caa      	ldrb	r2, [r5, r2]
 800eaa8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800eaac:	1d22      	adds	r2, r4, #4
 800eaae:	b2d2      	uxtb	r2, r2
 800eab0:	5c69      	ldrb	r1, [r5, r1]
 800eab2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800eab6:	3405      	adds	r4, #5
 800eab8:	b2e4      	uxtb	r4, r4
 800eaba:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800eabc:	2164      	movs	r1, #100	; 0x64
 800eabe:	fb03 f101 	mul.w	r1, r3, r1
 800eac2:	f000 000f 	and.w	r0, r0, #15
 800eac6:	f002 fd96 	bl	80115f6 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800eaca:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800eace:	2201      	movs	r2, #1
 800ead0:	a90b      	add	r1, sp, #44	; 0x2c
 800ead2:	2011      	movs	r0, #17
 800ead4:	f002 fe2e 	bl	8011734 <LoRaMacCommandsAddCmd>
                break;
 800ead8:	e565      	b.n	800e5a6 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800eada:	200d      	movs	r0, #13
 800eadc:	f002 ffee 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800eae0:	b908      	cbnz	r0, 800eae6 <ProcessMacCommands+0x566>
        switch( payload[macIndex++] )
 800eae2:	4634      	mov	r4, r6
 800eae4:	e55f      	b.n	800e5a6 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800eae6:	210d      	movs	r1, #13
 800eae8:	2000      	movs	r0, #0
 800eaea:	f002 ff9b 	bl	8011a24 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800eaee:	1ca2      	adds	r2, r4, #2
 800eaf0:	b2d2      	uxtb	r2, r2
 800eaf2:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800eaf4:	1ce3      	adds	r3, r4, #3
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800eafa:	3404      	adds	r4, #4
 800eafc:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800eafe:	4a19      	ldr	r2, [pc, #100]	; (800eb64 <ProcessMacCommands+0x5e4>)
 800eb00:	6812      	ldr	r2, [r2, #0]
 800eb02:	5ce9      	ldrb	r1, [r5, r3]
 800eb04:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800eb08:	f002 fd77 	bl	80115fa <LoRaMacClassBBeaconTimingAns>
 800eb0c:	e54b      	b.n	800e5a6 <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 800eb0e:	1ca1      	adds	r1, r4, #2
 800eb10:	b2c9      	uxtb	r1, r1
 800eb12:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800eb14:	1ce2      	adds	r2, r4, #3
 800eb16:	b2d2      	uxtb	r2, r2
 800eb18:	5c68      	ldrb	r0, [r5, r1]
 800eb1a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800eb1e:	3404      	adds	r4, #4
 800eb20:	b2e4      	uxtb	r4, r4
 800eb22:	5ca8      	ldrb	r0, [r5, r2]
 800eb24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800eb28:	2064      	movs	r0, #100	; 0x64
 800eb2a:	fb03 f000 	mul.w	r0, r3, r0
 800eb2e:	f002 fd66 	bl	80115fe <LoRaMacClassBBeaconFreqReq>
 800eb32:	b140      	cbz	r0, 800eb46 <ProcessMacCommands+0x5c6>
                        macCmdPayload[0] = 1;
 800eb34:	2301      	movs	r3, #1
 800eb36:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	a90b      	add	r1, sp, #44	; 0x2c
 800eb3e:	2013      	movs	r0, #19
 800eb40:	f002 fdf8 	bl	8011734 <LoRaMacCommandsAddCmd>
                break;
 800eb44:	e52f      	b.n	800e5a6 <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 800eb46:	2300      	movs	r3, #0
 800eb48:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800eb4c:	e7f5      	b.n	800eb3a <ProcessMacCommands+0x5ba>
}
 800eb4e:	b00f      	add	sp, #60	; 0x3c
 800eb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb54:	20008000 	.word	0x20008000
 800eb58:	0801bcf0 	.word	0x0801bcf0
 800eb5c:	200009a0 	.word	0x200009a0
 800eb60:	12d53d80 	.word	0x12d53d80
 800eb64:	20000f50 	.word	0x20000f50

0800eb68 <ProcessRadioRxDone>:
{
 800eb68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb6c:	b0a1      	sub	sp, #132	; 0x84
    uint8_t *payload = RxDoneParams.Payload;
 800eb6e:	4b96      	ldr	r3, [pc, #600]	; (800edc8 <ProcessRadioRxDone+0x260>)
 800eb70:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800eb72:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800eb74:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800eb78:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	9303      	str	r3, [sp, #12]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800eb80:	4a92      	ldr	r2, [pc, #584]	; (800edcc <ProcessRadioRxDone+0x264>)
 800eb82:	f8d2 80d4 	ldr.w	r8, [r2, #212]	; 0xd4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800eb86:	4a92      	ldr	r2, [pc, #584]	; (800edd0 <ProcessRadioRxDone+0x268>)
 800eb88:	7811      	ldrb	r1, [r2, #0]
 800eb8a:	f363 0100 	bfi	r1, r3, #0, #1
 800eb8e:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 800eb90:	4c90      	ldr	r4, [pc, #576]	; (800edd4 <ProcessRadioRxDone+0x26c>)
 800eb92:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800eb96:	f8a4 9490 	strh.w	r9, [r4, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 800eb9a:	f884 7492 	strb.w	r7, [r4, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800eb9e:	f894 2494 	ldrb.w	r2, [r4, #1172]	; 0x494
 800eba2:	f884 2493 	strb.w	r2, [r4, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 800eba6:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800ebaa:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800ebae:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800ebb2:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800ebb6:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 800ebba:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800ebbe:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800ebc2:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ebc6:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800ebca:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800ebce:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800ebd2:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
 800ebd6:	4b80      	ldr	r3, [pc, #512]	; (800edd8 <ProcessRadioRxDone+0x270>)
 800ebd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebda:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800ebdc:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800ebe0:	b1c3      	cbz	r3, 800ec14 <ProcessRadioRxDone+0xac>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800ebe2:	4629      	mov	r1, r5
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	f002 fcf2 	bl	80115ce <LoRaMacClassBRxBeacon>
 800ebea:	b9c0      	cbnz	r0, 800ec1e <ProcessRadioRxDone+0xb6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ebec:	4b77      	ldr	r3, [pc, #476]	; (800edcc <ProcessRadioRxDone+0x264>)
 800ebee:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d019      	beq.n	800ec2a <ProcessRadioRxDone+0xc2>
    macHdr.Value = payload[pktHeaderLen++];
 800ebf6:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800ebf8:	0963      	lsrs	r3, r4, #5
 800ebfa:	3b01      	subs	r3, #1
 800ebfc:	2b06      	cmp	r3, #6
 800ebfe:	f200 82d4 	bhi.w	800f1aa <ProcessRadioRxDone+0x642>
 800ec02:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ec06:	002f      	.short	0x002f
 800ec08:	00b502d2 	.word	0x00b502d2
 800ec0c:	00b102d2 	.word	0x00b102d2
 800ec10:	02a202d2 	.word	0x02a202d2
        TimerStop( &MacCtx.RxWindowTimer2 );
 800ec14:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800ec18:	f008 ff4c 	bl	8017ab4 <UTIL_TIMER_Stop>
 800ec1c:	e7e1      	b.n	800ebe2 <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800ec1e:	4b6d      	ldr	r3, [pc, #436]	; (800edd4 <ProcessRadioRxDone+0x26c>)
 800ec20:	f8a3 9482 	strh.w	r9, [r3, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800ec24:	f883 7484 	strb.w	r7, [r3, #1156]	; 0x484
        return;
 800ec28:	e2bc      	b.n	800f1a4 <ProcessRadioRxDone+0x63c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ec2a:	f002 fcd4 	bl	80115d6 <LoRaMacClassBIsPingExpected>
 800ec2e:	b150      	cbz	r0, 800ec46 <ProcessRadioRxDone+0xde>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ec30:	2000      	movs	r0, #0
 800ec32:	f002 fcc5 	bl	80115c0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ec36:	2000      	movs	r0, #0
 800ec38:	f002 fcc7 	bl	80115ca <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800ec3c:	4b65      	ldr	r3, [pc, #404]	; (800edd4 <ProcessRadioRxDone+0x26c>)
 800ec3e:	2204      	movs	r2, #4
 800ec40:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800ec44:	e7d7      	b.n	800ebf6 <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ec46:	f002 fcc8 	bl	80115da <LoRaMacClassBIsMulticastExpected>
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	d0d3      	beq.n	800ebf6 <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ec4e:	2000      	movs	r0, #0
 800ec50:	f002 fcb7 	bl	80115c2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ec54:	2000      	movs	r0, #0
 800ec56:	f002 fcb9 	bl	80115cc <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ec5a:	4b5e      	ldr	r3, [pc, #376]	; (800edd4 <ProcessRadioRxDone+0x26c>)
 800ec5c:	2205      	movs	r2, #5
 800ec5e:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800ec62:	e7c8      	b.n	800ebf6 <ProcessRadioRxDone+0x8e>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800ec64:	2d10      	cmp	r5, #16
 800ec66:	d962      	bls.n	800ed2e <ProcessRadioRxDone+0x1c6>
            macMsgJoinAccept.Buffer = payload;
 800ec68:	9604      	str	r6, [sp, #16]
            macMsgJoinAccept.BufSize = size;
 800ec6a:	b2ed      	uxtb	r5, r5
 800ec6c:	f88d 5014 	strb.w	r5, [sp, #20]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ec70:	4b56      	ldr	r3, [pc, #344]	; (800edcc <ProcessRadioRxDone+0x264>)
 800ec72:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d160      	bne.n	800ed3c <ProcessRadioRxDone+0x1d4>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800ec7a:	f006 fced 	bl	8015658 <SecureElementGetJoinEui>
 800ec7e:	4601      	mov	r1, r0
 800ec80:	aa04      	add	r2, sp, #16
 800ec82:	20ff      	movs	r0, #255	; 0xff
 800ec84:	f003 fa90 	bl	80121a8 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	d163      	bne.n	800ed54 <ProcessRadioRxDone+0x1ec>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ec8c:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800ec90:	4b4e      	ldr	r3, [pc, #312]	; (800edcc <ProcessRadioRxDone+0x264>)
 800ec92:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800ec96:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800ec9a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ec9e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800eca2:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800eca6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ecaa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800ecae:	9a07      	ldr	r2, [sp, #28]
 800ecb0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800ecb4:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800ecb8:	f3c2 1102 	ubfx	r1, r2, #4, #3
 800ecbc:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ecc0:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800ecc4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ecc8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800eccc:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 800ecd0:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800ecd2:	b90a      	cbnz	r2, 800ecd8 <ProcessRadioRxDone+0x170>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800ecd8:	4c3c      	ldr	r4, [pc, #240]	; (800edcc <ProcessRadioRxDone+0x264>)
 800ecda:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ecdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ece0:	fb02 f303 	mul.w	r3, r2, r3
 800ece4:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800ece6:	4413      	add	r3, r2
 800ece8:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800ecea:	2300      	movs	r3, #0
 800ecec:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800ecf0:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 800ecf4:	931e      	str	r3, [sp, #120]	; 0x78
                applyCFList.Size = size - 17;
 800ecf6:	3d11      	subs	r5, #17
 800ecf8:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
                applyCFList.JoinChannel = MacCtx.Channel;
 800ecfc:	4b35      	ldr	r3, [pc, #212]	; (800edd4 <ProcessRadioRxDone+0x26c>)
 800ecfe:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800ed02:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800ed06:	a91d      	add	r1, sp, #116	; 0x74
 800ed08:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800ed0c:	f003 fc86 	bl	801261c <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ed10:	2302      	movs	r3, #2
 800ed12:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ed16:	2001      	movs	r0, #1
 800ed18:	f002 fed0 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800ed1c:	b9a8      	cbnz	r0, 800ed4a <ProcessRadioRxDone+0x1e2>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800ed1e:	4a2d      	ldr	r2, [pc, #180]	; (800edd4 <ProcessRadioRxDone+0x26c>)
 800ed20:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ed24:	f043 0308 	orr.w	r3, r3, #8
 800ed28:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800ed2c:	e227      	b.n	800f17e <ProcessRadioRxDone+0x616>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ed2e:	4b29      	ldr	r3, [pc, #164]	; (800edd4 <ProcessRadioRxDone+0x26c>)
 800ed30:	2201      	movs	r2, #1
 800ed32:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800ed36:	f7ff fbab 	bl	800e490 <PrepareRxDoneAbort>
                return;
 800ed3a:	e233      	b.n	800f1a4 <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ed3c:	4b25      	ldr	r3, [pc, #148]	; (800edd4 <ProcessRadioRxDone+0x26c>)
 800ed3e:	2201      	movs	r2, #1
 800ed40:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800ed44:	f7ff fba4 	bl	800e490 <PrepareRxDoneAbort>
                return;
 800ed48:	e22c      	b.n	800f1a4 <ProcessRadioRxDone+0x63c>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800ed4a:	2101      	movs	r1, #1
 800ed4c:	2000      	movs	r0, #0
 800ed4e:	f002 fe69 	bl	8011a24 <LoRaMacConfirmQueueSetStatus>
 800ed52:	e7e4      	b.n	800ed1e <ProcessRadioRxDone+0x1b6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ed54:	2001      	movs	r0, #1
 800ed56:	f002 feb1 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800ed5a:	2800      	cmp	r0, #0
 800ed5c:	d0df      	beq.n	800ed1e <ProcessRadioRxDone+0x1b6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ed5e:	2101      	movs	r1, #1
 800ed60:	2007      	movs	r0, #7
 800ed62:	f002 fe5f 	bl	8011a24 <LoRaMacConfirmQueueSetStatus>
 800ed66:	e7da      	b.n	800ed1e <ProcessRadioRxDone+0x1b6>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ed68:	4b1a      	ldr	r3, [pc, #104]	; (800edd4 <ProcessRadioRxDone+0x26c>)
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ed70:	4b16      	ldr	r3, [pc, #88]	; (800edcc <ProcessRadioRxDone+0x264>)
 800ed72:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ed76:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800ed7a:	4a16      	ldr	r2, [pc, #88]	; (800edd4 <ProcessRadioRxDone+0x26c>)
 800ed7c:	f992 2428 	ldrsb.w	r2, [r2, #1064]	; 0x428
 800ed80:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ed84:	220d      	movs	r2, #13
 800ed86:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ed8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed8e:	b113      	cbz	r3, 800ed96 <ProcessRadioRxDone+0x22e>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ed90:	230e      	movs	r3, #14
 800ed92:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ed96:	a91b      	add	r1, sp, #108	; 0x6c
 800ed98:	4b0c      	ldr	r3, [pc, #48]	; (800edcc <ProcessRadioRxDone+0x264>)
 800ed9a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ed9e:	f003 fbf9 	bl	8012594 <RegionGetPhyParam>
 800eda2:	901a      	str	r0, [sp, #104]	; 0x68
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800eda4:	f1a5 030d 	sub.w	r3, r5, #13
 800eda8:	b21b      	sxth	r3, r3
 800edaa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800edae:	b200      	sxth	r0, r0
 800edb0:	4283      	cmp	r3, r0
 800edb2:	dc01      	bgt.n	800edb8 <ProcessRadioRxDone+0x250>
 800edb4:	2d0b      	cmp	r5, #11
 800edb6:	d811      	bhi.n	800eddc <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800edb8:	4b06      	ldr	r3, [pc, #24]	; (800edd4 <ProcessRadioRxDone+0x26c>)
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800edc0:	f7ff fb66 	bl	800e490 <PrepareRxDoneAbort>
                return;
 800edc4:	e1ee      	b.n	800f1a4 <ProcessRadioRxDone+0x63c>
 800edc6:	bf00      	nop
 800edc8:	20000f50 	.word	0x20000f50
 800edcc:	20008000 	.word	0x20008000
 800edd0:	2000099c 	.word	0x2000099c
 800edd4:	200009a0 	.word	0x200009a0
 800edd8:	0801c3a0 	.word	0x0801c3a0
            macMsgData.Buffer = payload;
 800eddc:	960e      	str	r6, [sp, #56]	; 0x38
            macMsgData.BufSize = size;
 800edde:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800ede2:	4bba      	ldr	r3, [pc, #744]	; (800f0cc <ProcessRadioRxDone+0x564>)
 800ede4:	9317      	str	r3, [sp, #92]	; 0x5c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ede6:	23ff      	movs	r3, #255	; 0xff
 800ede8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800edec:	a80e      	add	r0, sp, #56	; 0x38
 800edee:	f003 faa1 	bl	8012334 <LoRaMacParserData>
 800edf2:	2800      	cmp	r0, #0
 800edf4:	d142      	bne.n	800ee7c <ProcessRadioRxDone+0x314>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800edf6:	4bb6      	ldr	r3, [pc, #728]	; (800f0d0 <ProcessRadioRxDone+0x568>)
 800edf8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d044      	beq.n	800ee8a <ProcessRadioRxDone+0x322>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ee00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee02:	4bb4      	ldr	r3, [pc, #720]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800ee04:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ee08:	f10d 010a 	add.w	r1, sp, #10
 800ee0c:	a80e      	add	r0, sp, #56	; 0x38
 800ee0e:	f7ff f9d5 	bl	800e1bc <DetermineFrameType>
 800ee12:	4605      	mov	r5, r0
 800ee14:	2800      	cmp	r0, #0
 800ee16:	d163      	bne.n	800eee0 <ProcessRadioRxDone+0x378>
            downLinkCounter = 0;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	9303      	str	r3, [sp, #12]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d065      	beq.n	800eeee <ProcessRadioRxDone+0x386>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800ee22:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ee24:	2d01      	cmp	r5, #1
 800ee26:	d10a      	bne.n	800ee3e <ProcessRadioRxDone+0x2d6>
 800ee28:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800ee2c:	2b03      	cmp	r3, #3
 800ee2e:	f040 808a 	bne.w	800ef46 <ProcessRadioRxDone+0x3de>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ee32:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800ee36:	f013 0f60 	tst.w	r3, #96	; 0x60
 800ee3a:	f040 8084 	bne.w	800ef46 <ProcessRadioRxDone+0x3de>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800ee3e:	ab03      	add	r3, sp, #12
 800ee40:	9301      	str	r3, [sp, #4]
 800ee42:	f10d 030b 	add.w	r3, sp, #11
 800ee46:	9300      	str	r3, [sp, #0]
 800ee48:	4ba1      	ldr	r3, [pc, #644]	; (800f0d0 <ProcessRadioRxDone+0x568>)
 800ee4a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ee4e:	aa0e      	add	r2, sp, #56	; 0x38
 800ee50:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800ee54:	4630      	mov	r0, r6
 800ee56:	f7ff fb59 	bl	800e50c <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ee5a:	2800      	cmp	r0, #0
 800ee5c:	d07f      	beq.n	800ef5e <ProcessRadioRxDone+0x3f6>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800ee5e:	2807      	cmp	r0, #7
 800ee60:	d078      	beq.n	800ef54 <ProcessRadioRxDone+0x3ec>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ee62:	4b9c      	ldr	r3, [pc, #624]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800ee64:	2201      	movs	r2, #1
 800ee66:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ee6a:	9a03      	ldr	r2, [sp, #12]
 800ee6c:	4b99      	ldr	r3, [pc, #612]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800ee6e:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ee72:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
                PrepareRxDoneAbort( );
 800ee76:	f7ff fb0b 	bl	800e490 <PrepareRxDoneAbort>
                return;
 800ee7a:	e193      	b.n	800f1a4 <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ee7c:	4b95      	ldr	r3, [pc, #596]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800ee7e:	2201      	movs	r2, #1
 800ee80:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800ee84:	f7ff fb04 	bl	800e490 <PrepareRxDoneAbort>
                return;
 800ee88:	e18c      	b.n	800f1a4 <ProcessRadioRxDone+0x63c>
                if( LoRaMacClassBIsPingExpected( ) == true )
 800ee8a:	f002 fba4 	bl	80115d6 <LoRaMacClassBIsPingExpected>
 800ee8e:	b188      	cbz	r0, 800eeb4 <ProcessRadioRxDone+0x34c>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ee90:	2000      	movs	r0, #0
 800ee92:	f002 fb95 	bl	80115c0 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800ee96:	2000      	movs	r0, #0
 800ee98:	f002 fb97 	bl	80115ca <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800ee9c:	4b8d      	ldr	r3, [pc, #564]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800ee9e:	2204      	movs	r2, #4
 800eea0:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800eea4:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800eea8:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800eeac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800eeae:	f002 fbab 	bl	8011608 <LoRaMacClassBSetFPendingBit>
 800eeb2:	e7a5      	b.n	800ee00 <ProcessRadioRxDone+0x298>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800eeb4:	f002 fb91 	bl	80115da <LoRaMacClassBIsMulticastExpected>
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	d0a1      	beq.n	800ee00 <ProcessRadioRxDone+0x298>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800eebc:	2000      	movs	r0, #0
 800eebe:	f002 fb80 	bl	80115c2 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800eec2:	2000      	movs	r0, #0
 800eec4:	f002 fb82 	bl	80115cc <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800eec8:	4b82      	ldr	r3, [pc, #520]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800eeca:	2205      	movs	r2, #5
 800eecc:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800eed0:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800eed4:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800eed8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800eeda:	f002 fb95 	bl	8011608 <LoRaMacClassBSetFPendingBit>
 800eede:	e78f      	b.n	800ee00 <ProcessRadioRxDone+0x298>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eee0:	4b7c      	ldr	r3, [pc, #496]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800eee2:	2201      	movs	r2, #1
 800eee4:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800eee8:	f7ff fad2 	bl	800e490 <PrepareRxDoneAbort>
                return;
 800eeec:	e15a      	b.n	800f1a4 <ProcessRadioRxDone+0x63c>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800eeee:	4618      	mov	r0, r3
 800eef0:	4a77      	ldr	r2, [pc, #476]	; (800f0d0 <ProcessRadioRxDone+0x568>)
 800eef2:	212c      	movs	r1, #44	; 0x2c
 800eef4:	fb01 2203 	mla	r2, r1, r3, r2
 800eef8:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 800eefc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800eefe:	428a      	cmp	r2, r1
 800ef00:	d002      	beq.n	800ef08 <ProcessRadioRxDone+0x3a0>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ef02:	3301      	adds	r3, #1
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	e78a      	b.n	800ee1e <ProcessRadioRxDone+0x2b6>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800ef08:	4971      	ldr	r1, [pc, #452]	; (800f0d0 <ProcessRadioRxDone+0x568>)
 800ef0a:	262c      	movs	r6, #44	; 0x2c
 800ef0c:	fb06 1103 	mla	r1, r6, r3, r1
 800ef10:	f891 10da 	ldrb.w	r1, [r1, #218]	; 0xda
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ef14:	2900      	cmp	r1, #0
 800ef16:	d0f4      	beq.n	800ef02 <ProcessRadioRxDone+0x39a>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800ef18:	4b6d      	ldr	r3, [pc, #436]	; (800f0d0 <ProcessRadioRxDone+0x568>)
 800ef1a:	fb06 3000 	mla	r0, r6, r0, r3
 800ef1e:	f890 60db 	ldrb.w	r6, [r0, #219]	; 0xdb
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800ef22:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
 800ef26:	6809      	ldr	r1, [r1, #0]
 800ef28:	9103      	str	r1, [sp, #12]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ef2a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ef2e:	2b02      	cmp	r3, #2
 800ef30:	d002      	beq.n	800ef38 <ProcessRadioRxDone+0x3d0>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800ef32:	4690      	mov	r8, r2
                    multicast = 1;
 800ef34:	2501      	movs	r5, #1
 800ef36:	e775      	b.n	800ee24 <ProcessRadioRxDone+0x2bc>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ef38:	4b66      	ldr	r3, [pc, #408]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800ef3a:	2103      	movs	r1, #3
 800ef3c:	f883 1493 	strb.w	r1, [r3, #1171]	; 0x493
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800ef40:	4690      	mov	r8, r2
                    multicast = 1;
 800ef42:	2501      	movs	r5, #1
 800ef44:	e76e      	b.n	800ee24 <ProcessRadioRxDone+0x2bc>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ef46:	4b63      	ldr	r3, [pc, #396]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800ef48:	2201      	movs	r2, #1
 800ef4a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800ef4e:	f7ff fa9f 	bl	800e490 <PrepareRxDoneAbort>
                return;
 800ef52:	e127      	b.n	800f1a4 <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800ef54:	4b5f      	ldr	r3, [pc, #380]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800ef56:	2208      	movs	r2, #8
 800ef58:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800ef5c:	e785      	b.n	800ee6a <ProcessRadioRxDone+0x302>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800ef5e:	ab0e      	add	r3, sp, #56	; 0x38
 800ef60:	9300      	str	r3, [sp, #0]
 800ef62:	9b03      	ldr	r3, [sp, #12]
 800ef64:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800ef68:	4641      	mov	r1, r8
 800ef6a:	4630      	mov	r0, r6
 800ef6c:	f003 f870 	bl	8012050 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ef70:	2800      	cmp	r0, #0
 800ef72:	d13d      	bne.n	800eff0 <ProcessRadioRxDone+0x488>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ef74:	4b57      	ldr	r3, [pc, #348]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800ef76:	2100      	movs	r1, #0
 800ef78:	f883 1425 	strb.w	r1, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800ef7c:	f883 5426 	strb.w	r5, [r3, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800ef80:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800ef84:	f3c2 1000 	ubfx	r0, r2, #4, #1
 800ef88:	f883 0429 	strb.w	r0, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800ef8c:	f8c3 142c 	str.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800ef90:	f883 1430 	strb.w	r1, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ef94:	9803      	ldr	r0, [sp, #12]
 800ef96:	f8c3 0434 	str.w	r0, [r3, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ef9a:	f8c3 0470 	str.w	r0, [r3, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ef9e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800efa2:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800efa6:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800efaa:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800efae:	f893 0493 	ldrb.w	r0, [r3, #1171]	; 0x493
 800efb2:	2801      	cmp	r0, #1
 800efb4:	d92a      	bls.n	800f00c <ProcessRadioRxDone+0x4a4>
            if( multicast == 1 )
 800efb6:	2d01      	cmp	r5, #1
 800efb8:	d02e      	beq.n	800f018 <ProcessRadioRxDone+0x4b0>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800efba:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800efbe:	2ca0      	cmp	r4, #160	; 0xa0
 800efc0:	d02f      	beq.n	800f022 <ProcessRadioRxDone+0x4ba>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800efc2:	2300      	movs	r3, #0
 800efc4:	4a42      	ldr	r2, [pc, #264]	; (800f0d0 <ProcessRadioRxDone+0x568>)
 800efc6:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800efca:	4a42      	ldr	r2, [pc, #264]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800efcc:	f882 3424 	strb.w	r3, [r2, #1060]	; 0x424
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800efd0:	4b40      	ldr	r3, [pc, #256]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800efd2:	f893 2444 	ldrb.w	r2, [r3, #1092]	; 0x444
 800efd6:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800efda:	f7ff fac2 	bl	800e562 <RemoveMacCommands>
            switch( fType )
 800efde:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800efe2:	2b03      	cmp	r3, #3
 800efe4:	f200 809a 	bhi.w	800f11c <ProcessRadioRxDone+0x5b4>
 800efe8:	e8df f003 	tbb	[pc, r3]
 800efec:	88785d36 	.word	0x88785d36
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800eff0:	2802      	cmp	r0, #2
 800eff2:	d006      	beq.n	800f002 <ProcessRadioRxDone+0x49a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800eff4:	4b37      	ldr	r3, [pc, #220]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800eff6:	220b      	movs	r2, #11
 800eff8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800effc:	f7ff fa48 	bl	800e490 <PrepareRxDoneAbort>
                return;
 800f000:	e0d0      	b.n	800f1a4 <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800f002:	4b34      	ldr	r3, [pc, #208]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800f004:	220a      	movs	r2, #10
 800f006:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800f00a:	e7f7      	b.n	800effc <ProcessRadioRxDone+0x494>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800f00c:	4b30      	ldr	r3, [pc, #192]	; (800f0d0 <ProcessRadioRxDone+0x568>)
 800f00e:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800f010:	2201      	movs	r2, #1
 800f012:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 800f016:	e7ce      	b.n	800efb6 <ProcessRadioRxDone+0x44e>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f018:	4b2e      	ldr	r3, [pc, #184]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800f01a:	2202      	movs	r2, #2
 800f01c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 800f020:	e7d6      	b.n	800efd0 <ProcessRadioRxDone+0x468>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800f022:	4b2b      	ldr	r3, [pc, #172]	; (800f0d0 <ProcessRadioRxDone+0x568>)
 800f024:	2201      	movs	r2, #1
 800f026:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f02a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800f02e:	b913      	cbnz	r3, 800f036 <ProcessRadioRxDone+0x4ce>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800f030:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f032:	4b27      	ldr	r3, [pc, #156]	; (800f0d0 <ProcessRadioRxDone+0x568>)
 800f034:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f036:	4b27      	ldr	r3, [pc, #156]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800f038:	2201      	movs	r2, #1
 800f03a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f03e:	4290      	cmp	r0, r2
 800f040:	d9c6      	bls.n	800efd0 <ProcessRadioRxDone+0x468>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800f042:	4b23      	ldr	r3, [pc, #140]	; (800f0d0 <ProcessRadioRxDone+0x568>)
 800f044:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800f048:	4b22      	ldr	r3, [pc, #136]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800f04a:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800f04e:	4a22      	ldr	r2, [pc, #136]	; (800f0d8 <ProcessRadioRxDone+0x570>)
 800f050:	6812      	ldr	r2, [r2, #0]
 800f052:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
 800f056:	e7bb      	b.n	800efd0 <ProcessRadioRxDone+0x468>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f058:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800f05c:	4c1d      	ldr	r4, [pc, #116]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800f05e:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800f062:	9300      	str	r3, [sp, #0]
 800f064:	463b      	mov	r3, r7
 800f066:	f002 020f 	and.w	r2, r2, #15
 800f06a:	2100      	movs	r1, #0
 800f06c:	a812      	add	r0, sp, #72	; 0x48
 800f06e:	f7ff fa87 	bl	800e580 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f072:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800f076:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f07a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f07c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f080:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800f084:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800f088:	2301      	movs	r3, #1
 800f08a:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800f08e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800f092:	2be0      	cmp	r3, #224	; 0xe0
 800f094:	d049      	beq.n	800f12a <ProcessRadioRxDone+0x5c2>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f096:	4a0f      	ldr	r2, [pc, #60]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800f098:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f09c:	f043 0302 	orr.w	r3, r3, #2
 800f0a0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800f0a4:	e06b      	b.n	800f17e <ProcessRadioRxDone+0x616>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f0a6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800f0aa:	4c0a      	ldr	r4, [pc, #40]	; (800f0d4 <ProcessRadioRxDone+0x56c>)
 800f0ac:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800f0b0:	9300      	str	r3, [sp, #0]
 800f0b2:	463b      	mov	r3, r7
 800f0b4:	f002 020f 	and.w	r2, r2, #15
 800f0b8:	2100      	movs	r1, #0
 800f0ba:	a812      	add	r0, sp, #72	; 0x48
 800f0bc:	f7ff fa60 	bl	800e580 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f0c0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800f0c4:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 800f0c8:	e7e1      	b.n	800f08e <ProcessRadioRxDone+0x526>
 800f0ca:	bf00      	nop
 800f0cc:	20000bd8 	.word	0x20000bd8
 800f0d0:	20008000 	.word	0x20008000
 800f0d4:	200009a0 	.word	0x200009a0
 800f0d8:	20000f50 	.word	0x20000f50
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800f0dc:	4c3d      	ldr	r4, [pc, #244]	; (800f1d4 <ProcessRadioRxDone+0x66c>)
 800f0de:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	463b      	mov	r3, r7
 800f0e6:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800f0ea:	2100      	movs	r1, #0
 800f0ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f0ee:	f7ff fa47 	bl	800e580 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f0f2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800f0f6:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 800f0fa:	e7c8      	b.n	800f08e <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f0fc:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800f100:	4b34      	ldr	r3, [pc, #208]	; (800f1d4 <ProcessRadioRxDone+0x66c>)
 800f102:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f106:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f108:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f10c:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800f110:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800f114:	2201      	movs	r2, #1
 800f116:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800f11a:	e7b8      	b.n	800f08e <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f11c:	4b2d      	ldr	r3, [pc, #180]	; (800f1d4 <ProcessRadioRxDone+0x66c>)
 800f11e:	2201      	movs	r2, #1
 800f120:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 800f124:	f7ff f9b4 	bl	800e490 <PrepareRxDoneAbort>
                    break;
 800f128:	e7b1      	b.n	800f08e <ProcessRadioRxDone+0x526>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800f12a:	4a2b      	ldr	r2, [pc, #172]	; (800f1d8 <ProcessRadioRxDone+0x670>)
 800f12c:	f892 210b 	ldrb.w	r2, [r2, #267]	; 0x10b
 800f130:	2a00      	cmp	r2, #0
 800f132:	d1b0      	bne.n	800f096 <ProcessRadioRxDone+0x52e>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f134:	4a27      	ldr	r2, [pc, #156]	; (800f1d4 <ProcessRadioRxDone+0x66c>)
 800f136:	f882 3427 	strb.w	r3, [r2, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800f13a:	2300      	movs	r3, #0
 800f13c:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800f140:	f882 3430 	strb.w	r3, [r2, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 800f144:	f882 3431 	strb.w	r3, [r2, #1073]	; 0x431
 800f148:	e7a5      	b.n	800f096 <ProcessRadioRxDone+0x52e>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f14a:	1e6a      	subs	r2, r5, #1
 800f14c:	4c21      	ldr	r4, [pc, #132]	; (800f1d4 <ProcessRadioRxDone+0x66c>)
 800f14e:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800f152:	b292      	uxth	r2, r2
 800f154:	1c71      	adds	r1, r6, #1
 800f156:	4638      	mov	r0, r7
 800f158:	f006 faaf 	bl	80156ba <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f15c:	2303      	movs	r3, #3
 800f15e:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f162:	2300      	movs	r3, #0
 800f164:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f168:	f8c4 742c 	str.w	r7, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f16c:	3d01      	subs	r5, #1
 800f16e:	f884 5430 	strb.w	r5, [r4, #1072]	; 0x430
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f172:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 800f176:	f043 0302 	orr.w	r3, r3, #2
 800f17a:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f17e:	4b15      	ldr	r3, [pc, #84]	; (800f1d4 <ProcessRadioRxDone+0x66c>)
 800f180:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f184:	2b01      	cmp	r3, #1
 800f186:	d917      	bls.n	800f1b8 <ProcessRadioRxDone+0x650>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800f188:	4b12      	ldr	r3, [pc, #72]	; (800f1d4 <ProcessRadioRxDone+0x66c>)
 800f18a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f18e:	2b02      	cmp	r3, #2
 800f190:	d006      	beq.n	800f1a0 <ProcessRadioRxDone+0x638>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800f192:	4a10      	ldr	r2, [pc, #64]	; (800f1d4 <ProcessRadioRxDone+0x66c>)
 800f194:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f198:	f043 0320 	orr.w	r3, r3, #32
 800f19c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800f1a0:	f7fe ff80 	bl	800e0a4 <UpdateRxSlotIdleState>
}
 800f1a4:	b021      	add	sp, #132	; 0x84
 800f1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f1aa:	4b0a      	ldr	r3, [pc, #40]	; (800f1d4 <ProcessRadioRxDone+0x66c>)
 800f1ac:	2201      	movs	r2, #1
 800f1ae:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 800f1b2:	f7ff f96d 	bl	800e490 <PrepareRxDoneAbort>
            break;
 800f1b6:	e7e2      	b.n	800f17e <ProcessRadioRxDone+0x616>
        if( MacCtx.NodeAckRequested == true )
 800f1b8:	4b06      	ldr	r3, [pc, #24]	; (800f1d4 <ProcessRadioRxDone+0x66c>)
 800f1ba:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d0e2      	beq.n	800f188 <ProcessRadioRxDone+0x620>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800f1c2:	4b04      	ldr	r3, [pc, #16]	; (800f1d4 <ProcessRadioRxDone+0x66c>)
 800f1c4:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d0dd      	beq.n	800f188 <ProcessRadioRxDone+0x620>
                OnRetransmitTimeoutTimerEvent( NULL );
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	f7ff f949 	bl	800e464 <OnRetransmitTimeoutTimerEvent>
 800f1d2:	e7d9      	b.n	800f188 <ProcessRadioRxDone+0x620>
 800f1d4:	200009a0 	.word	0x200009a0
 800f1d8:	20008000 	.word	0x20008000

0800f1dc <ProcessRadioTxTimeout>:
{
 800f1dc:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f1de:	4b0f      	ldr	r3, [pc, #60]	; (800f21c <ProcessRadioTxTimeout+0x40>)
 800f1e0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f1e4:	2b02      	cmp	r3, #2
 800f1e6:	d002      	beq.n	800f1ee <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800f1e8:	4b0d      	ldr	r3, [pc, #52]	; (800f220 <ProcessRadioTxTimeout+0x44>)
 800f1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ec:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800f1ee:	f7fe ff59 	bl	800e0a4 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f1f2:	4c0c      	ldr	r4, [pc, #48]	; (800f224 <ProcessRadioTxTimeout+0x48>)
 800f1f4:	2002      	movs	r0, #2
 800f1f6:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f1fa:	f002 fc41 	bl	8011a80 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f1fe:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800f202:	b113      	cbz	r3, 800f20a <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800f204:	2201      	movs	r2, #1
 800f206:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f20a:	4a06      	ldr	r2, [pc, #24]	; (800f224 <ProcessRadioTxTimeout+0x48>)
 800f20c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f210:	f043 0320 	orr.w	r3, r3, #32
 800f214:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 800f218:	bd10      	pop	{r4, pc}
 800f21a:	bf00      	nop
 800f21c:	20008000 	.word	0x20008000
 800f220:	0801c3a0 	.word	0x0801c3a0
 800f224:	200009a0 	.word	0x200009a0

0800f228 <CheckForClassBCollision>:
{
 800f228:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f22a:	f002 f9d2 	bl	80115d2 <LoRaMacClassBIsBeaconExpected>
 800f22e:	b978      	cbnz	r0, 800f250 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f230:	4b09      	ldr	r3, [pc, #36]	; (800f258 <CheckForClassBCollision+0x30>)
 800f232:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f236:	2b01      	cmp	r3, #1
 800f238:	d001      	beq.n	800f23e <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800f23a:	2000      	movs	r0, #0
}
 800f23c:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f23e:	f002 f9ca 	bl	80115d6 <LoRaMacClassBIsPingExpected>
 800f242:	b938      	cbnz	r0, 800f254 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f244:	f002 f9c9 	bl	80115da <LoRaMacClassBIsMulticastExpected>
 800f248:	2800      	cmp	r0, #0
 800f24a:	d0f7      	beq.n	800f23c <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f24c:	200f      	movs	r0, #15
 800f24e:	e7f5      	b.n	800f23c <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800f250:	200e      	movs	r0, #14
 800f252:	e7f3      	b.n	800f23c <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f254:	200f      	movs	r0, #15
 800f256:	e7f1      	b.n	800f23c <CheckForClassBCollision+0x14>
 800f258:	20008000 	.word	0x20008000

0800f25c <HandleRadioRxErrorTimeout>:
{
 800f25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f25e:	4605      	mov	r5, r0
 800f260:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f262:	4b34      	ldr	r3, [pc, #208]	; (800f334 <HandleRadioRxErrorTimeout+0xd8>)
 800f264:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f268:	2b02      	cmp	r3, #2
 800f26a:	d002      	beq.n	800f272 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800f26c:	4b32      	ldr	r3, [pc, #200]	; (800f338 <HandleRadioRxErrorTimeout+0xdc>)
 800f26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f270:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f272:	f002 f9ae 	bl	80115d2 <LoRaMacClassBIsBeaconExpected>
 800f276:	4606      	mov	r6, r0
 800f278:	bb50      	cbnz	r0, 800f2d0 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f27a:	4b2e      	ldr	r3, [pc, #184]	; (800f334 <HandleRadioRxErrorTimeout+0xd8>)
 800f27c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f280:	2b01      	cmp	r3, #1
 800f282:	d02c      	beq.n	800f2de <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 800f284:	2e00      	cmp	r6, #0
 800f286:	d152      	bne.n	800f32e <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f288:	4b2c      	ldr	r3, [pc, #176]	; (800f33c <HandleRadioRxErrorTimeout+0xe0>)
 800f28a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d13c      	bne.n	800f30c <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 800f292:	4b2a      	ldr	r3, [pc, #168]	; (800f33c <HandleRadioRxErrorTimeout+0xe0>)
 800f294:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f298:	b113      	cbz	r3, 800f2a0 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f29a:	4b28      	ldr	r3, [pc, #160]	; (800f33c <HandleRadioRxErrorTimeout+0xe0>)
 800f29c:	f883 5445 	strb.w	r5, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	f002 fbed 	bl	8011a80 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f2a6:	4b23      	ldr	r3, [pc, #140]	; (800f334 <HandleRadioRxErrorTimeout+0xd8>)
 800f2a8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f2aa:	f008 fbcd 	bl	8017a48 <UTIL_TIMER_GetElapsedTime>
 800f2ae:	4b23      	ldr	r3, [pc, #140]	; (800f33c <HandleRadioRxErrorTimeout+0xe0>)
 800f2b0:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800f2b4:	4298      	cmp	r0, r3
 800f2b6:	d33a      	bcc.n	800f32e <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f2b8:	4c20      	ldr	r4, [pc, #128]	; (800f33c <HandleRadioRxErrorTimeout+0xe0>)
 800f2ba:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800f2be:	f008 fbf9 	bl	8017ab4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f2c2:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 800f2c6:	f043 0320 	orr.w	r3, r3, #32
 800f2ca:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
 800f2ce:	e02e      	b.n	800f32e <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f2d0:	2002      	movs	r0, #2
 800f2d2:	f002 f974 	bl	80115be <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f2d6:	2000      	movs	r0, #0
 800f2d8:	f002 f976 	bl	80115c8 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f2dc:	e7cd      	b.n	800f27a <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f2de:	f002 f97a 	bl	80115d6 <LoRaMacClassBIsPingExpected>
 800f2e2:	4607      	mov	r7, r0
 800f2e4:	b950      	cbnz	r0, 800f2fc <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f2e6:	f002 f978 	bl	80115da <LoRaMacClassBIsMulticastExpected>
 800f2ea:	2800      	cmp	r0, #0
 800f2ec:	d0ca      	beq.n	800f284 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f2ee:	2000      	movs	r0, #0
 800f2f0:	f002 f967 	bl	80115c2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f2f4:	2000      	movs	r0, #0
 800f2f6:	f002 f969 	bl	80115cc <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800f2fa:	e018      	b.n	800f32e <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f2fc:	2000      	movs	r0, #0
 800f2fe:	f002 f95f 	bl	80115c0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f302:	2000      	movs	r0, #0
 800f304:	f002 f961 	bl	80115ca <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f308:	463e      	mov	r6, r7
 800f30a:	e7ec      	b.n	800f2e6 <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 800f30c:	4b0b      	ldr	r3, [pc, #44]	; (800f33c <HandleRadioRxErrorTimeout+0xe0>)
 800f30e:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f312:	b113      	cbz	r3, 800f31a <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f314:	4b09      	ldr	r3, [pc, #36]	; (800f33c <HandleRadioRxErrorTimeout+0xe0>)
 800f316:	f883 4445 	strb.w	r4, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f31a:	4620      	mov	r0, r4
 800f31c:	f002 fbb0 	bl	8011a80 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800f320:	4a06      	ldr	r2, [pc, #24]	; (800f33c <HandleRadioRxErrorTimeout+0xe0>)
 800f322:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f326:	f043 0320 	orr.w	r3, r3, #32
 800f32a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800f32e:	f7fe feb9 	bl	800e0a4 <UpdateRxSlotIdleState>
}
 800f332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f334:	20008000 	.word	0x20008000
 800f338:	0801c3a0 	.word	0x0801c3a0
 800f33c:	200009a0 	.word	0x200009a0

0800f340 <ProcessRadioRxError>:
{
 800f340:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f342:	2106      	movs	r1, #6
 800f344:	2005      	movs	r0, #5
 800f346:	f7ff ff89 	bl	800f25c <HandleRadioRxErrorTimeout>
}
 800f34a:	bd08      	pop	{r3, pc}

0800f34c <ProcessRadioRxTimeout>:
{
 800f34c:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f34e:	2104      	movs	r1, #4
 800f350:	2003      	movs	r0, #3
 800f352:	f7ff ff83 	bl	800f25c <HandleRadioRxErrorTimeout>
}
 800f356:	bd08      	pop	{r3, pc}

0800f358 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f358:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f35c:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800f35e:	4a14      	ldr	r2, [pc, #80]	; (800f3b0 <LoRaMacHandleIrqEvents+0x58>)
 800f360:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800f362:	2000      	movs	r0, #0
 800f364:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f366:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800f36a:	b303      	cbz	r3, 800f3ae <LoRaMacHandleIrqEvents+0x56>
{
 800f36c:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800f36e:	b2dc      	uxtb	r4, r3
 800f370:	f013 0f20 	tst.w	r3, #32
 800f374:	d10c      	bne.n	800f390 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800f376:	f014 0f10 	tst.w	r4, #16
 800f37a:	d10c      	bne.n	800f396 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800f37c:	f014 0f08 	tst.w	r4, #8
 800f380:	d10c      	bne.n	800f39c <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800f382:	f014 0f04 	tst.w	r4, #4
 800f386:	d10c      	bne.n	800f3a2 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800f388:	f014 0f02 	tst.w	r4, #2
 800f38c:	d10c      	bne.n	800f3a8 <LoRaMacHandleIrqEvents+0x50>
}
 800f38e:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800f390:	f7fe fff2 	bl	800e378 <ProcessRadioTxDone>
 800f394:	e7ef      	b.n	800f376 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800f396:	f7ff fbe7 	bl	800eb68 <ProcessRadioRxDone>
 800f39a:	e7ef      	b.n	800f37c <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800f39c:	f7ff ff1e 	bl	800f1dc <ProcessRadioTxTimeout>
 800f3a0:	e7ef      	b.n	800f382 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800f3a2:	f7ff ffcd 	bl	800f340 <ProcessRadioRxError>
 800f3a6:	e7ef      	b.n	800f388 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800f3a8:	f7ff ffd0 	bl	800f34c <ProcessRadioRxTimeout>
}
 800f3ac:	e7ef      	b.n	800f38e <LoRaMacHandleIrqEvents+0x36>
 800f3ae:	4770      	bx	lr
 800f3b0:	2000099c 	.word	0x2000099c

0800f3b4 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 800f3b4:	b909      	cbnz	r1, 800f3ba <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800f3b6:	2000      	movs	r0, #0
}
 800f3b8:	4770      	bx	lr
{
 800f3ba:	b510      	push	{r4, lr}
 800f3bc:	4604      	mov	r4, r0
 800f3be:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800f3c0:	f008 fb42 	bl	8017a48 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800f3c4:	42a0      	cmp	r0, r4
 800f3c6:	d801      	bhi.n	800f3cc <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800f3c8:	2000      	movs	r0, #0
}
 800f3ca:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800f3cc:	4b02      	ldr	r3, [pc, #8]	; (800f3d8 <LoRaMacHandleResponseTimeout+0x24>)
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800f3d4:	2001      	movs	r0, #1
 800f3d6:	e7f8      	b.n	800f3ca <LoRaMacHandleResponseTimeout+0x16>
 800f3d8:	20008000 	.word	0x20008000

0800f3dc <LoRaMacHandleMlmeRequest>:
{
 800f3dc:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f3de:	4b14      	ldr	r3, [pc, #80]	; (800f430 <LoRaMacHandleMlmeRequest+0x54>)
 800f3e0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f3e4:	f013 0f04 	tst.w	r3, #4
 800f3e8:	d100      	bne.n	800f3ec <LoRaMacHandleMlmeRequest+0x10>
}
 800f3ea:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f3ec:	2001      	movs	r0, #1
 800f3ee:	f002 fb65 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800f3f2:	b178      	cbz	r0, 800f414 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f3f4:	2001      	movs	r0, #1
 800f3f6:	f002 fb2b 	bl	8011a50 <LoRaMacConfirmQueueGetStatus>
 800f3fa:	b918      	cbnz	r0, 800f404 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800f3fc:	4b0c      	ldr	r3, [pc, #48]	; (800f430 <LoRaMacHandleMlmeRequest+0x54>)
 800f3fe:	2200      	movs	r2, #0
 800f400:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f404:	4a0a      	ldr	r2, [pc, #40]	; (800f430 <LoRaMacHandleMlmeRequest+0x54>)
 800f406:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800f40a:	f023 0302 	bic.w	r3, r3, #2
 800f40e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800f412:	e7ea      	b.n	800f3ea <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800f414:	2005      	movs	r0, #5
 800f416:	f002 fb51 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800f41a:	2800      	cmp	r0, #0
 800f41c:	d0e5      	beq.n	800f3ea <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f41e:	4a04      	ldr	r2, [pc, #16]	; (800f430 <LoRaMacHandleMlmeRequest+0x54>)
 800f420:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800f424:	f023 0302 	bic.w	r3, r3, #2
 800f428:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800f42c:	e7dd      	b.n	800f3ea <LoRaMacHandleMlmeRequest+0xe>
 800f42e:	bf00      	nop
 800f430:	200009a0 	.word	0x200009a0

0800f434 <SerializeTxFrame>:
{
 800f434:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800f436:	4b0f      	ldr	r3, [pc, #60]	; (800f474 <SerializeTxFrame+0x40>)
 800f438:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f43c:	b11b      	cbz	r3, 800f446 <SerializeTxFrame+0x12>
 800f43e:	2b04      	cmp	r3, #4
 800f440:	d00a      	beq.n	800f458 <SerializeTxFrame+0x24>
 800f442:	2003      	movs	r0, #3
}
 800f444:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800f446:	480c      	ldr	r0, [pc, #48]	; (800f478 <SerializeTxFrame+0x44>)
 800f448:	f002 ffd3 	bl	80123f2 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800f44c:	b968      	cbnz	r0, 800f46a <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800f44e:	4b09      	ldr	r3, [pc, #36]	; (800f474 <SerializeTxFrame+0x40>)
 800f450:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800f454:	801a      	strh	r2, [r3, #0]
            break;
 800f456:	e7f5      	b.n	800f444 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800f458:	4807      	ldr	r0, [pc, #28]	; (800f478 <SerializeTxFrame+0x44>)
 800f45a:	f003 f800 	bl	801245e <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800f45e:	b930      	cbnz	r0, 800f46e <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800f460:	4b04      	ldr	r3, [pc, #16]	; (800f474 <SerializeTxFrame+0x40>)
 800f462:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800f466:	801a      	strh	r2, [r3, #0]
            break;
 800f468:	e7ec      	b.n	800f444 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f46a:	2011      	movs	r0, #17
 800f46c:	e7ea      	b.n	800f444 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f46e:	2011      	movs	r0, #17
 800f470:	e7e8      	b.n	800f444 <SerializeTxFrame+0x10>
 800f472:	bf00      	nop
 800f474:	200009a0 	.word	0x200009a0
 800f478:	20000aa8 	.word	0x20000aa8

0800f47c <ComputeRxWindowParameters>:
{
 800f47c:	b570      	push	{r4, r5, r6, lr}
 800f47e:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f480:	4c1d      	ldr	r4, [pc, #116]	; (800f4f8 <ComputeRxWindowParameters+0x7c>)
 800f482:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f486:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 800f48a:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800f48e:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 800f492:	4630      	mov	r0, r6
 800f494:	f003 f993 	bl	80127be <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f498:	4d18      	ldr	r5, [pc, #96]	; (800f4fc <ComputeRxWindowParameters+0x80>)
 800f49a:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800f49e:	9300      	str	r3, [sp, #0]
 800f4a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f4a2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800f4a6:	b241      	sxtb	r1, r0
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	f003 f8d4 	bl	8012656 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f4ae:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 800f4b2:	9300      	str	r3, [sp, #0]
 800f4b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f4b6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800f4ba:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 800f4be:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800f4c2:	f003 f8c8 	bl	8012656 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f4c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f4c8:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800f4cc:	440b      	add	r3, r1
 800f4ce:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f4d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f4d4:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 800f4d8:	4413      	add	r3, r2
 800f4da:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f4de:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800f4e2:	b93b      	cbnz	r3, 800f4f4 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f4e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f4e6:	4419      	add	r1, r3
 800f4e8:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f4ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f4ee:	440a      	add	r2, r1
 800f4f0:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800f4f4:	b002      	add	sp, #8
 800f4f6:	bd70      	pop	{r4, r5, r6, pc}
 800f4f8:	20008000 	.word	0x20008000
 800f4fc:	200009a0 	.word	0x200009a0

0800f500 <VerifyTxFrame>:
{
 800f500:	b510      	push	{r4, lr}
 800f502:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800f504:	2300      	movs	r3, #0
 800f506:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f508:	4b0d      	ldr	r3, [pc, #52]	; (800f540 <VerifyTxFrame+0x40>)
 800f50a:	f893 411c 	ldrb.w	r4, [r3, #284]	; 0x11c
 800f50e:	b914      	cbnz	r4, 800f516 <VerifyTxFrame+0x16>
}
 800f510:	4620      	mov	r0, r4
 800f512:	b002      	add	sp, #8
 800f514:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f516:	a801      	add	r0, sp, #4
 800f518:	f002 f980 	bl	801181c <LoRaMacCommandsGetSizeSerializedCmds>
 800f51c:	4604      	mov	r4, r0
 800f51e:	b968      	cbnz	r0, 800f53c <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800f520:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f524:	4b06      	ldr	r3, [pc, #24]	; (800f540 <VerifyTxFrame+0x40>)
 800f526:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800f52a:	4b06      	ldr	r3, [pc, #24]	; (800f544 <VerifyTxFrame+0x44>)
 800f52c:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800f530:	f7fe ff10 	bl	800e354 <ValidatePayloadLength>
 800f534:	2800      	cmp	r0, #0
 800f536:	d1eb      	bne.n	800f510 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800f538:	2408      	movs	r4, #8
 800f53a:	e7e9      	b.n	800f510 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f53c:	2413      	movs	r4, #19
 800f53e:	e7e7      	b.n	800f510 <VerifyTxFrame+0x10>
 800f540:	20008000 	.word	0x20008000
 800f544:	200009a0 	.word	0x200009a0

0800f548 <SecureFrame>:
{
 800f548:	b530      	push	{r4, r5, lr}
 800f54a:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800f54c:	2300      	movs	r3, #0
 800f54e:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800f550:	4b18      	ldr	r3, [pc, #96]	; (800f5b4 <SecureFrame+0x6c>)
 800f552:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f556:	b133      	cbz	r3, 800f566 <SecureFrame+0x1e>
 800f558:	4605      	mov	r5, r0
 800f55a:	460c      	mov	r4, r1
 800f55c:	2b04      	cmp	r3, #4
 800f55e:	d00b      	beq.n	800f578 <SecureFrame+0x30>
 800f560:	2003      	movs	r0, #3
}
 800f562:	b003      	add	sp, #12
 800f564:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800f566:	4814      	ldr	r0, [pc, #80]	; (800f5b8 <SecureFrame+0x70>)
 800f568:	f002 fd08 	bl	8011f7c <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800f56c:	b9d8      	cbnz	r0, 800f5a6 <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800f56e:	4b11      	ldr	r3, [pc, #68]	; (800f5b4 <SecureFrame+0x6c>)
 800f570:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800f574:	801a      	strh	r2, [r3, #0]
            break;
 800f576:	e7f4      	b.n	800f562 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800f578:	a801      	add	r0, sp, #4
 800f57a:	f002 fcb5 	bl	8011ee8 <LoRaMacCryptoGetFCntUp>
 800f57e:	b9a0      	cbnz	r0, 800f5aa <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800f580:	4b0c      	ldr	r3, [pc, #48]	; (800f5b4 <SecureFrame+0x6c>)
 800f582:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800f586:	b113      	cbz	r3, 800f58e <SecureFrame+0x46>
                fCntUp -= 1;
 800f588:	9b01      	ldr	r3, [sp, #4]
 800f58a:	3b01      	subs	r3, #1
 800f58c:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800f58e:	4b0a      	ldr	r3, [pc, #40]	; (800f5b8 <SecureFrame+0x70>)
 800f590:	4622      	mov	r2, r4
 800f592:	4629      	mov	r1, r5
 800f594:	9801      	ldr	r0, [sp, #4]
 800f596:	f002 fd17 	bl	8011fc8 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800f59a:	b940      	cbnz	r0, 800f5ae <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800f59c:	4b05      	ldr	r3, [pc, #20]	; (800f5b4 <SecureFrame+0x6c>)
 800f59e:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800f5a2:	801a      	strh	r2, [r3, #0]
            break;
 800f5a4:	e7dd      	b.n	800f562 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f5a6:	2011      	movs	r0, #17
 800f5a8:	e7db      	b.n	800f562 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800f5aa:	2012      	movs	r0, #18
 800f5ac:	e7d9      	b.n	800f562 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f5ae:	2011      	movs	r0, #17
 800f5b0:	e7d7      	b.n	800f562 <SecureFrame+0x1a>
 800f5b2:	bf00      	nop
 800f5b4:	200009a0 	.word	0x200009a0
 800f5b8:	20000aa8 	.word	0x20000aa8

0800f5bc <SendFrameOnChannel>:
{
 800f5bc:	b570      	push	{r4, r5, r6, lr}
 800f5be:	b086      	sub	sp, #24
 800f5c0:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800f5c8:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f5cc:	4d35      	ldr	r5, [pc, #212]	; (800f6a4 <SendFrameOnChannel+0xe8>)
 800f5ce:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800f5d2:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f5d6:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800f5da:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800f5de:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800f5e0:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800f5e2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800f5e4:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800f5e6:	4c30      	ldr	r4, [pc, #192]	; (800f6a8 <SendFrameOnChannel+0xec>)
 800f5e8:	8823      	ldrh	r3, [r4, #0]
 800f5ea:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f5ee:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
 800f5f2:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800f5f6:	f504 6384 	add.w	r3, r4, #1056	; 0x420
 800f5fa:	f10d 0207 	add.w	r2, sp, #7
 800f5fe:	a902      	add	r1, sp, #8
 800f600:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 800f604:	f003 f84b 	bl	801269e <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f608:	2301      	movs	r3, #1
 800f60a:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f60e:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800f612:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 800f616:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f61a:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 800f61e:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800f622:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
 800f626:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800f62a:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800f62e:	f001 ffd6 	bl	80115de <LoRaMacClassBIsBeaconModeActive>
 800f632:	bb60      	cbnz	r0, 800f68e <SendFrameOnChannel+0xd2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f634:	4b1b      	ldr	r3, [pc, #108]	; (800f6a4 <SendFrameOnChannel+0xe8>)
 800f636:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f63a:	2b01      	cmp	r3, #1
 800f63c:	d02f      	beq.n	800f69e <SendFrameOnChannel+0xe2>
    LoRaMacClassBHaltBeaconing( );
 800f63e:	f001 ffd1 	bl	80115e4 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800f642:	4b18      	ldr	r3, [pc, #96]	; (800f6a4 <SendFrameOnChannel+0xe8>)
 800f644:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800f648:	4b17      	ldr	r3, [pc, #92]	; (800f6a8 <SendFrameOnChannel+0xec>)
 800f64a:	f893 141f 	ldrb.w	r1, [r3, #1055]	; 0x41f
 800f64e:	b2c0      	uxtb	r0, r0
 800f650:	f7ff ff7a 	bl	800f548 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800f654:	4604      	mov	r4, r0
 800f656:	b9b8      	cbnz	r0, 800f688 <SendFrameOnChannel+0xcc>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800f658:	4813      	ldr	r0, [pc, #76]	; (800f6a8 <SendFrameOnChannel+0xec>)
 800f65a:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800f65e:	f043 0302 	orr.w	r3, r3, #2
 800f662:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800f666:	f890 341c 	ldrb.w	r3, [r0, #1052]	; 0x41c
 800f66a:	3301      	adds	r3, #1
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f672:	f880 3449 	strb.w	r3, [r0, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 800f676:	2300      	movs	r3, #0
 800f678:	f8c0 349c 	str.w	r3, [r0, #1180]	; 0x49c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800f67c:	4b0b      	ldr	r3, [pc, #44]	; (800f6ac <SendFrameOnChannel+0xf0>)
 800f67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f680:	f830 1b02 	ldrh.w	r1, [r0], #2
 800f684:	b2c9      	uxtb	r1, r1
 800f686:	4798      	blx	r3
}
 800f688:	4620      	mov	r0, r4
 800f68a:	b006      	add	sp, #24
 800f68c:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800f68e:	f8d4 0420 	ldr.w	r0, [r4, #1056]	; 0x420
 800f692:	f001 ffb6 	bl	8011602 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800f696:	2800      	cmp	r0, #0
 800f698:	d0cc      	beq.n	800f634 <SendFrameOnChannel+0x78>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800f69a:	2410      	movs	r4, #16
 800f69c:	e7f4      	b.n	800f688 <SendFrameOnChannel+0xcc>
        LoRaMacClassBStopRxSlots( );
 800f69e:	f001 ffb2 	bl	8011606 <LoRaMacClassBStopRxSlots>
 800f6a2:	e7cc      	b.n	800f63e <SendFrameOnChannel+0x82>
 800f6a4:	20008000 	.word	0x20008000
 800f6a8:	200009a0 	.word	0x200009a0
 800f6ac:	0801c3a0 	.word	0x0801c3a0

0800f6b0 <ScheduleTx>:
{
 800f6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b4:	b08c      	sub	sp, #48	; 0x30
 800f6b6:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800f6b8:	f7ff fdb6 	bl	800f228 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800f6bc:	4604      	mov	r4, r0
 800f6be:	b118      	cbz	r0, 800f6c8 <ScheduleTx+0x18>
}
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	b00c      	add	sp, #48	; 0x30
 800f6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800f6c8:	f7fe fd50 	bl	800e16c <CalculateBackOff>
    status = SerializeTxFrame( );
 800f6cc:	f7ff feb2 	bl	800f434 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800f6d0:	4604      	mov	r4, r0
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	d1f4      	bne.n	800f6c0 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800f6d6:	4e36      	ldr	r6, [pc, #216]	; (800f7b0 <ScheduleTx+0x100>)
 800f6d8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800f6da:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f6dc:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800f6e0:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800f6e4:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
 800f6e8:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f6ec:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800f6f0:	4640      	mov	r0, r8
 800f6f2:	f008 f913 	bl	801791c <SysTimeGetMcuTime>
 800f6f6:	af02      	add	r7, sp, #8
 800f6f8:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 800f6fc:	9300      	str	r3, [sp, #0]
 800f6fe:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 800f702:	e898 0006 	ldmia.w	r8, {r1, r2}
 800f706:	4638      	mov	r0, r7
 800f708:	f008 f8a5 	bl	8017856 <SysTimeSub>
 800f70c:	ab07      	add	r3, sp, #28
 800f70e:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f712:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800f716:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800f718:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800f71a:	2300      	movs	r3, #0
 800f71c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800f720:	2301      	movs	r3, #1
 800f722:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800f726:	4b23      	ldr	r3, [pc, #140]	; (800f7b4 <ScheduleTx+0x104>)
 800f728:	881b      	ldrh	r3, [r3, #0]
 800f72a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f72e:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800f732:	b92b      	cbnz	r3, 800f740 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800f734:	2301      	movs	r3, #1
 800f736:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800f73a:	2300      	movs	r3, #0
 800f73c:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800f740:	4a1c      	ldr	r2, [pc, #112]	; (800f7b4 <ScheduleTx+0x104>)
 800f742:	481b      	ldr	r0, [pc, #108]	; (800f7b0 <ScheduleTx+0x100>)
 800f744:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f748:	9300      	str	r3, [sp, #0]
 800f74a:	f502 6393 	add.w	r3, r2, #1176	; 0x498
 800f74e:	f202 421f 	addw	r2, r2, #1055	; 0x41f
 800f752:	a904      	add	r1, sp, #16
 800f754:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800f758:	f003 f81c 	bl	8012794 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800f75c:	b1b0      	cbz	r0, 800f78c <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800f75e:	280b      	cmp	r0, #11
 800f760:	d122      	bne.n	800f7a8 <ScheduleTx+0xf8>
 800f762:	b31d      	cbz	r5, 800f7ac <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800f764:	4b13      	ldr	r3, [pc, #76]	; (800f7b4 <ScheduleTx+0x104>)
 800f766:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 800f76a:	2900      	cmp	r1, #0
 800f76c:	d0a8      	beq.n	800f6c0 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800f76e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800f772:	f042 0220 	orr.w	r2, r2, #32
 800f776:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800f77a:	f503 755a 	add.w	r5, r3, #872	; 0x368
 800f77e:	4628      	mov	r0, r5
 800f780:	f008 fa38 	bl	8017bf4 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800f784:	4628      	mov	r0, r5
 800f786:	f008 f9ef 	bl	8017b68 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 800f78a:	e799      	b.n	800f6c0 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800f78c:	f7ff fe76 	bl	800f47c <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800f790:	f7ff feb6 	bl	800f500 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800f794:	4604      	mov	r4, r0
 800f796:	2800      	cmp	r0, #0
 800f798:	d192      	bne.n	800f6c0 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800f79a:	4b06      	ldr	r3, [pc, #24]	; (800f7b4 <ScheduleTx+0x104>)
 800f79c:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 800f7a0:	f7ff ff0c 	bl	800f5bc <SendFrameOnChannel>
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	e78b      	b.n	800f6c0 <ScheduleTx+0x10>
            return status;
 800f7a8:	4604      	mov	r4, r0
 800f7aa:	e789      	b.n	800f6c0 <ScheduleTx+0x10>
 800f7ac:	4604      	mov	r4, r0
 800f7ae:	e787      	b.n	800f6c0 <ScheduleTx+0x10>
 800f7b0:	20008000 	.word	0x20008000
 800f7b4:	200009a0 	.word	0x200009a0

0800f7b8 <OnTxDelayedTimerEvent>:
{
 800f7b8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800f7ba:	4c16      	ldr	r4, [pc, #88]	; (800f814 <OnTxDelayedTimerEvent+0x5c>)
 800f7bc:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800f7c0:	f008 f978 	bl	8017ab4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f7c4:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800f7c8:	f023 0320 	bic.w	r3, r3, #32
 800f7cc:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f7d0:	f8d4 149c 	ldr.w	r1, [r4, #1180]	; 0x49c
 800f7d4:	4b10      	ldr	r3, [pc, #64]	; (800f818 <OnTxDelayedTimerEvent+0x60>)
 800f7d6:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800f7da:	f7ff fdeb 	bl	800f3b4 <LoRaMacHandleResponseTimeout>
 800f7de:	b100      	cbz	r0, 800f7e2 <OnTxDelayedTimerEvent+0x2a>
}
 800f7e0:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800f7e2:	2001      	movs	r0, #1
 800f7e4:	f7ff ff64 	bl	800f6b0 <ScheduleTx>
 800f7e8:	2800      	cmp	r0, #0
 800f7ea:	d0f9      	beq.n	800f7e0 <OnTxDelayedTimerEvent+0x28>
 800f7ec:	280b      	cmp	r0, #11
 800f7ee:	d0f7      	beq.n	800f7e0 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f7f0:	4b09      	ldr	r3, [pc, #36]	; (800f818 <OnTxDelayedTimerEvent+0x60>)
 800f7f2:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800f7f6:	f884 2446 	strb.w	r2, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f7fa:	f894 241c 	ldrb.w	r2, [r4, #1052]	; 0x41c
 800f7fe:	f884 2449 	strb.w	r2, [r4, #1097]	; 0x449
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f802:	2009      	movs	r0, #9
 800f804:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f808:	f002 f93a 	bl	8011a80 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f80c:	f7fe fd40 	bl	800e290 <StopRetransmission>
            break;
 800f810:	e7e6      	b.n	800f7e0 <OnTxDelayedTimerEvent+0x28>
 800f812:	bf00      	nop
 800f814:	200009a0 	.word	0x200009a0
 800f818:	20008000 	.word	0x20008000

0800f81c <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f81c:	4b1c      	ldr	r3, [pc, #112]	; (800f890 <LoRaMacHandleMcpsRequest+0x74>)
 800f81e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f822:	f013 0f01 	tst.w	r3, #1
 800f826:	d032      	beq.n	800f88e <LoRaMacHandleMcpsRequest+0x72>
{
 800f828:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f82a:	4b19      	ldr	r3, [pc, #100]	; (800f890 <LoRaMacHandleMcpsRequest+0x74>)
 800f82c:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800f830:	b12b      	cbz	r3, 800f83e <LoRaMacHandleMcpsRequest+0x22>
 800f832:	2b03      	cmp	r3, #3
 800f834:	d003      	beq.n	800f83e <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f836:	2b01      	cmp	r3, #1
 800f838:	d006      	beq.n	800f848 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800f83a:	2000      	movs	r0, #0
 800f83c:	e002      	b.n	800f844 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f83e:	f7fe fced 	bl	800e21c <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800f842:	b940      	cbnz	r0, 800f856 <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800f844:	b1b8      	cbz	r0, 800f876 <LoRaMacHandleMcpsRequest+0x5a>
}
 800f846:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800f848:	4b11      	ldr	r3, [pc, #68]	; (800f890 <LoRaMacHandleMcpsRequest+0x74>)
 800f84a:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800f84e:	b183      	cbz	r3, 800f872 <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f850:	f7fe fd00 	bl	800e254 <CheckRetransConfirmedUplink>
 800f854:	e7f5      	b.n	800f842 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800f856:	4c0e      	ldr	r4, [pc, #56]	; (800f890 <LoRaMacHandleMcpsRequest+0x74>)
 800f858:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800f85c:	f008 f92a 	bl	8017ab4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f860:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800f864:	f023 0320 	bic.w	r3, r3, #32
 800f868:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800f86c:	f7fe fd10 	bl	800e290 <StopRetransmission>
 800f870:	e7e9      	b.n	800f846 <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800f872:	2001      	movs	r0, #1
 800f874:	e7e6      	b.n	800f844 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f876:	4b06      	ldr	r3, [pc, #24]	; (800f890 <LoRaMacHandleMcpsRequest+0x74>)
 800f878:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800f87c:	f36f 1245 	bfc	r2, #5, #1
 800f880:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800f884:	f883 041d 	strb.w	r0, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 800f888:	f7ff ff96 	bl	800f7b8 <OnTxDelayedTimerEvent>
}
 800f88c:	e7db      	b.n	800f846 <LoRaMacHandleMcpsRequest+0x2a>
 800f88e:	4770      	bx	lr
 800f890:	200009a0 	.word	0x200009a0

0800f894 <LoRaMacHandleRequestEvents>:
{
 800f894:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800f896:	4b22      	ldr	r3, [pc, #136]	; (800f920 <LoRaMacHandleRequestEvents+0x8c>)
 800f898:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f89c:	bb7b      	cbnz	r3, 800f8fe <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f89e:	4b20      	ldr	r3, [pc, #128]	; (800f920 <LoRaMacHandleRequestEvents+0x8c>)
 800f8a0:	f893 4495 	ldrb.w	r4, [r3, #1173]	; 0x495
 800f8a4:	f014 0501 	ands.w	r5, r4, #1
 800f8a8:	d005      	beq.n	800f8b6 <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f8aa:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800f8ae:	f36f 0200 	bfc	r2, #0, #1
 800f8b2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f8b6:	4b1a      	ldr	r3, [pc, #104]	; (800f920 <LoRaMacHandleRequestEvents+0x8c>)
 800f8b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f8bc:	f013 0f04 	tst.w	r3, #4
 800f8c0:	d006      	beq.n	800f8d0 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f8c2:	4b17      	ldr	r3, [pc, #92]	; (800f920 <LoRaMacHandleRequestEvents+0x8c>)
 800f8c4:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800f8c8:	f36f 0282 	bfc	r2, #2, #1
 800f8cc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f8d0:	2001      	movs	r0, #1
 800f8d2:	f7fe fbfb 	bl	800e0cc <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800f8d6:	b135      	cbz	r5, 800f8e6 <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f8d8:	4811      	ldr	r0, [pc, #68]	; (800f920 <LoRaMacHandleRequestEvents+0x8c>)
 800f8da:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f200 4044 	addw	r0, r0, #1092	; 0x444
 800f8e4:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800f8e6:	f014 0f04 	tst.w	r4, #4
 800f8ea:	d109      	bne.n	800f900 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800f8ec:	f001 fe7b 	bl	80115e6 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f8f0:	4b0b      	ldr	r3, [pc, #44]	; (800f920 <LoRaMacHandleRequestEvents+0x8c>)
 800f8f2:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800f8f6:	f36f 1245 	bfc	r2, #5, #1
 800f8fa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
}
 800f8fe:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f900:	4808      	ldr	r0, [pc, #32]	; (800f924 <LoRaMacHandleRequestEvents+0x90>)
 800f902:	f002 f8e7 	bl	8011ad4 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f906:	f002 f917 	bl	8011b38 <LoRaMacConfirmQueueGetCnt>
 800f90a:	2800      	cmp	r0, #0
 800f90c:	d0ee      	beq.n	800f8ec <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f90e:	4a04      	ldr	r2, [pc, #16]	; (800f920 <LoRaMacHandleRequestEvents+0x8c>)
 800f910:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f914:	f043 0304 	orr.w	r3, r3, #4
 800f918:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800f91c:	e7e6      	b.n	800f8ec <LoRaMacHandleRequestEvents+0x58>
 800f91e:	bf00      	nop
 800f920:	200009a0 	.word	0x200009a0
 800f924:	20000df8 	.word	0x20000df8

0800f928 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 800f928:	4b07      	ldr	r3, [pc, #28]	; (800f948 <LoRaMacHandleScheduleUplinkEvent+0x20>)
 800f92a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f92e:	b103      	cbz	r3, 800f932 <LoRaMacHandleScheduleUplinkEvent+0xa>
 800f930:	4770      	bx	lr
{
 800f932:	b500      	push	{lr}
 800f934:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 800f936:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800f93a:	f10d 0007 	add.w	r0, sp, #7
 800f93e:	f001 ffab 	bl	8011898 <LoRaMacCommandsStickyCmdsPending>
}
 800f942:	b003      	add	sp, #12
 800f944:	f85d fb04 	ldr.w	pc, [sp], #4
 800f948:	200009a0 	.word	0x200009a0

0800f94c <OpenContinuousRxCWindow>:
{
 800f94c:	b570      	push	{r4, r5, r6, lr}
 800f94e:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800f950:	4c16      	ldr	r4, [pc, #88]	; (800f9ac <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f952:	4d17      	ldr	r5, [pc, #92]	; (800f9b0 <OpenContinuousRxCWindow+0x64>)
 800f954:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 800f958:	9600      	str	r6, [sp, #0]
 800f95a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f95c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800f960:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800f964:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800f968:	f002 fe75 	bl	8012656 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f96c:	2302      	movs	r3, #2
 800f96e:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f972:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800f976:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f97a:	2301      	movs	r3, #1
 800f97c:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f980:	f505 6285 	add.w	r2, r5, #1064	; 0x428
 800f984:	4631      	mov	r1, r6
 800f986:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800f98a:	f002 fe78 	bl	801267e <RegionRxConfig>
 800f98e:	b158      	cbz	r0, 800f9a8 <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800f990:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 800f994:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 800f998:	4b06      	ldr	r3, [pc, #24]	; (800f9b4 <OpenContinuousRxCWindow+0x68>)
 800f99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f99c:	2000      	movs	r0, #0
 800f99e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800f9a0:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 800f9a4:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 800f9a8:	b002      	add	sp, #8
 800f9aa:	bd70      	pop	{r4, r5, r6, pc}
 800f9ac:	20008000 	.word	0x20008000
 800f9b0:	200009a0 	.word	0x200009a0
 800f9b4:	0801c3a0 	.word	0x0801c3a0

0800f9b8 <RxWindowSetup>:
{
 800f9b8:	b538      	push	{r3, r4, r5, lr}
 800f9ba:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800f9bc:	f008 f87a 	bl	8017ab4 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800f9c0:	4b0c      	ldr	r3, [pc, #48]	; (800f9f4 <RxWindowSetup+0x3c>)
 800f9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9c4:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f9c6:	4a0c      	ldr	r2, [pc, #48]	; (800f9f8 <RxWindowSetup+0x40>)
 800f9c8:	4621      	mov	r1, r4
 800f9ca:	4b0c      	ldr	r3, [pc, #48]	; (800f9fc <RxWindowSetup+0x44>)
 800f9cc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f9d0:	f002 fe55 	bl	801267e <RegionRxConfig>
 800f9d4:	b160      	cbz	r0, 800f9f0 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800f9d6:	4d0a      	ldr	r5, [pc, #40]	; (800fa00 <RxWindowSetup+0x48>)
 800f9d8:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 800f9dc:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800f9e0:	4b04      	ldr	r3, [pc, #16]	; (800f9f4 <RxWindowSetup+0x3c>)
 800f9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9e4:	4a05      	ldr	r2, [pc, #20]	; (800f9fc <RxWindowSetup+0x44>)
 800f9e6:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800f9e8:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800f9ea:	7ce3      	ldrb	r3, [r4, #19]
 800f9ec:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 800f9f0:	bd38      	pop	{r3, r4, r5, pc}
 800f9f2:	bf00      	nop
 800f9f4:	0801c3a0 	.word	0x0801c3a0
 800f9f8:	20000dc8 	.word	0x20000dc8
 800f9fc:	20008000 	.word	0x20008000
 800fa00:	200009a0 	.word	0x200009a0

0800fa04 <OnRxWindow2TimerEvent>:
{
 800fa04:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fa06:	4b13      	ldr	r3, [pc, #76]	; (800fa54 <OnRxWindow2TimerEvent+0x50>)
 800fa08:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800fa0c:	b903      	cbnz	r3, 800fa10 <OnRxWindow2TimerEvent+0xc>
}
 800fa0e:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fa10:	4810      	ldr	r0, [pc, #64]	; (800fa54 <OnRxWindow2TimerEvent+0x50>)
 800fa12:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 800fa16:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fa1a:	4b0f      	ldr	r3, [pc, #60]	; (800fa58 <OnRxWindow2TimerEvent+0x54>)
 800fa1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800fa1e:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fa22:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fa26:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fa2a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fa2e:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fa32:	2200      	movs	r2, #0
 800fa34:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fa38:	2201      	movs	r2, #1
 800fa3a:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800fa3e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800fa42:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800fa46:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800fa4a:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800fa4e:	f7ff ffb3 	bl	800f9b8 <RxWindowSetup>
 800fa52:	e7dc      	b.n	800fa0e <OnRxWindow2TimerEvent+0xa>
 800fa54:	200009a0 	.word	0x200009a0
 800fa58:	20008000 	.word	0x20008000

0800fa5c <OnRxWindow1TimerEvent>:
{
 800fa5c:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800fa5e:	4811      	ldr	r0, [pc, #68]	; (800faa4 <OnRxWindow1TimerEvent+0x48>)
 800fa60:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 800fa64:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800fa68:	4b0f      	ldr	r3, [pc, #60]	; (800faa8 <OnRxWindow1TimerEvent+0x4c>)
 800fa6a:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 800fa6e:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fa72:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fa76:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fa7a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fa7e:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800fa82:	2200      	movs	r2, #0
 800fa84:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800fa88:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800fa8c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800fa90:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800fa94:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800fa98:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800fa9c:	f7ff ff8c 	bl	800f9b8 <RxWindowSetup>
}
 800faa0:	bd08      	pop	{r3, pc}
 800faa2:	bf00      	nop
 800faa4:	200009a0 	.word	0x200009a0
 800faa8:	20008000 	.word	0x20008000

0800faac <LoRaMacHandleNvm>:
{
 800faac:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800faae:	4b30      	ldr	r3, [pc, #192]	; (800fb70 <LoRaMacHandleNvm+0xc4>)
 800fab0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fab4:	b103      	cbz	r3, 800fab8 <LoRaMacHandleNvm+0xc>
}
 800fab6:	bd38      	pop	{r3, r4, r5, pc}
 800fab8:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800faba:	2124      	movs	r1, #36	; 0x24
 800fabc:	f005 fe1e 	bl	80156fc <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800fac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fac2:	4283      	cmp	r3, r0
 800fac4:	d052      	beq.n	800fb6c <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800fac6:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800fac8:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800faca:	2114      	movs	r1, #20
 800facc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800fad0:	f005 fe14 	bl	80156fc <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800fad4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fad6:	4283      	cmp	r3, r0
 800fad8:	d002      	beq.n	800fae0 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800fada:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800fadc:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800fae0:	21e0      	movs	r1, #224	; 0xe0
 800fae2:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800fae6:	f005 fe09 	bl	80156fc <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800faea:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800faee:	4283      	cmp	r3, r0
 800faf0:	d003      	beq.n	800fafa <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800faf2:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800faf6:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800fafa:	21bc      	movs	r1, #188	; 0xbc
 800fafc:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800fb00:	f005 fdfc 	bl	80156fc <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800fb04:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800fb08:	4283      	cmp	r3, r0
 800fb0a:	d003      	beq.n	800fb14 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 800fb0c:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800fb10:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800fb14:	2110      	movs	r1, #16
 800fb16:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800fb1a:	f005 fdef 	bl	80156fc <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800fb1e:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800fb22:	4283      	cmp	r3, r0
 800fb24:	d003      	beq.n	800fb2e <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800fb26:	f8c4 01f4 	str.w	r0, [r4, #500]	; 0x1f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800fb2a:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800fb2e:	f44f 715e 	mov.w	r1, #888	; 0x378
 800fb32:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
 800fb36:	f005 fde1 	bl	80156fc <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800fb3a:	f8d4 3570 	ldr.w	r3, [r4, #1392]	; 0x570
 800fb3e:	4283      	cmp	r3, r0
 800fb40:	d003      	beq.n	800fb4a <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 800fb42:	f8c4 0570 	str.w	r0, [r4, #1392]	; 0x570
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800fb46:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800fb4a:	2114      	movs	r1, #20
 800fb4c:	f204 5074 	addw	r0, r4, #1396	; 0x574
 800fb50:	f005 fdd4 	bl	80156fc <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800fb54:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 800fb58:	4283      	cmp	r3, r0
 800fb5a:	d003      	beq.n	800fb64 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 800fb5c:	f8c4 0588 	str.w	r0, [r4, #1416]	; 0x588
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800fb60:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800fb64:	4628      	mov	r0, r5
 800fb66:	f7fe fbbd 	bl	800e2e4 <CallNvmDataChangeCallback>
 800fb6a:	e7a4      	b.n	800fab6 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800fb6c:	2500      	movs	r5, #0
 800fb6e:	e7ac      	b.n	800faca <LoRaMacHandleNvm+0x1e>
 800fb70:	200009a0 	.word	0x200009a0

0800fb74 <RestoreNvmData>:
{
 800fb74:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800fb76:	4b34      	ldr	r3, [pc, #208]	; (800fc48 <RestoreNvmData+0xd4>)
 800fb78:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fb7c:	2b01      	cmp	r3, #1
 800fb7e:	d001      	beq.n	800fb84 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800fb80:	2001      	movs	r0, #1
}
 800fb82:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800fb84:	4c31      	ldr	r4, [pc, #196]	; (800fc4c <RestoreNvmData+0xd8>)
 800fb86:	2124      	movs	r1, #36	; 0x24
 800fb88:	4620      	mov	r0, r4
 800fb8a:	f005 fdb7 	bl	80156fc <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800fb8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb90:	4283      	cmp	r3, r0
 800fb92:	d001      	beq.n	800fb98 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800fb94:	2017      	movs	r0, #23
 800fb96:	e7f4      	b.n	800fb82 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800fb98:	2114      	movs	r1, #20
 800fb9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800fb9e:	f005 fdad 	bl	80156fc <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800fba2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fba4:	4283      	cmp	r3, r0
 800fba6:	d001      	beq.n	800fbac <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800fba8:	2017      	movs	r0, #23
 800fbaa:	e7ea      	b.n	800fb82 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800fbac:	21e0      	movs	r1, #224	; 0xe0
 800fbae:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800fbb2:	f005 fda3 	bl	80156fc <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800fbb6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800fbba:	4283      	cmp	r3, r0
 800fbbc:	d001      	beq.n	800fbc2 <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800fbbe:	2017      	movs	r0, #23
 800fbc0:	e7df      	b.n	800fb82 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800fbc2:	21bc      	movs	r1, #188	; 0xbc
 800fbc4:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800fbc8:	f005 fd98 	bl	80156fc <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800fbcc:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800fbd0:	4283      	cmp	r3, r0
 800fbd2:	d001      	beq.n	800fbd8 <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800fbd4:	2017      	movs	r0, #23
 800fbd6:	e7d4      	b.n	800fb82 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800fbd8:	2110      	movs	r1, #16
 800fbda:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800fbde:	f005 fd8d 	bl	80156fc <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800fbe2:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800fbe6:	4283      	cmp	r3, r0
 800fbe8:	d001      	beq.n	800fbee <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800fbea:	2017      	movs	r0, #23
 800fbec:	e7c9      	b.n	800fb82 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800fbee:	2114      	movs	r1, #20
 800fbf0:	f204 5074 	addw	r0, r4, #1396	; 0x574
 800fbf4:	f005 fd82 	bl	80156fc <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800fbf8:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 800fbfc:	4283      	cmp	r3, r0
 800fbfe:	d001      	beq.n	800fc04 <RestoreNvmData+0x90>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800fc00:	2017      	movs	r0, #23
 800fc02:	e7be      	b.n	800fb82 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800fc04:	4625      	mov	r5, r4
 800fc06:	4c12      	ldr	r4, [pc, #72]	; (800fc50 <RestoreNvmData+0xdc>)
 800fc08:	f240 528c 	movw	r2, #1420	; 0x58c
 800fc0c:	4629      	mov	r1, r5
 800fc0e:	4620      	mov	r0, r4
 800fc10:	f005 fd53 	bl	80156ba <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800fc14:	f240 528c 	movw	r2, #1420	; 0x58c
 800fc18:	2100      	movs	r1, #0
 800fc1a:	4628      	mov	r0, r5
 800fc1c:	f005 fd65 	bl	80156ea <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800fc20:	4b09      	ldr	r3, [pc, #36]	; (800fc48 <RestoreNvmData+0xd4>)
 800fc22:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800fc26:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800fc2a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800fc2c:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fc30:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 800fc34:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800fc38:	2201      	movs	r2, #1
 800fc3a:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fc3e:	2202      	movs	r2, #2
 800fc40:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    return LORAMAC_STATUS_OK;
 800fc44:	2000      	movs	r0, #0
 800fc46:	e79c      	b.n	800fb82 <RestoreNvmData+0xe>
 800fc48:	200009a0 	.word	0x200009a0
 800fc4c:	2000858c 	.word	0x2000858c
 800fc50:	20008000 	.word	0x20008000

0800fc54 <OnRadioRxTimeout>:
{
 800fc54:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800fc56:	4a09      	ldr	r2, [pc, #36]	; (800fc7c <OnRadioRxTimeout+0x28>)
 800fc58:	7813      	ldrb	r3, [r2, #0]
 800fc5a:	f043 0302 	orr.w	r3, r3, #2
 800fc5e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800fc60:	4b07      	ldr	r3, [pc, #28]	; (800fc80 <OnRadioRxTimeout+0x2c>)
 800fc62:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fc66:	b113      	cbz	r3, 800fc6e <OnRadioRxTimeout+0x1a>
 800fc68:	691b      	ldr	r3, [r3, #16]
 800fc6a:	b103      	cbz	r3, 800fc6e <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800fc6c:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800fc6e:	4b05      	ldr	r3, [pc, #20]	; (800fc84 <OnRadioRxTimeout+0x30>)
 800fc70:	2201      	movs	r2, #1
 800fc72:	2100      	movs	r1, #0
 800fc74:	2002      	movs	r0, #2
 800fc76:	f007 fbc9 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 800fc7a:	bd08      	pop	{r3, pc}
 800fc7c:	2000099c 	.word	0x2000099c
 800fc80:	200009a0 	.word	0x200009a0
 800fc84:	0801bcb0 	.word	0x0801bcb0

0800fc88 <OnRadioTxTimeout>:
{
 800fc88:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800fc8a:	4a09      	ldr	r2, [pc, #36]	; (800fcb0 <OnRadioTxTimeout+0x28>)
 800fc8c:	7813      	ldrb	r3, [r2, #0]
 800fc8e:	f043 0308 	orr.w	r3, r3, #8
 800fc92:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800fc94:	4b07      	ldr	r3, [pc, #28]	; (800fcb4 <OnRadioTxTimeout+0x2c>)
 800fc96:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fc9a:	b113      	cbz	r3, 800fca2 <OnRadioTxTimeout+0x1a>
 800fc9c:	691b      	ldr	r3, [r3, #16]
 800fc9e:	b103      	cbz	r3, 800fca2 <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800fca0:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800fca2:	4b05      	ldr	r3, [pc, #20]	; (800fcb8 <OnRadioTxTimeout+0x30>)
 800fca4:	2201      	movs	r2, #1
 800fca6:	2100      	movs	r1, #0
 800fca8:	2002      	movs	r0, #2
 800fcaa:	f007 fbaf 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 800fcae:	bd08      	pop	{r3, pc}
 800fcb0:	2000099c 	.word	0x2000099c
 800fcb4:	200009a0 	.word	0x200009a0
 800fcb8:	0801bcc0 	.word	0x0801bcc0

0800fcbc <OnRadioRxDone>:
{
 800fcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcc0:	4680      	mov	r8, r0
 800fcc2:	460f      	mov	r7, r1
 800fcc4:	4616      	mov	r6, r2
 800fcc6:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800fcc8:	f007 feb4 	bl	8017a34 <UTIL_TIMER_GetCurrentTime>
 800fccc:	4c0f      	ldr	r4, [pc, #60]	; (800fd0c <OnRadioRxDone+0x50>)
 800fcce:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800fcd0:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800fcd4:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800fcd6:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800fcd8:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800fcda:	4b0d      	ldr	r3, [pc, #52]	; (800fd10 <OnRadioRxDone+0x54>)
 800fcdc:	781a      	ldrb	r2, [r3, #0]
 800fcde:	f042 0210 	orr.w	r2, r2, #16
 800fce2:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800fce4:	b2d2      	uxtb	r2, r2
 800fce6:	f042 0201 	orr.w	r2, r2, #1
 800fcea:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800fcec:	4b09      	ldr	r3, [pc, #36]	; (800fd14 <OnRadioRxDone+0x58>)
 800fcee:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fcf2:	b113      	cbz	r3, 800fcfa <OnRadioRxDone+0x3e>
 800fcf4:	691b      	ldr	r3, [r3, #16]
 800fcf6:	b103      	cbz	r3, 800fcfa <OnRadioRxDone+0x3e>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800fcf8:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800fcfa:	4b07      	ldr	r3, [pc, #28]	; (800fd18 <OnRadioRxDone+0x5c>)
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	2100      	movs	r1, #0
 800fd00:	2002      	movs	r0, #2
 800fd02:	f007 fb83 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 800fd06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd0a:	bf00      	nop
 800fd0c:	20000f50 	.word	0x20000f50
 800fd10:	2000099c 	.word	0x2000099c
 800fd14:	200009a0 	.word	0x200009a0
 800fd18:	0801bcd0 	.word	0x0801bcd0

0800fd1c <OnRadioTxDone>:
{
 800fd1c:	b530      	push	{r4, r5, lr}
 800fd1e:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800fd20:	f007 fe88 	bl	8017a34 <UTIL_TIMER_GetCurrentTime>
 800fd24:	4b0f      	ldr	r3, [pc, #60]	; (800fd64 <OnRadioTxDone+0x48>)
 800fd26:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800fd28:	4d0f      	ldr	r5, [pc, #60]	; (800fd68 <OnRadioTxDone+0x4c>)
 800fd2a:	466c      	mov	r4, sp
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	f007 fdd3 	bl	80178d8 <SysTimeGet>
 800fd32:	f505 734e 	add.w	r3, r5, #824	; 0x338
 800fd36:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fd3a:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800fd3e:	4a0b      	ldr	r2, [pc, #44]	; (800fd6c <OnRadioTxDone+0x50>)
 800fd40:	7813      	ldrb	r3, [r2, #0]
 800fd42:	f043 0320 	orr.w	r3, r3, #32
 800fd46:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800fd48:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800fd4c:	b113      	cbz	r3, 800fd54 <OnRadioTxDone+0x38>
 800fd4e:	691b      	ldr	r3, [r3, #16]
 800fd50:	b103      	cbz	r3, 800fd54 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800fd52:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800fd54:	4b06      	ldr	r3, [pc, #24]	; (800fd70 <OnRadioTxDone+0x54>)
 800fd56:	2201      	movs	r2, #1
 800fd58:	2100      	movs	r1, #0
 800fd5a:	2002      	movs	r0, #2
 800fd5c:	f007 fb56 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 800fd60:	b003      	add	sp, #12
 800fd62:	bd30      	pop	{r4, r5, pc}
 800fd64:	20000f60 	.word	0x20000f60
 800fd68:	200009a0 	.word	0x200009a0
 800fd6c:	2000099c 	.word	0x2000099c
 800fd70:	0801bce0 	.word	0x0801bce0

0800fd74 <ResetMacParameters>:
{
 800fd74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd76:	b091      	sub	sp, #68	; 0x44
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800fd78:	4c53      	ldr	r4, [pc, #332]	; (800fec8 <ResetMacParameters+0x154>)
 800fd7a:	2600      	movs	r6, #0
 800fd7c:	f884 611c 	strb.w	r6, [r4, #284]	; 0x11c
    Nvm.MacGroup1.AdrAckCounter = 0;
 800fd80:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800fd82:	4d52      	ldr	r5, [pc, #328]	; (800fecc <ResetMacParameters+0x158>)
 800fd84:	f885 641c 	strb.w	r6, [r5, #1052]	; 0x41c
    MacCtx.RetransmitTimeoutRetry = false;
 800fd88:	f885 641d 	strb.w	r6, [r5, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 800fd8c:	f8c5 649c 	str.w	r6, [r5, #1180]	; 0x49c
    Nvm.MacGroup2.MaxDCycle = 0;
 800fd90:	f884 6107 	strb.w	r6, [r4, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800fd94:	2701      	movs	r7, #1
 800fd96:	f8a4 710c 	strh.w	r7, [r4, #268]	; 0x10c
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800fd9a:	f994 30cc 	ldrsb.w	r3, [r4, #204]	; 0xcc
 800fd9e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800fda2:	f994 30cd 	ldrsb.w	r3, [r4, #205]	; 0xcd
 800fda6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800fdaa:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800fdae:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800fdb2:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800fdb6:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 800fdba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdbe:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800fdc2:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800fdc6:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 800fdca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdce:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800fdd2:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800fdd6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800fdda:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800fdde:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800fde2:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800fde6:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800fde8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800fdec:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 800fdee:	f885 641e 	strb.w	r6, [r5, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 800fdf2:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800fdf6:	f884 6109 	strb.w	r6, [r4, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 800fdfa:	f884 610a 	strb.w	r6, [r4, #266]	; 0x10a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800fdfe:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800fe02:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800fe06:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800fe08:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 800fe0c:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800fe0e:	4b30      	ldr	r3, [pc, #192]	; (800fed0 <ResetMacParameters+0x15c>)
 800fe10:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fe12:	a901      	add	r1, sp, #4
 800fe14:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800fe18:	f002 fbe2 	bl	80125e0 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800fe1c:	f885 641f 	strb.w	r6, [r5, #1055]	; 0x41f
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fe20:	f885 63d0 	strb.w	r6, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fe24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe26:	f8c5 33d4 	str.w	r3, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fe2a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800fe2e:	f885 33e0 	strb.w	r3, [r5, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fe32:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800fe36:	f885 33e1 	strb.w	r3, [r5, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fe3a:	f885 63e2 	strb.w	r6, [r5, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fe3e:	f885 73e3 	strb.w	r7, [r5, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800fe42:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800fe46:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fe4a:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
 800fe4e:	f505 7c74 	add.w	ip, r5, #976	; 0x3d0
 800fe52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fe56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe58:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800fe5c:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800fe60:	f885 73fa 	strb.w	r7, [r5, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fe64:	2302      	movs	r3, #2
 800fe66:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800fe6a:	960e      	str	r6, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800fe6c:	960f      	str	r6, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800fe6e:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800fe72:	b11b      	cbz	r3, 800fe7c <ResetMacParameters+0x108>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800fe74:	685a      	ldr	r2, [r3, #4]
 800fe76:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800fe78:	691b      	ldr	r3, [r3, #16]
 800fe7a:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800fe7c:	4b13      	ldr	r3, [pc, #76]	; (800fecc <ResetMacParameters+0x158>)
 800fe7e:	f203 426c 	addw	r2, r3, #1132	; 0x46c
 800fe82:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800fe84:	f203 4224 	addw	r2, r3, #1060	; 0x424
 800fe88:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800fe8a:	f503 628b 	add.w	r2, r3, #1112	; 0x458
 800fe8e:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800fe90:	f203 4395 	addw	r3, r3, #1173	; 0x495
 800fe94:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800fe96:	4a0c      	ldr	r2, [pc, #48]	; (800fec8 <ResetMacParameters+0x154>)
 800fe98:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
 800fe9c:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800fe9e:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800fea2:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800fea4:	f102 0344 	add.w	r3, r2, #68	; 0x44
 800fea8:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800feaa:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 800feae:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800feb0:	f502 738e 	add.w	r3, r2, #284	; 0x11c
 800feb4:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800feb6:	f202 5274 	addw	r2, r2, #1396	; 0x574
 800feba:	a90e      	add	r1, sp, #56	; 0x38
 800febc:	a805      	add	r0, sp, #20
 800febe:	f001 fb7d 	bl	80115bc <LoRaMacClassBInit>
}
 800fec2:	b011      	add	sp, #68	; 0x44
 800fec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fec6:	bf00      	nop
 800fec8:	20008000 	.word	0x20008000
 800fecc:	200009a0 	.word	0x200009a0
 800fed0:	20000ec0 	.word	0x20000ec0

0800fed4 <SwitchClass>:
{
 800fed4:	b570      	push	{r4, r5, r6, lr}
 800fed6:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800fed8:	4b3e      	ldr	r3, [pc, #248]	; (800ffd4 <SwitchClass+0x100>)
 800feda:	f893 5104 	ldrb.w	r5, [r3, #260]	; 0x104
 800fede:	2d01      	cmp	r5, #1
 800fee0:	d065      	beq.n	800ffae <SwitchClass+0xda>
 800fee2:	2d02      	cmp	r5, #2
 800fee4:	d06b      	beq.n	800ffbe <SwitchClass+0xea>
 800fee6:	b10d      	cbz	r5, 800feec <SwitchClass+0x18>
 800fee8:	2003      	movs	r0, #3
}
 800feea:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800feec:	b930      	cbnz	r0, 800fefc <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800feee:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800fef2:	3364      	adds	r3, #100	; 0x64
 800fef4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fef8:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 800fefc:	2c01      	cmp	r4, #1
 800fefe:	d022      	beq.n	800ff46 <SwitchClass+0x72>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ff00:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 800ff02:	2c02      	cmp	r4, #2
 800ff04:	d1f1      	bne.n	800feea <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ff06:	4b33      	ldr	r3, [pc, #204]	; (800ffd4 <SwitchClass+0x100>)
 800ff08:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ff0c:	4e32      	ldr	r6, [pc, #200]	; (800ffd8 <SwitchClass+0x104>)
 800ff0e:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800ff12:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800ff16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ff1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff1c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800ff20:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ff24:	2302      	movs	r3, #2
 800ff26:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	dd13      	ble.n	800ff58 <SwitchClass+0x84>
                MacCtx.NodeAckRequested = false;
 800ff30:	4b29      	ldr	r3, [pc, #164]	; (800ffd8 <SwitchClass+0x104>)
 800ff32:	2200      	movs	r2, #0
 800ff34:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                Radio.Sleep( );
 800ff38:	4b28      	ldr	r3, [pc, #160]	; (800ffdc <SwitchClass+0x108>)
 800ff3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff3c:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800ff3e:	f7ff fd05 	bl	800f94c <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800ff42:	4628      	mov	r0, r5
 800ff44:	e7d1      	b.n	800feea <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ff46:	4620      	mov	r0, r4
 800ff48:	f001 fb4e 	bl	80115e8 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800ff4c:	2800      	cmp	r0, #0
 800ff4e:	d1d8      	bne.n	800ff02 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ff50:	4b20      	ldr	r3, [pc, #128]	; (800ffd4 <SwitchClass+0x100>)
 800ff52:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800ff56:	e7d4      	b.n	800ff02 <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800ff58:	4618      	mov	r0, r3
 800ff5a:	4a1e      	ldr	r2, [pc, #120]	; (800ffd4 <SwitchClass+0x100>)
 800ff5c:	212c      	movs	r1, #44	; 0x2c
 800ff5e:	fb01 2203 	mla	r2, r1, r3, r2
 800ff62:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
 800ff66:	b912      	cbnz	r2, 800ff6e <SwitchClass+0x9a>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ff68:	3301      	adds	r3, #1
 800ff6a:	b25b      	sxtb	r3, r3
 800ff6c:	e7de      	b.n	800ff2c <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800ff6e:	4a19      	ldr	r2, [pc, #100]	; (800ffd4 <SwitchClass+0x100>)
 800ff70:	fb01 2000 	mla	r0, r1, r0, r2
 800ff74:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 800ff78:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800ff7a:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
 800ff7e:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800ff82:	4b15      	ldr	r3, [pc, #84]	; (800ffd8 <SwitchClass+0x104>)
 800ff84:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 800ff88:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ff8c:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ff90:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 800ff94:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ff98:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800ff9c:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ffa0:	2203      	movs	r2, #3
 800ffa2:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800ffac:	e7c0      	b.n	800ff30 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ffae:	f001 fb1b 	bl	80115e8 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800ffb2:	2800      	cmp	r0, #0
 800ffb4:	d199      	bne.n	800feea <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ffb6:	4b07      	ldr	r3, [pc, #28]	; (800ffd4 <SwitchClass+0x100>)
 800ffb8:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800ffbc:	e795      	b.n	800feea <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800ffbe:	b938      	cbnz	r0, 800ffd0 <SwitchClass+0xfc>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ffc0:	4b04      	ldr	r3, [pc, #16]	; (800ffd4 <SwitchClass+0x100>)
 800ffc2:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
                Radio.Sleep( );
 800ffc6:	4b05      	ldr	r3, [pc, #20]	; (800ffdc <SwitchClass+0x108>)
 800ffc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffca:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800ffcc:	4620      	mov	r0, r4
 800ffce:	e78c      	b.n	800feea <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ffd0:	2003      	movs	r0, #3
 800ffd2:	e78a      	b.n	800feea <SwitchClass+0x16>
 800ffd4:	20008000 	.word	0x20008000
 800ffd8:	200009a0 	.word	0x200009a0
 800ffdc:	0801c3a0 	.word	0x0801c3a0

0800ffe0 <SendReJoinReq>:
{
 800ffe0:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800ffe2:	28ff      	cmp	r0, #255	; 0xff
 800ffe4:	d003      	beq.n	800ffee <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800ffe6:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800ffe8:	f7ff fb62 	bl	800f6b0 <ScheduleTx>
}
 800ffec:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800ffee:	2000      	movs	r0, #0
 800fff0:	f7ff ff70 	bl	800fed4 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800fff4:	4d0e      	ldr	r5, [pc, #56]	; (8010030 <SendReJoinReq+0x50>)
 800fff6:	2400      	movs	r4, #0
 800fff8:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fffc:	1cab      	adds	r3, r5, #2
 800fffe:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010002:	23ff      	movs	r3, #255	; 0xff
 8010004:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010008:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 801000c:	f005 fb24 	bl	8015658 <SecureElementGetJoinEui>
 8010010:	4601      	mov	r1, r0
 8010012:	2208      	movs	r2, #8
 8010014:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 8010018:	f005 fb4f 	bl	80156ba <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 801001c:	f005 fb06 	bl	801562c <SecureElementGetDevEui>
 8010020:	4601      	mov	r1, r0
 8010022:	2208      	movs	r2, #8
 8010024:	f505 708b 	add.w	r0, r5, #278	; 0x116
 8010028:	f005 fb47 	bl	80156ba <memcpy1>
            allowDelayedTx = false;
 801002c:	4620      	mov	r0, r4
            break;
 801002e:	e7db      	b.n	800ffe8 <SendReJoinReq+0x8>
 8010030:	200009a0 	.word	0x200009a0

08010034 <PrepareFrame>:
{
 8010034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010038:	b083      	sub	sp, #12
 801003a:	4605      	mov	r5, r0
 801003c:	460e      	mov	r6, r1
 801003e:	4617      	mov	r7, r2
 8010040:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 8010044:	4959      	ldr	r1, [pc, #356]	; (80101ac <PrepareFrame+0x178>)
 8010046:	2200      	movs	r2, #0
 8010048:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 801004a:	f881 241e 	strb.w	r2, [r1, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 801004e:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 8010050:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 8010052:	4698      	mov	r8, r3
 8010054:	b1cb      	cbz	r3, 801008a <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010056:	f8df 9154 	ldr.w	r9, [pc, #340]	; 80101ac <PrepareFrame+0x178>
 801005a:	4622      	mov	r2, r4
 801005c:	4641      	mov	r1, r8
 801005e:	f509 709c 	add.w	r0, r9, #312	; 0x138
 8010062:	f005 fb2a 	bl	80156ba <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010066:	b2e0      	uxtb	r0, r4
 8010068:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801006c:	782b      	ldrb	r3, [r5, #0]
 801006e:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 8010072:	782b      	ldrb	r3, [r5, #0]
 8010074:	095b      	lsrs	r3, r3, #5
 8010076:	2b04      	cmp	r3, #4
 8010078:	d009      	beq.n	801008e <PrepareFrame+0x5a>
 801007a:	2b07      	cmp	r3, #7
 801007c:	d079      	beq.n	8010172 <PrepareFrame+0x13e>
 801007e:	2b02      	cmp	r3, #2
 8010080:	d009      	beq.n	8010096 <PrepareFrame+0x62>
 8010082:	2002      	movs	r0, #2
}
 8010084:	b003      	add	sp, #12
 8010086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 801008a:	4614      	mov	r4, r2
 801008c:	e7e3      	b.n	8010056 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 801008e:	4b47      	ldr	r3, [pc, #284]	; (80101ac <PrepareFrame+0x178>)
 8010090:	2201      	movs	r2, #1
 8010092:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010096:	4b45      	ldr	r3, [pc, #276]	; (80101ac <PrepareFrame+0x178>)
 8010098:	2204      	movs	r2, #4
 801009a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801009e:	1c9a      	adds	r2, r3, #2
 80100a0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80100a4:	22ff      	movs	r2, #255	; 0xff
 80100a6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80100aa:	782a      	ldrb	r2, [r5, #0]
 80100ac:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80100b0:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80100b4:	4a3e      	ldr	r2, [pc, #248]	; (80101b0 <PrepareFrame+0x17c>)
 80100b6:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 80100ba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80100be:	7832      	ldrb	r2, [r6, #0]
 80100c0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80100c4:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80100c8:	f503 729c 	add.w	r2, r3, #312	; 0x138
 80100cc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80100d0:	a801      	add	r0, sp, #4
 80100d2:	f001 ff09 	bl	8011ee8 <LoRaMacCryptoGetFCntUp>
 80100d6:	2800      	cmp	r0, #0
 80100d8:	d15c      	bne.n	8010194 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80100da:	9a01      	ldr	r2, [sp, #4]
 80100dc:	4b33      	ldr	r3, [pc, #204]	; (80101ac <PrepareFrame+0x178>)
 80100de:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 80100e2:	2100      	movs	r1, #0
 80100e4:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
            MacCtx.McpsConfirm.AckReceived = false;
 80100e8:	f883 1448 	strb.w	r1, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80100ec:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80100f0:	4668      	mov	r0, sp
 80100f2:	f001 fb93 	bl	801181c <LoRaMacCommandsGetSizeSerializedCmds>
 80100f6:	2800      	cmp	r0, #0
 80100f8:	d14e      	bne.n	8010198 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 80100fa:	9b00      	ldr	r3, [sp, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d0c1      	beq.n	8010084 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8010100:	4b2b      	ldr	r3, [pc, #172]	; (80101b0 <PrepareFrame+0x17c>)
 8010102:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8010106:	f7fe f905 	bl	800e314 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801010a:	4b28      	ldr	r3, [pc, #160]	; (80101ac <PrepareFrame+0x178>)
 801010c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010110:	b113      	cbz	r3, 8010118 <PrepareFrame+0xe4>
 8010112:	9a00      	ldr	r2, [sp, #0]
 8010114:	2a0f      	cmp	r2, #15
 8010116:	d915      	bls.n	8010144 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010118:	b113      	cbz	r3, 8010120 <PrepareFrame+0xec>
 801011a:	9b00      	ldr	r3, [sp, #0]
 801011c:	2b0f      	cmp	r3, #15
 801011e:	d821      	bhi.n	8010164 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010120:	4a24      	ldr	r2, [pc, #144]	; (80101b4 <PrepareFrame+0x180>)
 8010122:	4669      	mov	r1, sp
 8010124:	f001 fb86 	bl	8011834 <LoRaMacCommandsSerializeCmds>
 8010128:	2800      	cmp	r0, #0
 801012a:	d13b      	bne.n	80101a4 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 801012c:	4b1f      	ldr	r3, [pc, #124]	; (80101ac <PrepareFrame+0x178>)
 801012e:	2200      	movs	r2, #0
 8010130:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010134:	f503 6294 	add.w	r2, r3, #1184	; 0x4a0
 8010138:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 801013c:	9a00      	ldr	r2, [sp, #0]
 801013e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8010142:	e79f      	b.n	8010084 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010144:	4a1c      	ldr	r2, [pc, #112]	; (80101b8 <PrepareFrame+0x184>)
 8010146:	4669      	mov	r1, sp
 8010148:	200f      	movs	r0, #15
 801014a:	f001 fb73 	bl	8011834 <LoRaMacCommandsSerializeCmds>
 801014e:	bb28      	cbnz	r0, 801019c <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010150:	7833      	ldrb	r3, [r6, #0]
 8010152:	9a00      	ldr	r2, [sp, #0]
 8010154:	f362 0303 	bfi	r3, r2, #0, #4
 8010158:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801015a:	b2da      	uxtb	r2, r3
 801015c:	4b13      	ldr	r3, [pc, #76]	; (80101ac <PrepareFrame+0x178>)
 801015e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8010162:	e78f      	b.n	8010084 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010164:	4a13      	ldr	r2, [pc, #76]	; (80101b4 <PrepareFrame+0x180>)
 8010166:	4669      	mov	r1, sp
 8010168:	f001 fb64 	bl	8011834 <LoRaMacCommandsSerializeCmds>
 801016c:	b1c0      	cbz	r0, 80101a0 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801016e:	2013      	movs	r0, #19
 8010170:	e788      	b.n	8010084 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010172:	f1b8 0f00 	cmp.w	r8, #0
 8010176:	d017      	beq.n	80101a8 <PrepareFrame+0x174>
 8010178:	2800      	cmp	r0, #0
 801017a:	d083      	beq.n	8010084 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801017c:	4c0b      	ldr	r4, [pc, #44]	; (80101ac <PrepareFrame+0x178>)
 801017e:	b282      	uxth	r2, r0
 8010180:	4641      	mov	r1, r8
 8010182:	1ce0      	adds	r0, r4, #3
 8010184:	f005 fa99 	bl	80156ba <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010188:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 801018c:	3301      	adds	r3, #1
 801018e:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 8010190:	2000      	movs	r0, #0
 8010192:	e777      	b.n	8010084 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010194:	2012      	movs	r0, #18
 8010196:	e775      	b.n	8010084 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010198:	2013      	movs	r0, #19
 801019a:	e773      	b.n	8010084 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801019c:	2013      	movs	r0, #19
 801019e:	e771      	b.n	8010084 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80101a0:	200a      	movs	r0, #10
 80101a2:	e76f      	b.n	8010084 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80101a4:	2013      	movs	r0, #19
 80101a6:	e76d      	b.n	8010084 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 80101a8:	2000      	movs	r0, #0
 80101aa:	e76b      	b.n	8010084 <PrepareFrame+0x50>
 80101ac:	200009a0 	.word	0x200009a0
 80101b0:	20008000 	.word	0x20008000
 80101b4:	20000e40 	.word	0x20000e40
 80101b8:	20000ab8 	.word	0x20000ab8

080101bc <Send>:
{
 80101bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101c0:	b08a      	sub	sp, #40	; 0x28
 80101c2:	4617      	mov	r7, r2
 80101c4:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80101c6:	4c45      	ldr	r4, [pc, #276]	; (80102dc <Send+0x120>)
 80101c8:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80101cc:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80101d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80101d2:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80101d4:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d07c      	beq.n	80102d6 <Send+0x11a>
 80101dc:	4605      	mov	r5, r0
 80101de:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80101e0:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 80101e4:	b90b      	cbnz	r3, 80101ea <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80101e6:	2100      	movs	r1, #0
 80101e8:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 80101ea:	2300      	movs	r3, #0
 80101ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80101f0:	483a      	ldr	r0, [pc, #232]	; (80102dc <Send+0x120>)
 80101f2:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
 80101f6:	f361 13c7 	bfi	r3, r1, #7, #1
 80101fa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80101fe:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8010202:	2b01      	cmp	r3, #1
 8010204:	d054      	beq.n	80102b0 <Send+0xf4>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8010206:	4b35      	ldr	r3, [pc, #212]	; (80102dc <Send+0x120>)
 8010208:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801020c:	b12b      	cbz	r3, 801021a <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 801020e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8010212:	f043 0320 	orr.w	r3, r3, #32
 8010216:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 801021a:	2301      	movs	r3, #1
 801021c:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8010220:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010224:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010226:	4b2e      	ldr	r3, [pc, #184]	; (80102e0 <Send+0x124>)
 8010228:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 801022c:	f8ad 2014 	strh.w	r2, [sp, #20]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010230:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8010234:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010238:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801023c:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010240:	4926      	ldr	r1, [pc, #152]	; (80102dc <Send+0x120>)
 8010242:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
 8010246:	f88d 301a 	strb.w	r3, [sp, #26]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801024a:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 801024e:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 8010252:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8010256:	f88d 301c 	strb.w	r3, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 801025a:	ab08      	add	r3, sp, #32
 801025c:	9300      	str	r3, [sp, #0]
 801025e:	f101 0360 	add.w	r3, r1, #96	; 0x60
 8010262:	f101 0238 	add.w	r2, r1, #56	; 0x38
 8010266:	3139      	adds	r1, #57	; 0x39
 8010268:	a803      	add	r0, sp, #12
 801026a:	f001 f92d 	bl	80114c8 <LoRaMacAdrCalcNext>
 801026e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8010272:	f360 1386 	bfi	r3, r0, #6, #1
 8010276:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 801027a:	f8cd 8000 	str.w	r8, [sp]
 801027e:	463b      	mov	r3, r7
 8010280:	4632      	mov	r2, r6
 8010282:	a909      	add	r1, sp, #36	; 0x24
 8010284:	4628      	mov	r0, r5
 8010286:	f7ff fed5 	bl	8010034 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 801028a:	4604      	mov	r4, r0
 801028c:	b108      	cbz	r0, 8010292 <Send+0xd6>
 801028e:	280a      	cmp	r0, #10
 8010290:	d104      	bne.n	801029c <Send+0xe0>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8010292:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8010296:	f7ff fa0b 	bl	800f6b0 <ScheduleTx>
 801029a:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 801029c:	b17c      	cbz	r4, 80102be <Send+0x102>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801029e:	4b0f      	ldr	r3, [pc, #60]	; (80102dc <Send+0x120>)
 80102a0:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 80102a4:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 80102a8:	4620      	mov	r0, r4
 80102aa:	b00a      	add	sp, #40	; 0x28
 80102ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 80102b0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80102b4:	f043 0310 	orr.w	r3, r3, #16
 80102b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80102bc:	e7a3      	b.n	8010206 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 80102be:	4b07      	ldr	r3, [pc, #28]	; (80102dc <Send+0x120>)
 80102c0:	2200      	movs	r2, #0
 80102c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80102c6:	9a08      	ldr	r2, [sp, #32]
 80102c8:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80102ca:	f001 fa7b 	bl	80117c4 <LoRaMacCommandsRemoveNoneStickyCmds>
 80102ce:	2800      	cmp	r0, #0
 80102d0:	d0ea      	beq.n	80102a8 <Send+0xec>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80102d2:	2413      	movs	r4, #19
 80102d4:	e7e8      	b.n	80102a8 <Send+0xec>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80102d6:	2407      	movs	r4, #7
 80102d8:	e7e6      	b.n	80102a8 <Send+0xec>
 80102da:	bf00      	nop
 80102dc:	20008000 	.word	0x20008000
 80102e0:	200009a0 	.word	0x200009a0

080102e4 <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 80102e4:	4b0a      	ldr	r3, [pc, #40]	; (8010310 <LoRaMacIsBusy+0x2c>)
 80102e6:	781b      	ldrb	r3, [r3, #0]
 80102e8:	f013 0f01 	tst.w	r3, #1
 80102ec:	d10a      	bne.n	8010304 <LoRaMacIsBusy+0x20>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80102ee:	4b09      	ldr	r3, [pc, #36]	; (8010314 <LoRaMacIsBusy+0x30>)
 80102f0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80102f4:	b943      	cbnz	r3, 8010308 <LoRaMacIsBusy+0x24>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80102f6:	4b07      	ldr	r3, [pc, #28]	; (8010314 <LoRaMacIsBusy+0x30>)
 80102f8:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	d005      	beq.n	801030c <LoRaMacIsBusy+0x28>
    return true;
 8010300:	2001      	movs	r0, #1
 8010302:	4770      	bx	lr
        return true;
 8010304:	2001      	movs	r0, #1
 8010306:	4770      	bx	lr
    return true;
 8010308:	2001      	movs	r0, #1
 801030a:	4770      	bx	lr
        return false;
 801030c:	2000      	movs	r0, #0
}
 801030e:	4770      	bx	lr
 8010310:	2000099c 	.word	0x2000099c
 8010314:	200009a0 	.word	0x200009a0

08010318 <LoRaMacProcess>:
{
 8010318:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 801031a:	f7ff f81d 	bl	800f358 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 801031e:	f001 f974 	bl	801160a <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8010322:	4b20      	ldr	r3, [pc, #128]	; (80103a4 <LoRaMacProcess+0x8c>)
 8010324:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010328:	f013 0f20 	tst.w	r3, #32
 801032c:	d10d      	bne.n	801034a <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 801032e:	f7fd fed3 	bl	800e0d8 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8010332:	4b1c      	ldr	r3, [pc, #112]	; (80103a4 <LoRaMacProcess+0x8c>)
 8010334:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8010338:	2b02      	cmp	r3, #2
 801033a:	d024      	beq.n	8010386 <LoRaMacProcess+0x6e>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 801033c:	4b19      	ldr	r3, [pc, #100]	; (80103a4 <LoRaMacProcess+0x8c>)
 801033e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010342:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010346:	d121      	bne.n	801038c <LoRaMacProcess+0x74>
}
 8010348:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 801034a:	2000      	movs	r0, #0
 801034c:	f7fd febe 	bl	800e0cc <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8010350:	f7fd fefa 	bl	800e148 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 8010354:	f7fd ffd2 	bl	800e2fc <IsRequestPending>
 8010358:	b110      	cbz	r0, 8010360 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 801035a:	f7fe f8b9 	bl	800e4d0 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 801035e:	b918      	cbnz	r0, 8010368 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 8010360:	f7ff f83c 	bl	800f3dc <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8010364:	f7ff fa5a 	bl	800f81c <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 8010368:	f7ff fa94 	bl	800f894 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 801036c:	f7ff fadc 	bl	800f928 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010370:	2001      	movs	r0, #1
 8010372:	f7fd feab 	bl	800e0cc <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010376:	4a0b      	ldr	r2, [pc, #44]	; (80103a4 <LoRaMacProcess+0x8c>)
 8010378:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 801037c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010380:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 8010384:	e7d3      	b.n	801032e <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 8010386:	f7ff fae1 	bl	800f94c <OpenContinuousRxCWindow>
 801038a:	e7d7      	b.n	801033c <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 801038c:	4b05      	ldr	r3, [pc, #20]	; (80103a4 <LoRaMacProcess+0x8c>)
 801038e:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 8010392:	f36f 1286 	bfc	r2, #6, #1
 8010396:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 801039a:	4803      	ldr	r0, [pc, #12]	; (80103a8 <LoRaMacProcess+0x90>)
 801039c:	f7ff fb86 	bl	800faac <LoRaMacHandleNvm>
}
 80103a0:	e7d2      	b.n	8010348 <LoRaMacProcess+0x30>
 80103a2:	bf00      	nop
 80103a4:	200009a0 	.word	0x200009a0
 80103a8:	20008000 	.word	0x20008000

080103ac <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80103ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103b0:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80103b2:	2800      	cmp	r0, #0
 80103b4:	f000 81a4 	beq.w	8010700 <LoRaMacInitialization+0x354>
 80103b8:	460f      	mov	r7, r1
 80103ba:	4691      	mov	r9, r2
 80103bc:	4680      	mov	r8, r0
 80103be:	2900      	cmp	r1, #0
 80103c0:	f000 81a0 	beq.w	8010704 <LoRaMacInitialization+0x358>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80103c4:	6803      	ldr	r3, [r0, #0]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	f000 819e 	beq.w	8010708 <LoRaMacInitialization+0x35c>
        ( primitives->MacMcpsIndication == NULL ) ||
 80103cc:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	f000 819c 	beq.w	801070c <LoRaMacInitialization+0x360>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80103d4:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	f000 819a 	beq.w	8010710 <LoRaMacInitialization+0x364>
        ( primitives->MacMlmeIndication == NULL ) )
 80103dc:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80103de:	2b00      	cmp	r3, #0
 80103e0:	f000 8198 	beq.w	8010714 <LoRaMacInitialization+0x368>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80103e4:	4610      	mov	r0, r2
 80103e6:	f002 f8cb 	bl	8012580 <RegionIsActive>
 80103ea:	2800      	cmp	r0, #0
 80103ec:	f000 8194 	beq.w	8010718 <LoRaMacInitialization+0x36c>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80103f0:	4640      	mov	r0, r8
 80103f2:	f001 fac9 	bl	8011988 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80103f6:	4ccc      	ldr	r4, [pc, #816]	; (8010728 <LoRaMacInitialization+0x37c>)
 80103f8:	f240 528c 	movw	r2, #1420	; 0x58c
 80103fc:	2100      	movs	r1, #0
 80103fe:	4620      	mov	r0, r4
 8010400:	f005 f973 	bl	80156ea <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010404:	4dc9      	ldr	r5, [pc, #804]	; (801072c <LoRaMacInitialization+0x380>)
 8010406:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 801040a:	2100      	movs	r1, #0
 801040c:	4628      	mov	r0, r5
 801040e:	f005 f96c 	bl	80156ea <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8010412:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010416:	2600      	movs	r6, #0
 8010418:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 801041c:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010420:	4bc3      	ldr	r3, [pc, #780]	; (8010730 <LoRaMacInitialization+0x384>)
 8010422:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010426:	f88d 6020 	strb.w	r6, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801042a:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 801042e:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010430:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 8010434:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 8010436:	4bbf      	ldr	r3, [pc, #764]	; (8010734 <LoRaMacInitialization+0x388>)
 8010438:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801043a:	a905      	add	r1, sp, #20
 801043c:	4648      	mov	r0, r9
 801043e:	f002 f8cf 	bl	80125e0 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010442:	230f      	movs	r3, #15
 8010444:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010448:	a90a      	add	r1, sp, #40	; 0x28
 801044a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 801044e:	f002 f8a1 	bl	8012594 <RegionGetPhyParam>
 8010452:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010454:	1b80      	subs	r0, r0, r6
 8010456:	bf18      	it	ne
 8010458:	2001      	movne	r0, #1
 801045a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 801045e:	f04f 0a0a 	mov.w	sl, #10
 8010462:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010466:	a90a      	add	r1, sp, #40	; 0x28
 8010468:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 801046c:	f002 f892 	bl	8012594 <RegionGetPhyParam>
 8010470:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010472:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010476:	f04f 0906 	mov.w	r9, #6
 801047a:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801047e:	a90a      	add	r1, sp, #40	; 0x28
 8010480:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8010484:	f002 f886 	bl	8012594 <RegionGetPhyParam>
 8010488:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 801048a:	f884 00cd 	strb.w	r0, [r4, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801048e:	2310      	movs	r3, #16
 8010490:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010494:	a90a      	add	r1, sp, #40	; 0x28
 8010496:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 801049a:	f002 f87b 	bl	8012594 <RegionGetPhyParam>
 801049e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80104a0:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80104a4:	2311      	movs	r3, #17
 80104a6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80104aa:	a90a      	add	r1, sp, #40	; 0x28
 80104ac:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80104b0:	f002 f870 	bl	8012594 <RegionGetPhyParam>
 80104b4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80104b6:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80104ba:	2312      	movs	r3, #18
 80104bc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80104c0:	a90a      	add	r1, sp, #40	; 0x28
 80104c2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80104c6:	f002 f865 	bl	8012594 <RegionGetPhyParam>
 80104ca:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80104cc:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80104d0:	2313      	movs	r3, #19
 80104d2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80104d6:	a90a      	add	r1, sp, #40	; 0x28
 80104d8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80104dc:	f002 f85a 	bl	8012594 <RegionGetPhyParam>
 80104e0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80104e2:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80104e6:	2314      	movs	r3, #20
 80104e8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80104ec:	a90a      	add	r1, sp, #40	; 0x28
 80104ee:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80104f2:	f002 f84f 	bl	8012594 <RegionGetPhyParam>
 80104f6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80104f8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80104fc:	2316      	movs	r3, #22
 80104fe:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010502:	a90a      	add	r1, sp, #40	; 0x28
 8010504:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8010508:	f002 f844 	bl	8012594 <RegionGetPhyParam>
 801050c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801050e:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010512:	2317      	movs	r3, #23
 8010514:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010518:	a90a      	add	r1, sp, #40	; 0x28
 801051a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 801051e:	f002 f839 	bl	8012594 <RegionGetPhyParam>
 8010522:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010524:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010528:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 801052c:	2318      	movs	r3, #24
 801052e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010532:	a90a      	add	r1, sp, #40	; 0x28
 8010534:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8010538:	f002 f82c 	bl	8012594 <RegionGetPhyParam>
 801053c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 801053e:	b2c0      	uxtb	r0, r0
 8010540:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010544:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010548:	231d      	movs	r3, #29
 801054a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801054e:	a90a      	add	r1, sp, #40	; 0x28
 8010550:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8010554:	f002 f81e 	bl	8012594 <RegionGetPhyParam>
 8010558:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 801055a:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801055e:	231e      	movs	r3, #30
 8010560:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010564:	a90a      	add	r1, sp, #40	; 0x28
 8010566:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 801056a:	f002 f813 	bl	8012594 <RegionGetPhyParam>
 801056e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010570:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010574:	231f      	movs	r3, #31
 8010576:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801057a:	a90a      	add	r1, sp, #40	; 0x28
 801057c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8010580:	f002 f808 	bl	8012594 <RegionGetPhyParam>
 8010584:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010588:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 801058c:	2320      	movs	r3, #32
 801058e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010592:	a90a      	add	r1, sp, #40	; 0x28
 8010594:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8010598:	f001 fffc 	bl	8012594 <RegionGetPhyParam>
 801059c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 801059e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105a0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80105a4:	230b      	movs	r3, #11
 80105a6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80105aa:	a90a      	add	r1, sp, #40	; 0x28
 80105ac:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80105b0:	f001 fff0 	bl	8012594 <RegionGetPhyParam>
 80105b4:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 80105b6:	f8a5 0400 	strh.w	r0, [r5, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80105ba:	230c      	movs	r3, #12
 80105bc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80105c0:	a90a      	add	r1, sp, #40	; 0x28
 80105c2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80105c6:	f001 ffe5 	bl	8012594 <RegionGetPhyParam>
 80105ca:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 80105cc:	f8a5 0402 	strh.w	r0, [r5, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80105d0:	f04f 0b01 	mov.w	fp, #1
 80105d4:	f884 b0a4 	strb.w	fp, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80105d8:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80105dc:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80105e0:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80105e4:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80105e8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80105ec:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80105ee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80105f2:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80105f4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80105f8:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80105fa:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80105fe:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010600:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8010604:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010606:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 801060a:	f884 b10b 	strb.w	fp, [r4, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 801060e:	f8c5 7348 	str.w	r7, [r5, #840]	; 0x348
    ResetMacParameters( );
 8010612:	f7ff fbaf 	bl	800fd74 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010616:	f884 b105 	strb.w	fp, [r4, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 801061a:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 801061e:	f885 6495 	strb.w	r6, [r5, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 8010622:	f8c5 b340 	str.w	fp, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010626:	62e6      	str	r6, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010628:	6326      	str	r6, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801062a:	9600      	str	r6, [sp, #0]
 801062c:	4b42      	ldr	r3, [pc, #264]	; (8010738 <LoRaMacInitialization+0x38c>)
 801062e:	4632      	mov	r2, r6
 8010630:	f04f 31ff 	mov.w	r1, #4294967295
 8010634:	f505 705a 	add.w	r0, r5, #872	; 0x368
 8010638:	f007 f9de 	bl	80179f8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801063c:	9600      	str	r6, [sp, #0]
 801063e:	4b3f      	ldr	r3, [pc, #252]	; (801073c <LoRaMacInitialization+0x390>)
 8010640:	4632      	mov	r2, r6
 8010642:	f04f 31ff 	mov.w	r1, #4294967295
 8010646:	f505 7060 	add.w	r0, r5, #896	; 0x380
 801064a:	f007 f9d5 	bl	80179f8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 801064e:	9600      	str	r6, [sp, #0]
 8010650:	4b3b      	ldr	r3, [pc, #236]	; (8010740 <LoRaMacInitialization+0x394>)
 8010652:	4632      	mov	r2, r6
 8010654:	f04f 31ff 	mov.w	r1, #4294967295
 8010658:	f505 7066 	add.w	r0, r5, #920	; 0x398
 801065c:	f007 f9cc 	bl	80179f8 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8010660:	9600      	str	r6, [sp, #0]
 8010662:	4b38      	ldr	r3, [pc, #224]	; (8010744 <LoRaMacInitialization+0x398>)
 8010664:	4632      	mov	r2, r6
 8010666:	f04f 31ff 	mov.w	r1, #4294967295
 801066a:	f205 4004 	addw	r0, r5, #1028	; 0x404
 801066e:	f007 f9c3 	bl	80179f8 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8010672:	f10d 0808 	add.w	r8, sp, #8
 8010676:	4640      	mov	r0, r8
 8010678:	f007 f950 	bl	801791c <SysTimeGetMcuTime>
 801067c:	f504 7388 	add.w	r3, r4, #272	; 0x110
 8010680:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010684:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8010688:	4b2f      	ldr	r3, [pc, #188]	; (8010748 <LoRaMacInitialization+0x39c>)
 801068a:	601e      	str	r6, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801068c:	4b2f      	ldr	r3, [pc, #188]	; (801074c <LoRaMacInitialization+0x3a0>)
 801068e:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010692:	4b2f      	ldr	r3, [pc, #188]	; (8010750 <LoRaMacInitialization+0x3a4>)
 8010694:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010698:	4b2e      	ldr	r3, [pc, #184]	; (8010754 <LoRaMacInitialization+0x3a8>)
 801069a:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 801069e:	4b2e      	ldr	r3, [pc, #184]	; (8010758 <LoRaMacInitialization+0x3ac>)
 80106a0:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80106a4:	4b2d      	ldr	r3, [pc, #180]	; (801075c <LoRaMacInitialization+0x3b0>)
 80106a6:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80106aa:	4b2d      	ldr	r3, [pc, #180]	; (8010760 <LoRaMacInitialization+0x3b4>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 80106b2:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 80106b4:	68b9      	ldr	r1, [r7, #8]
 80106b6:	f504 7092 	add.w	r0, r4, #292	; 0x124
 80106ba:	f004 fd59 	bl	8015170 <SecureElementInit>
 80106be:	bb80      	cbnz	r0, 8010722 <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80106c0:	4620      	mov	r0, r4
 80106c2:	f001 fbf1 	bl	8011ea8 <LoRaMacCryptoInit>
 80106c6:	2800      	cmp	r0, #0
 80106c8:	d14c      	bne.n	8010764 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80106ca:	f001 f823 	bl	8011714 <LoRaMacCommandsInit>
 80106ce:	2800      	cmp	r0, #0
 80106d0:	d14a      	bne.n	8010768 <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80106d2:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 80106d6:	f001 fc39 	bl	8011f4c <LoRaMacCryptoSetMulticastReference>
 80106da:	4604      	mov	r4, r0
 80106dc:	2800      	cmp	r0, #0
 80106de:	d145      	bne.n	801076c <LoRaMacInitialization+0x3c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80106e0:	4d1f      	ldr	r5, [pc, #124]	; (8010760 <LoRaMacInitialization+0x3b4>)
 80106e2:	696b      	ldr	r3, [r5, #20]
 80106e4:	4798      	blx	r3
 80106e6:	f004 ffd5 	bl	8015694 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80106ea:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80106ec:	4a0e      	ldr	r2, [pc, #56]	; (8010728 <LoRaMacInitialization+0x37c>)
 80106ee:	f892 0105 	ldrb.w	r0, [r2, #261]	; 0x105
 80106f2:	4798      	blx	r3
    Radio.Sleep( );
 80106f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80106f6:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80106f8:	4658      	mov	r0, fp
 80106fa:	f7fd fce7 	bl	800e0cc <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80106fe:	e00c      	b.n	801071a <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010700:	2403      	movs	r4, #3
 8010702:	e00a      	b.n	801071a <LoRaMacInitialization+0x36e>
 8010704:	2403      	movs	r4, #3
 8010706:	e008      	b.n	801071a <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010708:	2403      	movs	r4, #3
 801070a:	e006      	b.n	801071a <LoRaMacInitialization+0x36e>
 801070c:	2403      	movs	r4, #3
 801070e:	e004      	b.n	801071a <LoRaMacInitialization+0x36e>
 8010710:	2403      	movs	r4, #3
 8010712:	e002      	b.n	801071a <LoRaMacInitialization+0x36e>
 8010714:	2403      	movs	r4, #3
 8010716:	e000      	b.n	801071a <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010718:	2409      	movs	r4, #9
}
 801071a:	4620      	mov	r0, r4
 801071c:	b00d      	add	sp, #52	; 0x34
 801071e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010722:	2411      	movs	r4, #17
 8010724:	e7f9      	b.n	801071a <LoRaMacInitialization+0x36e>
 8010726:	bf00      	nop
 8010728:	20008000 	.word	0x20008000
 801072c:	200009a0 	.word	0x200009a0
 8010730:	01000400 	.word	0x01000400
 8010734:	20000ec0 	.word	0x20000ec0
 8010738:	0800f7b9 	.word	0x0800f7b9
 801073c:	0800fa5d 	.word	0x0800fa5d
 8010740:	0800fa05 	.word	0x0800fa05
 8010744:	0800e465 	.word	0x0800e465
 8010748:	2000099c 	.word	0x2000099c
 801074c:	0800fd1d 	.word	0x0800fd1d
 8010750:	0800fcbd 	.word	0x0800fcbd
 8010754:	0800e081 	.word	0x0800e081
 8010758:	0800fc89 	.word	0x0800fc89
 801075c:	0800fc55 	.word	0x0800fc55
 8010760:	0801c3a0 	.word	0x0801c3a0
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010764:	2411      	movs	r4, #17
 8010766:	e7d8      	b.n	801071a <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010768:	2413      	movs	r4, #19
 801076a:	e7d6      	b.n	801071a <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801076c:	2411      	movs	r4, #17
 801076e:	e7d4      	b.n	801071a <LoRaMacInitialization+0x36e>

08010770 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 8010770:	2000      	movs	r0, #0
 8010772:	4b02      	ldr	r3, [pc, #8]	; (801077c <LoRaMacStart+0xc>)
 8010774:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 8010778:	4770      	bx	lr
 801077a:	bf00      	nop
 801077c:	200009a0 	.word	0x200009a0

08010780 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8010780:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 8010782:	f7ff fdaf 	bl	80102e4 <LoRaMacIsBusy>
 8010786:	b130      	cbz	r0, 8010796 <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8010788:	4b06      	ldr	r3, [pc, #24]	; (80107a4 <LoRaMacStop+0x24>)
 801078a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801078e:	2b01      	cmp	r3, #1
 8010790:	d006      	beq.n	80107a0 <LoRaMacStop+0x20>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 8010792:	2001      	movs	r0, #1
}
 8010794:	bd08      	pop	{r3, pc}
        MacCtx.MacState = LORAMAC_STOPPED;
 8010796:	4b03      	ldr	r3, [pc, #12]	; (80107a4 <LoRaMacStop+0x24>)
 8010798:	2201      	movs	r2, #1
 801079a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 801079e:	e7f9      	b.n	8010794 <LoRaMacStop+0x14>
        return LORAMAC_STATUS_OK;
 80107a0:	2000      	movs	r0, #0
 80107a2:	e7f7      	b.n	8010794 <LoRaMacStop+0x14>
 80107a4:	200009a0 	.word	0x200009a0

080107a8 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80107a8:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80107aa:	4c14      	ldr	r4, [pc, #80]	; (80107fc <LoRaMacHalt+0x54>)
 80107ac:	f504 705a 	add.w	r0, r4, #872	; 0x368
 80107b0:	f007 f980 	bl	8017ab4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80107b4:	f504 7060 	add.w	r0, r4, #896	; 0x380
 80107b8:	f007 f97c 	bl	8017ab4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80107bc:	f504 7066 	add.w	r0, r4, #920	; 0x398
 80107c0:	f007 f978 	bl	8017ab4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80107c4:	f204 4004 	addw	r0, r4, #1028	; 0x404
 80107c8:	f007 f974 	bl	8017ab4 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80107cc:	f000 ff0a 	bl	80115e4 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80107d0:	4b0b      	ldr	r3, [pc, #44]	; (8010800 <LoRaMacHalt+0x58>)
 80107d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107d4:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80107d6:	2500      	movs	r5, #0
 80107d8:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 80107dc:	4e09      	ldr	r6, [pc, #36]	; (8010804 <LoRaMacHalt+0x5c>)
 80107de:	4630      	mov	r0, r6
 80107e0:	f7ff f964 	bl	800faac <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80107e4:	f240 528c 	movw	r2, #1420	; 0x58c
 80107e8:	4631      	mov	r1, r6
 80107ea:	4807      	ldr	r0, [pc, #28]	; (8010808 <LoRaMacHalt+0x60>)
 80107ec:	f004 ff65 	bl	80156ba <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 80107f0:	2301      	movs	r3, #1
 80107f2:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 80107f6:	4628      	mov	r0, r5
 80107f8:	bd70      	pop	{r4, r5, r6, pc}
 80107fa:	bf00      	nop
 80107fc:	200009a0 	.word	0x200009a0
 8010800:	0801c3a0 	.word	0x0801c3a0
 8010804:	20008000 	.word	0x20008000
 8010808:	2000858c 	.word	0x2000858c

0801080c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 801080c:	b530      	push	{r4, r5, lr}
 801080e:	b08b      	sub	sp, #44	; 0x2c
 8010810:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010812:	4b32      	ldr	r3, [pc, #200]	; (80108dc <LoRaMacQueryTxPossible+0xd0>)
 8010814:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010816:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010818:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 801081c:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010820:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8010824:	f88d 300e 	strb.w	r3, [sp, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8010828:	4b2d      	ldr	r3, [pc, #180]	; (80108e0 <LoRaMacQueryTxPossible+0xd4>)
 801082a:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 801082e:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8010832:	2300      	movs	r3, #0
 8010834:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 8010836:	2900      	cmp	r1, #0
 8010838:	d049      	beq.n	80108ce <LoRaMacQueryTxPossible+0xc2>
 801083a:	460d      	mov	r5, r1

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 801083c:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010840:	4b26      	ldr	r3, [pc, #152]	; (80108dc <LoRaMacQueryTxPossible+0xd0>)
 8010842:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
 8010846:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801084a:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801084c:	4924      	ldr	r1, [pc, #144]	; (80108e0 <LoRaMacQueryTxPossible+0xd4>)
 801084e:	f8b1 0400 	ldrh.w	r0, [r1, #1024]	; 0x400
 8010852:	f8ad 001c 	strh.w	r0, [sp, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010856:	f8b1 1402 	ldrh.w	r1, [r1, #1026]	; 0x402
 801085a:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801085e:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 8010862:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010866:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 801086a:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 801086e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010872:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8010876:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 801087a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801087e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8010882:	ab04      	add	r3, sp, #16
 8010884:	9300      	str	r3, [sp, #0]
 8010886:	f10d 030d 	add.w	r3, sp, #13
 801088a:	f10d 020e 	add.w	r2, sp, #14
 801088e:	f10d 010f 	add.w	r1, sp, #15
 8010892:	a805      	add	r0, sp, #20
 8010894:	f000 fe18 	bl	80114c8 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010898:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 801089c:	f7fd fd3a 	bl	800e314 <GetMaxAppPayloadWithoutFOptsLength>
 80108a0:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80108a2:	a802      	add	r0, sp, #8
 80108a4:	f000 ffba 	bl	801181c <LoRaMacCommandsGetSizeSerializedCmds>
 80108a8:	b998      	cbnz	r0, 80108d2 <LoRaMacQueryTxPossible+0xc6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80108aa:	9b02      	ldr	r3, [sp, #8]
 80108ac:	2b0f      	cmp	r3, #15
 80108ae:	d80a      	bhi.n	80108c6 <LoRaMacQueryTxPossible+0xba>
 80108b0:	786a      	ldrb	r2, [r5, #1]
 80108b2:	4293      	cmp	r3, r2
 80108b4:	d807      	bhi.n	80108c6 <LoRaMacQueryTxPossible+0xba>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80108b6:	1ad3      	subs	r3, r2, r3
 80108b8:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80108ba:	9b02      	ldr	r3, [sp, #8]
 80108bc:	441c      	add	r4, r3
 80108be:	42a2      	cmp	r2, r4
 80108c0:	d309      	bcc.n	80108d6 <LoRaMacQueryTxPossible+0xca>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 80108c2:	b00b      	add	sp, #44	; 0x2c
 80108c4:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 80108c6:	2300      	movs	r3, #0
 80108c8:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80108ca:	2008      	movs	r0, #8
 80108cc:	e7f9      	b.n	80108c2 <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80108ce:	2003      	movs	r0, #3
 80108d0:	e7f7      	b.n	80108c2 <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80108d2:	2013      	movs	r0, #19
 80108d4:	e7f5      	b.n	80108c2 <LoRaMacQueryTxPossible+0xb6>
           return LORAMAC_STATUS_LENGTH_ERROR;
 80108d6:	2008      	movs	r0, #8
 80108d8:	e7f3      	b.n	80108c2 <LoRaMacQueryTxPossible+0xb6>
 80108da:	bf00      	nop
 80108dc:	20008000 	.word	0x20008000
 80108e0:	200009a0 	.word	0x200009a0

080108e4 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80108e4:	2800      	cmp	r0, #0
 80108e6:	f000 813d 	beq.w	8010b64 <LoRaMacMibGetRequestConfirm+0x280>
{
 80108ea:	b510      	push	{r4, lr}
 80108ec:	b084      	sub	sp, #16
 80108ee:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 80108f0:	7800      	ldrb	r0, [r0, #0]
 80108f2:	2839      	cmp	r0, #57	; 0x39
 80108f4:	f200 8132 	bhi.w	8010b5c <LoRaMacMibGetRequestConfirm+0x278>
 80108f8:	e8df f010 	tbh	[pc, r0, lsl #1]
 80108fc:	0040003a 	.word	0x0040003a
 8010900:	004b0046 	.word	0x004b0046
 8010904:	00560050 	.word	0x00560050
 8010908:	0130005c 	.word	0x0130005c
 801090c:	01300130 	.word	0x01300130
 8010910:	01300130 	.word	0x01300130
 8010914:	01300130 	.word	0x01300130
 8010918:	00620130 	.word	0x00620130
 801091c:	006e0068 	.word	0x006e0068
 8010920:	0083007b 	.word	0x0083007b
 8010924:	0093008b 	.word	0x0093008b
 8010928:	009b00a8 	.word	0x009b00a8
 801092c:	00bb00b5 	.word	0x00bb00b5
 8010930:	00c500c0 	.word	0x00c500c0
 8010934:	00cf00ca 	.word	0x00cf00ca
 8010938:	00e500d4 	.word	0x00e500d4
 801093c:	00f700eb 	.word	0x00f700eb
 8010940:	00fd00f1 	.word	0x00fd00f1
 8010944:	01080102 	.word	0x01080102
 8010948:	010d0115 	.word	0x010d0115
 801094c:	01300111 	.word	0x01300111
 8010950:	0130011b 	.word	0x0130011b
 8010954:	01300130 	.word	0x01300130
 8010958:	01300130 	.word	0x01300130
 801095c:	01300130 	.word	0x01300130
 8010960:	01300130 	.word	0x01300130
 8010964:	01300130 	.word	0x01300130
 8010968:	01300130 	.word	0x01300130
 801096c:	012a0124 	.word	0x012a0124
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8010970:	4b7d      	ldr	r3, [pc, #500]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010972:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010976:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 8010978:	b004      	add	sp, #16
 801097a:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801097c:	4b7a      	ldr	r3, [pc, #488]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 801097e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8010982:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010984:	2000      	movs	r0, #0
            break;
 8010986:	e7f7      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8010988:	f004 fe50 	bl	801562c <SecureElementGetDevEui>
 801098c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801098e:	2000      	movs	r0, #0
            break;
 8010990:	e7f2      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8010992:	f004 fe61 	bl	8015658 <SecureElementGetJoinEui>
 8010996:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010998:	2000      	movs	r0, #0
            break;
 801099a:	e7ed      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 801099c:	4b72      	ldr	r3, [pc, #456]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 801099e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80109a2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80109a4:	2000      	movs	r0, #0
            break;
 80109a6:	e7e7      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80109a8:	4b6f      	ldr	r3, [pc, #444]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 80109aa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80109ae:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80109b0:	2000      	movs	r0, #0
            break;
 80109b2:	e7e1      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80109b4:	4b6c      	ldr	r3, [pc, #432]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 80109b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80109ba:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80109bc:	2000      	movs	r0, #0
            break;
 80109be:	e7db      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80109c0:	4b69      	ldr	r3, [pc, #420]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 80109c2:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80109c6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80109c8:	2000      	movs	r0, #0
            break;
 80109ca:	e7d5      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80109cc:	4b66      	ldr	r3, [pc, #408]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 80109ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80109d2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80109d4:	2000      	movs	r0, #0
            break;
 80109d6:	e7cf      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS;
 80109d8:	231c      	movs	r3, #28
 80109da:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109de:	a902      	add	r1, sp, #8
 80109e0:	4b61      	ldr	r3, [pc, #388]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 80109e2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80109e6:	f001 fdd5 	bl	8012594 <RegionGetPhyParam>
 80109ea:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 80109ec:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80109ee:	2000      	movs	r0, #0
            break;
 80109f0:	e7c2      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80109f2:	3404      	adds	r4, #4
 80109f4:	4b5d      	ldr	r3, [pc, #372]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x288>)
 80109f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80109fa:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80109fe:	2000      	movs	r0, #0
            break;
 8010a00:	e7ba      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010a02:	3404      	adds	r4, #4
 8010a04:	4b5a      	ldr	r3, [pc, #360]	; (8010b70 <LoRaMacMibGetRequestConfirm+0x28c>)
 8010a06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010a0a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010a0e:	2000      	movs	r0, #0
            break;
 8010a10:	e7b2      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8010a12:	3404      	adds	r4, #4
 8010a14:	4b57      	ldr	r3, [pc, #348]	; (8010b74 <LoRaMacMibGetRequestConfirm+0x290>)
 8010a16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010a1a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010a1e:	2000      	movs	r0, #0
            break;
 8010a20:	e7aa      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010a22:	3404      	adds	r4, #4
 8010a24:	4b54      	ldr	r3, [pc, #336]	; (8010b78 <LoRaMacMibGetRequestConfirm+0x294>)
 8010a26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010a2a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010a2e:	2000      	movs	r0, #0
            break;
 8010a30:	e7a2      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8010a32:	231a      	movs	r3, #26
 8010a34:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a38:	a902      	add	r1, sp, #8
 8010a3a:	4b4b      	ldr	r3, [pc, #300]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010a3c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010a40:	f001 fda8 	bl	8012594 <RegionGetPhyParam>
 8010a44:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8010a46:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010a48:	2000      	movs	r0, #0
            break;
 8010a4a:	e795      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8010a4c:	2319      	movs	r3, #25
 8010a4e:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a52:	a902      	add	r1, sp, #8
 8010a54:	4b44      	ldr	r3, [pc, #272]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010a56:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010a5a:	f001 fd9b 	bl	8012594 <RegionGetPhyParam>
 8010a5e:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8010a60:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010a62:	2000      	movs	r0, #0
            break;
 8010a64:	e788      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010a66:	4b40      	ldr	r3, [pc, #256]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010a68:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8010a6c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010a6e:	2000      	movs	r0, #0
            break;
 8010a70:	e782      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8010a72:	4b3d      	ldr	r3, [pc, #244]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a76:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010a78:	2000      	movs	r0, #0
            break;
 8010a7a:	e77d      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8010a7c:	4b3a      	ldr	r3, [pc, #232]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a80:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010a82:	2000      	movs	r0, #0
            break;
 8010a84:	e778      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8010a86:	4b38      	ldr	r3, [pc, #224]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a8a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010a8c:	2000      	movs	r0, #0
            break;
 8010a8e:	e773      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8010a90:	4b35      	ldr	r3, [pc, #212]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a94:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010a96:	2000      	movs	r0, #0
            break;
 8010a98:	e76e      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8010a9a:	4b33      	ldr	r3, [pc, #204]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a9e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010aa0:	2000      	movs	r0, #0
            break;
 8010aa2:	e769      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_MIN_TX_DR;
 8010aa4:	2302      	movs	r3, #2
 8010aa6:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010aaa:	4b2f      	ldr	r3, [pc, #188]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010aac:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8010ab0:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ab4:	a902      	add	r1, sp, #8
 8010ab6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010aba:	f001 fd6b 	bl	8012594 <RegionGetPhyParam>
 8010abe:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8010ac0:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010ac2:	2000      	movs	r0, #0
            break;
 8010ac4:	e758      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010ac6:	4b28      	ldr	r3, [pc, #160]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010ac8:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8010acc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010ace:	2000      	movs	r0, #0
            break;
 8010ad0:	e752      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010ad2:	4b25      	ldr	r3, [pc, #148]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010ad4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010ad8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010ada:	2000      	movs	r0, #0
            break;
 8010adc:	e74c      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010ade:	4b22      	ldr	r3, [pc, #136]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010ae0:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8010ae4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010ae6:	2000      	movs	r0, #0
            break;
 8010ae8:	e746      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010aea:	4b1f      	ldr	r3, [pc, #124]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010aec:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010af0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010af2:	2000      	movs	r0, #0
            break;
 8010af4:	e740      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8010af6:	4b1c      	ldr	r3, [pc, #112]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010afa:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010afc:	2000      	movs	r0, #0
            break;
 8010afe:	e73b      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8010b00:	4b19      	ldr	r3, [pc, #100]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010b02:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010b06:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b08:	2000      	movs	r0, #0
            break;
 8010b0a:	e735      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010b0c:	4b16      	ldr	r3, [pc, #88]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010b10:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b12:	2000      	movs	r0, #0
            break;
 8010b14:	e730      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Contexts = &Nvm;
 8010b16:	4b14      	ldr	r3, [pc, #80]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010b18:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b1a:	2000      	movs	r0, #0
            break;
 8010b1c:	e72c      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.BackupContexts = &NvmBackup;
 8010b1e:	4b17      	ldr	r3, [pc, #92]	; (8010b7c <LoRaMacMibGetRequestConfirm+0x298>)
 8010b20:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b22:	2000      	movs	r0, #0
            break;
 8010b24:	e728      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010b26:	4b10      	ldr	r3, [pc, #64]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010b28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8010b2c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b2e:	2000      	movs	r0, #0
            break;
 8010b30:	e722      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8010b32:	4b0d      	ldr	r3, [pc, #52]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010b34:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8010b38:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8010b3a:	f001 fe53 	bl	80127e4 <RegionGetVersion>
 8010b3e:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b40:	2000      	movs	r0, #0
            break;
 8010b42:	e719      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8010b44:	4b08      	ldr	r3, [pc, #32]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b4a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b4c:	2000      	movs	r0, #0
            break;
 8010b4e:	e713      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8010b50:	4b05      	ldr	r3, [pc, #20]	; (8010b68 <LoRaMacMibGetRequestConfirm+0x284>)
 8010b52:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8010b56:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b58:	2000      	movs	r0, #0
            break;
 8010b5a:	e70d      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	f000 fd45 	bl	80115ec <LoRaMacClassBMibGetRequestConfirm>
            break;
 8010b62:	e709      	b.n	8010978 <LoRaMacMibGetRequestConfirm+0x94>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010b64:	2003      	movs	r0, #3
}
 8010b66:	4770      	bx	lr
 8010b68:	20008000 	.word	0x20008000
 8010b6c:	20008064 	.word	0x20008064
 8010b70:	200080a8 	.word	0x200080a8
 8010b74:	2000806c 	.word	0x2000806c
 8010b78:	200080b0 	.word	0x200080b0
 8010b7c:	2000858c 	.word	0x2000858c

08010b80 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8010b80:	2800      	cmp	r0, #0
 8010b82:	f000 8254 	beq.w	801102e <LoRaMacMibSetRequestConfirm+0x4ae>
{
 8010b86:	b530      	push	{r4, r5, lr}
 8010b88:	b085      	sub	sp, #20
 8010b8a:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8010b8c:	4ba3      	ldr	r3, [pc, #652]	; (8010e1c <LoRaMacMibSetRequestConfirm+0x29c>)
 8010b8e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010b92:	f013 0f02 	tst.w	r3, #2
 8010b96:	f040 824c 	bne.w	8011032 <LoRaMacMibSetRequestConfirm+0x4b2>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 8010b9a:	7805      	ldrb	r5, [r0, #0]
 8010b9c:	2d39      	cmp	r5, #57	; 0x39
 8010b9e:	f200 8243 	bhi.w	8011028 <LoRaMacMibSetRequestConfirm+0x4a8>
 8010ba2:	e8df f015 	tbh	[pc, r5, lsl #1]
 8010ba6:	003a      	.short	0x003a
 8010ba8:	00500047 	.word	0x00500047
 8010bac:	005e0057 	.word	0x005e0057
 8010bb0:	006a0064 	.word	0x006a0064
 8010bb4:	007b0070 	.word	0x007b0070
 8010bb8:	00910086 	.word	0x00910086
 8010bbc:	00a7009c 	.word	0x00a7009c
 8010bc0:	00bd00b2 	.word	0x00bd00b2
 8010bc4:	00d400c9 	.word	0x00d400c9
 8010bc8:	00da0241 	.word	0x00da0241
 8010bcc:	011a0100 	.word	0x011a0100
 8010bd0:	017d0153 	.word	0x017d0153
 8010bd4:	018d016d 	.word	0x018d016d
 8010bd8:	019d0198 	.word	0x019d0198
 8010bdc:	01a701a2 	.word	0x01a701a2
 8010be0:	024101ac 	.word	0x024101ac
 8010be4:	01c601b1 	.word	0x01c601b1
 8010be8:	01df01f3 	.word	0x01df01f3
 8010bec:	020e0207 	.word	0x020e0207
 8010bf0:	021b0216 	.word	0x021b0216
 8010bf4:	02410221 	.word	0x02410221
 8010bf8:	02410224 	.word	0x02410224
 8010bfc:	02410241 	.word	0x02410241
 8010c00:	02410241 	.word	0x02410241
 8010c04:	02410241 	.word	0x02410241
 8010c08:	02410241 	.word	0x02410241
 8010c0c:	02410241 	.word	0x02410241
 8010c10:	02410241 	.word	0x02410241
 8010c14:	02350241 	.word	0x02350241
 8010c18:	023b      	.short	0x023b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8010c1a:	7900      	ldrb	r0, [r0, #4]
 8010c1c:	f7ff f95a 	bl	800fed4 <SwitchClass>
            break;
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 8010c20:	b930      	cbnz	r0, 8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010c22:	4a7e      	ldr	r2, [pc, #504]	; (8010e1c <LoRaMacMibSetRequestConfirm+0x29c>)
 8010c24:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8010c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c2c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 8010c30:	b005      	add	sp, #20
 8010c32:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8010c34:	7903      	ldrb	r3, [r0, #4]
 8010c36:	2b02      	cmp	r3, #2
 8010c38:	f000 81fd 	beq.w	8011036 <LoRaMacMibSetRequestConfirm+0x4b6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8010c3c:	4a78      	ldr	r2, [pc, #480]	; (8010e20 <LoRaMacMibSetRequestConfirm+0x2a0>)
 8010c3e:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010c42:	2000      	movs	r0, #0
 8010c44:	e7ed      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8010c46:	6840      	ldr	r0, [r0, #4]
 8010c48:	f004 fce2 	bl	8015610 <SecureElementSetDevEui>
 8010c4c:	2800      	cmp	r0, #0
 8010c4e:	d0e8      	beq.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010c50:	2003      	movs	r0, #3
 8010c52:	e7ed      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8010c54:	6840      	ldr	r0, [r0, #4]
 8010c56:	f004 fcef 	bl	8015638 <SecureElementSetJoinEui>
 8010c5a:	2800      	cmp	r0, #0
 8010c5c:	d0e1      	beq.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010c5e:	4628      	mov	r0, r5
 8010c60:	e7e6      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8010c62:	7902      	ldrb	r2, [r0, #4]
 8010c64:	4b6e      	ldr	r3, [pc, #440]	; (8010e20 <LoRaMacMibSetRequestConfirm+0x2a0>)
 8010c66:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010c6a:	2000      	movs	r0, #0
 8010c6c:	e7d9      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8010c6e:	6842      	ldr	r2, [r0, #4]
 8010c70:	4b6b      	ldr	r3, [pc, #428]	; (8010e20 <LoRaMacMibSetRequestConfirm+0x2a0>)
 8010c72:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010c76:	2000      	movs	r0, #0
 8010c78:	e7d3      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8010c7a:	6842      	ldr	r2, [r0, #4]
 8010c7c:	4b68      	ldr	r3, [pc, #416]	; (8010e20 <LoRaMacMibSetRequestConfirm+0x2a0>)
 8010c7e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010c82:	2000      	movs	r0, #0
 8010c84:	e7cd      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            if( mibSet->Param.AppKey != NULL )
 8010c86:	6841      	ldr	r1, [r0, #4]
 8010c88:	2900      	cmp	r1, #0
 8010c8a:	f000 81d6 	beq.w	801103a <LoRaMacMibSetRequestConfirm+0x4ba>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8010c8e:	2000      	movs	r0, #0
 8010c90:	f001 fa6e 	bl	8012170 <LoRaMacCryptoSetKey>
 8010c94:	2800      	cmp	r0, #0
 8010c96:	d0c4      	beq.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010c98:	2011      	movs	r0, #17
 8010c9a:	e7c9      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkKey != NULL )
 8010c9c:	6841      	ldr	r1, [r0, #4]
 8010c9e:	2900      	cmp	r1, #0
 8010ca0:	f000 81cd 	beq.w	801103e <LoRaMacMibSetRequestConfirm+0x4be>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8010ca4:	2001      	movs	r0, #1
 8010ca6:	f001 fa63 	bl	8012170 <LoRaMacCryptoSetKey>
 8010caa:	2800      	cmp	r0, #0
 8010cac:	d0b9      	beq.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010cae:	2011      	movs	r0, #17
 8010cb0:	e7be      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkSKey != NULL )
 8010cb2:	6841      	ldr	r1, [r0, #4]
 8010cb4:	2900      	cmp	r1, #0
 8010cb6:	f000 81c4 	beq.w	8011042 <LoRaMacMibSetRequestConfirm+0x4c2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8010cba:	2002      	movs	r0, #2
 8010cbc:	f001 fa58 	bl	8012170 <LoRaMacCryptoSetKey>
 8010cc0:	2800      	cmp	r0, #0
 8010cc2:	d0ae      	beq.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010cc4:	2011      	movs	r0, #17
 8010cc6:	e7b3      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AppSKey != NULL )
 8010cc8:	6841      	ldr	r1, [r0, #4]
 8010cca:	2900      	cmp	r1, #0
 8010ccc:	f000 81bb 	beq.w	8011046 <LoRaMacMibSetRequestConfirm+0x4c6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8010cd0:	2003      	movs	r0, #3
 8010cd2:	f001 fa4d 	bl	8012170 <LoRaMacCryptoSetKey>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	d0a3      	beq.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010cda:	2011      	movs	r0, #17
 8010cdc:	e7a8      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKEKey != NULL )
 8010cde:	6841      	ldr	r1, [r0, #4]
 8010ce0:	2900      	cmp	r1, #0
 8010ce2:	f000 81b2 	beq.w	801104a <LoRaMacMibSetRequestConfirm+0x4ca>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8010ce6:	207f      	movs	r0, #127	; 0x7f
 8010ce8:	f001 fa42 	bl	8012170 <LoRaMacCryptoSetKey>
 8010cec:	2800      	cmp	r0, #0
 8010cee:	d098      	beq.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010cf0:	2011      	movs	r0, #17
 8010cf2:	e79d      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKey0 != NULL )
 8010cf4:	6841      	ldr	r1, [r0, #4]
 8010cf6:	2900      	cmp	r1, #0
 8010cf8:	f000 81a9 	beq.w	801104e <LoRaMacMibSetRequestConfirm+0x4ce>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8010cfc:	2080      	movs	r0, #128	; 0x80
 8010cfe:	f001 fa37 	bl	8012170 <LoRaMacCryptoSetKey>
 8010d02:	2800      	cmp	r0, #0
 8010d04:	d08d      	beq.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d06:	2011      	movs	r0, #17
 8010d08:	e792      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McAppSKey0 != NULL )
 8010d0a:	6841      	ldr	r1, [r0, #4]
 8010d0c:	2900      	cmp	r1, #0
 8010d0e:	f000 81a0 	beq.w	8011052 <LoRaMacMibSetRequestConfirm+0x4d2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8010d12:	2081      	movs	r0, #129	; 0x81
 8010d14:	f001 fa2c 	bl	8012170 <LoRaMacCryptoSetKey>
 8010d18:	2800      	cmp	r0, #0
 8010d1a:	d082      	beq.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d1c:	2011      	movs	r0, #17
 8010d1e:	e787      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 8010d20:	6841      	ldr	r1, [r0, #4]
 8010d22:	2900      	cmp	r1, #0
 8010d24:	f000 8197 	beq.w	8011056 <LoRaMacMibSetRequestConfirm+0x4d6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8010d28:	2082      	movs	r0, #130	; 0x82
 8010d2a:	f001 fa21 	bl	8012170 <LoRaMacCryptoSetKey>
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	f43f af77 	beq.w	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d34:	2011      	movs	r0, #17
 8010d36:	e77b      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8010d38:	7900      	ldrb	r0, [r0, #4]
 8010d3a:	4b39      	ldr	r3, [pc, #228]	; (8010e20 <LoRaMacMibSetRequestConfirm+0x2a0>)
 8010d3c:	f883 0105 	strb.w	r0, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010d40:	4c38      	ldr	r4, [pc, #224]	; (8010e24 <LoRaMacMibSetRequestConfirm+0x2a4>)
 8010d42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010d44:	4798      	blx	r3
            Radio.Sleep( );
 8010d46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010d48:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	e769      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8010d4e:	7902      	ldrb	r2, [r0, #4]
 8010d50:	4b33      	ldr	r3, [pc, #204]	; (8010e20 <LoRaMacMibSetRequestConfirm+0x2a0>)
 8010d52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010d56:	2000      	movs	r0, #0
 8010d58:	e763      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8010d5a:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010d5e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010d62:	4b2f      	ldr	r3, [pc, #188]	; (8010e20 <LoRaMacMibSetRequestConfirm+0x2a0>)
 8010d64:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010d68:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8010d6c:	2207      	movs	r2, #7
 8010d6e:	a901      	add	r1, sp, #4
 8010d70:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010d74:	f001 fc42 	bl	80125fc <RegionVerify>
 8010d78:	b908      	cbnz	r0, 8010d7e <LoRaMacMibSetRequestConfirm+0x1fe>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d7a:	2003      	movs	r0, #3
 8010d7c:	e750      	b.n	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8010d7e:	6863      	ldr	r3, [r4, #4]
 8010d80:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8010d82:	2200      	movs	r2, #0
 8010d84:	a901      	add	r1, sp, #4
 8010d86:	4b26      	ldr	r3, [pc, #152]	; (8010e20 <LoRaMacMibSetRequestConfirm+0x2a0>)
 8010d88:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010d8c:	f001 fc36 	bl	80125fc <RegionVerify>
 8010d90:	2800      	cmp	r0, #0
 8010d92:	f000 8162 	beq.w	801105a <LoRaMacMibSetRequestConfirm+0x4da>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8010d96:	4b24      	ldr	r3, [pc, #144]	; (8010e28 <LoRaMacMibSetRequestConfirm+0x2a8>)
 8010d98:	3404      	adds	r4, #4
 8010d9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010d9e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010da2:	2000      	movs	r0, #0
 8010da4:	e73c      	b.n	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8010da6:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010daa:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010dae:	4b1c      	ldr	r3, [pc, #112]	; (8010e20 <LoRaMacMibSetRequestConfirm+0x2a0>)
 8010db0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010db4:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010db8:	2207      	movs	r2, #7
 8010dba:	a901      	add	r1, sp, #4
 8010dbc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010dc0:	f001 fc1c 	bl	80125fc <RegionVerify>
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	f000 814a 	beq.w	801105e <LoRaMacMibSetRequestConfirm+0x4de>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8010dca:	4b18      	ldr	r3, [pc, #96]	; (8010e2c <LoRaMacMibSetRequestConfirm+0x2ac>)
 8010dcc:	3404      	adds	r4, #4
 8010dce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010dd2:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010dd6:	2000      	movs	r0, #0
 8010dd8:	e722      	b.n	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8010dda:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010dde:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010de2:	4b0f      	ldr	r3, [pc, #60]	; (8010e20 <LoRaMacMibSetRequestConfirm+0x2a0>)
 8010de4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010de8:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010dec:	2207      	movs	r2, #7
 8010dee:	a901      	add	r1, sp, #4
 8010df0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010df4:	f001 fc02 	bl	80125fc <RegionVerify>
 8010df8:	2800      	cmp	r0, #0
 8010dfa:	f000 8132 	beq.w	8011062 <LoRaMacMibSetRequestConfirm+0x4e2>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8010dfe:	4b08      	ldr	r3, [pc, #32]	; (8010e20 <LoRaMacMibSetRequestConfirm+0x2a0>)
 8010e00:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8010e04:	3404      	adds	r4, #4
 8010e06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010e0a:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8010e0e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010e12:	2b02      	cmp	r3, #2
 8010e14:	d00c      	beq.n	8010e30 <LoRaMacMibSetRequestConfirm+0x2b0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010e16:	2000      	movs	r0, #0
 8010e18:	e702      	b.n	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
 8010e1a:	bf00      	nop
 8010e1c:	200009a0 	.word	0x200009a0
 8010e20:	20008000 	.word	0x20008000
 8010e24:	0801c3a0 	.word	0x0801c3a0
 8010e28:	20008064 	.word	0x20008064
 8010e2c:	200080a8 	.word	0x200080a8
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8010e30:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 8010e34:	f893 011c 	ldrb.w	r0, [r3, #284]	; 0x11c
 8010e38:	2800      	cmp	r0, #0
 8010e3a:	f43f aef1 	beq.w	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
                    Radio.Sleep( );
 8010e3e:	4b90      	ldr	r3, [pc, #576]	; (8011080 <LoRaMacMibSetRequestConfirm+0x500>)
 8010e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e42:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 8010e44:	f7fe fd82 	bl	800f94c <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010e48:	2000      	movs	r0, #0
 8010e4a:	e6e9      	b.n	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8010e4c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010e50:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010e54:	4b8b      	ldr	r3, [pc, #556]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010e56:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010e5a:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010e5e:	2207      	movs	r2, #7
 8010e60:	a901      	add	r1, sp, #4
 8010e62:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010e66:	f001 fbc9 	bl	80125fc <RegionVerify>
 8010e6a:	2800      	cmp	r0, #0
 8010e6c:	f000 80fb 	beq.w	8011066 <LoRaMacMibSetRequestConfirm+0x4e6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8010e70:	4b85      	ldr	r3, [pc, #532]	; (8011088 <LoRaMacMibSetRequestConfirm+0x508>)
 8010e72:	3404      	adds	r4, #4
 8010e74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010e78:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010e7c:	2000      	movs	r0, #0
 8010e7e:	e6cf      	b.n	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8010e80:	6843      	ldr	r3, [r0, #4]
 8010e82:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8010e84:	2301      	movs	r3, #1
 8010e86:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8010e8a:	a902      	add	r1, sp, #8
 8010e8c:	4b7d      	ldr	r3, [pc, #500]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010e8e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010e92:	f001 fbd1 	bl	8012638 <RegionChanMaskSet>
 8010e96:	b108      	cbz	r0, 8010e9c <LoRaMacMibSetRequestConfirm+0x31c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010e98:	2000      	movs	r0, #0
 8010e9a:	e6c1      	b.n	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e9c:	2003      	movs	r0, #3
 8010e9e:	e6c7      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8010ea0:	6843      	ldr	r3, [r0, #4]
 8010ea2:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8010eaa:	a902      	add	r1, sp, #8
 8010eac:	4b75      	ldr	r3, [pc, #468]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010eae:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010eb2:	f001 fbc1 	bl	8012638 <RegionChanMaskSet>
 8010eb6:	b108      	cbz	r0, 8010ebc <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010eb8:	2000      	movs	r0, #0
 8010eba:	e6b1      	b.n	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010ebc:	2003      	movs	r0, #3
 8010ebe:	e6b7      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8010ec0:	7902      	ldrb	r2, [r0, #4]
 8010ec2:	1e53      	subs	r3, r2, #1
 8010ec4:	b2db      	uxtb	r3, r3
 8010ec6:	2b0e      	cmp	r3, #14
 8010ec8:	f200 80cf 	bhi.w	801106a <LoRaMacMibSetRequestConfirm+0x4ea>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8010ecc:	4b6d      	ldr	r3, [pc, #436]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010ece:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010ed2:	2000      	movs	r0, #0
 8010ed4:	e6a4      	b.n	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8010ed6:	6842      	ldr	r2, [r0, #4]
 8010ed8:	4b6a      	ldr	r3, [pc, #424]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010eda:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010edc:	2000      	movs	r0, #0
 8010ede:	e6a0      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8010ee0:	6842      	ldr	r2, [r0, #4]
 8010ee2:	4b68      	ldr	r3, [pc, #416]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010ee4:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010ee6:	2000      	movs	r0, #0
 8010ee8:	e69b      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8010eea:	6842      	ldr	r2, [r0, #4]
 8010eec:	4b65      	ldr	r3, [pc, #404]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010eee:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010ef0:	2000      	movs	r0, #0
 8010ef2:	e696      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8010ef4:	6842      	ldr	r2, [r0, #4]
 8010ef6:	4b63      	ldr	r3, [pc, #396]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010ef8:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010efa:	2000      	movs	r0, #0
 8010efc:	e691      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8010efe:	6842      	ldr	r2, [r0, #4]
 8010f00:	4b60      	ldr	r3, [pc, #384]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010f02:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010f04:	2000      	movs	r0, #0
 8010f06:	e68c      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8010f08:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8010f0c:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8010f10:	2206      	movs	r2, #6
 8010f12:	a901      	add	r1, sp, #4
 8010f14:	4b5b      	ldr	r3, [pc, #364]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010f16:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010f1a:	f001 fb6f 	bl	80125fc <RegionVerify>
 8010f1e:	2800      	cmp	r0, #0
 8010f20:	f000 80a5 	beq.w	801106e <LoRaMacMibSetRequestConfirm+0x4ee>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8010f24:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8010f28:	4b56      	ldr	r3, [pc, #344]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010f2a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010f2e:	2000      	movs	r0, #0
 8010f30:	e676      	b.n	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8010f32:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8010f36:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010f3a:	4b52      	ldr	r3, [pc, #328]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010f3c:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8010f40:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8010f44:	2205      	movs	r2, #5
 8010f46:	a901      	add	r1, sp, #4
 8010f48:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010f4c:	f001 fb56 	bl	80125fc <RegionVerify>
 8010f50:	2800      	cmp	r0, #0
 8010f52:	f000 808e 	beq.w	8011072 <LoRaMacMibSetRequestConfirm+0x4f2>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8010f56:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8010f5a:	4b4a      	ldr	r3, [pc, #296]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010f60:	2000      	movs	r0, #0
 8010f62:	e65d      	b.n	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8010f64:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8010f68:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8010f6c:	220a      	movs	r2, #10
 8010f6e:	a901      	add	r1, sp, #4
 8010f70:	4b44      	ldr	r3, [pc, #272]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010f72:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010f76:	f001 fb41 	bl	80125fc <RegionVerify>
 8010f7a:	2800      	cmp	r0, #0
 8010f7c:	d07b      	beq.n	8011076 <LoRaMacMibSetRequestConfirm+0x4f6>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8010f7e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8010f82:	4b40      	ldr	r3, [pc, #256]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010f84:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010f88:	2000      	movs	r0, #0
 8010f8a:	e649      	b.n	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8010f8c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8010f90:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8010f94:	2209      	movs	r2, #9
 8010f96:	a901      	add	r1, sp, #4
 8010f98:	4b3a      	ldr	r3, [pc, #232]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010f9a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010f9e:	f001 fb2d 	bl	80125fc <RegionVerify>
 8010fa2:	2800      	cmp	r0, #0
 8010fa4:	d069      	beq.n	801107a <LoRaMacMibSetRequestConfirm+0x4fa>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8010fa6:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8010faa:	4b36      	ldr	r3, [pc, #216]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	e635      	b.n	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8010fb4:	6842      	ldr	r2, [r0, #4]
 8010fb6:	4b33      	ldr	r3, [pc, #204]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8010fbc:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	e62f      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8010fc2:	7902      	ldrb	r2, [r0, #4]
 8010fc4:	4b2f      	ldr	r3, [pc, #188]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010fc6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8010fca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010fce:	2000      	movs	r0, #0
 8010fd0:	e627      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8010fd2:	6842      	ldr	r2, [r0, #4]
 8010fd4:	4b2b      	ldr	r3, [pc, #172]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010fd6:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010fd8:	2000      	movs	r0, #0
 8010fda:	e622      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8010fdc:	6842      	ldr	r2, [r0, #4]
 8010fde:	4b29      	ldr	r3, [pc, #164]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010fe0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010fe4:	2000      	movs	r0, #0
 8010fe6:	e61c      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            status = RestoreNvmData( );
 8010fe8:	f7fe fdc4 	bl	800fb74 <RestoreNvmData>
            break;
 8010fec:	e618      	b.n	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8010fee:	7983      	ldrb	r3, [r0, #6]
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d901      	bls.n	8010ff8 <LoRaMacMibSetRequestConfirm+0x478>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010ff4:	2003      	movs	r0, #3
 8010ff6:	e61b      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8010ff8:	6842      	ldr	r2, [r0, #4]
 8010ffa:	4b22      	ldr	r3, [pc, #136]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8010ffc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011000:	6840      	ldr	r0, [r0, #4]
 8011002:	f000 ff69 	bl	8011ed8 <LoRaMacCryptoSetLrWanVersion>
 8011006:	2800      	cmp	r0, #0
 8011008:	f43f ae0a 	beq.w	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801100c:	2011      	movs	r0, #17
 801100e:	e60f      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8011010:	6842      	ldr	r2, [r0, #4]
 8011012:	4b1c      	ldr	r3, [pc, #112]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8011014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011018:	2000      	movs	r0, #0
 801101a:	e602      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 801101c:	7902      	ldrb	r2, [r0, #4]
 801101e:	4b19      	ldr	r3, [pc, #100]	; (8011084 <LoRaMacMibSetRequestConfirm+0x504>)
 8011020:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011024:	2000      	movs	r0, #0
 8011026:	e5fc      	b.n	8010c22 <LoRaMacMibSetRequestConfirm+0xa2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011028:	f000 fae2 	bl	80115f0 <LoRaMacMibClassBSetRequestConfirm>
            break;
 801102c:	e5f8      	b.n	8010c20 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801102e:	2003      	movs	r0, #3
}
 8011030:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 8011032:	2001      	movs	r0, #1
 8011034:	e5fc      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011036:	2003      	movs	r0, #3
 8011038:	e5fa      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801103a:	2003      	movs	r0, #3
 801103c:	e5f8      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801103e:	2003      	movs	r0, #3
 8011040:	e5f6      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011042:	2003      	movs	r0, #3
 8011044:	e5f4      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011046:	2003      	movs	r0, #3
 8011048:	e5f2      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801104a:	2003      	movs	r0, #3
 801104c:	e5f0      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801104e:	2003      	movs	r0, #3
 8011050:	e5ee      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011052:	2003      	movs	r0, #3
 8011054:	e5ec      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011056:	2003      	movs	r0, #3
 8011058:	e5ea      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 801105a:	2003      	movs	r0, #3
 801105c:	e5e8      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801105e:	2003      	movs	r0, #3
 8011060:	e5e6      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011062:	2003      	movs	r0, #3
 8011064:	e5e4      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011066:	2003      	movs	r0, #3
 8011068:	e5e2      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801106a:	2003      	movs	r0, #3
 801106c:	e5e0      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801106e:	2003      	movs	r0, #3
 8011070:	e5de      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011072:	2003      	movs	r0, #3
 8011074:	e5dc      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011076:	2003      	movs	r0, #3
 8011078:	e5da      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801107a:	2003      	movs	r0, #3
 801107c:	e5d8      	b.n	8010c30 <LoRaMacMibSetRequestConfirm+0xb0>
 801107e:	bf00      	nop
 8011080:	0801c3a0 	.word	0x0801c3a0
 8011084:	20008000 	.word	0x20008000
 8011088:	200080b0 	.word	0x200080b0

0801108c <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 801108c:	b570      	push	{r4, r5, r6, lr}
 801108e:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011090:	2300      	movs	r3, #0
 8011092:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 8011096:	2800      	cmp	r0, #0
 8011098:	f000 80ea 	beq.w	8011270 <LoRaMacMlmeRequest+0x1e4>
 801109c:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 801109e:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80110a0:	f7ff f920 	bl	80102e4 <LoRaMacIsBusy>
 80110a4:	b118      	cbz	r0, 80110ae <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 80110a6:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 80110a8:	4620      	mov	r0, r4
 80110aa:	b006      	add	sp, #24
 80110ac:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80110ae:	f000 fd49 	bl	8011b44 <LoRaMacConfirmQueueIsFull>
 80110b2:	b108      	cbz	r0, 80110b8 <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 80110b4:	2401      	movs	r4, #1
 80110b6:	e7f7      	b.n	80110a8 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80110b8:	f000 fd3e 	bl	8011b38 <LoRaMacConfirmQueueGetCnt>
 80110bc:	b308      	cbz	r0, 8011102 <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80110be:	4b6d      	ldr	r3, [pc, #436]	; (8011274 <LoRaMacMlmeRequest+0x1e8>)
 80110c0:	2101      	movs	r1, #1
 80110c2:	f883 1459 	strb.w	r1, [r3, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80110c6:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 80110ca:	f042 0204 	orr.w	r2, r2, #4
 80110ce:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 80110d2:	782b      	ldrb	r3, [r5, #0]
 80110d4:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80110d8:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 80110dc:	2200      	movs	r2, #0
 80110de:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 80110e2:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 80110e6:	461c      	mov	r4, r3
 80110e8:	3b01      	subs	r3, #1
 80110ea:	2b0c      	cmp	r3, #12
 80110ec:	f200 80a6 	bhi.w	801123c <LoRaMacMlmeRequest+0x1b0>
 80110f0:	e8df f003 	tbb	[pc, r3]
 80110f4:	5aa4a40d 	.word	0x5aa4a40d
 80110f8:	a4a4a464 	.word	0xa4a4a464
 80110fc:	7695a46d 	.word	0x7695a46d
 8011100:	8c          	.byte	0x8c
 8011101:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011102:	2214      	movs	r2, #20
 8011104:	2100      	movs	r1, #0
 8011106:	485c      	ldr	r0, [pc, #368]	; (8011278 <LoRaMacMlmeRequest+0x1ec>)
 8011108:	f004 faef 	bl	80156ea <memset1>
 801110c:	e7d7      	b.n	80110be <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 801110e:	4b59      	ldr	r3, [pc, #356]	; (8011274 <LoRaMacMlmeRequest+0x1e8>)
 8011110:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011114:	f013 0f20 	tst.w	r3, #32
 8011118:	d1c6      	bne.n	80110a8 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 801111a:	792b      	ldrb	r3, [r5, #4]
 801111c:	2b02      	cmp	r3, #2
 801111e:	d003      	beq.n	8011128 <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8011120:	2b01      	cmp	r3, #1
 8011122:	d021      	beq.n	8011168 <LoRaMacMlmeRequest+0xdc>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011124:	2402      	movs	r4, #2
 8011126:	e08a      	b.n	801123e <LoRaMacMlmeRequest+0x1b2>
                ResetMacParameters( );
 8011128:	f7fe fe24 	bl	800fd74 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 801112c:	4c53      	ldr	r4, [pc, #332]	; (801127c <LoRaMacMlmeRequest+0x1f0>)
 801112e:	2200      	movs	r2, #0
 8011130:	f995 1005 	ldrsb.w	r1, [r5, #5]
 8011134:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8011138:	f001 fb1c 	bl	8012774 <RegionAlternateDr>
 801113c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011140:	2307      	movs	r3, #7
 8011142:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 8011146:	20ff      	movs	r0, #255	; 0xff
 8011148:	f7fe ff4a 	bl	800ffe0 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 801114c:	4604      	mov	r4, r0
 801114e:	2800      	cmp	r0, #0
 8011150:	d075      	beq.n	801123e <LoRaMacMlmeRequest+0x1b2>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011152:	4e4a      	ldr	r6, [pc, #296]	; (801127c <LoRaMacMlmeRequest+0x1f0>)
 8011154:	2201      	movs	r2, #1
 8011156:	f995 1005 	ldrsb.w	r1, [r5, #5]
 801115a:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 801115e:	f001 fb09 	bl	8012774 <RegionAlternateDr>
 8011162:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 8011166:	e06a      	b.n	801123e <LoRaMacMlmeRequest+0x1b2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8011168:	4e44      	ldr	r6, [pc, #272]	; (801127c <LoRaMacMlmeRequest+0x1f0>)
 801116a:	2400      	movs	r4, #0
 801116c:	f886 4109 	strb.w	r4, [r6, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011170:	2302      	movs	r3, #2
 8011172:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011176:	4669      	mov	r1, sp
 8011178:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 801117c:	f001 fa30 	bl	80125e0 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8011180:	792b      	ldrb	r3, [r5, #4]
 8011182:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011186:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 801118a:	2301      	movs	r3, #1
 801118c:	f88d 3016 	strb.w	r3, [sp, #22]
                MacCtx.MacCallbacks->MacProcessNotify( );
 8011190:	4e38      	ldr	r6, [pc, #224]	; (8011274 <LoRaMacMlmeRequest+0x1e8>)
 8011192:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 8011196:	691b      	ldr	r3, [r3, #16]
 8011198:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 801119a:	f896 3495 	ldrb.w	r3, [r6, #1173]	; 0x495
 801119e:	f043 0320 	orr.w	r3, r3, #32
 80111a2:	f886 3495 	strb.w	r3, [r6, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 80111a6:	e04a      	b.n	801123e <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80111a8:	2200      	movs	r2, #0
 80111aa:	a904      	add	r1, sp, #16
 80111ac:	2002      	movs	r0, #2
 80111ae:	f000 fac1 	bl	8011734 <LoRaMacCommandsAddCmd>
 80111b2:	4604      	mov	r4, r0
 80111b4:	2800      	cmp	r0, #0
 80111b6:	d042      	beq.n	801123e <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80111b8:	2413      	movs	r4, #19
 80111ba:	e040      	b.n	801123e <LoRaMacMlmeRequest+0x1b2>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80111bc:	f995 200c 	ldrsb.w	r2, [r5, #12]
 80111c0:	b2d2      	uxtb	r2, r2
 80111c2:	68a9      	ldr	r1, [r5, #8]
 80111c4:	88a8      	ldrh	r0, [r5, #4]
 80111c6:	f7fc ffe3 	bl	800e190 <SetTxContinuousWave>
 80111ca:	4604      	mov	r4, r0
            break;
 80111cc:	e037      	b.n	801123e <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80111ce:	2200      	movs	r2, #0
 80111d0:	a904      	add	r1, sp, #16
 80111d2:	200d      	movs	r0, #13
 80111d4:	f000 faae 	bl	8011734 <LoRaMacCommandsAddCmd>
 80111d8:	4604      	mov	r4, r0
 80111da:	b380      	cbz	r0, 801123e <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80111dc:	2413      	movs	r4, #19
 80111de:	e02e      	b.n	801123e <LoRaMacMlmeRequest+0x1b2>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80111e0:	4b26      	ldr	r3, [pc, #152]	; (801127c <LoRaMacMlmeRequest+0x1f0>)
 80111e2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80111e6:	b10b      	cbz	r3, 80111ec <LoRaMacMlmeRequest+0x160>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80111e8:	2402      	movs	r4, #2
 80111ea:	e028      	b.n	801123e <LoRaMacMlmeRequest+0x1b2>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80111ec:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80111ee:	f004 0007 	and.w	r0, r4, #7
 80111f2:	f000 f9f6 	bl	80115e2 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80111f6:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80111fa:	2201      	movs	r2, #1
 80111fc:	a904      	add	r1, sp, #16
 80111fe:	2010      	movs	r0, #16
 8011200:	f000 fa98 	bl	8011734 <LoRaMacCommandsAddCmd>
 8011204:	4604      	mov	r4, r0
 8011206:	b1d0      	cbz	r0, 801123e <LoRaMacMlmeRequest+0x1b2>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011208:	2413      	movs	r4, #19
 801120a:	e018      	b.n	801123e <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801120c:	2200      	movs	r2, #0
 801120e:	a904      	add	r1, sp, #16
 8011210:	2012      	movs	r0, #18
 8011212:	f000 fa8f 	bl	8011734 <LoRaMacCommandsAddCmd>
 8011216:	4604      	mov	r4, r0
 8011218:	b188      	cbz	r0, 801123e <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801121a:	2413      	movs	r4, #19
 801121c:	e00f      	b.n	801123e <LoRaMacMlmeRequest+0x1b2>
            queueElement.RestrictCommonReadyToHandle = true;
 801121e:	2301      	movs	r3, #1
 8011220:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011224:	f000 f9ce 	bl	80115c4 <LoRaMacClassBIsAcquisitionInProgress>
 8011228:	b108      	cbz	r0, 801122e <LoRaMacMlmeRequest+0x1a2>
                status = LORAMAC_STATUS_BUSY;
 801122a:	2401      	movs	r4, #1
 801122c:	e007      	b.n	801123e <LoRaMacMlmeRequest+0x1b2>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 801122e:	f000 f9c6 	bl	80115be <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011232:	2000      	movs	r0, #0
 8011234:	f000 f9c8 	bl	80115c8 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 8011238:	2400      	movs	r4, #0
 801123a:	e000      	b.n	801123e <LoRaMacMlmeRequest+0x1b2>
    switch( mlmeRequest->Type )
 801123c:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801123e:	4b0d      	ldr	r3, [pc, #52]	; (8011274 <LoRaMacMlmeRequest+0x1e8>)
 8011240:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8011244:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 8011246:	b17c      	cbz	r4, 8011268 <LoRaMacMlmeRequest+0x1dc>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011248:	f000 fc76 	bl	8011b38 <LoRaMacConfirmQueueGetCnt>
 801124c:	2800      	cmp	r0, #0
 801124e:	f47f af2b 	bne.w	80110a8 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 8011252:	4b08      	ldr	r3, [pc, #32]	; (8011274 <LoRaMacMlmeRequest+0x1e8>)
 8011254:	2100      	movs	r1, #0
 8011256:	f883 141e 	strb.w	r1, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801125a:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 801125e:	f361 0282 	bfi	r2, r1, #2, #1
 8011262:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 8011266:	e71f      	b.n	80110a8 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 8011268:	a805      	add	r0, sp, #20
 801126a:	f000 fba1 	bl	80119b0 <LoRaMacConfirmQueueAdd>
 801126e:	e71b      	b.n	80110a8 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011270:	2403      	movs	r4, #3
 8011272:	e719      	b.n	80110a8 <LoRaMacMlmeRequest+0x1c>
 8011274:	200009a0 	.word	0x200009a0
 8011278:	20000df8 	.word	0x20000df8
 801127c:	20008000 	.word	0x20008000

08011280 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011284:	b091      	sub	sp, #68	; 0x44
 8011286:	9103      	str	r1, [sp, #12]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8011288:	2800      	cmp	r0, #0
 801128a:	f000 80de 	beq.w	801144a <LoRaMacMcpsRequest+0x1ca>
 801128e:	f04f 0a00 	mov.w	sl, #0
 8011292:	4605      	mov	r5, r0
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8011294:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 8011298:	f7ff f824 	bl	80102e4 <LoRaMacIsBusy>
 801129c:	4680      	mov	r8, r0
 801129e:	b118      	cbz	r0, 80112a8 <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80112a0:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 80112a2:	b011      	add	sp, #68	; 0x44
 80112a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 80112a8:	ac06      	add	r4, sp, #24
 80112aa:	462e      	mov	r6, r5
 80112ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80112ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80112b0:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 80112b4:	4651      	mov	r1, sl
 80112b6:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80112ba:	4c66      	ldr	r4, [pc, #408]	; (8011454 <LoRaMacMcpsRequest+0x1d4>)
 80112bc:	2214      	movs	r2, #20
 80112be:	f204 4044 	addw	r0, r4, #1092	; 0x444
 80112c2:	f004 fa12 	bl	80156ea <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80112c6:	2301      	movs	r3, #1
 80112c8:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80112cc:	4b62      	ldr	r3, [pc, #392]	; (8011458 <LoRaMacMcpsRequest+0x1d8>)
 80112ce:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80112d2:	2b02      	cmp	r3, #2
 80112d4:	d065      	beq.n	80113a2 <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 80112d6:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80112da:	2f01      	cmp	r7, #1
 80112dc:	f000 8086 	beq.w	80113ec <LoRaMacMcpsRequest+0x16c>
 80112e0:	2f03      	cmp	r7, #3
 80112e2:	f000 8096 	beq.w	8011412 <LoRaMacMcpsRequest+0x192>
 80112e6:	2f00      	cmp	r7, #0
 80112e8:	d06d      	beq.n	80113c6 <LoRaMacMcpsRequest+0x146>
 80112ea:	f04f 0b00 	mov.w	fp, #0
 80112ee:	f8cd b014 	str.w	fp, [sp, #20]
 80112f2:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 80112f6:	2302      	movs	r3, #2
 80112f8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80112fc:	4e56      	ldr	r6, [pc, #344]	; (8011458 <LoRaMacMcpsRequest+0x1d8>)
 80112fe:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
 8011302:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011306:	a90e      	add	r1, sp, #56	; 0x38
 8011308:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 801130c:	f001 f942 	bl	8012594 <RegionGetPhyParam>
 8011310:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011312:	b244      	sxtb	r4, r0
 8011314:	45a3      	cmp	fp, r4
 8011316:	bfb8      	it	lt
 8011318:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 801131a:	f896 9106 	ldrb.w	r9, [r6, #262]	; 0x106
 801131e:	f896 2109 	ldrb.w	r2, [r6, #265]	; 0x109
 8011322:	f896 111c 	ldrb.w	r1, [r6, #284]	; 0x11c
 8011326:	4648      	mov	r0, r9
 8011328:	f7fc ff04 	bl	800e134 <CheckForMinimumAbpDatarate>
 801132c:	4603      	mov	r3, r0
 801132e:	b900      	cbnz	r0, 8011332 <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011330:	465c      	mov	r4, fp
    if( readyToSend == true )
 8011332:	f1b8 0f00 	cmp.w	r8, #0
 8011336:	f000 8082 	beq.w	801143e <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801133a:	f1b9 0f00 	cmp.w	r9, #0
 801133e:	d000      	beq.n	8011342 <LoRaMacMcpsRequest+0xc2>
 8011340:	b19b      	cbz	r3, 801136a <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 8011342:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011346:	4b44      	ldr	r3, [pc, #272]	; (8011458 <LoRaMacMcpsRequest+0x1d8>)
 8011348:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801134c:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011350:	2205      	movs	r2, #5
 8011352:	a90b      	add	r1, sp, #44	; 0x2c
 8011354:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011358:	f001 f950 	bl	80125fc <RegionVerify>
 801135c:	2800      	cmp	r0, #0
 801135e:	d076      	beq.n	801144e <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011360:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 8011364:	4b3c      	ldr	r3, [pc, #240]	; (8011458 <LoRaMacMcpsRequest+0x1d8>)
 8011366:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 801136a:	4b3a      	ldr	r3, [pc, #232]	; (8011454 <LoRaMacMcpsRequest+0x1d4>)
 801136c:	f8d3 149c 	ldr.w	r1, [r3, #1180]	; 0x49c
 8011370:	4b39      	ldr	r3, [pc, #228]	; (8011458 <LoRaMacMcpsRequest+0x1d8>)
 8011372:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8011376:	f7fe f81d 	bl	800f3b4 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 801137a:	9b03      	ldr	r3, [sp, #12]
 801137c:	9300      	str	r3, [sp, #0]
 801137e:	4653      	mov	r3, sl
 8011380:	9a05      	ldr	r2, [sp, #20]
 8011382:	9904      	ldr	r1, [sp, #16]
 8011384:	a80c      	add	r0, sp, #48	; 0x30
 8011386:	f7fe ff19 	bl	80101bc <Send>
        if( status == LORAMAC_STATUS_OK )
 801138a:	2800      	cmp	r0, #0
 801138c:	d152      	bne.n	8011434 <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 801138e:	4b31      	ldr	r3, [pc, #196]	; (8011454 <LoRaMacMcpsRequest+0x1d4>)
 8011390:	f883 7444 	strb.w	r7, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8011394:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 8011398:	f042 0201 	orr.w	r2, r2, #1
 801139c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 80113a0:	e04e      	b.n	8011440 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80113a2:	4b2d      	ldr	r3, [pc, #180]	; (8011458 <LoRaMacMcpsRequest+0x1d8>)
 80113a4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80113a8:	2b02      	cmp	r3, #2
 80113aa:	d194      	bne.n	80112d6 <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80113ac:	4b2a      	ldr	r3, [pc, #168]	; (8011458 <LoRaMacMcpsRequest+0x1d8>)
 80113ae:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d18f      	bne.n	80112d6 <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 80113b6:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d18b      	bne.n	80112d6 <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 80113be:	2301      	movs	r3, #1
 80113c0:	f88d 3018 	strb.w	r3, [sp, #24]
 80113c4:	e787      	b.n	80112d6 <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80113c6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80113ca:	2202      	movs	r2, #2
 80113cc:	f362 1347 	bfi	r3, r2, #5, #3
 80113d0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 80113d4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80113d8:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 80113da:	9b08      	ldr	r3, [sp, #32]
 80113dc:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 80113de:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 80113e2:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 80113e6:	f04f 0801 	mov.w	r8, #1
            break;
 80113ea:	e784      	b.n	80112f6 <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80113ec:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80113f0:	2204      	movs	r2, #4
 80113f2:	f362 1347 	bfi	r3, r2, #5, #3
 80113f6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 80113fa:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80113fe:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 8011400:	9b08      	ldr	r3, [sp, #32]
 8011402:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8011404:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 8011408:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 801140c:	f04f 0801 	mov.w	r8, #1
            break;
 8011410:	e771      	b.n	80112f6 <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011412:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8011416:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 801141a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 801141e:	9b07      	ldr	r3, [sp, #28]
 8011420:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8011422:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 8011426:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 801142a:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 801142e:	2300      	movs	r3, #0
 8011430:	9304      	str	r3, [sp, #16]
            break;
 8011432:	e760      	b.n	80112f6 <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 8011434:	4b07      	ldr	r3, [pc, #28]	; (8011454 <LoRaMacMcpsRequest+0x1d4>)
 8011436:	2200      	movs	r2, #0
 8011438:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 801143c:	e000      	b.n	8011440 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801143e:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011440:	4b04      	ldr	r3, [pc, #16]	; (8011454 <LoRaMacMcpsRequest+0x1d4>)
 8011442:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8011446:	612b      	str	r3, [r5, #16]
    return status;
 8011448:	e72b      	b.n	80112a2 <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801144a:	2003      	movs	r0, #3
 801144c:	e729      	b.n	80112a2 <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 801144e:	2003      	movs	r0, #3
 8011450:	e727      	b.n	80112a2 <LoRaMacMcpsRequest+0x22>
 8011452:	bf00      	nop
 8011454:	200009a0 	.word	0x200009a0
 8011458:	20008000 	.word	0x20008000

0801145c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 801145c:	b510      	push	{r4, lr}
 801145e:	b082      	sub	sp, #8
 8011460:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8011462:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8011466:	220f      	movs	r2, #15
 8011468:	a901      	add	r1, sp, #4
 801146a:	4b05      	ldr	r3, [pc, #20]	; (8011480 <LoRaMacTestSetDutyCycleOn+0x24>)
 801146c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011470:	f001 f8c4 	bl	80125fc <RegionVerify>
 8011474:	b110      	cbz	r0, 801147c <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8011476:	4b02      	ldr	r3, [pc, #8]	; (8011480 <LoRaMacTestSetDutyCycleOn+0x24>)
 8011478:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
    }
}
 801147c:	b002      	add	sp, #8
 801147e:	bd10      	pop	{r4, pc}
 8011480:	20008000 	.word	0x20008000

08011484 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8011484:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8011486:	f7ff f97b 	bl	8010780 <LoRaMacStop>
 801148a:	b110      	cbz	r0, 8011492 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 801148c:	2401      	movs	r4, #1
    }
}
 801148e:	4620      	mov	r0, r4
 8011490:	bd38      	pop	{r3, r4, r5, pc}
 8011492:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 8011494:	4d0a      	ldr	r5, [pc, #40]	; (80114c0 <LoRaMacDeInitialization+0x3c>)
 8011496:	f505 705a 	add.w	r0, r5, #872	; 0x368
 801149a:	f006 fb0b 	bl	8017ab4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 801149e:	f505 7060 	add.w	r0, r5, #896	; 0x380
 80114a2:	f006 fb07 	bl	8017ab4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 80114a6:	f505 7066 	add.w	r0, r5, #920	; 0x398
 80114aa:	f006 fb03 	bl	8017ab4 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 80114ae:	f000 f899 	bl	80115e4 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( );
 80114b2:	f7fe fc5f 	bl	800fd74 <ResetMacParameters>
        Radio.Sleep( );
 80114b6:	4b03      	ldr	r3, [pc, #12]	; (80114c4 <LoRaMacDeInitialization+0x40>)
 80114b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ba:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 80114bc:	e7e7      	b.n	801148e <LoRaMacDeInitialization+0xa>
 80114be:	bf00      	nop
 80114c0:	200009a0 	.word	0x200009a0
 80114c4:	0801c3a0 	.word	0x0801c3a0

080114c8 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 80114c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114cc:	b08b      	sub	sp, #44	; 0x2c
 80114ce:	460f      	mov	r7, r1
 80114d0:	4616      	mov	r6, r2
 80114d2:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 80114d4:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 80114d8:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 80114dc:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80114e0:	6842      	ldr	r2, [r0, #4]
 80114e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80114e4:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80114e6:	f890 8001 	ldrb.w	r8, [r0, #1]
 80114ea:	f1b8 0f00 	cmp.w	r8, #0
 80114ee:	d109      	bne.n	8011504 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 80114f0:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 80114f4:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 80114f8:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 80114fc:	4640      	mov	r0, r8
 80114fe:	b00b      	add	sp, #44	; 0x2c
 8011500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011504:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 8011506:	2302      	movs	r3, #2
 8011508:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801150c:	7bc3      	ldrb	r3, [r0, #15]
 801150e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011512:	a908      	add	r1, sp, #32
 8011514:	7c00      	ldrb	r0, [r0, #16]
 8011516:	f001 f83d 	bl	8012594 <RegionGetPhyParam>
 801151a:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 801151c:	b243      	sxtb	r3, r0
 801151e:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 8011520:	454b      	cmp	r3, r9
 8011522:	bfb8      	it	lt
 8011524:	464b      	movlt	r3, r9
 8011526:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8011528:	6862      	ldr	r2, [r4, #4]
 801152a:	8923      	ldrh	r3, [r4, #8]
 801152c:	429a      	cmp	r2, r3
 801152e:	d201      	bcs.n	8011534 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 8011530:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8011534:	8961      	ldrh	r1, [r4, #10]
 8011536:	440b      	add	r3, r1
 8011538:	429a      	cmp	r2, r3
 801153a:	d224      	bcs.n	8011586 <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 801153c:	6863      	ldr	r3, [r4, #4]
 801153e:	8921      	ldrh	r1, [r4, #8]
 8011540:	8962      	ldrh	r2, [r4, #10]
 8011542:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 8011546:	4283      	cmp	r3, r0
 8011548:	d332      	bcc.n	80115b0 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 801154a:	1a5b      	subs	r3, r3, r1
 801154c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011550:	fb02 3311 	mls	r3, r2, r1, r3
 8011554:	bb7b      	cbnz	r3, 80115b6 <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 8011556:	9b01      	ldr	r3, [sp, #4]
 8011558:	4599      	cmp	r9, r3
 801155a:	dc03      	bgt.n	8011564 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 801155c:	7823      	ldrb	r3, [r4, #0]
 801155e:	b9eb      	cbnz	r3, 801159c <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 8011560:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011564:	2321      	movs	r3, #33	; 0x21
 8011566:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 801156a:	9b00      	ldr	r3, [sp, #0]
 801156c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011570:	7be3      	ldrb	r3, [r4, #15]
 8011572:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011576:	a908      	add	r1, sp, #32
 8011578:	7c20      	ldrb	r0, [r4, #16]
 801157a:	f001 f80b 	bl	8012594 <RegionGetPhyParam>
 801157e:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 8011580:	fa4f f980 	sxtb.w	r9, r0
 8011584:	e7b4      	b.n	80114f0 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8011586:	230a      	movs	r3, #10
 8011588:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801158c:	a908      	add	r1, sp, #32
 801158e:	7c20      	ldrb	r0, [r4, #16]
 8011590:	f001 f800 	bl	8012594 <RegionGetPhyParam>
 8011594:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 8011596:	fa4f fa80 	sxtb.w	sl, r0
 801159a:	e7cf      	b.n	801153c <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801159c:	2302      	movs	r3, #2
 801159e:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 80115a2:	a903      	add	r1, sp, #12
 80115a4:	7c20      	ldrb	r0, [r4, #16]
 80115a6:	f001 f81b 	bl	80125e0 <RegionInitDefaults>
                    nbTrans = 1;
 80115aa:	f04f 0b01 	mov.w	fp, #1
 80115ae:	e7d9      	b.n	8011564 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 80115b0:	f8dd 9000 	ldr.w	r9, [sp]
 80115b4:	e79c      	b.n	80114f0 <LoRaMacAdrCalcNext+0x28>
 80115b6:	f8dd 9000 	ldr.w	r9, [sp]
 80115ba:	e799      	b.n	80114f0 <LoRaMacAdrCalcNext+0x28>

080115bc <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115bc:	4770      	bx	lr

080115be <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115be:	4770      	bx	lr

080115c0 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115c0:	4770      	bx	lr

080115c2 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115c2:	4770      	bx	lr

080115c4 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115c4:	2000      	movs	r0, #0
 80115c6:	4770      	bx	lr

080115c8 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115c8:	4770      	bx	lr

080115ca <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115ca:	4770      	bx	lr

080115cc <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115cc:	4770      	bx	lr

080115ce <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115ce:	2000      	movs	r0, #0
 80115d0:	4770      	bx	lr

080115d2 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115d2:	2000      	movs	r0, #0
 80115d4:	4770      	bx	lr

080115d6 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115d6:	2000      	movs	r0, #0
 80115d8:	4770      	bx	lr

080115da <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115da:	2000      	movs	r0, #0
 80115dc:	4770      	bx	lr

080115de <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115de:	2000      	movs	r0, #0
 80115e0:	4770      	bx	lr

080115e2 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115e2:	4770      	bx	lr

080115e4 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115e4:	4770      	bx	lr

080115e6 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115e6:	4770      	bx	lr

080115e8 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115e8:	2002      	movs	r0, #2
 80115ea:	4770      	bx	lr

080115ec <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115ec:	2002      	movs	r0, #2
 80115ee:	4770      	bx	lr

080115f0 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115f0:	2002      	movs	r0, #2
 80115f2:	4770      	bx	lr

080115f4 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115f4:	4770      	bx	lr

080115f6 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115f6:	2000      	movs	r0, #0
 80115f8:	4770      	bx	lr

080115fa <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115fa:	4770      	bx	lr

080115fc <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115fc:	4770      	bx	lr

080115fe <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80115fe:	2000      	movs	r0, #0
 8011600:	4770      	bx	lr

08011602 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011602:	2000      	movs	r0, #0
 8011604:	4770      	bx	lr

08011606 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011606:	4770      	bx	lr

08011608 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011608:	4770      	bx	lr

0801160a <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801160a:	4770      	bx	lr

0801160c <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801160c:	2300      	movs	r3, #0
 801160e:	2b0f      	cmp	r3, #15
 8011610:	d804      	bhi.n	801161c <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 8011612:	5cc2      	ldrb	r2, [r0, r3]
 8011614:	b922      	cbnz	r2, 8011620 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011616:	3301      	adds	r3, #1
 8011618:	b29b      	uxth	r3, r3
 801161a:	e7f8      	b.n	801160e <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 801161c:	2001      	movs	r0, #1
 801161e:	4770      	bx	lr
            return false;
 8011620:	2000      	movs	r0, #0
}
 8011622:	4770      	bx	lr

08011624 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8011624:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 8011626:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8011628:	0125      	lsls	r5, r4, #4
 801162a:	f105 0308 	add.w	r3, r5, #8
 801162e:	4d06      	ldr	r5, [pc, #24]	; (8011648 <MallocNewMacCommandSlot+0x24>)
 8011630:	441d      	add	r5, r3
 8011632:	4628      	mov	r0, r5
 8011634:	f7ff ffea 	bl	801160c <IsSlotFree>
 8011638:	b920      	cbnz	r0, 8011644 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 801163a:	3401      	adds	r4, #1
 801163c:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 801163e:	2c20      	cmp	r4, #32
 8011640:	d1f2      	bne.n	8011628 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 8011642:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 8011644:	4628      	mov	r0, r5
 8011646:	bd38      	pop	{r3, r4, r5, pc}
 8011648:	20000f64 	.word	0x20000f64

0801164c <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 801164c:	b120      	cbz	r0, 8011658 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 801164e:	2200      	movs	r2, #0
 8011650:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 8011652:	6042      	str	r2, [r0, #4]

    return true;
 8011654:	2001      	movs	r0, #1
 8011656:	4770      	bx	lr
        return false;
 8011658:	2000      	movs	r0, #0
}
 801165a:	4770      	bx	lr

0801165c <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 801165c:	4603      	mov	r3, r0
 801165e:	b160      	cbz	r0, 801167a <LinkedListAdd+0x1e>
 8011660:	b169      	cbz	r1, 801167e <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8011662:	6802      	ldr	r2, [r0, #0]
 8011664:	b13a      	cbz	r2, 8011676 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8011666:	685a      	ldr	r2, [r3, #4]
 8011668:	b102      	cbz	r2, 801166c <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 801166a:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 801166c:	2200      	movs	r2, #0
 801166e:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 8011670:	6059      	str	r1, [r3, #4]

    return true;
 8011672:	2001      	movs	r0, #1
 8011674:	4770      	bx	lr
        list->First = element;
 8011676:	6001      	str	r1, [r0, #0]
 8011678:	e7f5      	b.n	8011666 <LinkedListAdd+0xa>
        return false;
 801167a:	2000      	movs	r0, #0
 801167c:	4770      	bx	lr
 801167e:	2000      	movs	r0, #0
}
 8011680:	4770      	bx	lr

08011682 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 8011682:	b160      	cbz	r0, 801169e <LinkedListGetPrevious+0x1c>
 8011684:	b161      	cbz	r1, 80116a0 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8011686:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8011688:	4281      	cmp	r1, r0
 801168a:	d102      	bne.n	8011692 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 801168c:	2000      	movs	r0, #0
    }

    return curElement;
}
 801168e:	4770      	bx	lr
            curElement = curElement->Next;
 8011690:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8011692:	2800      	cmp	r0, #0
 8011694:	d0fb      	beq.n	801168e <LinkedListGetPrevious+0xc>
 8011696:	6803      	ldr	r3, [r0, #0]
 8011698:	428b      	cmp	r3, r1
 801169a:	d1f9      	bne.n	8011690 <LinkedListGetPrevious+0xe>
 801169c:	4770      	bx	lr
 801169e:	4770      	bx	lr
        return NULL;
 80116a0:	4608      	mov	r0, r1
 80116a2:	4770      	bx	lr

080116a4 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 80116a4:	b1b8      	cbz	r0, 80116d6 <LinkedListRemove+0x32>
{
 80116a6:	b538      	push	{r3, r4, r5, lr}
 80116a8:	460c      	mov	r4, r1
 80116aa:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 80116ac:	b1a9      	cbz	r1, 80116da <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80116ae:	f7ff ffe8 	bl	8011682 <LinkedListGetPrevious>

    if( list->First == element )
 80116b2:	682b      	ldr	r3, [r5, #0]
 80116b4:	42a3      	cmp	r3, r4
 80116b6:	d009      	beq.n	80116cc <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 80116b8:	686b      	ldr	r3, [r5, #4]
 80116ba:	42a3      	cmp	r3, r4
 80116bc:	d009      	beq.n	80116d2 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 80116be:	b108      	cbz	r0, 80116c4 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 80116c0:	6823      	ldr	r3, [r4, #0]
 80116c2:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 80116c4:	2300      	movs	r3, #0
 80116c6:	6023      	str	r3, [r4, #0]

    return true;
 80116c8:	2001      	movs	r0, #1
}
 80116ca:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 80116cc:	6823      	ldr	r3, [r4, #0]
 80116ce:	602b      	str	r3, [r5, #0]
 80116d0:	e7f2      	b.n	80116b8 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 80116d2:	6068      	str	r0, [r5, #4]
 80116d4:	e7f3      	b.n	80116be <LinkedListRemove+0x1a>
        return false;
 80116d6:	2000      	movs	r0, #0
}
 80116d8:	4770      	bx	lr
        return false;
 80116da:	2000      	movs	r0, #0
 80116dc:	e7f5      	b.n	80116ca <LinkedListRemove+0x26>
	...

080116e0 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 80116e0:	2811      	cmp	r0, #17
 80116e2:	d808      	bhi.n	80116f6 <IsSticky+0x16>
 80116e4:	2301      	movs	r3, #1
 80116e6:	fa03 f000 	lsl.w	r0, r3, r0
 80116ea:	4b04      	ldr	r3, [pc, #16]	; (80116fc <IsSticky+0x1c>)
 80116ec:	4218      	tst	r0, r3
 80116ee:	bf14      	ite	ne
 80116f0:	2001      	movne	r0, #1
 80116f2:	2000      	moveq	r0, #0
 80116f4:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 80116f6:	2000      	movs	r0, #0
    }
}
 80116f8:	4770      	bx	lr
 80116fa:	bf00      	nop
 80116fc:	00020720 	.word	0x00020720

08011700 <FreeMacCommandSlot>:
    if( slot == NULL )
 8011700:	b130      	cbz	r0, 8011710 <FreeMacCommandSlot+0x10>
{
 8011702:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8011704:	2210      	movs	r2, #16
 8011706:	2100      	movs	r1, #0
 8011708:	f003 ffef 	bl	80156ea <memset1>
    return true;
 801170c:	2001      	movs	r0, #1
}
 801170e:	bd08      	pop	{r3, pc}
        return false;
 8011710:	2000      	movs	r0, #0
}
 8011712:	4770      	bx	lr

08011714 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8011714:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8011716:	4c06      	ldr	r4, [pc, #24]	; (8011730 <LoRaMacCommandsInit+0x1c>)
 8011718:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801171c:	2100      	movs	r1, #0
 801171e:	4620      	mov	r0, r4
 8011720:	f003 ffe3 	bl	80156ea <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8011724:	4620      	mov	r0, r4
 8011726:	f7ff ff91 	bl	801164c <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 801172a:	2000      	movs	r0, #0
 801172c:	bd10      	pop	{r4, pc}
 801172e:	bf00      	nop
 8011730:	20000f64 	.word	0x20000f64

08011734 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 8011734:	b301      	cbz	r1, 8011778 <LoRaMacCommandsAddCmd+0x44>
{
 8011736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011738:	4605      	mov	r5, r0
 801173a:	4614      	mov	r4, r2
 801173c:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 801173e:	f7ff ff71 	bl	8011624 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 8011742:	4606      	mov	r6, r0
 8011744:	b1d0      	cbz	r0, 801177c <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8011746:	4601      	mov	r1, r0
 8011748:	480e      	ldr	r0, [pc, #56]	; (8011784 <LoRaMacCommandsAddCmd+0x50>)
 801174a:	f7ff ff87 	bl	801165c <LinkedListAdd>
 801174e:	b1b8      	cbz	r0, 8011780 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 8011750:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 8011752:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8011754:	b2a2      	uxth	r2, r4
 8011756:	4639      	mov	r1, r7
 8011758:	1d70      	adds	r0, r6, #5
 801175a:	f003 ffae 	bl	80156ba <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 801175e:	4628      	mov	r0, r5
 8011760:	f7ff ffbe 	bl	80116e0 <IsSticky>
 8011764:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8011766:	4b07      	ldr	r3, [pc, #28]	; (8011784 <LoRaMacCommandsAddCmd+0x50>)
 8011768:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801176c:	4414      	add	r4, r2
 801176e:	3401      	adds	r4, #1
 8011770:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8011774:	2000      	movs	r0, #0
}
 8011776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011778:	2001      	movs	r0, #1
}
 801177a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801177c:	2002      	movs	r0, #2
 801177e:	e7fa      	b.n	8011776 <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 8011780:	2005      	movs	r0, #5
 8011782:	e7f8      	b.n	8011776 <LoRaMacCommandsAddCmd+0x42>
 8011784:	20000f64 	.word	0x20000f64

08011788 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 8011788:	b1a0      	cbz	r0, 80117b4 <LoRaMacCommandsRemoveCmd+0x2c>
{
 801178a:	b510      	push	{r4, lr}
 801178c:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 801178e:	4601      	mov	r1, r0
 8011790:	480b      	ldr	r0, [pc, #44]	; (80117c0 <LoRaMacCommandsRemoveCmd+0x38>)
 8011792:	f7ff ff87 	bl	80116a4 <LinkedListRemove>
 8011796:	b178      	cbz	r0, 80117b8 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8011798:	68a1      	ldr	r1, [r4, #8]
 801179a:	4a09      	ldr	r2, [pc, #36]	; (80117c0 <LoRaMacCommandsRemoveCmd+0x38>)
 801179c:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 80117a0:	1a5b      	subs	r3, r3, r1
 80117a2:	3b01      	subs	r3, #1
 80117a4:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80117a8:	4620      	mov	r0, r4
 80117aa:	f7ff ffa9 	bl	8011700 <FreeMacCommandSlot>
 80117ae:	b128      	cbz	r0, 80117bc <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80117b0:	2000      	movs	r0, #0
}
 80117b2:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 80117b4:	2001      	movs	r0, #1
}
 80117b6:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80117b8:	2003      	movs	r0, #3
 80117ba:	e7fa      	b.n	80117b2 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 80117bc:	2005      	movs	r0, #5
 80117be:	e7f8      	b.n	80117b2 <LoRaMacCommandsRemoveCmd+0x2a>
 80117c0:	20000f64 	.word	0x20000f64

080117c4 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80117c4:	4b0a      	ldr	r3, [pc, #40]	; (80117f0 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 80117c6:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80117c8:	b120      	cbz	r0, 80117d4 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 80117ca:	7b03      	ldrb	r3, [r0, #12]
 80117cc:	b11b      	cbz	r3, 80117d6 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 80117ce:	6800      	ldr	r0, [r0, #0]
 80117d0:	e7fa      	b.n	80117c8 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 80117d2:	bd10      	pop	{r4, pc}
 80117d4:	4770      	bx	lr
{
 80117d6:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 80117d8:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80117da:	f7ff ffd5 	bl	8011788 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80117de:	4620      	mov	r0, r4
    while( curElement != NULL )
 80117e0:	2800      	cmp	r0, #0
 80117e2:	d0f6      	beq.n	80117d2 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 80117e4:	7b03      	ldrb	r3, [r0, #12]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d0f6      	beq.n	80117d8 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 80117ea:	6800      	ldr	r0, [r0, #0]
 80117ec:	e7f8      	b.n	80117e0 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 80117ee:	bf00      	nop
 80117f0:	20000f64 	.word	0x20000f64

080117f4 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80117f4:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80117f6:	4b08      	ldr	r3, [pc, #32]	; (8011818 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 80117f8:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80117fa:	e000      	b.n	80117fe <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 80117fc:	462c      	mov	r4, r5
    while( curElement != NULL )
 80117fe:	b14c      	cbz	r4, 8011814 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 8011800:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 8011802:	7920      	ldrb	r0, [r4, #4]
 8011804:	f7ff ff6c 	bl	80116e0 <IsSticky>
 8011808:	2800      	cmp	r0, #0
 801180a:	d0f7      	beq.n	80117fc <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 801180c:	4620      	mov	r0, r4
 801180e:	f7ff ffbb 	bl	8011788 <LoRaMacCommandsRemoveCmd>
 8011812:	e7f3      	b.n	80117fc <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 8011814:	2000      	movs	r0, #0
 8011816:	bd38      	pop	{r3, r4, r5, pc}
 8011818:	20000f64 	.word	0x20000f64

0801181c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 801181c:	b128      	cbz	r0, 801182a <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 801181e:	4a04      	ldr	r2, [pc, #16]	; (8011830 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 8011820:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8011824:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8011826:	2000      	movs	r0, #0
 8011828:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 801182a:	2001      	movs	r0, #1
}
 801182c:	4770      	bx	lr
 801182e:	bf00      	nop
 8011830:	20000f64 	.word	0x20000f64

08011834 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8011834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8011838:	4b16      	ldr	r3, [pc, #88]	; (8011894 <LoRaMacCommandsSerializeCmds+0x60>)
 801183a:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801183c:	b32a      	cbz	r2, 801188a <LoRaMacCommandsSerializeCmds+0x56>
 801183e:	4607      	mov	r7, r0
 8011840:	4688      	mov	r8, r1
 8011842:	4616      	mov	r6, r2
 8011844:	b319      	cbz	r1, 801188e <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 8011846:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 8011848:	b194      	cbz	r4, 8011870 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801184a:	1a7a      	subs	r2, r7, r1
 801184c:	68a3      	ldr	r3, [r4, #8]
 801184e:	3301      	adds	r3, #1
 8011850:	429a      	cmp	r2, r3
 8011852:	d30d      	bcc.n	8011870 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 8011854:	1c4d      	adds	r5, r1, #1
 8011856:	b2ed      	uxtb	r5, r5
 8011858:	7923      	ldrb	r3, [r4, #4]
 801185a:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 801185c:	8922      	ldrh	r2, [r4, #8]
 801185e:	1d61      	adds	r1, r4, #5
 8011860:	1970      	adds	r0, r6, r5
 8011862:	f003 ff2a 	bl	80156ba <memcpy1>
            itr += curElement->PayloadSize;
 8011866:	68a3      	ldr	r3, [r4, #8]
 8011868:	441d      	add	r5, r3
 801186a:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801186c:	6824      	ldr	r4, [r4, #0]
 801186e:	e7eb      	b.n	8011848 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8011870:	b12c      	cbz	r4, 801187e <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8011872:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 8011874:	4620      	mov	r0, r4
 8011876:	f7ff ff87 	bl	8011788 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 801187a:	462c      	mov	r4, r5
 801187c:	e7f8      	b.n	8011870 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801187e:	4640      	mov	r0, r8
 8011880:	f7ff ffcc 	bl	801181c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8011884:	2000      	movs	r0, #0
}
 8011886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 801188a:	2001      	movs	r0, #1
 801188c:	e7fb      	b.n	8011886 <LoRaMacCommandsSerializeCmds+0x52>
 801188e:	2001      	movs	r0, #1
 8011890:	e7f9      	b.n	8011886 <LoRaMacCommandsSerializeCmds+0x52>
 8011892:	bf00      	nop
 8011894:	20000f64 	.word	0x20000f64

08011898 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 8011898:	4601      	mov	r1, r0
 801189a:	b170      	cbz	r0, 80118ba <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 801189c:	4b08      	ldr	r3, [pc, #32]	; (80118c0 <LoRaMacCommandsStickyCmdsPending+0x28>)
 801189e:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 80118a0:	2200      	movs	r2, #0
 80118a2:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 80118a4:	b13b      	cbz	r3, 80118b6 <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 80118a6:	7b1a      	ldrb	r2, [r3, #12]
 80118a8:	b90a      	cbnz	r2, 80118ae <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	e7fa      	b.n	80118a4 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 80118ae:	2301      	movs	r3, #1
 80118b0:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80118b2:	2000      	movs	r0, #0
 80118b4:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80118b6:	2000      	movs	r0, #0
 80118b8:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 80118ba:	2001      	movs	r0, #1
}
 80118bc:	4770      	bx	lr
 80118be:	bf00      	nop
 80118c0:	20000f64 	.word	0x20000f64

080118c4 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 80118c4:	1e83      	subs	r3, r0, #2
 80118c6:	2b11      	cmp	r3, #17
 80118c8:	d80a      	bhi.n	80118e0 <LoRaMacCommandsGetCmdSize+0x1c>
 80118ca:	e8df f003 	tbb	[pc, r3]
 80118ce:	0b23      	.short	0x0b23
 80118d0:	110f240d 	.word	0x110f240d
 80118d4:	09171513 	.word	0x09171513
 80118d8:	09091909 	.word	0x09091909
 80118dc:	211f1d1b 	.word	0x211f1d1b
 80118e0:	2000      	movs	r0, #0
 80118e2:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80118e4:	2005      	movs	r0, #5
            break;
 80118e6:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80118e8:	2002      	movs	r0, #2
            break;
 80118ea:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80118ec:	2001      	movs	r0, #1
            break;
 80118ee:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80118f0:	2006      	movs	r0, #6
            break;
 80118f2:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80118f4:	2002      	movs	r0, #2
            break;
 80118f6:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80118f8:	2002      	movs	r0, #2
            break;
 80118fa:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80118fc:	2005      	movs	r0, #5
            break;
 80118fe:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8011900:	2006      	movs	r0, #6
            break;
 8011902:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8011904:	2001      	movs	r0, #1
            break;
 8011906:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8011908:	2005      	movs	r0, #5
            break;
 801190a:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 801190c:	2004      	movs	r0, #4
            break;
 801190e:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8011910:	2004      	movs	r0, #4
            break;
 8011912:	4770      	bx	lr
            cidSize = 3;
 8011914:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 8011916:	4770      	bx	lr

08011918 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8011918:	4b03      	ldr	r3, [pc, #12]	; (8011928 <IncreaseBufferPointer+0x10>)
 801191a:	4298      	cmp	r0, r3
 801191c:	d001      	beq.n	8011922 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 801191e:	3004      	adds	r0, #4
 8011920:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8011922:	4802      	ldr	r0, [pc, #8]	; (801192c <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 8011924:	4770      	bx	lr
 8011926:	bf00      	nop
 8011928:	2000118c 	.word	0x2000118c
 801192c:	2000117c 	.word	0x2000117c

08011930 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 8011930:	b108      	cbz	r0, 8011936 <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 8011932:	2000      	movs	r0, #0
 8011934:	4770      	bx	lr
        return true;
 8011936:	2001      	movs	r0, #1
}
 8011938:	4770      	bx	lr

0801193a <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801193a:	2804      	cmp	r0, #4
 801193c:	d801      	bhi.n	8011942 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 801193e:	2000      	movs	r0, #0
 8011940:	4770      	bx	lr
        return true;
 8011942:	2001      	movs	r0, #1
}
 8011944:	4770      	bx	lr
	...

08011948 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8011948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801194a:	4606      	mov	r6, r0
 801194c:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801194e:	4b0d      	ldr	r3, [pc, #52]	; (8011984 <GetElement+0x3c>)
 8011950:	f893 7020 	ldrb.w	r7, [r3, #32]
 8011954:	4638      	mov	r0, r7
 8011956:	f7ff ffeb 	bl	8011930 <IsListEmpty>
 801195a:	b970      	cbnz	r0, 801197a <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801195c:	2500      	movs	r5, #0
 801195e:	42af      	cmp	r7, r5
 8011960:	d909      	bls.n	8011976 <GetElement+0x2e>
    {
        if( element->Request == request )
 8011962:	7823      	ldrb	r3, [r4, #0]
 8011964:	42b3      	cmp	r3, r6
 8011966:	d00a      	beq.n	801197e <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 8011968:	4620      	mov	r0, r4
 801196a:	f7ff ffd5 	bl	8011918 <IncreaseBufferPointer>
 801196e:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8011970:	3501      	adds	r5, #1
 8011972:	b2ed      	uxtb	r5, r5
 8011974:	e7f3      	b.n	801195e <GetElement+0x16>
    }

    return NULL;
 8011976:	2000      	movs	r0, #0
}
 8011978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 801197a:	2000      	movs	r0, #0
 801197c:	e7fc      	b.n	8011978 <GetElement+0x30>
            return element;
 801197e:	4620      	mov	r0, r4
 8011980:	e7fa      	b.n	8011978 <GetElement+0x30>
 8011982:	bf00      	nop
 8011984:	20001170 	.word	0x20001170

08011988 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8011988:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 801198a:	4c08      	ldr	r4, [pc, #32]	; (80119ac <LoRaMacConfirmQueueInit+0x24>)
 801198c:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801198e:	2300      	movs	r3, #0
 8011990:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8011994:	f104 000c 	add.w	r0, r4, #12
 8011998:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801199a:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 801199c:	2214      	movs	r2, #20
 801199e:	21ff      	movs	r1, #255	; 0xff
 80119a0:	f003 fea3 	bl	80156ea <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80119a4:	2301      	movs	r3, #1
 80119a6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80119aa:	bd10      	pop	{r4, pc}
 80119ac:	20001170 	.word	0x20001170

080119b0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80119b0:	b538      	push	{r3, r4, r5, lr}
 80119b2:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80119b4:	4b0f      	ldr	r3, [pc, #60]	; (80119f4 <LoRaMacConfirmQueueAdd+0x44>)
 80119b6:	f893 0020 	ldrb.w	r0, [r3, #32]
 80119ba:	f7ff ffbe 	bl	801193a <IsListFull>
 80119be:	b9b8      	cbnz	r0, 80119f0 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80119c0:	4c0c      	ldr	r4, [pc, #48]	; (80119f4 <LoRaMacConfirmQueueAdd+0x44>)
 80119c2:	68a3      	ldr	r3, [r4, #8]
 80119c4:	782a      	ldrb	r2, [r5, #0]
 80119c6:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80119c8:	68a3      	ldr	r3, [r4, #8]
 80119ca:	786a      	ldrb	r2, [r5, #1]
 80119cc:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80119ce:	68a3      	ldr	r3, [r4, #8]
 80119d0:	78ea      	ldrb	r2, [r5, #3]
 80119d2:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80119d4:	68a3      	ldr	r3, [r4, #8]
 80119d6:	78aa      	ldrb	r2, [r5, #2]
 80119d8:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80119da:	f894 3020 	ldrb.w	r3, [r4, #32]
 80119de:	3301      	adds	r3, #1
 80119e0:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80119e4:	68a0      	ldr	r0, [r4, #8]
 80119e6:	f7ff ff97 	bl	8011918 <IncreaseBufferPointer>
 80119ea:	60a0      	str	r0, [r4, #8]

    return true;
 80119ec:	2001      	movs	r0, #1
}
 80119ee:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 80119f0:	2000      	movs	r0, #0
 80119f2:	e7fc      	b.n	80119ee <LoRaMacConfirmQueueAdd+0x3e>
 80119f4:	20001170 	.word	0x20001170

080119f8 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80119f8:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80119fa:	4b09      	ldr	r3, [pc, #36]	; (8011a20 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 80119fc:	f893 4020 	ldrb.w	r4, [r3, #32]
 8011a00:	4620      	mov	r0, r4
 8011a02:	f7ff ff95 	bl	8011930 <IsListEmpty>
 8011a06:	b948      	cbnz	r0, 8011a1c <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8011a08:	4d05      	ldr	r5, [pc, #20]	; (8011a20 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 8011a0a:	3c01      	subs	r4, #1
 8011a0c:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8011a10:	6868      	ldr	r0, [r5, #4]
 8011a12:	f7ff ff81 	bl	8011918 <IncreaseBufferPointer>
 8011a16:	6068      	str	r0, [r5, #4]

    return true;
 8011a18:	2001      	movs	r0, #1
}
 8011a1a:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 8011a1c:	2000      	movs	r0, #0
 8011a1e:	e7fc      	b.n	8011a1a <LoRaMacConfirmQueueRemoveFirst+0x22>
 8011a20:	20001170 	.word	0x20001170

08011a24 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8011a24:	b538      	push	{r3, r4, r5, lr}
 8011a26:	4605      	mov	r5, r0
 8011a28:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8011a2a:	4b08      	ldr	r3, [pc, #32]	; (8011a4c <LoRaMacConfirmQueueSetStatus+0x28>)
 8011a2c:	f893 0020 	ldrb.w	r0, [r3, #32]
 8011a30:	f7ff ff7e 	bl	8011930 <IsListEmpty>
 8011a34:	b948      	cbnz	r0, 8011a4a <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8011a36:	4b05      	ldr	r3, [pc, #20]	; (8011a4c <LoRaMacConfirmQueueSetStatus+0x28>)
 8011a38:	689a      	ldr	r2, [r3, #8]
 8011a3a:	6859      	ldr	r1, [r3, #4]
 8011a3c:	4620      	mov	r0, r4
 8011a3e:	f7ff ff83 	bl	8011948 <GetElement>
        if( element != NULL )
 8011a42:	b110      	cbz	r0, 8011a4a <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 8011a44:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 8011a46:	2201      	movs	r2, #1
 8011a48:	7082      	strb	r2, [r0, #2]
        }
    }
}
 8011a4a:	bd38      	pop	{r3, r4, r5, pc}
 8011a4c:	20001170 	.word	0x20001170

08011a50 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8011a50:	b510      	push	{r4, lr}
 8011a52:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8011a54:	4b09      	ldr	r3, [pc, #36]	; (8011a7c <LoRaMacConfirmQueueGetStatus+0x2c>)
 8011a56:	f893 0020 	ldrb.w	r0, [r3, #32]
 8011a5a:	f7ff ff69 	bl	8011930 <IsListEmpty>
 8011a5e:	b940      	cbnz	r0, 8011a72 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8011a60:	4b06      	ldr	r3, [pc, #24]	; (8011a7c <LoRaMacConfirmQueueGetStatus+0x2c>)
 8011a62:	689a      	ldr	r2, [r3, #8]
 8011a64:	6859      	ldr	r1, [r3, #4]
 8011a66:	4620      	mov	r0, r4
 8011a68:	f7ff ff6e 	bl	8011948 <GetElement>
        if( element != NULL )
 8011a6c:	b118      	cbz	r0, 8011a76 <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 8011a6e:	7840      	ldrb	r0, [r0, #1]
 8011a70:	e000      	b.n	8011a74 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011a72:	2001      	movs	r0, #1
}
 8011a74:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011a76:	2001      	movs	r0, #1
 8011a78:	e7fc      	b.n	8011a74 <LoRaMacConfirmQueueGetStatus+0x24>
 8011a7a:	bf00      	nop
 8011a7c:	20001170 	.word	0x20001170

08011a80 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8011a80:	b538      	push	{r3, r4, r5, lr}
 8011a82:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8011a84:	4b0c      	ldr	r3, [pc, #48]	; (8011ab8 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 8011a86:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8011a88:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8011a8c:	f893 0020 	ldrb.w	r0, [r3, #32]
 8011a90:	f7ff ff4e 	bl	8011930 <IsListEmpty>
 8011a94:	b150      	cbz	r0, 8011aac <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 8011a96:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 8011a98:	2301      	movs	r3, #1
 8011a9a:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	f7ff ff3b 	bl	8011918 <IncreaseBufferPointer>
 8011aa2:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 8011aa4:	4b04      	ldr	r3, [pc, #16]	; (8011ab8 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 8011aa6:	689b      	ldr	r3, [r3, #8]
 8011aa8:	4283      	cmp	r3, r0
 8011aaa:	d0f4      	beq.n	8011a96 <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 8011aac:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 8011aae:	78e3      	ldrb	r3, [r4, #3]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d1f3      	bne.n	8011a9c <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 8011ab4:	e7f0      	b.n	8011a98 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 8011ab6:	bf00      	nop
 8011ab8:	20001170 	.word	0x20001170

08011abc <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8011abc:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8011abe:	4b04      	ldr	r3, [pc, #16]	; (8011ad0 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 8011ac0:	689a      	ldr	r2, [r3, #8]
 8011ac2:	6859      	ldr	r1, [r3, #4]
 8011ac4:	f7ff ff40 	bl	8011948 <GetElement>
 8011ac8:	b100      	cbz	r0, 8011acc <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 8011aca:	2001      	movs	r0, #1
    }
    return false;
}
 8011acc:	bd08      	pop	{r3, pc}
 8011ace:	bf00      	nop
 8011ad0:	20001170 	.word	0x20001170

08011ad4 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8011ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ad6:	b083      	sub	sp, #12
 8011ad8:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8011ada:	4b16      	ldr	r3, [pc, #88]	; (8011b34 <LoRaMacConfirmQueueHandleCb+0x60>)
 8011adc:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8011ae0:	2400      	movs	r4, #0
 8011ae2:	e00d      	b.n	8011b00 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8011ae4:	781a      	ldrb	r2, [r3, #0]
 8011ae6:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8011aea:	785a      	ldrb	r2, [r3, #1]
 8011aec:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8011af0:	78db      	ldrb	r3, [r3, #3]
 8011af2:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8011af6:	f7ff ff7f 	bl	80119f8 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8011afa:	b1a5      	cbz	r5, 8011b26 <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 8011afc:	3401      	adds	r4, #1
 8011afe:	b2e4      	uxtb	r4, r4
 8011b00:	42bc      	cmp	r4, r7
 8011b02:	d214      	bcs.n	8011b2e <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8011b04:	4b0b      	ldr	r3, [pc, #44]	; (8011b34 <LoRaMacConfirmQueueHandleCb+0x60>)
 8011b06:	685a      	ldr	r2, [r3, #4]
 8011b08:	7812      	ldrb	r2, [r2, #0]
 8011b0a:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8011b0c:	685a      	ldr	r2, [r3, #4]
 8011b0e:	7852      	ldrb	r2, [r2, #1]
 8011b10:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 8011b16:	2d00      	cmp	r5, #0
 8011b18:	d0e4      	beq.n	8011ae4 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8011b1a:	4b06      	ldr	r3, [pc, #24]	; (8011b34 <LoRaMacConfirmQueueHandleCb+0x60>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	689b      	ldr	r3, [r3, #8]
 8011b20:	4630      	mov	r0, r6
 8011b22:	4798      	blx	r3
 8011b24:	e7e7      	b.n	8011af6 <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8011b26:	a801      	add	r0, sp, #4
 8011b28:	f7ff ff42 	bl	80119b0 <LoRaMacConfirmQueueAdd>
 8011b2c:	e7e6      	b.n	8011afc <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8011b2e:	b003      	add	sp, #12
 8011b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b32:	bf00      	nop
 8011b34:	20001170 	.word	0x20001170

08011b38 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 8011b38:	4b01      	ldr	r3, [pc, #4]	; (8011b40 <LoRaMacConfirmQueueGetCnt+0x8>)
 8011b3a:	f893 0020 	ldrb.w	r0, [r3, #32]
 8011b3e:	4770      	bx	lr
 8011b40:	20001170 	.word	0x20001170

08011b44 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8011b44:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8011b46:	4b03      	ldr	r3, [pc, #12]	; (8011b54 <LoRaMacConfirmQueueIsFull+0x10>)
 8011b48:	f893 0020 	ldrb.w	r0, [r3, #32]
 8011b4c:	f7ff fef5 	bl	801193a <IsListFull>
    }
    else
    {
        return false;
    }
}
 8011b50:	bd08      	pop	{r3, pc}
 8011b52:	bf00      	nop
 8011b54:	20001170 	.word	0x20001170

08011b58 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8011b58:	b410      	push	{r4}
 8011b5a:	9c01      	ldr	r4, [sp, #4]
 8011b5c:	9902      	ldr	r1, [sp, #8]
 8011b5e:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 8011b60:	b1da      	cbz	r2, 8011b9a <PrepareB0+0x42>
 8011b62:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 8011b64:	2049      	movs	r0, #73	; 0x49
 8011b66:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8011b68:	2000      	movs	r0, #0
 8011b6a:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 8011b6c:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 8011b6e:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 8011b70:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 8011b72:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 8011b74:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8011b76:	0a23      	lsrs	r3, r4, #8
 8011b78:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8011b7a:	0c23      	lsrs	r3, r4, #16
 8011b7c:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8011b7e:	0e24      	lsrs	r4, r4, #24
 8011b80:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 8011b82:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8011b84:	0a0b      	lsrs	r3, r1, #8
 8011b86:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8011b88:	0c0b      	lsrs	r3, r1, #16
 8011b8a:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8011b8c:	0e09      	lsrs	r1, r1, #24
 8011b8e:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 8011b90:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 8011b92:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 8011b96:	bc10      	pop	{r4}
 8011b98:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011b9a:	2009      	movs	r0, #9
 8011b9c:	e7fb      	b.n	8011b96 <PrepareB0+0x3e>
	...

08011ba0 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	2b01      	cmp	r3, #1
 8011ba4:	d80e      	bhi.n	8011bc4 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8011ba6:	469c      	mov	ip, r3
 8011ba8:	4a07      	ldr	r2, [pc, #28]	; (8011bc8 <GetKeyAddrItem+0x28>)
 8011baa:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8011bae:	4282      	cmp	r2, r0
 8011bb0:	d002      	beq.n	8011bb8 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011bb2:	3301      	adds	r3, #1
 8011bb4:	b2db      	uxtb	r3, r3
 8011bb6:	e7f4      	b.n	8011ba2 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 8011bb8:	4b03      	ldr	r3, [pc, #12]	; (8011bc8 <GetKeyAddrItem+0x28>)
 8011bba:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8011bbe:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8011bc0:	2000      	movs	r0, #0
 8011bc2:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8011bc4:	200b      	movs	r0, #11
}
 8011bc6:	4770      	bx	lr
 8011bc8:	20000108 	.word	0x20000108

08011bcc <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 8011bcc:	460b      	mov	r3, r1
 8011bce:	2900      	cmp	r1, #0
 8011bd0:	d024      	beq.n	8011c1c <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 8011bd2:	3801      	subs	r0, #1
 8011bd4:	2803      	cmp	r0, #3
 8011bd6:	d823      	bhi.n	8011c20 <GetLastFcntDown+0x54>
 8011bd8:	e8df f000 	tbb	[pc, r0]
 8011bdc:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8011be0:	4a10      	ldr	r2, [pc, #64]	; (8011c24 <GetLastFcntDown+0x58>)
 8011be2:	6812      	ldr	r2, [r2, #0]
 8011be4:	6911      	ldr	r1, [r2, #16]
 8011be6:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8011be8:	6913      	ldr	r3, [r2, #16]
 8011bea:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8011bec:	2000      	movs	r0, #0
            break;
 8011bee:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8011bf0:	4a0c      	ldr	r2, [pc, #48]	; (8011c24 <GetLastFcntDown+0x58>)
 8011bf2:	6812      	ldr	r2, [r2, #0]
 8011bf4:	6951      	ldr	r1, [r2, #20]
 8011bf6:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8011bf8:	6953      	ldr	r3, [r2, #20]
 8011bfa:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 8011bfc:	2000      	movs	r0, #0
            break;
 8011bfe:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8011c00:	4a08      	ldr	r2, [pc, #32]	; (8011c24 <GetLastFcntDown+0x58>)
 8011c02:	6812      	ldr	r2, [r2, #0]
 8011c04:	6991      	ldr	r1, [r2, #24]
 8011c06:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8011c08:	6993      	ldr	r3, [r2, #24]
 8011c0a:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 8011c0c:	2000      	movs	r0, #0
            break;
 8011c0e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8011c10:	4a04      	ldr	r2, [pc, #16]	; (8011c24 <GetLastFcntDown+0x58>)
 8011c12:	6812      	ldr	r2, [r2, #0]
 8011c14:	69d2      	ldr	r2, [r2, #28]
 8011c16:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8011c18:	2000      	movs	r0, #0
            break;
 8011c1a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011c1c:	2009      	movs	r0, #9
 8011c1e:	4770      	bx	lr
    switch( fCntID )
 8011c20:	2005      	movs	r0, #5
}
 8011c22:	4770      	bx	lr
 8011c24:	20001194 	.word	0x20001194

08011c28 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8011c28:	b510      	push	{r4, lr}
 8011c2a:	b082      	sub	sp, #8
 8011c2c:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8011c32:	a901      	add	r1, sp, #4
 8011c34:	f7ff ffca 	bl	8011bcc <GetLastFcntDown>
 8011c38:	b948      	cbnz	r0, 8011c4e <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 8011c3a:	9b01      	ldr	r3, [sp, #4]
 8011c3c:	42a3      	cmp	r3, r4
 8011c3e:	d309      	bcc.n	8011c54 <CheckFCntDown+0x2c>
 8011c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c44:	d001      	beq.n	8011c4a <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 8011c46:	2000      	movs	r0, #0
 8011c48:	e002      	b.n	8011c50 <CheckFCntDown+0x28>
        return true;
 8011c4a:	2001      	movs	r0, #1
 8011c4c:	e000      	b.n	8011c50 <CheckFCntDown+0x28>
        return false;
 8011c4e:	2000      	movs	r0, #0
    }
}
 8011c50:	b002      	add	sp, #8
 8011c52:	bd10      	pop	{r4, pc}
        return true;
 8011c54:	2001      	movs	r0, #1
 8011c56:	e7fb      	b.n	8011c50 <CheckFCntDown+0x28>

08011c58 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 8011c58:	3801      	subs	r0, #1
 8011c5a:	2803      	cmp	r0, #3
 8011c5c:	d812      	bhi.n	8011c84 <UpdateFCntDown+0x2c>
 8011c5e:	e8df f000 	tbb	[pc, r0]
 8011c62:	0602      	.short	0x0602
 8011c64:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8011c66:	4b08      	ldr	r3, [pc, #32]	; (8011c88 <UpdateFCntDown+0x30>)
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	6119      	str	r1, [r3, #16]
            break;
 8011c6c:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8011c6e:	4b06      	ldr	r3, [pc, #24]	; (8011c88 <UpdateFCntDown+0x30>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	6159      	str	r1, [r3, #20]
            break;
 8011c74:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8011c76:	4b04      	ldr	r3, [pc, #16]	; (8011c88 <UpdateFCntDown+0x30>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	6199      	str	r1, [r3, #24]
            break;
 8011c7c:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8011c7e:	4b02      	ldr	r3, [pc, #8]	; (8011c88 <UpdateFCntDown+0x30>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 8011c84:	4770      	bx	lr
 8011c86:	bf00      	nop
 8011c88:	20001194 	.word	0x20001194

08011c8c <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 8011c8c:	4b0a      	ldr	r3, [pc, #40]	; (8011cb8 <ResetFCnts+0x2c>)
 8011c8e:	681a      	ldr	r2, [r3, #0]
 8011c90:	2300      	movs	r3, #0
 8011c92:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011c94:	f04f 31ff 	mov.w	r1, #4294967295
 8011c98:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011c9a:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8011c9c:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8011c9e:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	dd00      	ble.n	8011ca6 <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 8011ca4:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8011ca6:	1d99      	adds	r1, r3, #6
 8011ca8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8011cac:	f04f 30ff 	mov.w	r0, #4294967295
 8011cb0:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011cb2:	3301      	adds	r3, #1
 8011cb4:	e7f4      	b.n	8011ca0 <ResetFCnts+0x14>
 8011cb6:	bf00      	nop
 8011cb8:	20001194 	.word	0x20001194

08011cbc <ComputeCmacB0>:
{
 8011cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cc0:	b088      	sub	sp, #32
 8011cc2:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8011cc4:	b1f0      	cbz	r0, 8011d04 <ComputeCmacB0+0x48>
 8011cc6:	460c      	mov	r4, r1
 8011cc8:	4615      	mov	r5, r2
 8011cca:	461a      	mov	r2, r3
 8011ccc:	4680      	mov	r8, r0
 8011cce:	b1de      	cbz	r6, 8011d08 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8011cd0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8011cd4:	d81a      	bhi.n	8011d0c <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8011cd6:	af04      	add	r7, sp, #16
 8011cd8:	9702      	str	r7, [sp, #8]
 8011cda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011cdc:	9301      	str	r3, [sp, #4]
 8011cde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ce0:	9300      	str	r3, [sp, #0]
 8011ce2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8011ce6:	4629      	mov	r1, r5
 8011ce8:	4620      	mov	r0, r4
 8011cea:	f7ff ff35 	bl	8011b58 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8011cee:	9600      	str	r6, [sp, #0]
 8011cf0:	462b      	mov	r3, r5
 8011cf2:	4622      	mov	r2, r4
 8011cf4:	4641      	mov	r1, r8
 8011cf6:	4638      	mov	r0, r7
 8011cf8:	f003 fb87 	bl	801540a <SecureElementComputeAesCmac>
 8011cfc:	b940      	cbnz	r0, 8011d10 <ComputeCmacB0+0x54>
}
 8011cfe:	b008      	add	sp, #32
 8011d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011d04:	2009      	movs	r0, #9
 8011d06:	e7fa      	b.n	8011cfe <ComputeCmacB0+0x42>
 8011d08:	2009      	movs	r0, #9
 8011d0a:	e7f8      	b.n	8011cfe <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011d0c:	200d      	movs	r0, #13
 8011d0e:	e7f6      	b.n	8011cfe <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011d10:	200e      	movs	r0, #14
 8011d12:	e7f4      	b.n	8011cfe <ComputeCmacB0+0x42>

08011d14 <DeriveSessionKey10x>:
{
 8011d14:	b510      	push	{r4, lr}
 8011d16:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 8011d18:	2400      	movs	r4, #0
 8011d1a:	9400      	str	r4, [sp, #0]
 8011d1c:	9401      	str	r4, [sp, #4]
 8011d1e:	9402      	str	r4, [sp, #8]
 8011d20:	9403      	str	r4, [sp, #12]
    switch( keyID )
 8011d22:	2802      	cmp	r0, #2
 8011d24:	d003      	beq.n	8011d2e <DeriveSessionKey10x+0x1a>
 8011d26:	2803      	cmp	r0, #3
 8011d28:	d025      	beq.n	8011d76 <DeriveSessionKey10x+0x62>
 8011d2a:	200a      	movs	r0, #10
 8011d2c:	e021      	b.n	8011d72 <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 8011d2e:	2401      	movs	r4, #1
 8011d30:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8011d34:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8011d38:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011d3c:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8011d40:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8011d44:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8011d48:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8011d4c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8011d50:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8011d54:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8011d58:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8011d5c:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8011d60:	0a1b      	lsrs	r3, r3, #8
 8011d62:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8011d66:	4602      	mov	r2, r0
 8011d68:	2101      	movs	r1, #1
 8011d6a:	4668      	mov	r0, sp
 8011d6c:	f003 fbec 	bl	8015548 <SecureElementDeriveAndStoreKey>
 8011d70:	b928      	cbnz	r0, 8011d7e <DeriveSessionKey10x+0x6a>
}
 8011d72:	b004      	add	sp, #16
 8011d74:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 8011d76:	2402      	movs	r4, #2
 8011d78:	f88d 4000 	strb.w	r4, [sp]
            break;
 8011d7c:	e7da      	b.n	8011d34 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011d7e:	200e      	movs	r0, #14
 8011d80:	e7f7      	b.n	8011d72 <DeriveSessionKey10x+0x5e>

08011d82 <PayloadEncrypt>:
{
 8011d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d86:	b088      	sub	sp, #32
 8011d88:	4690      	mov	r8, r2
 8011d8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 8011d8c:	2800      	cmp	r0, #0
 8011d8e:	d052      	beq.n	8011e36 <PayloadEncrypt+0xb4>
 8011d90:	460d      	mov	r5, r1
 8011d92:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 8011d94:	2600      	movs	r6, #0
 8011d96:	9604      	str	r6, [sp, #16]
 8011d98:	9605      	str	r6, [sp, #20]
 8011d9a:	9606      	str	r6, [sp, #24]
 8011d9c:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 8011d9e:	9600      	str	r6, [sp, #0]
 8011da0:	9601      	str	r6, [sp, #4]
 8011da2:	9602      	str	r6, [sp, #8]
 8011da4:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 8011da6:	2701      	movs	r7, #1
 8011da8:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 8011dac:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8011db0:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 8011db4:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8011db8:	0a19      	lsrs	r1, r3, #8
 8011dba:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8011dbe:	0c19      	lsrs	r1, r3, #16
 8011dc0:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8011dc4:	0e1b      	lsrs	r3, r3, #24
 8011dc6:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 8011dca:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8011dce:	0a13      	lsrs	r3, r2, #8
 8011dd0:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8011dd4:	0c13      	lsrs	r3, r2, #16
 8011dd6:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8011dda:	0e12      	lsrs	r2, r2, #24
 8011ddc:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 8011de0:	e014      	b.n	8011e0c <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8011de2:	18f2      	adds	r2, r6, r3
 8011de4:	5ca0      	ldrb	r0, [r4, r2]
 8011de6:	f103 0120 	add.w	r1, r3, #32
 8011dea:	4469      	add	r1, sp
 8011dec:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 8011df0:	4048      	eors	r0, r1
 8011df2:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8011df4:	3301      	adds	r3, #1
 8011df6:	b2db      	uxtb	r3, r3
 8011df8:	462a      	mov	r2, r5
 8011dfa:	2d10      	cmp	r5, #16
 8011dfc:	bfa8      	it	ge
 8011dfe:	2210      	movge	r2, #16
 8011e00:	4293      	cmp	r3, r2
 8011e02:	dbee      	blt.n	8011de2 <PayloadEncrypt+0x60>
        size -= 16;
 8011e04:	3d10      	subs	r5, #16
 8011e06:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 8011e08:	3610      	adds	r6, #16
 8011e0a:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 8011e0c:	2d00      	cmp	r5, #0
 8011e0e:	dd0e      	ble.n	8011e2e <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 8011e10:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 8011e14:	3701      	adds	r7, #1
 8011e16:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8011e18:	ab04      	add	r3, sp, #16
 8011e1a:	4642      	mov	r2, r8
 8011e1c:	2110      	movs	r1, #16
 8011e1e:	4668      	mov	r0, sp
 8011e20:	f003 fb18 	bl	8015454 <SecureElementAesEncrypt>
 8011e24:	4603      	mov	r3, r0
 8011e26:	2800      	cmp	r0, #0
 8011e28:	d0e6      	beq.n	8011df8 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011e2a:	200e      	movs	r0, #14
 8011e2c:	e000      	b.n	8011e30 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 8011e2e:	2000      	movs	r0, #0
}
 8011e30:	b008      	add	sp, #32
 8011e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011e36:	2009      	movs	r0, #9
 8011e38:	e7fa      	b.n	8011e30 <PayloadEncrypt+0xae>

08011e3a <VerifyCmacB0>:
    if( msg == 0 )
 8011e3a:	b370      	cbz	r0, 8011e9a <VerifyCmacB0+0x60>
{
 8011e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e40:	b0c8      	sub	sp, #288	; 0x120
 8011e42:	460c      	mov	r4, r1
 8011e44:	4615      	mov	r5, r2
 8011e46:	461e      	mov	r6, r3
 8011e48:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8011e4a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8011e4e:	d826      	bhi.n	8011e9e <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8011e50:	af04      	add	r7, sp, #16
 8011e52:	f44f 7288 	mov.w	r2, #272	; 0x110
 8011e56:	2100      	movs	r1, #0
 8011e58:	4638      	mov	r0, r7
 8011e5a:	f003 fc46 	bl	80156ea <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8011e5e:	9702      	str	r7, [sp, #8]
 8011e60:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8011e62:	9301      	str	r3, [sp, #4]
 8011e64:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8011e66:	9300      	str	r3, [sp, #0]
 8011e68:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 8011e6c:	4632      	mov	r2, r6
 8011e6e:	4629      	mov	r1, r5
 8011e70:	4620      	mov	r0, r4
 8011e72:	f7ff fe71 	bl	8011b58 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8011e76:	4622      	mov	r2, r4
 8011e78:	4641      	mov	r1, r8
 8011e7a:	a808      	add	r0, sp, #32
 8011e7c:	f003 fc1d 	bl	80156ba <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8011e80:	f104 0110 	add.w	r1, r4, #16
 8011e84:	462b      	mov	r3, r5
 8011e86:	9a51      	ldr	r2, [sp, #324]	; 0x144
 8011e88:	b289      	uxth	r1, r1
 8011e8a:	4638      	mov	r0, r7
 8011e8c:	f003 facc 	bl	8015428 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 8011e90:	b130      	cbz	r0, 8011ea0 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8011e92:	2801      	cmp	r0, #1
 8011e94:	d004      	beq.n	8011ea0 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011e96:	200e      	movs	r0, #14
 8011e98:	e002      	b.n	8011ea0 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011e9a:	2009      	movs	r0, #9
}
 8011e9c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011e9e:	200d      	movs	r0, #13
}
 8011ea0:	b048      	add	sp, #288	; 0x120
 8011ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08011ea8 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 8011ea8:	b188      	cbz	r0, 8011ece <LoRaMacCryptoInit+0x26>
{
 8011eaa:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8011eac:	4c09      	ldr	r4, [pc, #36]	; (8011ed4 <LoRaMacCryptoInit+0x2c>)
 8011eae:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8011eb0:	2228      	movs	r2, #40	; 0x28
 8011eb2:	2100      	movs	r1, #0
 8011eb4:	f003 fc19 	bl	80156ea <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8011eb8:	6823      	ldr	r3, [r4, #0]
 8011eba:	2201      	movs	r2, #1
 8011ebc:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8011ebe:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8011ec0:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8011ec2:	2400      	movs	r4, #0
 8011ec4:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8011ec6:	f7ff fee1 	bl	8011c8c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8011eca:	4620      	mov	r0, r4
}
 8011ecc:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8011ece:	2008      	movs	r0, #8
}
 8011ed0:	4770      	bx	lr
 8011ed2:	bf00      	nop
 8011ed4:	20001194 	.word	0x20001194

08011ed8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 8011ed8:	4b02      	ldr	r3, [pc, #8]	; (8011ee4 <LoRaMacCryptoSetLrWanVersion+0xc>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 8011ede:	2000      	movs	r0, #0
 8011ee0:	4770      	bx	lr
 8011ee2:	bf00      	nop
 8011ee4:	20001194 	.word	0x20001194

08011ee8 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 8011ee8:	b130      	cbz	r0, 8011ef8 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8011eea:	4b04      	ldr	r3, [pc, #16]	; (8011efc <LoRaMacCryptoGetFCntUp+0x14>)
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	68db      	ldr	r3, [r3, #12]
 8011ef0:	3301      	adds	r3, #1
 8011ef2:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8011ef4:	2000      	movs	r0, #0
 8011ef6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011ef8:	2009      	movs	r0, #9
}
 8011efa:	4770      	bx	lr
 8011efc:	20001194 	.word	0x20001194

08011f00 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8011f00:	b530      	push	{r4, r5, lr}
 8011f02:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 8011f04:	2300      	movs	r3, #0
 8011f06:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 8011f08:	b1f2      	cbz	r2, 8011f48 <LoRaMacCryptoGetFCntDown+0x48>
 8011f0a:	460c      	mov	r4, r1
 8011f0c:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8011f0e:	a901      	add	r1, sp, #4
 8011f10:	f7ff fe5c 	bl	8011bcc <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011f14:	b948      	cbnz	r0, 8011f2a <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8011f16:	9b01      	ldr	r3, [sp, #4]
 8011f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f1c:	d007      	beq.n	8011f2e <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8011f1e:	b29a      	uxth	r2, r3
 8011f20:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 8011f22:	2a00      	cmp	r2, #0
 8011f24:	dd05      	ble.n	8011f32 <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8011f26:	4413      	add	r3, r2
 8011f28:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8011f2a:	b003      	add	sp, #12
 8011f2c:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 8011f2e:	602c      	str	r4, [r5, #0]
 8011f30:	e7fb      	b.n	8011f2a <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 8011f32:	b132      	cbz	r2, 8011f42 <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8011f34:	0c1b      	lsrs	r3, r3, #16
 8011f36:	041b      	lsls	r3, r3, #16
 8011f38:	4423      	add	r3, r4
 8011f3a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8011f3e:	602b      	str	r3, [r5, #0]
 8011f40:	e7f3      	b.n	8011f2a <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 8011f42:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8011f44:	2007      	movs	r0, #7
 8011f46:	e7f0      	b.n	8011f2a <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011f48:	2009      	movs	r0, #9
 8011f4a:	e7ee      	b.n	8011f2a <LoRaMacCryptoGetFCntDown+0x2a>

08011f4c <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 8011f4c:	4601      	mov	r1, r0
 8011f4e:	b908      	cbnz	r0, 8011f54 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011f50:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8011f52:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011f54:	2300      	movs	r3, #0
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	dd01      	ble.n	8011f5e <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 8011f5a:	2000      	movs	r0, #0
 8011f5c:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8011f5e:	4a06      	ldr	r2, [pc, #24]	; (8011f78 <LoRaMacCryptoSetMulticastReference+0x2c>)
 8011f60:	6812      	ldr	r2, [r2, #0]
 8011f62:	202c      	movs	r0, #44	; 0x2c
 8011f64:	fb00 1003 	mla	r0, r0, r3, r1
 8011f68:	f103 0c06 	add.w	ip, r3, #6
 8011f6c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8011f70:	3204      	adds	r2, #4
 8011f72:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011f74:	3301      	adds	r3, #1
 8011f76:	e7ee      	b.n	8011f56 <LoRaMacCryptoSetMulticastReference+0xa>
 8011f78:	20001194 	.word	0x20001194

08011f7c <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 8011f7c:	b1d8      	cbz	r0, 8011fb6 <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 8011f7e:	b510      	push	{r4, lr}
 8011f80:	b082      	sub	sp, #8
 8011f82:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8011f84:	4b0f      	ldr	r3, [pc, #60]	; (8011fc4 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 8011f86:	681a      	ldr	r2, [r3, #0]
 8011f88:	8893      	ldrh	r3, [r2, #4]
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	b29b      	uxth	r3, r3
 8011f8e:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8011f90:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011f92:	f000 fa2e 	bl	80123f2 <LoRaMacSerializerJoinRequest>
 8011f96:	b980      	cbnz	r0, 8011fba <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8011f98:	4623      	mov	r3, r4
 8011f9a:	f853 1b18 	ldr.w	r1, [r3], #24
 8011f9e:	9300      	str	r3, [sp, #0]
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	2213      	movs	r2, #19
 8011fa4:	f003 fa31 	bl	801540a <SecureElementComputeAesCmac>
 8011fa8:	b950      	cbnz	r0, 8011fc0 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011faa:	4620      	mov	r0, r4
 8011fac:	f000 fa21 	bl	80123f2 <LoRaMacSerializerJoinRequest>
 8011fb0:	b120      	cbz	r0, 8011fbc <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011fb2:	2010      	movs	r0, #16
 8011fb4:	e002      	b.n	8011fbc <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011fb6:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8011fb8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011fba:	2010      	movs	r0, #16
}
 8011fbc:	b002      	add	sp, #8
 8011fbe:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011fc0:	200e      	movs	r0, #14
 8011fc2:	e7fb      	b.n	8011fbc <LoRaMacCryptoPrepareJoinRequest+0x40>
 8011fc4:	20001194 	.word	0x20001194

08011fc8 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d036      	beq.n	801203a <LoRaMacCryptoSecureMessage+0x72>
{
 8011fcc:	b530      	push	{r4, r5, lr}
 8011fce:	b085      	sub	sp, #20
 8011fd0:	4604      	mov	r4, r0
 8011fd2:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8011fd4:	4b1d      	ldr	r3, [pc, #116]	; (801204c <LoRaMacCryptoSecureMessage+0x84>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	68db      	ldr	r3, [r3, #12]
 8011fda:	4283      	cmp	r3, r0
 8011fdc:	d82f      	bhi.n	801203e <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8011fde:	f895 2020 	ldrb.w	r2, [r5, #32]
 8011fe2:	b342      	cbz	r2, 8012036 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8011fe4:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8011fe6:	42a3      	cmp	r3, r4
 8011fe8:	d209      	bcs.n	8011ffe <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8011fea:	9401      	str	r4, [sp, #4]
 8011fec:	2300      	movs	r3, #0
 8011fee:	9300      	str	r3, [sp, #0]
 8011ff0:	68ab      	ldr	r3, [r5, #8]
 8011ff2:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8011ff6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8011ff8:	f7ff fec3 	bl	8011d82 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011ffc:	bb10      	cbnz	r0, 8012044 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011ffe:	4628      	mov	r0, r5
 8012000:	f000 fa2d 	bl	801245e <LoRaMacSerializerData>
 8012004:	b9e8      	cbnz	r0, 8012042 <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8012006:	7929      	ldrb	r1, [r5, #4]
 8012008:	3904      	subs	r1, #4
 801200a:	462b      	mov	r3, r5
 801200c:	f853 0b2c 	ldr.w	r0, [r3], #44
 8012010:	9303      	str	r3, [sp, #12]
 8012012:	9402      	str	r4, [sp, #8]
 8012014:	68ab      	ldr	r3, [r5, #8]
 8012016:	9301      	str	r3, [sp, #4]
 8012018:	2300      	movs	r3, #0
 801201a:	9300      	str	r3, [sp, #0]
 801201c:	2202      	movs	r2, #2
 801201e:	b289      	uxth	r1, r1
 8012020:	f7ff fe4c 	bl	8011cbc <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012024:	b970      	cbnz	r0, 8012044 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012026:	4628      	mov	r0, r5
 8012028:	f000 fa19 	bl	801245e <LoRaMacSerializerData>
 801202c:	b960      	cbnz	r0, 8012048 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801202e:	4b07      	ldr	r3, [pc, #28]	; (801204c <LoRaMacCryptoSecureMessage+0x84>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8012034:	e006      	b.n	8012044 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 8012036:	2202      	movs	r2, #2
 8012038:	e7d5      	b.n	8011fe6 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 801203a:	2009      	movs	r0, #9
}
 801203c:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801203e:	2006      	movs	r0, #6
 8012040:	e000      	b.n	8012044 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012042:	2010      	movs	r0, #16
}
 8012044:	b005      	add	sp, #20
 8012046:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012048:	2010      	movs	r0, #16
 801204a:	e7fb      	b.n	8012044 <LoRaMacCryptoSecureMessage+0x7c>
 801204c:	20001194 	.word	0x20001194

08012050 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8012050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012054:	b087      	sub	sp, #28
 8012056:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 8012058:	2e00      	cmp	r6, #0
 801205a:	d049      	beq.n	80120f0 <LoRaMacCryptoUnsecureMessage+0xa0>
 801205c:	4605      	mov	r5, r0
 801205e:	4688      	mov	r8, r1
 8012060:	4617      	mov	r7, r2
 8012062:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8012064:	4619      	mov	r1, r3
 8012066:	4610      	mov	r0, r2
 8012068:	f7ff fdde 	bl	8011c28 <CheckFCntDown>
 801206c:	2800      	cmp	r0, #0
 801206e:	d041      	beq.n	80120f4 <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8012070:	4630      	mov	r0, r6
 8012072:	f000 f95f 	bl	8012334 <LoRaMacParserData>
 8012076:	2800      	cmp	r0, #0
 8012078:	d141      	bne.n	80120fe <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801207a:	a905      	add	r1, sp, #20
 801207c:	4628      	mov	r0, r5
 801207e:	f7ff fd8f 	bl	8011ba0 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012082:	4605      	mov	r5, r0
 8012084:	2800      	cmp	r0, #0
 8012086:	d136      	bne.n	80120f6 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8012088:	9b05      	ldr	r3, [sp, #20]
 801208a:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 801208e:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8012090:	68b3      	ldr	r3, [r6, #8]
 8012092:	4543      	cmp	r3, r8
 8012094:	d135      	bne.n	8012102 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8012096:	7b33      	ldrb	r3, [r6, #12]
 8012098:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801209c:	491a      	ldr	r1, [pc, #104]	; (8012108 <LoRaMacCryptoUnsecureMessage+0xb8>)
 801209e:	6809      	ldr	r1, [r1, #0]
 80120a0:	7889      	ldrb	r1, [r1, #2]
 80120a2:	b901      	cbnz	r1, 80120a6 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80120a4:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80120a6:	7931      	ldrb	r1, [r6, #4]
 80120a8:	3904      	subs	r1, #4
 80120aa:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80120ac:	9003      	str	r0, [sp, #12]
 80120ae:	9402      	str	r4, [sp, #8]
 80120b0:	f8cd 8004 	str.w	r8, [sp, #4]
 80120b4:	2001      	movs	r0, #1
 80120b6:	9000      	str	r0, [sp, #0]
 80120b8:	b289      	uxth	r1, r1
 80120ba:	6830      	ldr	r0, [r6, #0]
 80120bc:	f7ff febd 	bl	8011e3a <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80120c0:	4605      	mov	r5, r0
 80120c2:	b9c0      	cbnz	r0, 80120f6 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80120c4:	f896 3020 	ldrb.w	r3, [r6, #32]
 80120c8:	b90b      	cbnz	r3, 80120ce <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80120ca:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80120ce:	9401      	str	r4, [sp, #4]
 80120d0:	2301      	movs	r3, #1
 80120d2:	9300      	str	r3, [sp, #0]
 80120d4:	4643      	mov	r3, r8
 80120d6:	464a      	mov	r2, r9
 80120d8:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 80120dc:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80120de:	f7ff fe50 	bl	8011d82 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80120e2:	4605      	mov	r5, r0
 80120e4:	b938      	cbnz	r0, 80120f6 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 80120e6:	4621      	mov	r1, r4
 80120e8:	4638      	mov	r0, r7
 80120ea:	f7ff fdb5 	bl	8011c58 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80120ee:	e002      	b.n	80120f6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80120f0:	2509      	movs	r5, #9
 80120f2:	e000      	b.n	80120f6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80120f4:	2506      	movs	r5, #6
}
 80120f6:	4628      	mov	r0, r5
 80120f8:	b007      	add	sp, #28
 80120fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80120fe:	250f      	movs	r5, #15
 8012100:	e7f9      	b.n	80120f6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8012102:	2502      	movs	r5, #2
 8012104:	e7f7      	b.n	80120f6 <LoRaMacCryptoUnsecureMessage+0xa6>
 8012106:	bf00      	nop
 8012108:	20001194 	.word	0x20001194

0801210c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 801210c:	b9b1      	cbnz	r1, 801213c <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 801210e:	b500      	push	{lr}
 8012110:	b085      	sub	sp, #20
 8012112:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 8012114:	2300      	movs	r3, #0
 8012116:	9300      	str	r3, [sp, #0]
 8012118:	9301      	str	r3, [sp, #4]
 801211a:	9302      	str	r3, [sp, #8]
 801211c:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 801211e:	2801      	cmp	r0, #1
 8012120:	d008      	beq.n	8012134 <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8012122:	2204      	movs	r2, #4
 8012124:	4661      	mov	r1, ip
 8012126:	4668      	mov	r0, sp
 8012128:	f003 fa0e 	bl	8015548 <SecureElementDeriveAndStoreKey>
 801212c:	b940      	cbnz	r0, 8012140 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 801212e:	b005      	add	sp, #20
 8012130:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 8012134:	2320      	movs	r3, #32
 8012136:	f88d 3000 	strb.w	r3, [sp]
 801213a:	e7f2      	b.n	8012122 <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801213c:	200a      	movs	r0, #10
}
 801213e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012140:	200e      	movs	r0, #14
 8012142:	e7f4      	b.n	801212e <LoRaMacCryptoDeriveMcRootKey+0x22>

08012144 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8012144:	2804      	cmp	r0, #4
 8012146:	d001      	beq.n	801214c <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012148:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 801214a:	4770      	bx	lr
{
 801214c:	b500      	push	{lr}
 801214e:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 8012150:	2300      	movs	r3, #0
 8012152:	9300      	str	r3, [sp, #0]
 8012154:	9301      	str	r3, [sp, #4]
 8012156:	9302      	str	r3, [sp, #8]
 8012158:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801215a:	227f      	movs	r2, #127	; 0x7f
 801215c:	4601      	mov	r1, r0
 801215e:	4668      	mov	r0, sp
 8012160:	f003 f9f2 	bl	8015548 <SecureElementDeriveAndStoreKey>
 8012164:	b910      	cbnz	r0, 801216c <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 8012166:	b005      	add	sp, #20
 8012168:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801216c:	200e      	movs	r0, #14
 801216e:	e7fa      	b.n	8012166 <LoRaMacCryptoDeriveMcKEKey+0x22>

08012170 <LoRaMacCryptoSetKey>:
{
 8012170:	b510      	push	{r4, lr}
 8012172:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8012174:	f003 f9a6 	bl	80154c4 <SecureElementSetKey>
 8012178:	b978      	cbnz	r0, 801219a <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 801217a:	b104      	cbz	r4, 801217e <LoRaMacCryptoSetKey+0xe>
}
 801217c:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 801217e:	4b09      	ldr	r3, [pc, #36]	; (80121a4 <LoRaMacCryptoSetKey+0x34>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	4621      	mov	r1, r4
 8012184:	7898      	ldrb	r0, [r3, #2]
 8012186:	f7ff ffc1 	bl	801210c <LoRaMacCryptoDeriveMcRootKey>
 801218a:	b940      	cbnz	r0, 801219e <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801218c:	2004      	movs	r0, #4
 801218e:	f7ff ffd9 	bl	8012144 <LoRaMacCryptoDeriveMcKEKey>
 8012192:	2800      	cmp	r0, #0
 8012194:	d0f2      	beq.n	801217c <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012196:	200e      	movs	r0, #14
 8012198:	e7f0      	b.n	801217c <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801219a:	200e      	movs	r0, #14
 801219c:	e7ee      	b.n	801217c <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801219e:	200e      	movs	r0, #14
 80121a0:	e7ec      	b.n	801217c <LoRaMacCryptoSetKey+0xc>
 80121a2:	bf00      	nop
 80121a4:	20001194 	.word	0x20001194

080121a8 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80121a8:	2a00      	cmp	r2, #0
 80121aa:	d064      	beq.n	8012276 <LoRaMacCryptoHandleJoinAccept+0xce>
{
 80121ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121ae:	b08f      	sub	sp, #60	; 0x3c
 80121b0:	4607      	mov	r7, r0
 80121b2:	460d      	mov	r5, r1
 80121b4:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80121b6:	2900      	cmp	r1, #0
 80121b8:	d05f      	beq.n	801227a <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80121ba:	2600      	movs	r6, #0
 80121bc:	9605      	str	r6, [sp, #20]
 80121be:	221d      	movs	r2, #29
 80121c0:	4631      	mov	r1, r6
 80121c2:	a806      	add	r0, sp, #24
 80121c4:	f005 fffc 	bl	80181c0 <memset>
    uint8_t versionMinor         = 0;
 80121c8:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80121cc:	4b2f      	ldr	r3, [pc, #188]	; (801228c <LoRaMacCryptoHandleJoinAccept+0xe4>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80121d2:	f10d 0313 	add.w	r3, sp, #19
 80121d6:	9302      	str	r3, [sp, #8]
 80121d8:	ab05      	add	r3, sp, #20
 80121da:	9301      	str	r3, [sp, #4]
 80121dc:	7923      	ldrb	r3, [r4, #4]
 80121de:	9300      	str	r3, [sp, #0]
 80121e0:	6823      	ldr	r3, [r4, #0]
 80121e2:	4632      	mov	r2, r6
 80121e4:	4629      	mov	r1, r5
 80121e6:	4638      	mov	r0, r7
 80121e8:	f003 f9ce 	bl	8015588 <SecureElementProcessJoinAccept>
 80121ec:	2800      	cmp	r0, #0
 80121ee:	d146      	bne.n	801227e <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80121f0:	7922      	ldrb	r2, [r4, #4]
 80121f2:	a905      	add	r1, sp, #20
 80121f4:	6820      	ldr	r0, [r4, #0]
 80121f6:	f003 fa60 	bl	80156ba <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80121fa:	4620      	mov	r0, r4
 80121fc:	f000 f848 	bl	8012290 <LoRaMacParserJoinAccept>
 8012200:	2800      	cmp	r0, #0
 8012202:	d13f      	bne.n	8012284 <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8012204:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8012206:	79e3      	ldrb	r3, [r4, #7]
 8012208:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801220c:	7a23      	ldrb	r3, [r4, #8]
 801220e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8012212:	4b1e      	ldr	r3, [pc, #120]	; (801228c <LoRaMacCryptoHandleJoinAccept+0xe4>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	689a      	ldr	r2, [r3, #8]
 8012218:	42aa      	cmp	r2, r5
 801221a:	d035      	beq.n	8012288 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 801221c:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 801221e:	2100      	movs	r1, #0
 8012220:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8012224:	f7ff ff72 	bl	801210c <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012228:	bb50      	cbnz	r0, 8012280 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 801222a:	2004      	movs	r0, #4
 801222c:	f7ff ff8a 	bl	8012144 <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012230:	bb30      	cbnz	r0, 8012280 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 8012232:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8012234:	7aa2      	ldrb	r2, [r4, #10]
 8012236:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801223a:	7ae4      	ldrb	r4, [r4, #11]
 801223c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8012240:	4633      	mov	r3, r6
 8012242:	4622      	mov	r2, r4
 8012244:	4629      	mov	r1, r5
 8012246:	2003      	movs	r0, #3
 8012248:	f7ff fd64 	bl	8011d14 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801224c:	b9c0      	cbnz	r0, 8012280 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 801224e:	4633      	mov	r3, r6
 8012250:	4622      	mov	r2, r4
 8012252:	4629      	mov	r1, r5
 8012254:	2002      	movs	r0, #2
 8012256:	f7ff fd5d 	bl	8011d14 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801225a:	b988      	cbnz	r0, 8012280 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801225c:	4b0b      	ldr	r3, [pc, #44]	; (801228c <LoRaMacCryptoHandleJoinAccept+0xe4>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8012264:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 8012266:	2200      	movs	r2, #0
 8012268:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801226a:	f04f 32ff 	mov.w	r2, #4294967295
 801226e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012270:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012272:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 8012274:	e004      	b.n	8012280 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012276:	2009      	movs	r0, #9
}
 8012278:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 801227a:	2009      	movs	r0, #9
 801227c:	e000      	b.n	8012280 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801227e:	200e      	movs	r0, #14
}
 8012280:	b00f      	add	sp, #60	; 0x3c
 8012282:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8012284:	200f      	movs	r0, #15
 8012286:	e7fb      	b.n	8012280 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8012288:	2003      	movs	r0, #3
 801228a:	e7f9      	b.n	8012280 <LoRaMacCryptoHandleJoinAccept+0xd8>
 801228c:	20001194 	.word	0x20001194

08012290 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012290:	2800      	cmp	r0, #0
 8012292:	d049      	beq.n	8012328 <LoRaMacParserJoinAccept+0x98>
{
 8012294:	b510      	push	{r4, lr}
 8012296:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012298:	6801      	ldr	r1, [r0, #0]
 801229a:	2900      	cmp	r1, #0
 801229c:	d046      	beq.n	801232c <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801229e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122a2:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80122a4:	2203      	movs	r2, #3
 80122a6:	3006      	adds	r0, #6
 80122a8:	f003 fa07 	bl	80156ba <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80122ac:	4620      	mov	r0, r4
 80122ae:	f850 1b09 	ldr.w	r1, [r0], #9
 80122b2:	2203      	movs	r2, #3
 80122b4:	3104      	adds	r1, #4
 80122b6:	f003 fa00 	bl	80156ba <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80122ba:	6821      	ldr	r1, [r4, #0]
 80122bc:	79cb      	ldrb	r3, [r1, #7]
 80122be:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80122c0:	7a0a      	ldrb	r2, [r1, #8]
 80122c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80122c6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80122c8:	7a4a      	ldrb	r2, [r1, #9]
 80122ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80122ce:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80122d0:	7a8a      	ldrb	r2, [r1, #10]
 80122d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80122d6:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80122d8:	7acb      	ldrb	r3, [r1, #11]
 80122da:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80122dc:	7b0b      	ldrb	r3, [r1, #12]
 80122de:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80122e0:	7923      	ldrb	r3, [r4, #4]
 80122e2:	2b21      	cmp	r3, #33	; 0x21
 80122e4:	d018      	beq.n	8012318 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80122e6:	2b11      	cmp	r3, #17
 80122e8:	dc22      	bgt.n	8012330 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80122ea:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80122ec:	6821      	ldr	r1, [r4, #0]
 80122ee:	f102 0c01 	add.w	ip, r2, #1
 80122f2:	5c8b      	ldrb	r3, [r1, r2]
 80122f4:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80122f6:	1c90      	adds	r0, r2, #2
 80122f8:	f811 c00c 	ldrb.w	ip, [r1, ip]
 80122fc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8012300:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012302:	3203      	adds	r2, #3
 8012304:	5c08      	ldrb	r0, [r1, r0]
 8012306:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801230a:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801230c:	5c8a      	ldrb	r2, [r1, r2]
 801230e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8012312:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8012314:	2000      	movs	r0, #0
}
 8012316:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8012318:	2210      	movs	r2, #16
 801231a:	310d      	adds	r1, #13
 801231c:	f104 0012 	add.w	r0, r4, #18
 8012320:	f003 f9cb 	bl	80156ba <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8012324:	221d      	movs	r2, #29
 8012326:	e7e1      	b.n	80122ec <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 8012328:	2002      	movs	r0, #2
}
 801232a:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 801232c:	2002      	movs	r0, #2
 801232e:	e7f2      	b.n	8012316 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 8012330:	2001      	movs	r0, #1
 8012332:	e7f0      	b.n	8012316 <LoRaMacParserJoinAccept+0x86>

08012334 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012334:	2800      	cmp	r0, #0
 8012336:	d058      	beq.n	80123ea <LoRaMacParserData+0xb6>
{
 8012338:	b510      	push	{r4, lr}
 801233a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801233c:	6801      	ldr	r1, [r0, #0]
 801233e:	2900      	cmp	r1, #0
 8012340:	d055      	beq.n	80123ee <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8012342:	780b      	ldrb	r3, [r1, #0]
 8012344:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8012346:	784b      	ldrb	r3, [r1, #1]
 8012348:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801234a:	788a      	ldrb	r2, [r1, #2]
 801234c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8012350:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012352:	78ca      	ldrb	r2, [r1, #3]
 8012354:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012358:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801235a:	790a      	ldrb	r2, [r1, #4]
 801235c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8012360:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8012362:	794b      	ldrb	r3, [r1, #5]
 8012364:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8012366:	798b      	ldrb	r3, [r1, #6]
 8012368:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801236a:	79ca      	ldrb	r2, [r1, #7]
 801236c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8012370:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012372:	7b02      	ldrb	r2, [r0, #12]
 8012374:	f002 020f 	and.w	r2, r2, #15
 8012378:	3108      	adds	r1, #8
 801237a:	3010      	adds	r0, #16
 801237c:	f003 f99d 	bl	80156ba <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012380:	7b23      	ldrb	r3, [r4, #12]
 8012382:	f003 030f 	and.w	r3, r3, #15
 8012386:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801238a:	2200      	movs	r2, #0
 801238c:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 8012390:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8012394:	7922      	ldrb	r2, [r4, #4]
 8012396:	1a11      	subs	r1, r2, r0
 8012398:	2904      	cmp	r1, #4
 801239a:	dc16      	bgt.n	80123ca <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801239c:	6822      	ldr	r2, [r4, #0]
 801239e:	7923      	ldrb	r3, [r4, #4]
 80123a0:	441a      	add	r2, r3
 80123a2:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 80123a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80123a8:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 80123ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80123b0:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80123b2:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80123b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80123ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80123bc:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80123c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80123c4:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80123c6:	2000      	movs	r0, #0
}
 80123c8:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80123ca:	6821      	ldr	r1, [r4, #0]
 80123cc:	3309      	adds	r3, #9
 80123ce:	5c08      	ldrb	r0, [r1, r0]
 80123d0:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80123d4:	1ad2      	subs	r2, r2, r3
 80123d6:	b2d2      	uxtb	r2, r2
 80123d8:	3a04      	subs	r2, #4
 80123da:	b2d2      	uxtb	r2, r2
 80123dc:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80123e0:	4419      	add	r1, r3
 80123e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80123e4:	f003 f969 	bl	80156ba <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80123e8:	e7d8      	b.n	801239c <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 80123ea:	2002      	movs	r0, #2
}
 80123ec:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 80123ee:	2002      	movs	r0, #2
 80123f0:	e7ea      	b.n	80123c8 <LoRaMacParserData+0x94>

080123f2 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80123f2:	b370      	cbz	r0, 8012452 <LoRaMacSerializerJoinRequest+0x60>
{
 80123f4:	b510      	push	{r4, lr}
 80123f6:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80123f8:	6803      	ldr	r3, [r0, #0]
 80123fa:	b363      	cbz	r3, 8012456 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80123fc:	7902      	ldrb	r2, [r0, #4]
 80123fe:	2a16      	cmp	r2, #22
 8012400:	d92b      	bls.n	801245a <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012402:	7942      	ldrb	r2, [r0, #5]
 8012404:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8012406:	4601      	mov	r1, r0
 8012408:	f851 0b06 	ldr.w	r0, [r1], #6
 801240c:	2208      	movs	r2, #8
 801240e:	3001      	adds	r0, #1
 8012410:	f003 f95e 	bl	80156d0 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8012414:	4621      	mov	r1, r4
 8012416:	f851 0b0e 	ldr.w	r0, [r1], #14
 801241a:	2208      	movs	r2, #8
 801241c:	3009      	adds	r0, #9
 801241e:	f003 f957 	bl	80156d0 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8012422:	8ae2      	ldrh	r2, [r4, #22]
 8012424:	6823      	ldr	r3, [r4, #0]
 8012426:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8012428:	8ae3      	ldrh	r3, [r4, #22]
 801242a:	6822      	ldr	r2, [r4, #0]
 801242c:	0a1b      	lsrs	r3, r3, #8
 801242e:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012430:	69a2      	ldr	r2, [r4, #24]
 8012432:	6823      	ldr	r3, [r4, #0]
 8012434:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012436:	69a3      	ldr	r3, [r4, #24]
 8012438:	0a1b      	lsrs	r3, r3, #8
 801243a:	6822      	ldr	r2, [r4, #0]
 801243c:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801243e:	8b62      	ldrh	r2, [r4, #26]
 8012440:	6823      	ldr	r3, [r4, #0]
 8012442:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8012444:	7ee2      	ldrb	r2, [r4, #27]
 8012446:	6823      	ldr	r3, [r4, #0]
 8012448:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 801244a:	2317      	movs	r3, #23
 801244c:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801244e:	2000      	movs	r0, #0
}
 8012450:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012452:	2001      	movs	r0, #1
}
 8012454:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012456:	2001      	movs	r0, #1
 8012458:	e7fa      	b.n	8012450 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801245a:	2002      	movs	r0, #2
 801245c:	e7f8      	b.n	8012450 <LoRaMacSerializerJoinRequest+0x5e>

0801245e <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801245e:	2800      	cmp	r0, #0
 8012460:	d066      	beq.n	8012530 <LoRaMacSerializerData+0xd2>
{
 8012462:	b538      	push	{r3, r4, r5, lr}
 8012464:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012466:	6801      	ldr	r1, [r0, #0]
 8012468:	2900      	cmp	r1, #0
 801246a:	d063      	beq.n	8012534 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801246c:	7b02      	ldrb	r2, [r0, #12]
 801246e:	f002 020f 	and.w	r2, r2, #15
 8012472:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 8012476:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801247a:	b10b      	cbz	r3, 8012480 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801247c:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8012480:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8012482:	3304      	adds	r3, #4
 8012484:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 8012486:	7922      	ldrb	r2, [r4, #4]
 8012488:	429a      	cmp	r2, r3
 801248a:	d355      	bcc.n	8012538 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801248c:	7963      	ldrb	r3, [r4, #5]
 801248e:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8012490:	68a2      	ldr	r2, [r4, #8]
 8012492:	6823      	ldr	r3, [r4, #0]
 8012494:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8012496:	68a3      	ldr	r3, [r4, #8]
 8012498:	0a1b      	lsrs	r3, r3, #8
 801249a:	6822      	ldr	r2, [r4, #0]
 801249c:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801249e:	8962      	ldrh	r2, [r4, #10]
 80124a0:	6823      	ldr	r3, [r4, #0]
 80124a2:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80124a4:	7ae2      	ldrb	r2, [r4, #11]
 80124a6:	6823      	ldr	r3, [r4, #0]
 80124a8:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80124aa:	6823      	ldr	r3, [r4, #0]
 80124ac:	7b22      	ldrb	r2, [r4, #12]
 80124ae:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80124b0:	89e2      	ldrh	r2, [r4, #14]
 80124b2:	6823      	ldr	r3, [r4, #0]
 80124b4:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80124b6:	89e3      	ldrh	r3, [r4, #14]
 80124b8:	6822      	ldr	r2, [r4, #0]
 80124ba:	0a1b      	lsrs	r3, r3, #8
 80124bc:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80124be:	4621      	mov	r1, r4
 80124c0:	f851 0b10 	ldr.w	r0, [r1], #16
 80124c4:	7b22      	ldrb	r2, [r4, #12]
 80124c6:	f002 020f 	and.w	r2, r2, #15
 80124ca:	3008      	adds	r0, #8
 80124cc:	f003 f8f5 	bl	80156ba <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80124d0:	7b23      	ldrb	r3, [r4, #12]
 80124d2:	f003 030f 	and.w	r3, r3, #15
 80124d6:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 80124da:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80124de:	b12a      	cbz	r2, 80124ec <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80124e0:	6822      	ldr	r2, [r4, #0]
 80124e2:	f894 1020 	ldrb.w	r1, [r4, #32]
 80124e6:	5551      	strb	r1, [r2, r5]
 80124e8:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80124ec:	6820      	ldr	r0, [r4, #0]
 80124ee:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80124f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80124f4:	4428      	add	r0, r5
 80124f6:	f003 f8e0 	bl	80156ba <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80124fa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80124fe:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012500:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012502:	6821      	ldr	r1, [r4, #0]
 8012504:	1c5a      	adds	r2, r3, #1
 8012506:	b292      	uxth	r2, r2
 8012508:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801250a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801250c:	0a08      	lsrs	r0, r1, #8
 801250e:	6825      	ldr	r5, [r4, #0]
 8012510:	1c99      	adds	r1, r3, #2
 8012512:	b289      	uxth	r1, r1
 8012514:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012516:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 8012518:	6820      	ldr	r0, [r4, #0]
 801251a:	1cda      	adds	r2, r3, #3
 801251c:	b292      	uxth	r2, r2
 801251e:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8012520:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8012524:	6821      	ldr	r1, [r4, #0]
 8012526:	3304      	adds	r3, #4
 8012528:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 801252a:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801252c:	2000      	movs	r0, #0
}
 801252e:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012530:	2001      	movs	r0, #1
}
 8012532:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012534:	2001      	movs	r0, #1
 8012536:	e7fa      	b.n	801252e <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012538:	2002      	movs	r0, #2
 801253a:	e7f8      	b.n	801252e <LoRaMacSerializerData+0xd0>

0801253c <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 801253c:	4b02      	ldr	r3, [pc, #8]	; (8012548 <NvmDataMgmtEvent+0xc>)
 801253e:	881a      	ldrh	r2, [r3, #0]
 8012540:	4310      	orrs	r0, r2
 8012542:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8012544:	4770      	bx	lr
 8012546:	bf00      	nop
 8012548:	20001198 	.word	0x20001198

0801254c <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 801254c:	b508      	push	{r3, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 801254e:	4b06      	ldr	r3, [pc, #24]	; (8012568 <NvmDataMgmtStoreBegin+0x1c>)
 8012550:	881b      	ldrh	r3, [r3, #0]
 8012552:	b11b      	cbz	r3, 801255c <NvmDataMgmtStoreBegin+0x10>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 8012554:	f7fe f914 	bl	8010780 <LoRaMacStop>
 8012558:	b918      	cbnz	r0, 8012562 <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 801255a:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 801255c:	f06f 0001 	mvn.w	r0, #1
 8012560:	e7fb      	b.n	801255a <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 8012562:	f06f 0002 	mvn.w	r0, #2
 8012566:	e7f8      	b.n	801255a <NvmDataMgmtStoreBegin+0xe>
 8012568:	20001198 	.word	0x20001198

0801256c <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 801256c:	b510      	push	{r4, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 801256e:	2400      	movs	r4, #0
 8012570:	4b02      	ldr	r3, [pc, #8]	; (801257c <NvmDataMgmtStoreEnd+0x10>)
 8012572:	801c      	strh	r4, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 8012574:	f7fe f8fc 	bl	8010770 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8012578:	4620      	mov	r0, r4
 801257a:	bd10      	pop	{r4, pc}
 801257c:	20001198 	.word	0x20001198

08012580 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 8012580:	2805      	cmp	r0, #5
 8012582:	d005      	beq.n	8012590 <RegionIsActive+0x10>
 8012584:	2808      	cmp	r0, #8
 8012586:	d001      	beq.n	801258c <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8012588:	2000      	movs	r0, #0
        }
    }
}
 801258a:	4770      	bx	lr
    switch( region )
 801258c:	2001      	movs	r0, #1
 801258e:	4770      	bx	lr
 8012590:	2001      	movs	r0, #1
 8012592:	4770      	bx	lr

08012594 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8012594:	b500      	push	{lr}
 8012596:	b083      	sub	sp, #12
 8012598:	4603      	mov	r3, r0
 801259a:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 801259c:	2200      	movs	r2, #0
 801259e:	9200      	str	r2, [sp, #0]
    switch( region )
 80125a0:	2b05      	cmp	r3, #5
 80125a2:	d004      	beq.n	80125ae <RegionGetPhyParam+0x1a>
 80125a4:	2b08      	cmp	r3, #8
 80125a6:	d009      	beq.n	80125bc <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80125a8:	9b00      	ldr	r3, [sp, #0]
 80125aa:	9301      	str	r3, [sp, #4]
 80125ac:	e002      	b.n	80125b4 <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 80125ae:	f000 fdeb 	bl	8013188 <RegionEU868GetPhyParam>
 80125b2:	9001      	str	r0, [sp, #4]
        }
    }
}
 80125b4:	9801      	ldr	r0, [sp, #4]
 80125b6:	b003      	add	sp, #12
 80125b8:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 80125bc:	f001 fbd6 	bl	8013d6c <RegionUS915GetPhyParam>
 80125c0:	9001      	str	r0, [sp, #4]
 80125c2:	e7f7      	b.n	80125b4 <RegionGetPhyParam+0x20>

080125c4 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80125c4:	b508      	push	{r3, lr}
 80125c6:	4603      	mov	r3, r0
 80125c8:	4608      	mov	r0, r1
    switch( region )
 80125ca:	2b05      	cmp	r3, #5
 80125cc:	d002      	beq.n	80125d4 <RegionSetBandTxDone+0x10>
 80125ce:	2b08      	cmp	r3, #8
 80125d0:	d003      	beq.n	80125da <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 80125d2:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 80125d4:	f000 fe94 	bl	8013300 <RegionEU868SetBandTxDone>
 80125d8:	e7fb      	b.n	80125d2 <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 80125da:	f001 fc9d 	bl	8013f18 <RegionUS915SetBandTxDone>
 80125de:	e7f8      	b.n	80125d2 <RegionSetBandTxDone+0xe>

080125e0 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80125e0:	b508      	push	{r3, lr}
 80125e2:	4603      	mov	r3, r0
 80125e4:	4608      	mov	r0, r1
    switch( region )
 80125e6:	2b05      	cmp	r3, #5
 80125e8:	d002      	beq.n	80125f0 <RegionInitDefaults+0x10>
 80125ea:	2b08      	cmp	r3, #8
 80125ec:	d003      	beq.n	80125f6 <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 80125ee:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 80125f0:	f000 fea4 	bl	801333c <RegionEU868InitDefaults>
 80125f4:	e7fb      	b.n	80125ee <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 80125f6:	f001 fcad 	bl	8013f54 <RegionUS915InitDefaults>
}
 80125fa:	e7f8      	b.n	80125ee <RegionInitDefaults+0xe>

080125fc <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80125fc:	b508      	push	{r3, lr}
 80125fe:	4603      	mov	r3, r0
 8012600:	4608      	mov	r0, r1
 8012602:	4611      	mov	r1, r2
    switch( region )
 8012604:	2b05      	cmp	r3, #5
 8012606:	d003      	beq.n	8012610 <RegionVerify+0x14>
 8012608:	2b08      	cmp	r3, #8
 801260a:	d004      	beq.n	8012616 <RegionVerify+0x1a>
 801260c:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 801260e:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 8012610:	f000 ff00 	bl	8013414 <RegionEU868Verify>
 8012614:	e7fb      	b.n	801260e <RegionVerify+0x12>
        US915_VERIFY( );
 8012616:	f001 fd41 	bl	801409c <RegionUS915Verify>
 801261a:	e7f8      	b.n	801260e <RegionVerify+0x12>

0801261c <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801261c:	b508      	push	{r3, lr}
 801261e:	4603      	mov	r3, r0
 8012620:	4608      	mov	r0, r1
    switch( region )
 8012622:	2b05      	cmp	r3, #5
 8012624:	d002      	beq.n	801262c <RegionApplyCFList+0x10>
 8012626:	2b08      	cmp	r3, #8
 8012628:	d003      	beq.n	8012632 <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 801262a:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 801262c:	f001 fac0 	bl	8013bb0 <RegionEU868ApplyCFList>
 8012630:	e7fb      	b.n	801262a <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 8012632:	f001 fd6d 	bl	8014110 <RegionUS915ApplyCFList>
}
 8012636:	e7f8      	b.n	801262a <RegionApplyCFList+0xe>

08012638 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8012638:	b508      	push	{r3, lr}
 801263a:	4603      	mov	r3, r0
 801263c:	4608      	mov	r0, r1
    switch( region )
 801263e:	2b05      	cmp	r3, #5
 8012640:	d003      	beq.n	801264a <RegionChanMaskSet+0x12>
 8012642:	2b08      	cmp	r3, #8
 8012644:	d004      	beq.n	8012650 <RegionChanMaskSet+0x18>
 8012646:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8012648:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 801264a:	f000 ff29 	bl	80134a0 <RegionEU868ChanMaskSet>
 801264e:	e7fb      	b.n	8012648 <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 8012650:	f001 fd9c 	bl	801418c <RegionUS915ChanMaskSet>
 8012654:	e7f8      	b.n	8012648 <RegionChanMaskSet+0x10>

08012656 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8012656:	b508      	push	{r3, lr}
 8012658:	4684      	mov	ip, r0
 801265a:	4608      	mov	r0, r1
 801265c:	4611      	mov	r1, r2
 801265e:	461a      	mov	r2, r3
    switch( region )
 8012660:	f1bc 0f05 	cmp.w	ip, #5
 8012664:	d003      	beq.n	801266e <RegionComputeRxWindowParameters+0x18>
 8012666:	f1bc 0f08 	cmp.w	ip, #8
 801266a:	d004      	beq.n	8012676 <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 801266c:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801266e:	9b02      	ldr	r3, [sp, #8]
 8012670:	f000 ff34 	bl	80134dc <RegionEU868ComputeRxWindowParameters>
 8012674:	e7fa      	b.n	801266c <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8012676:	9b02      	ldr	r3, [sp, #8]
 8012678:	f001 fdca 	bl	8014210 <RegionUS915ComputeRxWindowParameters>
}
 801267c:	e7f6      	b.n	801266c <RegionComputeRxWindowParameters+0x16>

0801267e <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801267e:	b508      	push	{r3, lr}
 8012680:	4603      	mov	r3, r0
 8012682:	4608      	mov	r0, r1
 8012684:	4611      	mov	r1, r2
    switch( region )
 8012686:	2b05      	cmp	r3, #5
 8012688:	d003      	beq.n	8012692 <RegionRxConfig+0x14>
 801268a:	2b08      	cmp	r3, #8
 801268c:	d004      	beq.n	8012698 <RegionRxConfig+0x1a>
 801268e:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8012690:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 8012692:	f000 ff59 	bl	8013548 <RegionEU868RxConfig>
 8012696:	e7fb      	b.n	8012690 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 8012698:	f001 fde8 	bl	801426c <RegionUS915RxConfig>
 801269c:	e7f8      	b.n	8012690 <RegionRxConfig+0x12>

0801269e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801269e:	b508      	push	{r3, lr}
 80126a0:	4684      	mov	ip, r0
 80126a2:	4608      	mov	r0, r1
 80126a4:	4611      	mov	r1, r2
 80126a6:	461a      	mov	r2, r3
    switch( region )
 80126a8:	f1bc 0f05 	cmp.w	ip, #5
 80126ac:	d004      	beq.n	80126b8 <RegionTxConfig+0x1a>
 80126ae:	f1bc 0f08 	cmp.w	ip, #8
 80126b2:	d004      	beq.n	80126be <RegionTxConfig+0x20>
 80126b4:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 80126b6:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 80126b8:	f000 ffca 	bl	8013650 <RegionEU868TxConfig>
 80126bc:	e7fb      	b.n	80126b6 <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 80126be:	f001 fe2f 	bl	8014320 <RegionUS915TxConfig>
 80126c2:	e7f8      	b.n	80126b6 <RegionTxConfig+0x18>

080126c4 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80126c4:	b500      	push	{lr}
 80126c6:	b083      	sub	sp, #12
 80126c8:	4684      	mov	ip, r0
 80126ca:	4608      	mov	r0, r1
 80126cc:	4611      	mov	r1, r2
 80126ce:	461a      	mov	r2, r3
    switch( region )
 80126d0:	f1bc 0f05 	cmp.w	ip, #5
 80126d4:	d006      	beq.n	80126e4 <RegionLinkAdrReq+0x20>
 80126d6:	f1bc 0f08 	cmp.w	ip, #8
 80126da:	d009      	beq.n	80126f0 <RegionLinkAdrReq+0x2c>
 80126dc:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 80126de:	b003      	add	sp, #12
 80126e0:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 80126e4:	9b05      	ldr	r3, [sp, #20]
 80126e6:	9300      	str	r3, [sp, #0]
 80126e8:	9b04      	ldr	r3, [sp, #16]
 80126ea:	f001 f849 	bl	8013780 <RegionEU868LinkAdrReq>
 80126ee:	e7f6      	b.n	80126de <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 80126f0:	9b05      	ldr	r3, [sp, #20]
 80126f2:	9300      	str	r3, [sp, #0]
 80126f4:	9b04      	ldr	r3, [sp, #16]
 80126f6:	f001 fe8d 	bl	8014414 <RegionUS915LinkAdrReq>
 80126fa:	e7f0      	b.n	80126de <RegionLinkAdrReq+0x1a>

080126fc <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80126fc:	b508      	push	{r3, lr}
 80126fe:	4603      	mov	r3, r0
 8012700:	4608      	mov	r0, r1
    switch( region )
 8012702:	2b05      	cmp	r3, #5
 8012704:	d003      	beq.n	801270e <RegionRxParamSetupReq+0x12>
 8012706:	2b08      	cmp	r3, #8
 8012708:	d004      	beq.n	8012714 <RegionRxParamSetupReq+0x18>
 801270a:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 801270c:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 801270e:	f001 f8fb 	bl	8013908 <RegionEU868RxParamSetupReq>
 8012712:	e7fb      	b.n	801270c <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 8012714:	f001 ffc0 	bl	8014698 <RegionUS915RxParamSetupReq>
 8012718:	e7f8      	b.n	801270c <RegionRxParamSetupReq+0x10>

0801271a <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801271a:	b508      	push	{r3, lr}
 801271c:	4603      	mov	r3, r0
 801271e:	4608      	mov	r0, r1
    switch( region )
 8012720:	2b05      	cmp	r3, #5
 8012722:	d003      	beq.n	801272c <RegionNewChannelReq+0x12>
 8012724:	2b08      	cmp	r3, #8
 8012726:	d004      	beq.n	8012732 <RegionNewChannelReq+0x18>
 8012728:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 801272a:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 801272c:	f001 fa81 	bl	8013c32 <RegionEU868NewChannelReq>
 8012730:	e7fb      	b.n	801272a <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 8012732:	f001 ffdc 	bl	80146ee <RegionUS915NewChannelReq>
 8012736:	e7f8      	b.n	801272a <RegionNewChannelReq+0x10>

08012738 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8012738:	b508      	push	{r3, lr}
 801273a:	4603      	mov	r3, r0
 801273c:	4608      	mov	r0, r1
    switch( region )
 801273e:	2b05      	cmp	r3, #5
 8012740:	d003      	beq.n	801274a <RegionTxParamSetupReq+0x12>
 8012742:	2b08      	cmp	r3, #8
 8012744:	d004      	beq.n	8012750 <RegionTxParamSetupReq+0x18>
 8012746:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8012748:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 801274a:	f001 f901 	bl	8013950 <RegionEU868TxParamSetupReq>
 801274e:	e7fb      	b.n	8012748 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 8012750:	f001 ffd0 	bl	80146f4 <RegionUS915TxParamSetupReq>
 8012754:	e7f8      	b.n	8012748 <RegionTxParamSetupReq+0x10>

08012756 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8012756:	b508      	push	{r3, lr}
 8012758:	4603      	mov	r3, r0
 801275a:	4608      	mov	r0, r1
    switch( region )
 801275c:	2b05      	cmp	r3, #5
 801275e:	d003      	beq.n	8012768 <RegionDlChannelReq+0x12>
 8012760:	2b08      	cmp	r3, #8
 8012762:	d004      	beq.n	801276e <RegionDlChannelReq+0x18>
 8012764:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8012766:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 8012768:	f001 f8f6 	bl	8013958 <RegionEU868DlChannelReq>
 801276c:	e7fb      	b.n	8012766 <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 801276e:	f001 ffc4 	bl	80146fa <RegionUS915DlChannelReq>
 8012772:	e7f8      	b.n	8012766 <RegionDlChannelReq+0x10>

08012774 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8012774:	b508      	push	{r3, lr}
 8012776:	4603      	mov	r3, r0
 8012778:	4608      	mov	r0, r1
 801277a:	4611      	mov	r1, r2
    switch( region )
 801277c:	2b05      	cmp	r3, #5
 801277e:	d003      	beq.n	8012788 <RegionAlternateDr+0x14>
 8012780:	2b08      	cmp	r3, #8
 8012782:	d004      	beq.n	801278e <RegionAlternateDr+0x1a>
 8012784:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8012786:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 8012788:	f001 f90e 	bl	80139a8 <RegionEU868AlternateDr>
 801278c:	e7fb      	b.n	8012786 <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 801278e:	f001 ffb7 	bl	8014700 <RegionUS915AlternateDr>
 8012792:	e7f8      	b.n	8012786 <RegionAlternateDr+0x12>

08012794 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8012794:	b508      	push	{r3, lr}
 8012796:	4684      	mov	ip, r0
 8012798:	4608      	mov	r0, r1
 801279a:	4611      	mov	r1, r2
 801279c:	461a      	mov	r2, r3
    switch( region )
 801279e:	f1bc 0f05 	cmp.w	ip, #5
 80127a2:	d004      	beq.n	80127ae <RegionNextChannel+0x1a>
 80127a4:	f1bc 0f08 	cmp.w	ip, #8
 80127a8:	d005      	beq.n	80127b6 <RegionNextChannel+0x22>
 80127aa:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 80127ac:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 80127ae:	9b02      	ldr	r3, [sp, #8]
 80127b0:	f001 f8fc 	bl	80139ac <RegionEU868NextChannel>
 80127b4:	e7fa      	b.n	80127ac <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 80127b6:	9b02      	ldr	r3, [sp, #8]
 80127b8:	f001 ffc4 	bl	8014744 <RegionUS915NextChannel>
 80127bc:	e7f6      	b.n	80127ac <RegionNextChannel+0x18>

080127be <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80127be:	b508      	push	{r3, lr}
 80127c0:	4684      	mov	ip, r0
 80127c2:	4608      	mov	r0, r1
 80127c4:	4611      	mov	r1, r2
 80127c6:	461a      	mov	r2, r3
    switch( region )
 80127c8:	f1bc 0f05 	cmp.w	ip, #5
 80127cc:	d004      	beq.n	80127d8 <RegionApplyDrOffset+0x1a>
 80127ce:	f1bc 0f08 	cmp.w	ip, #8
 80127d2:	d004      	beq.n	80127de <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80127d4:	b2c8      	uxtb	r0, r1
 80127d6:	e001      	b.n	80127dc <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 80127d8:	f001 fa56 	bl	8013c88 <RegionEU868ApplyDrOffset>
        }
    }
}
 80127dc:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 80127de:	f002 f85f 	bl	80148a0 <RegionUS915ApplyDrOffset>
 80127e2:	e7fb      	b.n	80127dc <RegionApplyDrOffset+0x1e>

080127e4 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 80127e4:	4800      	ldr	r0, [pc, #0]	; (80127e8 <RegionGetVersion+0x4>)
 80127e6:	4770      	bx	lr
 80127e8:	02010001 	.word	0x02010001

080127ec <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 80127ec:	468c      	mov	ip, r1
 80127ee:	b1a9      	cbz	r1, 801281c <FindAvailable125kHzChannels+0x30>
 80127f0:	b1b2      	cbz	r2, 8012820 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 80127f2:	2300      	movs	r3, #0
 80127f4:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80127f6:	e001      	b.n	80127fc <FindAvailable125kHzChannels+0x10>
 80127f8:	3301      	adds	r3, #1
 80127fa:	b2db      	uxtb	r3, r3
 80127fc:	2b07      	cmp	r3, #7
 80127fe:	d80b      	bhi.n	8012818 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8012800:	fa40 f103 	asr.w	r1, r0, r3
 8012804:	f011 0f01 	tst.w	r1, #1
 8012808:	d0f6      	beq.n	80127f8 <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 801280a:	7811      	ldrb	r1, [r2, #0]
 801280c:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8012810:	7811      	ldrb	r1, [r2, #0]
 8012812:	3101      	adds	r1, #1
 8012814:	7011      	strb	r1, [r2, #0]
 8012816:	e7ef      	b.n	80127f8 <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 8012818:	2000      	movs	r0, #0
 801281a:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801281c:	2003      	movs	r0, #3
 801281e:	4770      	bx	lr
 8012820:	2003      	movs	r0, #3
}
 8012822:	4770      	bx	lr

08012824 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8012824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012826:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8012828:	2300      	movs	r3, #0
 801282a:	9302      	str	r3, [sp, #8]
 801282c:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 801282e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8012832:	2800      	cmp	r0, #0
 8012834:	d03e      	beq.n	80128b4 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 8012836:	460d      	mov	r5, r1
 8012838:	4617      	mov	r7, r2
 801283a:	4606      	mov	r6, r0
 801283c:	2900      	cmp	r1, #0
 801283e:	d03b      	beq.n	80128b8 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 8012840:	2a00      	cmp	r2, #0
 8012842:	d03b      	beq.n	80128bc <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8012844:	780c      	ldrb	r4, [r1, #0]
 8012846:	e017      	b.n	8012878 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8012848:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 801284c:	0a00      	lsrs	r0, r0, #8
 801284e:	e019      	b.n	8012884 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8012850:	3901      	subs	r1, #1
 8012852:	2000      	movs	r0, #0
 8012854:	f002 ff24 	bl	80156a0 <randr>
 8012858:	f100 0310 	add.w	r3, r0, #16
 801285c:	eb0d 0003 	add.w	r0, sp, r3
 8012860:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 8012864:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012868:	703b      	strb	r3, [r7, #0]
 801286a:	e016      	b.n	801289a <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 801286c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012870:	b9cb      	cbnz	r3, 80128a6 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 8012872:	782a      	ldrb	r2, [r5, #0]
 8012874:	42a2      	cmp	r2, r4
 8012876:	d016      	beq.n	80128a6 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8012878:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 801287a:	f014 0f01 	tst.w	r4, #1
 801287e:	d1e3      	bne.n	8012848 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8012880:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8012884:	f10d 0207 	add.w	r2, sp, #7
 8012888:	a902      	add	r1, sp, #8
 801288a:	f7ff ffaf 	bl	80127ec <FindAvailable125kHzChannels>
 801288e:	2803      	cmp	r0, #3
 8012890:	d00b      	beq.n	80128aa <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 8012892:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012896:	2900      	cmp	r1, #0
 8012898:	d1da      	bne.n	8012850 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 801289a:	3401      	adds	r4, #1
 801289c:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 801289e:	2c07      	cmp	r4, #7
 80128a0:	d9e4      	bls.n	801286c <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 80128a2:	2400      	movs	r4, #0
 80128a4:	e7e2      	b.n	801286c <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 80128a6:	b913      	cbnz	r3, 80128ae <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 80128a8:	2003      	movs	r0, #3
}
 80128aa:	b005      	add	sp, #20
 80128ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 80128ae:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 80128b0:	2000      	movs	r0, #0
 80128b2:	e7fa      	b.n	80128aa <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80128b4:	2003      	movs	r0, #3
 80128b6:	e7f8      	b.n	80128aa <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 80128b8:	2003      	movs	r0, #3
 80128ba:	e7f6      	b.n	80128aa <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 80128bc:	2003      	movs	r0, #3
 80128be:	e7f4      	b.n	80128aa <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

080128c0 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 80128c0:	fb02 1000 	mla	r0, r2, r0, r1
 80128c4:	4770      	bx	lr

080128c6 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80128c6:	b082      	sub	sp, #8
 80128c8:	f10d 0c08 	add.w	ip, sp, #8
 80128cc:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 80128d0:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 80128d2:	b971      	cbnz	r1, 80128f2 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80128d4:	4613      	mov	r3, r2
 80128d6:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 80128da:	d306      	bcc.n	80128ea <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80128dc:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80128e0:	4293      	cmp	r3, r2
 80128e2:	d80a      	bhi.n	80128fa <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80128e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80128e8:	e000      	b.n	80128ec <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80128ea:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80128ec:	4298      	cmp	r0, r3
 80128ee:	bf38      	it	cc
 80128f0:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80128f2:	b900      	cbnz	r0, 80128f6 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 80128f4:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 80128f6:	b002      	add	sp, #8
 80128f8:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80128fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80128fe:	e7f5      	b.n	80128ec <GetDutyCycle+0x26>

08012900 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8012900:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 8012902:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 8012904:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 8012906:	e001      	b.n	801290c <CountChannels+0xc>
 8012908:	3301      	adds	r3, #1
 801290a:	b2db      	uxtb	r3, r3
 801290c:	428b      	cmp	r3, r1
 801290e:	d207      	bcs.n	8012920 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8012910:	2201      	movs	r2, #1
 8012912:	409a      	lsls	r2, r3
 8012914:	ea32 020c 	bics.w	r2, r2, ip
 8012918:	d1f6      	bne.n	8012908 <CountChannels+0x8>
        {
            nbActiveBits++;
 801291a:	3001      	adds	r0, #1
 801291c:	b2c0      	uxtb	r0, r0
 801291e:	e7f3      	b.n	8012908 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 8012920:	4770      	bx	lr
	...

08012924 <SetMaxTimeCredits>:
{
 8012924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012928:	b089      	sub	sp, #36	; 0x24
 801292a:	4604      	mov	r4, r0
 801292c:	460e      	mov	r6, r1
 801292e:	ad02      	add	r5, sp, #8
 8012930:	e885 000c 	stmia.w	r5, {r2, r3}
 8012934:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 8012938:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801293c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012940:	f005 f802 	bl	8017948 <SysTimeToMs>
 8012944:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 8012946:	2300      	movs	r3, #0
 8012948:	9304      	str	r3, [sp, #16]
 801294a:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801294c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012950:	4631      	mov	r1, r6
 8012952:	4620      	mov	r0, r4
 8012954:	f7ff ffb7 	bl	80128c6 <GetDutyCycle>
 8012958:	4605      	mov	r5, r0
    if( joined == false )
 801295a:	2e00      	cmp	r6, #0
 801295c:	d14c      	bne.n	80129f8 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 801295e:	2864      	cmp	r0, #100	; 0x64
 8012960:	d025      	beq.n	80129ae <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8012962:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8012966:	d025      	beq.n	80129b4 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8012968:	4e27      	ldr	r6, [pc, #156]	; (8012a08 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801296a:	68a1      	ldr	r1, [r4, #8]
 801296c:	a806      	add	r0, sp, #24
 801296e:	f005 f80b 	bl	8017988 <SysTimeFromMs>
 8012972:	9b07      	ldr	r3, [sp, #28]
 8012974:	9300      	str	r3, [sp, #0]
 8012976:	9b06      	ldr	r3, [sp, #24]
 8012978:	aa02      	add	r2, sp, #8
 801297a:	ca06      	ldmia	r2, {r1, r2}
 801297c:	a804      	add	r0, sp, #16
 801297e:	f004 ff6a 	bl	8017856 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8012982:	f1b8 0f00 	cmp.w	r8, #0
 8012986:	d102      	bne.n	801298e <SetMaxTimeCredits+0x6a>
 8012988:	f1b9 0f00 	cmp.w	r9, #0
 801298c:	d002      	beq.n	8012994 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 801298e:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8012990:	42b3      	cmp	r3, r6
 8012992:	d012      	beq.n	80129ba <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 8012994:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8012996:	9b02      	ldr	r3, [sp, #8]
 8012998:	4a1c      	ldr	r2, [pc, #112]	; (8012a0c <SetMaxTimeCredits+0xe8>)
 801299a:	4293      	cmp	r3, r2
 801299c:	d812      	bhi.n	80129c4 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 801299e:	6863      	ldr	r3, [r4, #4]
 80129a0:	b903      	cbnz	r3, 80129a4 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 80129a2:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 80129a4:	6126      	str	r6, [r4, #16]
}
 80129a6:	4628      	mov	r0, r5
 80129a8:	b009      	add	sp, #36	; 0x24
 80129aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 80129ae:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80129b0:	4e17      	ldr	r6, [pc, #92]	; (8012a10 <SetMaxTimeCredits+0xec>)
 80129b2:	e7da      	b.n	801296a <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 80129b4:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80129b6:	4e17      	ldr	r6, [pc, #92]	; (8012a14 <SetMaxTimeCredits+0xf0>)
 80129b8:	e7d7      	b.n	801296a <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 80129ba:	9a04      	ldr	r2, [sp, #16]
 80129bc:	4b16      	ldr	r3, [pc, #88]	; (8012a18 <SetMaxTimeCredits+0xf4>)
 80129be:	429a      	cmp	r2, r3
 80129c0:	d9ed      	bls.n	801299e <SetMaxTimeCredits+0x7a>
 80129c2:	e7e7      	b.n	8012994 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80129c4:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80129c8:	3b30      	subs	r3, #48	; 0x30
 80129ca:	4a14      	ldr	r2, [pc, #80]	; (8012a1c <SetMaxTimeCredits+0xf8>)
 80129cc:	fba2 2303 	umull	r2, r3, r2, r3
 80129d0:	0c1b      	lsrs	r3, r3, #16
 80129d2:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80129d4:	4a12      	ldr	r2, [pc, #72]	; (8012a20 <SetMaxTimeCredits+0xfc>)
 80129d6:	fb02 f303 	mul.w	r3, r2, r3
 80129da:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80129dc:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80129e0:	3330      	adds	r3, #48	; 0x30
 80129e2:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 80129e4:	2300      	movs	r3, #0
 80129e6:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80129ea:	ab04      	add	r3, sp, #16
 80129ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80129f0:	f004 ffaa 	bl	8017948 <SysTimeToMs>
 80129f4:	60a0      	str	r0, [r4, #8]
 80129f6:	e7d2      	b.n	801299e <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 80129f8:	f1b8 0f00 	cmp.w	r8, #0
 80129fc:	d102      	bne.n	8012a04 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 80129fe:	4e04      	ldr	r6, [pc, #16]	; (8012a10 <SetMaxTimeCredits+0xec>)
 8012a00:	60e6      	str	r6, [r4, #12]
 8012a02:	e7cc      	b.n	801299e <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8012a04:	4e02      	ldr	r6, [pc, #8]	; (8012a10 <SetMaxTimeCredits+0xec>)
 8012a06:	e7ca      	b.n	801299e <SetMaxTimeCredits+0x7a>
 8012a08:	02932e00 	.word	0x02932e00
 8012a0c:	0001ec2f 	.word	0x0001ec2f
 8012a10:	001b7740 	.word	0x001b7740
 8012a14:	0112a880 	.word	0x0112a880
 8012a18:	0001517f 	.word	0x0001517f
 8012a1c:	c22e4507 	.word	0xc22e4507
 8012a20:	00015180 	.word	0x00015180

08012a24 <UpdateTimeCredits>:
{
 8012a24:	b570      	push	{r4, r5, r6, lr}
 8012a26:	b082      	sub	sp, #8
 8012a28:	4604      	mov	r4, r0
 8012a2a:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8012a2c:	9301      	str	r3, [sp, #4]
 8012a2e:	9200      	str	r2, [sp, #0]
 8012a30:	ab06      	add	r3, sp, #24
 8012a32:	cb0c      	ldmia	r3, {r2, r3}
 8012a34:	f7ff ff76 	bl	8012924 <SetMaxTimeCredits>
 8012a38:	4605      	mov	r5, r0
    if( joined == true )
 8012a3a:	b94e      	cbnz	r6, 8012a50 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 8012a3c:	68e2      	ldr	r2, [r4, #12]
 8012a3e:	6923      	ldr	r3, [r4, #16]
 8012a40:	429a      	cmp	r2, r3
 8012a42:	d900      	bls.n	8012a46 <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 8012a44:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 8012a46:	9b08      	ldr	r3, [sp, #32]
 8012a48:	6063      	str	r3, [r4, #4]
}
 8012a4a:	4628      	mov	r0, r5
 8012a4c:	b002      	add	sp, #8
 8012a4e:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8012a50:	6860      	ldr	r0, [r4, #4]
 8012a52:	f004 fff9 	bl	8017a48 <UTIL_TIMER_GetElapsedTime>
 8012a56:	68e3      	ldr	r3, [r4, #12]
 8012a58:	4403      	add	r3, r0
 8012a5a:	60e3      	str	r3, [r4, #12]
 8012a5c:	e7ee      	b.n	8012a3c <UpdateTimeCredits+0x18>

08012a5e <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 8012a5e:	4288      	cmp	r0, r1
 8012a60:	db03      	blt.n	8012a6a <RegionCommonValueInRange+0xc>
 8012a62:	4290      	cmp	r0, r2
 8012a64:	dd03      	ble.n	8012a6e <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 8012a66:	2000      	movs	r0, #0
 8012a68:	4770      	bx	lr
 8012a6a:	2000      	movs	r0, #0
 8012a6c:	4770      	bx	lr
        return 1;
 8012a6e:	2001      	movs	r0, #1
}
 8012a70:	4770      	bx	lr

08012a72 <RegionCommonChanVerifyDr>:
{
 8012a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a76:	4682      	mov	sl, r0
 8012a78:	460e      	mov	r6, r1
 8012a7a:	4690      	mov	r8, r2
 8012a7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8012a80:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 8012a84:	4619      	mov	r1, r3
 8012a86:	4640      	mov	r0, r8
 8012a88:	f7ff ffe9 	bl	8012a5e <RegionCommonValueInRange>
 8012a8c:	b338      	cbz	r0, 8012ade <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8012a8e:	2500      	movs	r5, #0
 8012a90:	462f      	mov	r7, r5
 8012a92:	e01e      	b.n	8012ad2 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 8012a94:	3401      	adds	r4, #1
 8012a96:	b2e4      	uxtb	r4, r4
 8012a98:	2c0f      	cmp	r4, #15
 8012a9a:	d816      	bhi.n	8012aca <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8012a9c:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 8012aa0:	4123      	asrs	r3, r4
 8012aa2:	f013 0f01 	tst.w	r3, #1
 8012aa6:	d0f5      	beq.n	8012a94 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8012aa8:	193b      	adds	r3, r7, r4
 8012aaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012aae:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8012ab2:	7a19      	ldrb	r1, [r3, #8]
 8012ab4:	090a      	lsrs	r2, r1, #4
 8012ab6:	f001 010f 	and.w	r1, r1, #15
 8012aba:	4640      	mov	r0, r8
 8012abc:	f7ff ffcf 	bl	8012a5e <RegionCommonValueInRange>
 8012ac0:	2801      	cmp	r0, #1
 8012ac2:	d1e7      	bne.n	8012a94 <RegionCommonChanVerifyDr+0x22>
                    return true;
 8012ac4:	2001      	movs	r0, #1
}
 8012ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8012aca:	3710      	adds	r7, #16
 8012acc:	b2ff      	uxtb	r7, r7
 8012ace:	3501      	adds	r5, #1
 8012ad0:	b2ed      	uxtb	r5, r5
 8012ad2:	4557      	cmp	r7, sl
 8012ad4:	d201      	bcs.n	8012ada <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 8012ad6:	2400      	movs	r4, #0
 8012ad8:	e7de      	b.n	8012a98 <RegionCommonChanVerifyDr+0x26>
    return false;
 8012ada:	2000      	movs	r0, #0
 8012adc:	e7f3      	b.n	8012ac6 <RegionCommonChanVerifyDr+0x54>
        return false;
 8012ade:	2000      	movs	r0, #0
 8012ae0:	e7f1      	b.n	8012ac6 <RegionCommonChanVerifyDr+0x54>

08012ae2 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 8012ae2:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8012ae6:	0913      	lsrs	r3, r2, #4
 8012ae8:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 8012aec:	d30e      	bcc.n	8012b0c <RegionCommonChanDisable+0x2a>
 8012aee:	4291      	cmp	r1, r2
 8012af0:	d20e      	bcs.n	8012b10 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8012af2:	f001 010f 	and.w	r1, r1, #15
 8012af6:	2301      	movs	r3, #1
 8012af8:	fa03 f101 	lsl.w	r1, r3, r1
 8012afc:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 8012b00:	ea22 0101 	bic.w	r1, r2, r1
 8012b04:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 8012b08:	4618      	mov	r0, r3
 8012b0a:	4770      	bx	lr
        return false;
 8012b0c:	2000      	movs	r0, #0
 8012b0e:	4770      	bx	lr
 8012b10:	2000      	movs	r0, #0
}
 8012b12:	4770      	bx	lr

08012b14 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8012b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 8012b16:	b188      	cbz	r0, 8012b3c <RegionCommonCountChannels+0x28>
 8012b18:	460c      	mov	r4, r1
 8012b1a:	4616      	mov	r6, r2
 8012b1c:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 8012b1e:	2500      	movs	r5, #0
 8012b20:	e008      	b.n	8012b34 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8012b22:	2110      	movs	r1, #16
 8012b24:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8012b28:	f7ff feea 	bl	8012900 <CountChannels>
 8012b2c:	4405      	add	r5, r0
 8012b2e:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8012b30:	3401      	adds	r4, #1
 8012b32:	b2e4      	uxtb	r4, r4
 8012b34:	42b4      	cmp	r4, r6
 8012b36:	d3f4      	bcc.n	8012b22 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 8012b38:	4628      	mov	r0, r5
 8012b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8012b3c:	2500      	movs	r5, #0
 8012b3e:	e7fb      	b.n	8012b38 <RegionCommonCountChannels+0x24>

08012b40 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8012b40:	4684      	mov	ip, r0
 8012b42:	b158      	cbz	r0, 8012b5c <RegionCommonChanMaskCopy+0x1c>
 8012b44:	b109      	cbz	r1, 8012b4a <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 8012b46:	2300      	movs	r3, #0
 8012b48:	e006      	b.n	8012b58 <RegionCommonChanMaskCopy+0x18>
 8012b4a:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8012b4c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8012b50:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 8012b54:	3301      	adds	r3, #1
 8012b56:	b2db      	uxtb	r3, r3
 8012b58:	4293      	cmp	r3, r2
 8012b5a:	d3f7      	bcc.n	8012b4c <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 8012b5c:	4770      	bx	lr

08012b5e <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8012b5e:	b082      	sub	sp, #8
 8012b60:	b538      	push	{r3, r4, r5, lr}
 8012b62:	4604      	mov	r4, r0
 8012b64:	460d      	mov	r5, r1
 8012b66:	4611      	mov	r1, r2
 8012b68:	aa04      	add	r2, sp, #16
 8012b6a:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8012b6e:	ca0c      	ldmia	r2, {r2, r3}
 8012b70:	f7ff fea9 	bl	80128c6 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8012b74:	68e3      	ldr	r3, [r4, #12]
 8012b76:	fb05 f000 	mul.w	r0, r5, r0
 8012b7a:	4283      	cmp	r3, r0
 8012b7c:	d905      	bls.n	8012b8a <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8012b7e:	1a18      	subs	r0, r3, r0
 8012b80:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8012b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b86:	b002      	add	sp, #8
 8012b88:	4770      	bx	lr
        band->TimeCredits = 0;
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	60e3      	str	r3, [r4, #12]
}
 8012b8e:	e7f8      	b.n	8012b82 <RegionCommonSetBandTxDone+0x24>

08012b90 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8012b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b94:	b089      	sub	sp, #36	; 0x24
 8012b96:	4607      	mov	r7, r0
 8012b98:	468b      	mov	fp, r1
 8012b9a:	4691      	mov	r9, r2
 8012b9c:	4698      	mov	r8, r3
 8012b9e:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8012ba2:	f004 ff47 	bl	8017a34 <UTIL_TIMER_GetCurrentTime>
 8012ba6:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 8012ba8:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 8012baa:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8012bac:	f04f 33ff 	mov.w	r3, #4294967295
 8012bb0:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 8012bb2:	e005      	b.n	8012bc0 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8012bb8:	441e      	add	r6, r3
 8012bba:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 8012bbc:	3401      	adds	r4, #1
 8012bbe:	b2e4      	uxtb	r4, r4
 8012bc0:	454c      	cmp	r4, r9
 8012bc2:	d25d      	bcs.n	8012c80 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8012bc4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8012bc8:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8012bcc:	9b04      	ldr	r3, [sp, #16]
 8012bce:	9302      	str	r3, [sp, #8]
 8012bd0:	ab13      	add	r3, sp, #76	; 0x4c
 8012bd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012bd6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012bda:	4653      	mov	r3, sl
 8012bdc:	4642      	mov	r2, r8
 8012bde:	4639      	mov	r1, r7
 8012be0:	4628      	mov	r0, r5
 8012be2:	f7ff ff1f 	bl	8012a24 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 8012be6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012be8:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8012bec:	68ea      	ldr	r2, [r5, #12]
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	d8e0      	bhi.n	8012bb4 <RegionCommonUpdateBandTimeOff+0x24>
 8012bf2:	f1b8 0f00 	cmp.w	r8, #0
 8012bf6:	d101      	bne.n	8012bfc <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8012bf8:	2f00      	cmp	r7, #0
 8012bfa:	d1db      	bne.n	8012bb4 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8012bfc:	2100      	movs	r1, #0
 8012bfe:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8012c00:	6929      	ldr	r1, [r5, #16]
 8012c02:	4299      	cmp	r1, r3
 8012c04:	d907      	bls.n	8012c16 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8012c06:	1a9b      	subs	r3, r3, r2
 8012c08:	9a05      	ldr	r2, [sp, #20]
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	bf28      	it	cs
 8012c0e:	461a      	movcs	r2, r3
 8012c10:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8012c12:	3601      	adds	r6, #1
 8012c14:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8012c16:	2f00      	cmp	r7, #0
 8012c18:	d1d0      	bne.n	8012bbc <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	9306      	str	r3, [sp, #24]
 8012c1e:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8012c22:	2864      	cmp	r0, #100	; 0x64
 8012c24:	d024      	beq.n	8012c70 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8012c26:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8012c2a:	d025      	beq.n	8012c78 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8012c2c:	4b19      	ldr	r3, [pc, #100]	; (8012c94 <RegionCommonUpdateBandTimeOff+0x104>)
 8012c2e:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8012c30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012c32:	4a18      	ldr	r2, [pc, #96]	; (8012c94 <RegionCommonUpdateBandTimeOff+0x104>)
 8012c34:	4293      	cmp	r3, r2
 8012c36:	d90c      	bls.n	8012c52 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8012c38:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8012c3c:	3b30      	subs	r3, #48	; 0x30
 8012c3e:	4a16      	ldr	r2, [pc, #88]	; (8012c98 <RegionCommonUpdateBandTimeOff+0x108>)
 8012c40:	fba2 2303 	umull	r2, r3, r2, r3
 8012c44:	0c1b      	lsrs	r3, r3, #16
 8012c46:	4a15      	ldr	r2, [pc, #84]	; (8012c9c <RegionCommonUpdateBandTimeOff+0x10c>)
 8012c48:	fb03 2202 	mla	r2, r3, r2, r2
 8012c4c:	9b06      	ldr	r3, [sp, #24]
 8012c4e:	4413      	add	r3, r2
 8012c50:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8012c52:	ad06      	add	r5, sp, #24
 8012c54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012c56:	9300      	str	r3, [sp, #0]
 8012c58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012c5a:	e895 0006 	ldmia.w	r5, {r1, r2}
 8012c5e:	4628      	mov	r0, r5
 8012c60:	f004 fdf9 	bl	8017856 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8012c64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012c68:	f004 fe6e 	bl	8017948 <SysTimeToMs>
 8012c6c:	9005      	str	r0, [sp, #20]
 8012c6e:	e7a5      	b.n	8012bbc <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8012c70:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8012c74:	9306      	str	r3, [sp, #24]
 8012c76:	e7db      	b.n	8012c30 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8012c78:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8012c7c:	9306      	str	r3, [sp, #24]
 8012c7e:	e7d7      	b.n	8012c30 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 8012c80:	b11e      	cbz	r6, 8012c8a <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 8012c82:	9805      	ldr	r0, [sp, #20]
 8012c84:	b009      	add	sp, #36	; 0x24
 8012c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 8012c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8012c8e:	9305      	str	r3, [sp, #20]
 8012c90:	e7f7      	b.n	8012c82 <RegionCommonUpdateBandTimeOff+0xf2>
 8012c92:	bf00      	nop
 8012c94:	0001ec30 	.word	0x0001ec30
 8012c98:	c22e4507 	.word	0xc22e4507
 8012c9c:	00015180 	.word	0x00015180

08012ca0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8012ca0:	7803      	ldrb	r3, [r0, #0]
 8012ca2:	2b03      	cmp	r3, #3
 8012ca4:	d001      	beq.n	8012caa <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 8012ca6:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 8012ca8:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 8012caa:	7842      	ldrb	r2, [r0, #1]
 8012cac:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012cb0:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8012cb2:	f003 030f 	and.w	r3, r3, #15
 8012cb6:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8012cb8:	0913      	lsrs	r3, r2, #4
 8012cba:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8012cbc:	7883      	ldrb	r3, [r0, #2]
 8012cbe:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8012cc0:	78c2      	ldrb	r2, [r0, #3]
 8012cc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8012cc6:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 8012cc8:	7903      	ldrb	r3, [r0, #4]
 8012cca:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8012ccc:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8012cd0:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 8012cd2:	f003 030f 	and.w	r3, r3, #15
 8012cd6:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 8012cd8:	2005      	movs	r0, #5
 8012cda:	4770      	bx	lr

08012cdc <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8012cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce0:	b085      	sub	sp, #20
 8012ce2:	4604      	mov	r4, r0
 8012ce4:	4688      	mov	r8, r1
 8012ce6:	4617      	mov	r7, r2
 8012ce8:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 8012cea:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 8012cec:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 8012cf0:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 8012cf4:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8012cf8:	7943      	ldrb	r3, [r0, #5]
 8012cfa:	b92b      	cbnz	r3, 8012d08 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8012cfc:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 8012d00:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 8012d04:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 8012d08:	b355      	cbz	r5, 8012d60 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8012d0a:	f1ba 0f0f 	cmp.w	sl, #15
 8012d0e:	d114      	bne.n	8012d3a <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8012d10:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 8012d14:	f1b9 0f0f 	cmp.w	r9, #15
 8012d18:	d020      	beq.n	8012d5c <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8012d1a:	f994 301d 	ldrsb.w	r3, [r4, #29]
 8012d1e:	9303      	str	r3, [sp, #12]
 8012d20:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8012d24:	461c      	mov	r4, r3
 8012d26:	4619      	mov	r1, r3
 8012d28:	4648      	mov	r0, r9
 8012d2a:	f7ff fe98 	bl	8012a5e <RegionCommonValueInRange>
 8012d2e:	b9b8      	cbnz	r0, 8012d60 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8012d30:	454c      	cmp	r4, r9
 8012d32:	dc21      	bgt.n	8012d78 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8012d34:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 8012d38:	e012      	b.n	8012d60 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8012d3a:	69a3      	ldr	r3, [r4, #24]
 8012d3c:	9301      	str	r3, [sp, #4]
 8012d3e:	f994 3015 	ldrsb.w	r3, [r4, #21]
 8012d42:	9300      	str	r3, [sp, #0]
 8012d44:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8012d48:	4652      	mov	r2, sl
 8012d4a:	6921      	ldr	r1, [r4, #16]
 8012d4c:	7b20      	ldrb	r0, [r4, #12]
 8012d4e:	f7ff fe90 	bl	8012a72 <RegionCommonChanVerifyDr>
 8012d52:	2800      	cmp	r0, #0
 8012d54:	d1de      	bne.n	8012d14 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 8012d56:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8012d5a:	e7db      	b.n	8012d14 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 8012d5c:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8012d60:	2d07      	cmp	r5, #7
 8012d62:	d00c      	beq.n	8012d7e <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 8012d64:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 8012d68:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 8012d6c:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 8012d70:	4628      	mov	r0, r5
 8012d72:	b005      	add	sp, #20
 8012d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 8012d78:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012d7c:	e7f0      	b.n	8012d60 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 8012d7e:	f1bb 0f00 	cmp.w	fp, #0
 8012d82:	d1ef      	bne.n	8012d64 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 8012d84:	f04f 0b01 	mov.w	fp, #1
 8012d88:	e7ec      	b.n	8012d64 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

08012d8c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8012d8c:	4b02      	ldr	r3, [pc, #8]	; (8012d98 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 8012d8e:	fa03 f000 	lsl.w	r0, r3, r0
}
 8012d92:	fbb0 f0f1 	udiv	r0, r0, r1
 8012d96:	4770      	bx	lr
 8012d98:	000f4240 	.word	0x000f4240

08012d9c <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 8012d9c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8012da0:	fbb3 f0f0 	udiv	r0, r3, r0
 8012da4:	4770      	bx	lr
	...

08012da8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8012da8:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8012daa:	f1a1 0c04 	sub.w	ip, r1, #4
 8012dae:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 8012db2:	fb0e f202 	mul.w	r2, lr, r2
 8012db6:	fb00 220c 	mla	r2, r0, ip, r2
 8012dba:	0052      	lsls	r2, r2, #1
 8012dbc:	d021      	beq.n	8012e02 <RegionCommonComputeRxWindowParameters+0x5a>
 8012dbe:	4402      	add	r2, r0
 8012dc0:	3a01      	subs	r2, #1
 8012dc2:	fbb2 f2f0 	udiv	r2, r2, r0
 8012dc6:	4291      	cmp	r1, r2
 8012dc8:	bf38      	it	cc
 8012dca:	4611      	movcc	r1, r2
 8012dcc:	9a01      	ldr	r2, [sp, #4]
 8012dce:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8012dd0:	0082      	lsls	r2, r0, #2
 8012dd2:	fb00 f101 	mul.w	r1, r0, r1
 8012dd6:	b1b9      	cbz	r1, 8012e08 <RegionCommonComputeRxWindowParameters+0x60>
 8012dd8:	3101      	adds	r1, #1
 8012dda:	0849      	lsrs	r1, r1, #1
 8012ddc:	1a51      	subs	r1, r2, r1
 8012dde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012de2:	fb02 1313 	mls	r3, r2, r3, r1
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	dd10      	ble.n	8012e0c <RegionCommonComputeRxWindowParameters+0x64>
 8012dea:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8012dee:	4a0b      	ldr	r2, [pc, #44]	; (8012e1c <RegionCommonComputeRxWindowParameters+0x74>)
 8012df0:	fb82 1203 	smull	r1, r2, r2, r3
 8012df4:	17db      	asrs	r3, r3, #31
 8012df6:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8012dfa:	9a02      	ldr	r2, [sp, #8]
 8012dfc:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8012dfe:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8012e02:	fbb2 f2f0 	udiv	r2, r2, r0
 8012e06:	e7de      	b.n	8012dc6 <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8012e08:	0849      	lsrs	r1, r1, #1
 8012e0a:	e7e7      	b.n	8012ddc <RegionCommonComputeRxWindowParameters+0x34>
 8012e0c:	4a03      	ldr	r2, [pc, #12]	; (8012e1c <RegionCommonComputeRxWindowParameters+0x74>)
 8012e0e:	fb82 1203 	smull	r1, r2, r2, r3
 8012e12:	17db      	asrs	r3, r3, #31
 8012e14:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8012e18:	e7ef      	b.n	8012dfa <RegionCommonComputeRxWindowParameters+0x52>
 8012e1a:	bf00      	nop
 8012e1c:	10624dd3 	.word	0x10624dd3

08012e20 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8012e20:	b538      	push	{r3, r4, r5, lr}
 8012e22:	460d      	mov	r5, r1
 8012e24:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8012e26:	0040      	lsls	r0, r0, #1
 8012e28:	f7ee f820 	bl	8000e6c <__aeabi_ui2f>
 8012e2c:	4601      	mov	r1, r0
 8012e2e:	4628      	mov	r0, r5
 8012e30:	f7ed ff6a 	bl	8000d08 <__aeabi_fsub>
 8012e34:	4621      	mov	r1, r4
 8012e36:	f7ed ff67 	bl	8000d08 <__aeabi_fsub>
 8012e3a:	f7ed fc11 	bl	8000660 <__aeabi_f2d>
 8012e3e:	f008 f933 	bl	801b0a8 <floor>
 8012e42:	f7ed ff15 	bl	8000c70 <__aeabi_d2iz>

    return phyTxPower;
}
 8012e46:	b240      	sxtb	r0, r0
 8012e48:	bd38      	pop	{r3, r4, r5, pc}

08012e4a <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8012e4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e4e:	b083      	sub	sp, #12
 8012e50:	4605      	mov	r5, r0
 8012e52:	468b      	mov	fp, r1
 8012e54:	9200      	str	r2, [sp, #0]
 8012e56:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8012e58:	2600      	movs	r6, #0
 8012e5a:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 8012e5c:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 8012e5e:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8012e60:	e04a      	b.n	8012ef8 <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8012e62:	7a3a      	ldrb	r2, [r7, #8]
 8012e64:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8012e68:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8012e6c:	b252      	sxtb	r2, r2
 8012e6e:	b249      	sxtb	r1, r1
 8012e70:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8012e74:	f7ff fdf3 	bl	8012a5e <RegionCommonValueInRange>
 8012e78:	b178      	cbz	r0, 8012e9a <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8012e7a:	68ea      	ldr	r2, [r5, #12]
 8012e7c:	7a7b      	ldrb	r3, [r7, #9]
 8012e7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012e82:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012e86:	7d1b      	ldrb	r3, [r3, #20]
 8012e88:	b35b      	cbz	r3, 8012ee2 <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 8012e8a:	f109 0301 	add.w	r3, r9, #1
 8012e8e:	eb08 0204 	add.w	r2, r8, r4
 8012e92:	f80b 2009 	strb.w	r2, [fp, r9]
 8012e96:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 8012e9a:	3401      	adds	r4, #1
 8012e9c:	b2e4      	uxtb	r4, r4
 8012e9e:	2c0f      	cmp	r4, #15
 8012ea0:	d824      	bhi.n	8012eec <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8012ea2:	686b      	ldr	r3, [r5, #4]
 8012ea4:	0072      	lsls	r2, r6, #1
 8012ea6:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8012eaa:	4123      	asrs	r3, r4
 8012eac:	f013 0f01 	tst.w	r3, #1
 8012eb0:	d0f3      	beq.n	8012e9a <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8012eb2:	68a8      	ldr	r0, [r5, #8]
 8012eb4:	eb08 0304 	add.w	r3, r8, r4
 8012eb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012ebc:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 8012ec0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d0e8      	beq.n	8012e9a <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8012ec8:	782b      	ldrb	r3, [r5, #0]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d1c9      	bne.n	8012e62 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8012ece:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d0c6      	beq.n	8012e62 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8012ed4:	5a9b      	ldrh	r3, [r3, r2]
 8012ed6:	fa43 f104 	asr.w	r1, r3, r4
 8012eda:	f011 0f01 	tst.w	r1, #1
 8012ede:	d1c0      	bne.n	8012e62 <RegionCommonCountNbOfEnabledChannels+0x18>
 8012ee0:	e7db      	b.n	8012e9a <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 8012ee2:	f10a 0a01 	add.w	sl, sl, #1
 8012ee6:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 8012eea:	e7d6      	b.n	8012e9a <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8012eec:	f108 0810 	add.w	r8, r8, #16
 8012ef0:	fa5f f888 	uxtb.w	r8, r8
 8012ef4:	3601      	adds	r6, #1
 8012ef6:	b2f6      	uxtb	r6, r6
 8012ef8:	fa1f f388 	uxth.w	r3, r8
 8012efc:	8a2a      	ldrh	r2, [r5, #16]
 8012efe:	4293      	cmp	r3, r2
 8012f00:	d201      	bcs.n	8012f06 <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 8012f02:	2400      	movs	r4, #0
 8012f04:	e7cb      	b.n	8012e9e <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8012f06:	9b00      	ldr	r3, [sp, #0]
 8012f08:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8012f0c:	9b01      	ldr	r3, [sp, #4]
 8012f0e:	f883 a000 	strb.w	sl, [r3]
}
 8012f12:	b003      	add	sp, #12
 8012f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012f18 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8012f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f1c:	b085      	sub	sp, #20
 8012f1e:	4604      	mov	r4, r0
 8012f20:	460f      	mov	r7, r1
 8012f22:	4616      	mov	r6, r2
 8012f24:	461d      	mov	r5, r3
 8012f26:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8012f2a:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8012f2e:	6840      	ldr	r0, [r0, #4]
 8012f30:	f004 fd8a 	bl	8017a48 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8012f34:	6823      	ldr	r3, [r4, #0]
 8012f36:	1a1b      	subs	r3, r3, r0
 8012f38:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 8012f42:	2300      	movs	r3, #0
 8012f44:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8012f46:	6863      	ldr	r3, [r4, #4]
 8012f48:	b113      	cbz	r3, 8012f50 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8012f4a:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8012f4c:	4283      	cmp	r3, r0
 8012f4e:	d81e      	bhi.n	8012f8e <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8012f50:	2300      	movs	r3, #0
 8012f52:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8012f54:	69e3      	ldr	r3, [r4, #28]
 8012f56:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8012f5a:	781f      	ldrb	r7, [r3, #0]
 8012f5c:	69a3      	ldr	r3, [r4, #24]
 8012f5e:	9303      	str	r3, [sp, #12]
 8012f60:	ab01      	add	r3, sp, #4
 8012f62:	f104 020c 	add.w	r2, r4, #12
 8012f66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012f6a:	e883 0003 	stmia.w	r3, {r0, r1}
 8012f6e:	7d23      	ldrb	r3, [r4, #20]
 8012f70:	9300      	str	r3, [sp, #0]
 8012f72:	7a23      	ldrb	r3, [r4, #8]
 8012f74:	7a62      	ldrb	r2, [r4, #9]
 8012f76:	4661      	mov	r1, ip
 8012f78:	4638      	mov	r0, r7
 8012f7a:	f7ff fe09 	bl	8012b90 <RegionCommonUpdateBandTimeOff>
 8012f7e:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8012f82:	4643      	mov	r3, r8
 8012f84:	462a      	mov	r2, r5
 8012f86:	4631      	mov	r1, r6
 8012f88:	69e0      	ldr	r0, [r4, #28]
 8012f8a:	f7ff ff5e 	bl	8012e4a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8012f8e:	782b      	ldrb	r3, [r5, #0]
 8012f90:	b923      	cbnz	r3, 8012f9c <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 8012f92:	f898 3000 	ldrb.w	r3, [r8]
 8012f96:	b13b      	cbz	r3, 8012fa8 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8012f98:	200b      	movs	r0, #11
 8012f9a:	e002      	b.n	8012fa2 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 8012f9c:	2000      	movs	r0, #0
 8012f9e:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 8012fa2:	b005      	add	sp, #20
 8012fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8012fa8:	200c      	movs	r0, #12
 8012faa:	e7fa      	b.n	8012fa2 <RegionCommonIdentifyChannels+0x8a>

08012fac <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8012fac:	b570      	push	{r4, r5, r6, lr}
 8012fae:	b082      	sub	sp, #8
 8012fb0:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 8012fb2:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 8012fb6:	f990 6002 	ldrsb.w	r6, [r0, #2]
 8012fba:	42a6      	cmp	r6, r4
 8012fbc:	d011      	beq.n	8012fe2 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8012fbe:	3c01      	subs	r4, #1
 8012fc0:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8012fc2:	42a6      	cmp	r6, r4
 8012fc4:	d00e      	beq.n	8012fe4 <RegionCommonGetNextLowerTxDr+0x38>
 8012fc6:	68ab      	ldr	r3, [r5, #8]
 8012fc8:	9301      	str	r3, [sp, #4]
 8012fca:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8012fce:	9300      	str	r3, [sp, #0]
 8012fd0:	4633      	mov	r3, r6
 8012fd2:	4622      	mov	r2, r4
 8012fd4:	6869      	ldr	r1, [r5, #4]
 8012fd6:	78e8      	ldrb	r0, [r5, #3]
 8012fd8:	f7ff fd4b 	bl	8012a72 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 8012fdc:	2800      	cmp	r0, #0
 8012fde:	d0ee      	beq.n	8012fbe <RegionCommonGetNextLowerTxDr+0x12>
 8012fe0:	e000      	b.n	8012fe4 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 8012fe2:	4634      	mov	r4, r6

        return drLocal;
    }
}
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	b002      	add	sp, #8
 8012fe8:	bd70      	pop	{r4, r5, r6, pc}

08012fea <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 8012fea:	4288      	cmp	r0, r1
 8012fec:	bfb8      	it	lt
 8012fee:	4608      	movlt	r0, r1
 8012ff0:	4770      	bx	lr
	...

08012ff4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 8012ff4:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 8012ff8:	4a05      	ldr	r2, [pc, #20]	; (8013010 <RegionCommonGetBandwidth+0x1c>)
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	d004      	beq.n	8013008 <RegionCommonGetBandwidth+0x14>
 8012ffe:	4a05      	ldr	r2, [pc, #20]	; (8013014 <RegionCommonGetBandwidth+0x20>)
 8013000:	4293      	cmp	r3, r2
 8013002:	d103      	bne.n	801300c <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 8013004:	2002      	movs	r0, #2
 8013006:	4770      	bx	lr
            return 1;
 8013008:	2001      	movs	r0, #1
 801300a:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 801300c:	2000      	movs	r0, #0
    }
}
 801300e:	4770      	bx	lr
 8013010:	0003d090 	.word	0x0003d090
 8013014:	0007a120 	.word	0x0007a120

08013018 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8013018:	b500      	push	{lr}
 801301a:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 801301c:	2805      	cmp	r0, #5
 801301e:	d80e      	bhi.n	801303e <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8013020:	9202      	str	r2, [sp, #8]
 8013022:	9101      	str	r1, [sp, #4]
 8013024:	4b0a      	ldr	r3, [pc, #40]	; (8013050 <RegionCommonRxConfigPrint+0x38>)
 8013026:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801302a:	9300      	str	r3, [sp, #0]
 801302c:	4b09      	ldr	r3, [pc, #36]	; (8013054 <RegionCommonRxConfigPrint+0x3c>)
 801302e:	2201      	movs	r2, #1
 8013030:	2100      	movs	r1, #0
 8013032:	2002      	movs	r0, #2
 8013034:	f004 f9ea 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8013038:	b005      	add	sp, #20
 801303a:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801303e:	9201      	str	r2, [sp, #4]
 8013040:	9100      	str	r1, [sp, #0]
 8013042:	4b05      	ldr	r3, [pc, #20]	; (8013058 <RegionCommonRxConfigPrint+0x40>)
 8013044:	2201      	movs	r2, #1
 8013046:	2100      	movs	r1, #0
 8013048:	2002      	movs	r0, #2
 801304a:	f004 f9df 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 801304e:	e7f3      	b.n	8013038 <RegionCommonRxConfigPrint+0x20>
 8013050:	0801bd68 	.word	0x0801bd68
 8013054:	0801bd00 	.word	0x0801bd00
 8013058:	0801bd20 	.word	0x0801bd20

0801305c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801305c:	b500      	push	{lr}
 801305e:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8013060:	9101      	str	r1, [sp, #4]
 8013062:	9000      	str	r0, [sp, #0]
 8013064:	4b04      	ldr	r3, [pc, #16]	; (8013078 <RegionCommonTxConfigPrint+0x1c>)
 8013066:	2201      	movs	r2, #1
 8013068:	2100      	movs	r1, #0
 801306a:	2002      	movs	r0, #2
 801306c:	f004 f9ce 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 8013070:	b003      	add	sp, #12
 8013072:	f85d fb04 	ldr.w	pc, [sp], #4
 8013076:	bf00      	nop
 8013078:	0801bd3c 	.word	0x0801bd3c

0801307c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801307c:	b538      	push	{r3, r4, r5, lr}
 801307e:	4604      	mov	r4, r0
 8013080:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8013082:	4b1b      	ldr	r3, [pc, #108]	; (80130f0 <VerifyRfFreq+0x74>)
 8013084:	6a1b      	ldr	r3, [r3, #32]
 8013086:	4798      	blx	r3
 8013088:	b130      	cbz	r0, 8013098 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801308a:	4b1a      	ldr	r3, [pc, #104]	; (80130f4 <VerifyRfFreq+0x78>)
 801308c:	4423      	add	r3, r4
 801308e:	4a1a      	ldr	r2, [pc, #104]	; (80130f8 <VerifyRfFreq+0x7c>)
 8013090:	4293      	cmp	r3, r2
 8013092:	d802      	bhi.n	801309a <VerifyRfFreq+0x1e>
    {
        *band = 2;
 8013094:	2302      	movs	r3, #2
 8013096:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 8013098:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801309a:	4b18      	ldr	r3, [pc, #96]	; (80130fc <VerifyRfFreq+0x80>)
 801309c:	4423      	add	r3, r4
 801309e:	4a18      	ldr	r2, [pc, #96]	; (8013100 <VerifyRfFreq+0x84>)
 80130a0:	4293      	cmp	r3, r2
 80130a2:	d802      	bhi.n	80130aa <VerifyRfFreq+0x2e>
        *band = 0;
 80130a4:	2300      	movs	r3, #0
 80130a6:	702b      	strb	r3, [r5, #0]
 80130a8:	e7f6      	b.n	8013098 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80130aa:	4b16      	ldr	r3, [pc, #88]	; (8013104 <VerifyRfFreq+0x88>)
 80130ac:	4423      	add	r3, r4
 80130ae:	4a16      	ldr	r2, [pc, #88]	; (8013108 <VerifyRfFreq+0x8c>)
 80130b0:	4293      	cmp	r3, r2
 80130b2:	d802      	bhi.n	80130ba <VerifyRfFreq+0x3e>
        *band = 1;
 80130b4:	2301      	movs	r3, #1
 80130b6:	702b      	strb	r3, [r5, #0]
 80130b8:	e7ee      	b.n	8013098 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80130ba:	4b14      	ldr	r3, [pc, #80]	; (801310c <VerifyRfFreq+0x90>)
 80130bc:	4423      	add	r3, r4
 80130be:	4a14      	ldr	r2, [pc, #80]	; (8013110 <VerifyRfFreq+0x94>)
 80130c0:	4293      	cmp	r3, r2
 80130c2:	d802      	bhi.n	80130ca <VerifyRfFreq+0x4e>
        *band = 5;
 80130c4:	2305      	movs	r3, #5
 80130c6:	702b      	strb	r3, [r5, #0]
 80130c8:	e7e6      	b.n	8013098 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80130ca:	4b12      	ldr	r3, [pc, #72]	; (8013114 <VerifyRfFreq+0x98>)
 80130cc:	4423      	add	r3, r4
 80130ce:	4a12      	ldr	r2, [pc, #72]	; (8013118 <VerifyRfFreq+0x9c>)
 80130d0:	4293      	cmp	r3, r2
 80130d2:	d802      	bhi.n	80130da <VerifyRfFreq+0x5e>
        *band = 3;
 80130d4:	2303      	movs	r3, #3
 80130d6:	702b      	strb	r3, [r5, #0]
 80130d8:	e7de      	b.n	8013098 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80130da:	4b10      	ldr	r3, [pc, #64]	; (801311c <VerifyRfFreq+0xa0>)
 80130dc:	4423      	add	r3, r4
 80130de:	4a10      	ldr	r2, [pc, #64]	; (8013120 <VerifyRfFreq+0xa4>)
 80130e0:	4293      	cmp	r3, r2
 80130e2:	d802      	bhi.n	80130ea <VerifyRfFreq+0x6e>
        *band = 4;
 80130e4:	2304      	movs	r3, #4
 80130e6:	702b      	strb	r3, [r5, #0]
 80130e8:	e7d6      	b.n	8013098 <VerifyRfFreq+0x1c>
        return false;
 80130ea:	2000      	movs	r0, #0
 80130ec:	e7d4      	b.n	8013098 <VerifyRfFreq+0x1c>
 80130ee:	bf00      	nop
 80130f0:	0801c3a0 	.word	0x0801c3a0
 80130f4:	cc8faa40 	.word	0xcc8faa40
 80130f8:	001e847f 	.word	0x001e847f
 80130fc:	cc7125c0 	.word	0xcc7125c0
 8013100:	002dc6c0 	.word	0x002dc6c0
 8013104:	cc435eff 	.word	0xcc435eff
 8013108:	000927bf 	.word	0x000927bf
 801310c:	cc38b0a0 	.word	0xcc38b0a0
 8013110:	0007a120 	.word	0x0007a120
 8013114:	cc2e0240 	.word	0xcc2e0240
 8013118:	0003d090 	.word	0x0003d090
 801311c:	cc296e60 	.word	0xcc296e60
 8013120:	000493e0 	.word	0x000493e0

08013124 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8013124:	b570      	push	{r4, r5, r6, lr}
 8013126:	b084      	sub	sp, #16
 8013128:	4605      	mov	r5, r0
 801312a:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 801312c:	4b13      	ldr	r3, [pc, #76]	; (801317c <GetTimeOnAir+0x58>)
 801312e:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8013130:	4913      	ldr	r1, [pc, #76]	; (8013180 <GetTimeOnAir+0x5c>)
 8013132:	f7ff ff5f 	bl	8012ff4 <RegionCommonGetBandwidth>
 8013136:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 8013138:	2d07      	cmp	r5, #7
 801313a:	d00e      	beq.n	801315a <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801313c:	4b11      	ldr	r3, [pc, #68]	; (8013184 <GetTimeOnAir+0x60>)
 801313e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8013140:	2001      	movs	r0, #1
 8013142:	9003      	str	r0, [sp, #12]
 8013144:	b2e4      	uxtb	r4, r4
 8013146:	9402      	str	r4, [sp, #8]
 8013148:	2300      	movs	r3, #0
 801314a:	9301      	str	r3, [sp, #4]
 801314c:	2308      	movs	r3, #8
 801314e:	9300      	str	r3, [sp, #0]
 8013150:	4603      	mov	r3, r0
 8013152:	4632      	mov	r2, r6
 8013154:	47a8      	blx	r5
    }
    return timeOnAir;
}
 8013156:	b004      	add	sp, #16
 8013158:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801315a:	4b0a      	ldr	r3, [pc, #40]	; (8013184 <GetTimeOnAir+0x60>)
 801315c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801315e:	2301      	movs	r3, #1
 8013160:	9303      	str	r3, [sp, #12]
 8013162:	b2e4      	uxtb	r4, r4
 8013164:	9402      	str	r4, [sp, #8]
 8013166:	2000      	movs	r0, #0
 8013168:	9001      	str	r0, [sp, #4]
 801316a:	2305      	movs	r3, #5
 801316c:	9300      	str	r3, [sp, #0]
 801316e:	4603      	mov	r3, r0
 8013170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013174:	fb06 f202 	mul.w	r2, r6, r2
 8013178:	47a8      	blx	r5
 801317a:	e7ec      	b.n	8013156 <GetTimeOnAir+0x32>
 801317c:	0801bda0 	.word	0x0801bda0
 8013180:	0801bd80 	.word	0x0801bd80
 8013184:	0801c3a0 	.word	0x0801c3a0

08013188 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8013188:	b500      	push	{lr}
 801318a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 801318c:	2300      	movs	r3, #0
 801318e:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8013190:	7803      	ldrb	r3, [r0, #0]
 8013192:	3b0b      	subs	r3, #11
 8013194:	2b2d      	cmp	r3, #45	; 0x2d
 8013196:	d82f      	bhi.n	80131f8 <RegionEU868GetPhyParam+0x70>
 8013198:	e8df f003 	tbb	[pc, r3]
 801319c:	3f393633 	.word	0x3f393633
 80131a0:	504c4845 	.word	0x504c4845
 80131a4:	2e5c5854 	.word	0x2e5c5854
 80131a8:	6e682e65 	.word	0x6e682e65
 80131ac:	2e2e7774 	.word	0x2e2e7774
 80131b0:	2e177f7b 	.word	0x2e177f7b
 80131b4:	2e2e2e2e 	.word	0x2e2e2e2e
 80131b8:	2e2e2e2e 	.word	0x2e2e2e2e
 80131bc:	2e2e2e2e 	.word	0x2e2e2e2e
 80131c0:	2e8c8582 	.word	0x2e8c8582
 80131c4:	2e928f2e 	.word	0x2e928f2e
 80131c8:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80131ca:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80131ce:	f88d 3004 	strb.w	r3, [sp, #4]
 80131d2:	2307      	movs	r3, #7
 80131d4:	f88d 3005 	strb.w	r3, [sp, #5]
 80131d8:	2300      	movs	r3, #0
 80131da:	f88d 3006 	strb.w	r3, [sp, #6]
 80131de:	2310      	movs	r3, #16
 80131e0:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80131e4:	4b3e      	ldr	r3, [pc, #248]	; (80132e0 <RegionEU868GetPhyParam+0x158>)
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80131ec:	9202      	str	r2, [sp, #8]
 80131ee:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80131f0:	a801      	add	r0, sp, #4
 80131f2:	f7ff fedb 	bl	8012fac <RegionCommonGetNextLowerTxDr>
 80131f6:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 80131f8:	9804      	ldr	r0, [sp, #16]
 80131fa:	9005      	str	r0, [sp, #20]
}
 80131fc:	b007      	add	sp, #28
 80131fe:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8013202:	2340      	movs	r3, #64	; 0x40
 8013204:	9304      	str	r3, [sp, #16]
            break;
 8013206:	e7f7      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8013208:	2320      	movs	r3, #32
 801320a:	9304      	str	r3, [sp, #16]
            break;
 801320c:	e7f4      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801320e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8013212:	4a34      	ldr	r2, [pc, #208]	; (80132e4 <RegionEU868GetPhyParam+0x15c>)
 8013214:	5cd3      	ldrb	r3, [r2, r3]
 8013216:	9304      	str	r3, [sp, #16]
            break;
 8013218:	e7ee      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801321a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801321e:	4a32      	ldr	r2, [pc, #200]	; (80132e8 <RegionEU868GetPhyParam+0x160>)
 8013220:	5cd3      	ldrb	r3, [r2, r3]
 8013222:	9304      	str	r3, [sp, #16]
            break;
 8013224:	e7e8      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8013226:	2301      	movs	r3, #1
 8013228:	9304      	str	r3, [sp, #16]
            break;
 801322a:	e7e5      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801322c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8013230:	9304      	str	r3, [sp, #16]
            break;
 8013232:	e7e1      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8013234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013238:	9304      	str	r3, [sp, #16]
            break;
 801323a:	e7dd      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801323c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8013240:	9304      	str	r3, [sp, #16]
            break;
 8013242:	e7d9      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8013244:	f241 3388 	movw	r3, #5000	; 0x1388
 8013248:	9304      	str	r3, [sp, #16]
            break;
 801324a:	e7d5      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801324c:	f241 7370 	movw	r3, #6000	; 0x1770
 8013250:	9304      	str	r3, [sp, #16]
            break;
 8013252:	e7d1      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8013254:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013258:	4824      	ldr	r0, [pc, #144]	; (80132ec <RegionEU868GetPhyParam+0x164>)
 801325a:	f002 fa21 	bl	80156a0 <randr>
 801325e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8013262:	9004      	str	r0, [sp, #16]
            break;
 8013264:	e7c8      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8013266:	4b22      	ldr	r3, [pc, #136]	; (80132f0 <RegionEU868GetPhyParam+0x168>)
 8013268:	9304      	str	r3, [sp, #16]
            break;
 801326a:	e7c5      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801326c:	4b1c      	ldr	r3, [pc, #112]	; (80132e0 <RegionEU868GetPhyParam+0x158>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8013274:	9304      	str	r3, [sp, #16]
            break;
 8013276:	e7bf      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8013278:	4b19      	ldr	r3, [pc, #100]	; (80132e0 <RegionEU868GetPhyParam+0x158>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8013280:	9304      	str	r3, [sp, #16]
            break;
 8013282:	e7b9      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8013284:	2310      	movs	r3, #16
 8013286:	9304      	str	r3, [sp, #16]
            break;
 8013288:	e7b6      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 801328a:	4b15      	ldr	r3, [pc, #84]	; (80132e0 <RegionEU868GetPhyParam+0x158>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	9304      	str	r3, [sp, #16]
            break;
 8013290:	e7b2      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8013292:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8013296:	9304      	str	r3, [sp, #16]
            break;
 8013298:	e7ae      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801329a:	4b16      	ldr	r3, [pc, #88]	; (80132f4 <RegionEU868GetPhyParam+0x16c>)
 801329c:	9304      	str	r3, [sp, #16]
            break;
 801329e:	e7ab      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80132a0:	4b13      	ldr	r3, [pc, #76]	; (80132f0 <RegionEU868GetPhyParam+0x168>)
 80132a2:	9304      	str	r3, [sp, #16]
            break;
 80132a4:	e7a8      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80132a6:	2311      	movs	r3, #17
 80132a8:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80132ac:	2301      	movs	r3, #1
 80132ae:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 80132b2:	e7a1      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80132b4:	2303      	movs	r3, #3
 80132b6:	9304      	str	r3, [sp, #16]
            break;
 80132b8:	e79e      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80132ba:	4b0d      	ldr	r3, [pc, #52]	; (80132f0 <RegionEU868GetPhyParam+0x168>)
 80132bc:	9304      	str	r3, [sp, #16]
            break;
 80132be:	e79b      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80132c0:	2303      	movs	r3, #3
 80132c2:	9304      	str	r3, [sp, #16]
            break;
 80132c4:	e798      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80132c6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80132ca:	4a0b      	ldr	r2, [pc, #44]	; (80132f8 <RegionEU868GetPhyParam+0x170>)
 80132cc:	5cd3      	ldrb	r3, [r2, r3]
 80132ce:	9304      	str	r3, [sp, #16]
            break;
 80132d0:	e792      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80132d2:	490a      	ldr	r1, [pc, #40]	; (80132fc <RegionEU868GetPhyParam+0x174>)
 80132d4:	f990 0001 	ldrsb.w	r0, [r0, #1]
 80132d8:	f7ff fe8c 	bl	8012ff4 <RegionCommonGetBandwidth>
 80132dc:	9004      	str	r0, [sp, #16]
            break;
 80132de:	e78b      	b.n	80131f8 <RegionEU868GetPhyParam+0x70>
 80132e0:	200011a0 	.word	0x200011a0
 80132e4:	0801bda8 	.word	0x0801bda8
 80132e8:	0801bdb0 	.word	0x0801bdb0
 80132ec:	fffffc18 	.word	0xfffffc18
 80132f0:	33d3e608 	.word	0x33d3e608
 80132f4:	4009999a 	.word	0x4009999a
 80132f8:	0801bda0 	.word	0x0801bda0
 80132fc:	0801bd80 	.word	0x0801bd80

08013300 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8013300:	b510      	push	{r4, lr}
 8013302:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8013304:	4b0b      	ldr	r3, [pc, #44]	; (8013334 <RegionEU868SetBandTxDone+0x34>)
 8013306:	681a      	ldr	r2, [r3, #0]
 8013308:	7803      	ldrb	r3, [r0, #0]
 801330a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801330e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013312:	7a5b      	ldrb	r3, [r3, #9]
 8013314:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8013318:	4b07      	ldr	r3, [pc, #28]	; (8013338 <RegionEU868SetBandTxDone+0x38>)
 801331a:	681c      	ldr	r4, [r3, #0]
 801331c:	6903      	ldr	r3, [r0, #16]
 801331e:	9300      	str	r3, [sp, #0]
 8013320:	68c3      	ldr	r3, [r0, #12]
 8013322:	7842      	ldrb	r2, [r0, #1]
 8013324:	6881      	ldr	r1, [r0, #8]
 8013326:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 801332a:	f7ff fc18 	bl	8012b5e <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 801332e:	b002      	add	sp, #8
 8013330:	bd10      	pop	{r4, pc}
 8013332:	bf00      	nop
 8013334:	200011a0 	.word	0x200011a0
 8013338:	2000119c 	.word	0x2000119c

0801333c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 801333c:	b530      	push	{r4, r5, lr}
 801333e:	b0a5      	sub	sp, #148	; 0x94
 8013340:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8013342:	2290      	movs	r2, #144	; 0x90
 8013344:	2100      	movs	r1, #0
 8013346:	4668      	mov	r0, sp
 8013348:	f004 ff3a 	bl	80181c0 <memset>
 801334c:	2364      	movs	r3, #100	; 0x64
 801334e:	f8ad 3000 	strh.w	r3, [sp]
 8013352:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013356:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801335a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801335e:	210a      	movs	r1, #10
 8013360:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 8013364:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8013368:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 801336c:	7b23      	ldrb	r3, [r4, #12]
 801336e:	2b01      	cmp	r3, #1
 8013370:	d032      	beq.n	80133d8 <RegionEU868InitDefaults+0x9c>
 8013372:	2b02      	cmp	r3, #2
 8013374:	d03e      	beq.n	80133f4 <RegionEU868InitDefaults+0xb8>
 8013376:	b10b      	cbz	r3, 801337c <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 8013378:	b025      	add	sp, #148	; 0x94
 801337a:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801337c:	6823      	ldr	r3, [r4, #0]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d0fa      	beq.n	8013378 <RegionEU868InitDefaults+0x3c>
 8013382:	6863      	ldr	r3, [r4, #4]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d0f7      	beq.n	8013378 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8013388:	4d1f      	ldr	r5, [pc, #124]	; (8013408 <RegionEU868InitDefaults+0xcc>)
 801338a:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 801338c:	68a0      	ldr	r0, [r4, #8]
 801338e:	4b1f      	ldr	r3, [pc, #124]	; (801340c <RegionEU868InitDefaults+0xd0>)
 8013390:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8013392:	2290      	movs	r2, #144	; 0x90
 8013394:	4669      	mov	r1, sp
 8013396:	f002 f990 	bl	80156ba <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801339a:	682c      	ldr	r4, [r5, #0]
 801339c:	4b1c      	ldr	r3, [pc, #112]	; (8013410 <RegionEU868InitDefaults+0xd4>)
 801339e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80133a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80133a6:	f104 0c0c 	add.w	ip, r4, #12
 80133aa:	f103 020c 	add.w	r2, r3, #12
 80133ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80133b0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80133b4:	f104 0c18 	add.w	ip, r4, #24
 80133b8:	3318      	adds	r3, #24
 80133ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80133be:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80133c2:	2307      	movs	r3, #7
 80133c4:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80133c8:	2201      	movs	r2, #1
 80133ca:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 80133ce:	f504 7058 	add.w	r0, r4, #864	; 0x360
 80133d2:	f7ff fbb5 	bl	8012b40 <RegionCommonChanMaskCopy>
            break;
 80133d6:	e7cf      	b.n	8013378 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80133d8:	4b0b      	ldr	r3, [pc, #44]	; (8013408 <RegionEU868InitDefaults+0xcc>)
 80133da:	6818      	ldr	r0, [r3, #0]
 80133dc:	2300      	movs	r3, #0
 80133de:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80133e0:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80133e2:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80133e4:	2201      	movs	r2, #1
 80133e6:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 80133ea:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80133ee:	f7ff fba7 	bl	8012b40 <RegionCommonChanMaskCopy>
            break;
 80133f2:	e7c1      	b.n	8013378 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80133f4:	4b04      	ldr	r3, [pc, #16]	; (8013408 <RegionEU868InitDefaults+0xcc>)
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 80133fc:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8013400:	430a      	orrs	r2, r1
 8013402:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8013406:	e7b7      	b.n	8013378 <RegionEU868InitDefaults+0x3c>
 8013408:	200011a0 	.word	0x200011a0
 801340c:	2000119c 	.word	0x2000119c
 8013410:	0801b25c 	.word	0x0801b25c

08013414 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8013414:	b500      	push	{lr}
 8013416:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8013418:	290f      	cmp	r1, #15
 801341a:	d83c      	bhi.n	8013496 <RegionEU868Verify+0x82>
 801341c:	e8df f001 	tbb	[pc, r1]
 8013420:	3b3b3b0a 	.word	0x3b3b3b0a
 8013424:	271d133b 	.word	0x271d133b
 8013428:	3b31313b 	.word	0x3b31313b
 801342c:	083b3b3b 	.word	0x083b3b3b
 8013430:	2001      	movs	r0, #1
 8013432:	e031      	b.n	8013498 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8013434:	2300      	movs	r3, #0
 8013436:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 801343a:	f10d 0107 	add.w	r1, sp, #7
 801343e:	6800      	ldr	r0, [r0, #0]
 8013440:	f7ff fe1c 	bl	801307c <VerifyRfFreq>
 8013444:	e028      	b.n	8013498 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8013446:	2207      	movs	r2, #7
 8013448:	2100      	movs	r1, #0
 801344a:	f990 0000 	ldrsb.w	r0, [r0]
 801344e:	f7ff fb06 	bl	8012a5e <RegionCommonValueInRange>
 8013452:	3800      	subs	r0, #0
 8013454:	bf18      	it	ne
 8013456:	2001      	movne	r0, #1
 8013458:	e01e      	b.n	8013498 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801345a:	2205      	movs	r2, #5
 801345c:	2100      	movs	r1, #0
 801345e:	f990 0000 	ldrsb.w	r0, [r0]
 8013462:	f7ff fafc 	bl	8012a5e <RegionCommonValueInRange>
 8013466:	3800      	subs	r0, #0
 8013468:	bf18      	it	ne
 801346a:	2001      	movne	r0, #1
 801346c:	e014      	b.n	8013498 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801346e:	2207      	movs	r2, #7
 8013470:	2100      	movs	r1, #0
 8013472:	f990 0000 	ldrsb.w	r0, [r0]
 8013476:	f7ff faf2 	bl	8012a5e <RegionCommonValueInRange>
 801347a:	3800      	subs	r0, #0
 801347c:	bf18      	it	ne
 801347e:	2001      	movne	r0, #1
 8013480:	e00a      	b.n	8013498 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8013482:	2207      	movs	r2, #7
 8013484:	2100      	movs	r1, #0
 8013486:	f990 0000 	ldrsb.w	r0, [r0]
 801348a:	f7ff fae8 	bl	8012a5e <RegionCommonValueInRange>
 801348e:	3800      	subs	r0, #0
 8013490:	bf18      	it	ne
 8013492:	2001      	movne	r0, #1
 8013494:	e000      	b.n	8013498 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 8013496:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8013498:	b003      	add	sp, #12
 801349a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080134a0 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80134a0:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80134a2:	7903      	ldrb	r3, [r0, #4]
 80134a4:	b11b      	cbz	r3, 80134ae <RegionEU868ChanMaskSet+0xe>
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d00b      	beq.n	80134c2 <RegionEU868ChanMaskSet+0x22>
 80134aa:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 80134ac:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80134ae:	4b0a      	ldr	r3, [pc, #40]	; (80134d8 <RegionEU868ChanMaskSet+0x38>)
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	2201      	movs	r2, #1
 80134b4:	6801      	ldr	r1, [r0, #0]
 80134b6:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80134ba:	f7ff fb41 	bl	8012b40 <RegionCommonChanMaskCopy>
    return true;
 80134be:	2001      	movs	r0, #1
            break;
 80134c0:	e7f4      	b.n	80134ac <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80134c2:	4b05      	ldr	r3, [pc, #20]	; (80134d8 <RegionEU868ChanMaskSet+0x38>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	2201      	movs	r2, #1
 80134c8:	6801      	ldr	r1, [r0, #0]
 80134ca:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80134ce:	f7ff fb37 	bl	8012b40 <RegionCommonChanMaskCopy>
    return true;
 80134d2:	2001      	movs	r0, #1
            break;
 80134d4:	e7ea      	b.n	80134ac <RegionEU868ChanMaskSet+0xc>
 80134d6:	bf00      	nop
 80134d8:	200011a0 	.word	0x200011a0

080134dc <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80134dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134de:	b083      	sub	sp, #12
 80134e0:	460e      	mov	r6, r1
 80134e2:	4617      	mov	r7, r2
 80134e4:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80134e6:	2807      	cmp	r0, #7
 80134e8:	bfa8      	it	ge
 80134ea:	2007      	movge	r0, #7
 80134ec:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80134ee:	4913      	ldr	r1, [pc, #76]	; (801353c <RegionEU868ComputeRxWindowParameters+0x60>)
 80134f0:	f7ff fd80 	bl	8012ff4 <RegionCommonGetBandwidth>
 80134f4:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80134f6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80134fa:	2b07      	cmp	r3, #7
 80134fc:	d017      	beq.n	801352e <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80134fe:	4a0f      	ldr	r2, [pc, #60]	; (801353c <RegionEU868ComputeRxWindowParameters+0x60>)
 8013500:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8013504:	4a0e      	ldr	r2, [pc, #56]	; (8013540 <RegionEU868ComputeRxWindowParameters+0x64>)
 8013506:	5cd0      	ldrb	r0, [r2, r3]
 8013508:	f7ff fc40 	bl	8012d8c <RegionCommonComputeSymbolTimeLoRa>
 801350c:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801350e:	4b0d      	ldr	r3, [pc, #52]	; (8013544 <RegionEU868ComputeRxWindowParameters+0x68>)
 8013510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013512:	4798      	blx	r3
 8013514:	4603      	mov	r3, r0
 8013516:	f104 020c 	add.w	r2, r4, #12
 801351a:	9201      	str	r2, [sp, #4]
 801351c:	3408      	adds	r4, #8
 801351e:	9400      	str	r4, [sp, #0]
 8013520:	463a      	mov	r2, r7
 8013522:	4631      	mov	r1, r6
 8013524:	4628      	mov	r0, r5
 8013526:	f7ff fc3f 	bl	8012da8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 801352a:	b003      	add	sp, #12
 801352c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801352e:	4a04      	ldr	r2, [pc, #16]	; (8013540 <RegionEU868ComputeRxWindowParameters+0x64>)
 8013530:	5cd0      	ldrb	r0, [r2, r3]
 8013532:	f7ff fc33 	bl	8012d9c <RegionCommonComputeSymbolTimeFsk>
 8013536:	4605      	mov	r5, r0
 8013538:	e7e9      	b.n	801350e <RegionEU868ComputeRxWindowParameters+0x32>
 801353a:	bf00      	nop
 801353c:	0801bd80 	.word	0x0801bd80
 8013540:	0801bda0 	.word	0x0801bda0
 8013544:	0801c3a0 	.word	0x0801c3a0

08013548 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801354c:	b08a      	sub	sp, #40	; 0x28
 801354e:	4604      	mov	r4, r0
 8013550:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8013552:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8013556:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 801355a:	4b37      	ldr	r3, [pc, #220]	; (8013638 <RegionEU868RxConfig+0xf0>)
 801355c:	685b      	ldr	r3, [r3, #4]
 801355e:	4798      	blx	r3
 8013560:	2800      	cmp	r0, #0
 8013562:	d167      	bne.n	8013634 <RegionEU868RxConfig+0xec>
 8013564:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8013566:	7ce3      	ldrb	r3, [r4, #19]
 8013568:	b983      	cbnz	r3, 801358c <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801356a:	4b34      	ldr	r3, [pc, #208]	; (801363c <RegionEU868RxConfig+0xf4>)
 801356c:	681a      	ldr	r2, [r3, #0]
 801356e:	7823      	ldrb	r3, [r4, #0]
 8013570:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8013574:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8013578:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801357c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013580:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8013584:	f1b8 0f00 	cmp.w	r8, #0
 8013588:	d100      	bne.n	801358c <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801358a:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801358c:	4b2c      	ldr	r3, [pc, #176]	; (8013640 <RegionEU868RxConfig+0xf8>)
 801358e:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 8013592:	4b29      	ldr	r3, [pc, #164]	; (8013638 <RegionEU868RxConfig+0xf0>)
 8013594:	68db      	ldr	r3, [r3, #12]
 8013596:	4640      	mov	r0, r8
 8013598:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801359a:	2d07      	cmp	r5, #7
 801359c:	d02b      	beq.n	80135f6 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801359e:	4b26      	ldr	r3, [pc, #152]	; (8013638 <RegionEU868RxConfig+0xf0>)
 80135a0:	f8d3 a018 	ldr.w	sl, [r3, #24]
 80135a4:	7ca3      	ldrb	r3, [r4, #18]
 80135a6:	9309      	str	r3, [sp, #36]	; 0x24
 80135a8:	2601      	movs	r6, #1
 80135aa:	9608      	str	r6, [sp, #32]
 80135ac:	2300      	movs	r3, #0
 80135ae:	9307      	str	r3, [sp, #28]
 80135b0:	9306      	str	r3, [sp, #24]
 80135b2:	9305      	str	r3, [sp, #20]
 80135b4:	9304      	str	r3, [sp, #16]
 80135b6:	9303      	str	r3, [sp, #12]
 80135b8:	8922      	ldrh	r2, [r4, #8]
 80135ba:	9202      	str	r2, [sp, #8]
 80135bc:	2208      	movs	r2, #8
 80135be:	9201      	str	r2, [sp, #4]
 80135c0:	9300      	str	r3, [sp, #0]
 80135c2:	4633      	mov	r3, r6
 80135c4:	464a      	mov	r2, r9
 80135c6:	78a1      	ldrb	r1, [r4, #2]
 80135c8:	4630      	mov	r0, r6
 80135ca:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80135cc:	7c63      	ldrb	r3, [r4, #17]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d02d      	beq.n	801362e <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80135d2:	4b1c      	ldr	r3, [pc, #112]	; (8013644 <RegionEU868RxConfig+0xfc>)
 80135d4:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80135d6:	4b18      	ldr	r3, [pc, #96]	; (8013638 <RegionEU868RxConfig+0xf0>)
 80135d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135da:	310d      	adds	r1, #13
 80135dc:	b2c9      	uxtb	r1, r1
 80135de:	4630      	mov	r0, r6
 80135e0:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80135e2:	462a      	mov	r2, r5
 80135e4:	4641      	mov	r1, r8
 80135e6:	7ce0      	ldrb	r0, [r4, #19]
 80135e8:	f7ff fd16 	bl	8013018 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80135ec:	703d      	strb	r5, [r7, #0]
    return true;
 80135ee:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80135f0:	b00a      	add	sp, #40	; 0x28
 80135f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80135f6:	4b10      	ldr	r3, [pc, #64]	; (8013638 <RegionEU868RxConfig+0xf0>)
 80135f8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 80135fc:	7ca3      	ldrb	r3, [r4, #18]
 80135fe:	9309      	str	r3, [sp, #36]	; 0x24
 8013600:	2000      	movs	r0, #0
 8013602:	9008      	str	r0, [sp, #32]
 8013604:	9007      	str	r0, [sp, #28]
 8013606:	9006      	str	r0, [sp, #24]
 8013608:	2301      	movs	r3, #1
 801360a:	9305      	str	r3, [sp, #20]
 801360c:	9004      	str	r0, [sp, #16]
 801360e:	9003      	str	r0, [sp, #12]
 8013610:	8923      	ldrh	r3, [r4, #8]
 8013612:	9302      	str	r3, [sp, #8]
 8013614:	2305      	movs	r3, #5
 8013616:	9301      	str	r3, [sp, #4]
 8013618:	4b0b      	ldr	r3, [pc, #44]	; (8013648 <RegionEU868RxConfig+0x100>)
 801361a:	9300      	str	r3, [sp, #0]
 801361c:	4603      	mov	r3, r0
 801361e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013622:	fb02 f209 	mul.w	r2, r2, r9
 8013626:	f24c 3150 	movw	r1, #50000	; 0xc350
 801362a:	47d0      	blx	sl
 801362c:	e7ce      	b.n	80135cc <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801362e:	4b07      	ldr	r3, [pc, #28]	; (801364c <RegionEU868RxConfig+0x104>)
 8013630:	5d59      	ldrb	r1, [r3, r5]
 8013632:	e7d0      	b.n	80135d6 <RegionEU868RxConfig+0x8e>
        return false;
 8013634:	2000      	movs	r0, #0
 8013636:	e7db      	b.n	80135f0 <RegionEU868RxConfig+0xa8>
 8013638:	0801c3a0 	.word	0x0801c3a0
 801363c:	200011a0 	.word	0x200011a0
 8013640:	0801bda0 	.word	0x0801bda0
 8013644:	0801bdb0 	.word	0x0801bdb0
 8013648:	00014585 	.word	0x00014585
 801364c:	0801bda8 	.word	0x0801bda8

08013650 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013654:	b08d      	sub	sp, #52	; 0x34
 8013656:	4604      	mov	r4, r0
 8013658:	460f      	mov	r7, r1
 801365a:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801365c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8013660:	4a42      	ldr	r2, [pc, #264]	; (801376c <RegionEU868TxConfig+0x11c>)
 8013662:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8013666:	4d42      	ldr	r5, [pc, #264]	; (8013770 <RegionEU868TxConfig+0x120>)
 8013668:	682a      	ldr	r2, [r5, #0]
 801366a:	7803      	ldrb	r3, [r0, #0]
 801366c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013670:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013674:	7a5b      	ldrb	r3, [r3, #9]
 8013676:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801367a:	4a3e      	ldr	r2, [pc, #248]	; (8013774 <RegionEU868TxConfig+0x124>)
 801367c:	6812      	ldr	r2, [r2, #0]
 801367e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013682:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8013686:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801368a:	f7ff fcae 	bl	8012fea <RegionCommonLimitTxPower>
 801368e:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8013690:	4939      	ldr	r1, [pc, #228]	; (8013778 <RegionEU868TxConfig+0x128>)
 8013692:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8013696:	f7ff fcad 	bl	8012ff4 <RegionCommonGetBandwidth>
 801369a:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801369c:	68a2      	ldr	r2, [r4, #8]
 801369e:	6861      	ldr	r1, [r4, #4]
 80136a0:	4630      	mov	r0, r6
 80136a2:	f7ff fbbd 	bl	8012e20 <RegionCommonComputeTxPower>
 80136a6:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80136a8:	4b34      	ldr	r3, [pc, #208]	; (801377c <RegionEU868TxConfig+0x12c>)
 80136aa:	68da      	ldr	r2, [r3, #12]
 80136ac:	6829      	ldr	r1, [r5, #0]
 80136ae:	7823      	ldrb	r3, [r4, #0]
 80136b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80136b4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80136b8:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80136ba:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80136be:	2b07      	cmp	r3, #7
 80136c0:	d031      	beq.n	8013726 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80136c2:	4b2e      	ldr	r3, [pc, #184]	; (801377c <RegionEU868TxConfig+0x12c>)
 80136c4:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80136c8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80136cc:	9308      	str	r3, [sp, #32]
 80136ce:	2200      	movs	r2, #0
 80136d0:	9207      	str	r2, [sp, #28]
 80136d2:	9206      	str	r2, [sp, #24]
 80136d4:	9205      	str	r2, [sp, #20]
 80136d6:	2501      	movs	r5, #1
 80136d8:	9504      	str	r5, [sp, #16]
 80136da:	9203      	str	r2, [sp, #12]
 80136dc:	2308      	movs	r3, #8
 80136de:	9302      	str	r3, [sp, #8]
 80136e0:	9501      	str	r5, [sp, #4]
 80136e2:	f8cd a000 	str.w	sl, [sp]
 80136e6:	464b      	mov	r3, r9
 80136e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80136ea:	4628      	mov	r0, r5
 80136ec:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80136ee:	4b20      	ldr	r3, [pc, #128]	; (8013770 <RegionEU868TxConfig+0x120>)
 80136f0:	681a      	ldr	r2, [r3, #0]
 80136f2:	7823      	ldrb	r3, [r4, #0]
 80136f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80136f8:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80136fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013700:	f7ff fcac 	bl	801305c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8013704:	89a1      	ldrh	r1, [r4, #12]
 8013706:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801370a:	f7ff fd0b 	bl	8013124 <GetTimeOnAir>
 801370e:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8013712:	4b1a      	ldr	r3, [pc, #104]	; (801377c <RegionEU868TxConfig+0x12c>)
 8013714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013716:	7b21      	ldrb	r1, [r4, #12]
 8013718:	4628      	mov	r0, r5
 801371a:	4798      	blx	r3

    *txPower = txPowerLimited;
 801371c:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 801371e:	2001      	movs	r0, #1
 8013720:	b00d      	add	sp, #52	; 0x34
 8013722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8013726:	4b15      	ldr	r3, [pc, #84]	; (801377c <RegionEU868TxConfig+0x12c>)
 8013728:	69dd      	ldr	r5, [r3, #28]
 801372a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801372e:	fb03 f30a 	mul.w	r3, r3, sl
 8013732:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8013736:	9208      	str	r2, [sp, #32]
 8013738:	f04f 0b00 	mov.w	fp, #0
 801373c:	f8cd b01c 	str.w	fp, [sp, #28]
 8013740:	f8cd b018 	str.w	fp, [sp, #24]
 8013744:	f8cd b014 	str.w	fp, [sp, #20]
 8013748:	2201      	movs	r2, #1
 801374a:	9204      	str	r2, [sp, #16]
 801374c:	f8cd b00c 	str.w	fp, [sp, #12]
 8013750:	2205      	movs	r2, #5
 8013752:	9202      	str	r2, [sp, #8]
 8013754:	f8cd b004 	str.w	fp, [sp, #4]
 8013758:	9300      	str	r3, [sp, #0]
 801375a:	464b      	mov	r3, r9
 801375c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8013760:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013762:	4658      	mov	r0, fp
 8013764:	47a8      	blx	r5
        modem = MODEM_FSK;
 8013766:	465d      	mov	r5, fp
 8013768:	e7c1      	b.n	80136ee <RegionEU868TxConfig+0x9e>
 801376a:	bf00      	nop
 801376c:	0801bda0 	.word	0x0801bda0
 8013770:	200011a0 	.word	0x200011a0
 8013774:	2000119c 	.word	0x2000119c
 8013778:	0801bd80 	.word	0x0801bd80
 801377c:	0801c3a0 	.word	0x0801c3a0

08013780 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013784:	b08f      	sub	sp, #60	; 0x3c
 8013786:	4605      	mov	r5, r0
 8013788:	4689      	mov	r9, r1
 801378a:	4690      	mov	r8, r2
 801378c:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801378e:	2400      	movs	r4, #0
 8013790:	940c      	str	r4, [sp, #48]	; 0x30
 8013792:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 8013796:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 801379a:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801379c:	e030      	b.n	8013800 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801379e:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 80137a2:	2607      	movs	r6, #7
 80137a4:	e012      	b.n	80137cc <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80137a6:	4a57      	ldr	r2, [pc, #348]	; (8013904 <RegionEU868LinkAdrReq+0x184>)
 80137a8:	6812      	ldr	r2, [r2, #0]
 80137aa:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 80137ae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80137b2:	b13a      	cbz	r2, 80137c4 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 80137b4:	2201      	movs	r2, #1
 80137b6:	fa02 f20c 	lsl.w	r2, r2, ip
 80137ba:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80137be:	430a      	orrs	r2, r1
 80137c0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80137c4:	f10c 0c01 	add.w	ip, ip, #1
 80137c8:	fa5f fc8c 	uxtb.w	ip, ip
 80137cc:	f1bc 0f0f 	cmp.w	ip, #15
 80137d0:	d816      	bhi.n	8013800 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 80137d2:	2b06      	cmp	r3, #6
 80137d4:	d0e7      	beq.n	80137a6 <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80137d6:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 80137da:	fa4e fe0c 	asr.w	lr, lr, ip
 80137de:	f01e 0f01 	tst.w	lr, #1
 80137e2:	d0ef      	beq.n	80137c4 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80137e4:	4a47      	ldr	r2, [pc, #284]	; (8013904 <RegionEU868LinkAdrReq+0x184>)
 80137e6:	6812      	ldr	r2, [r2, #0]
 80137e8:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 80137ec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80137f0:	2a00      	cmp	r2, #0
 80137f2:	d1e7      	bne.n	80137c4 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80137f4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80137f8:	e7e4      	b.n	80137c4 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 80137fa:	2606      	movs	r6, #6
 80137fc:	e000      	b.n	8013800 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 80137fe:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8013800:	7a2b      	ldrb	r3, [r5, #8]
 8013802:	42a3      	cmp	r3, r4
 8013804:	d918      	bls.n	8013838 <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8013806:	6868      	ldr	r0, [r5, #4]
 8013808:	a90c      	add	r1, sp, #48	; 0x30
 801380a:	4420      	add	r0, r4
 801380c:	f7ff fa48 	bl	8012ca0 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8013810:	b190      	cbz	r0, 8013838 <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 8013812:	4404      	add	r4, r0
 8013814:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 8013816:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801381a:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801381e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8013822:	b90b      	cbnz	r3, 8013828 <RegionEU868LinkAdrReq+0xa8>
 8013824:	2a00      	cmp	r2, #0
 8013826:	d0e8      	beq.n	80137fa <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8013828:	1e5a      	subs	r2, r3, #1
 801382a:	b2d2      	uxtb	r2, r2
 801382c:	2a04      	cmp	r2, #4
 801382e:	d9e6      	bls.n	80137fe <RegionEU868LinkAdrReq+0x7e>
 8013830:	2b06      	cmp	r3, #6
 8013832:	d9b4      	bls.n	801379e <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 8013834:	2606      	movs	r6, #6
 8013836:	e7e3      	b.n	8013800 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013838:	2302      	movs	r3, #2
 801383a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801383e:	7a6b      	ldrb	r3, [r5, #9]
 8013840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8013844:	a80a      	add	r0, sp, #40	; 0x28
 8013846:	f7ff fc9f 	bl	8013188 <RegionEU868GetPhyParam>
 801384a:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 801384c:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8013850:	7aab      	ldrb	r3, [r5, #10]
 8013852:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8013856:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 801385a:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801385e:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8013862:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8013866:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801386a:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801386e:	f995 300b 	ldrsb.w	r3, [r5, #11]
 8013872:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8013876:	f995 300c 	ldrsb.w	r3, [r5, #12]
 801387a:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801387e:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8013882:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8013886:	2310      	movs	r3, #16
 8013888:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801388c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8013890:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8013892:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8013896:	2307      	movs	r3, #7
 8013898:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801389c:	4a19      	ldr	r2, [pc, #100]	; (8013904 <RegionEU868LinkAdrReq+0x184>)
 801389e:	6812      	ldr	r2, [r2, #0]
 80138a0:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80138a2:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80138a6:	2300      	movs	r3, #0
 80138a8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80138ac:	682b      	ldr	r3, [r5, #0]
 80138ae:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80138b0:	ab0c      	add	r3, sp, #48	; 0x30
 80138b2:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80138b6:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 80138ba:	a801      	add	r0, sp, #4
 80138bc:	f7ff fa0e 	bl	8012cdc <RegionCommonLinkAdrReqVerifyParams>
 80138c0:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80138c2:	2807      	cmp	r0, #7
 80138c4:	d010      	beq.n	80138e8 <RegionEU868LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80138c6:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 80138ca:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 80138ce:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 80138d2:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 80138d6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80138da:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 80138dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80138de:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 80138e0:	4628      	mov	r0, r5
 80138e2:	b00f      	add	sp, #60	; 0x3c
 80138e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80138e8:	4e06      	ldr	r6, [pc, #24]	; (8013904 <RegionEU868LinkAdrReq+0x184>)
 80138ea:	6830      	ldr	r0, [r6, #0]
 80138ec:	220c      	movs	r2, #12
 80138ee:	2100      	movs	r1, #0
 80138f0:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80138f4:	f001 fef9 	bl	80156ea <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80138f8:	6833      	ldr	r3, [r6, #0]
 80138fa:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80138fe:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 8013902:	e7e0      	b.n	80138c6 <RegionEU868LinkAdrReq+0x146>
 8013904:	200011a0 	.word	0x200011a0

08013908 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013908:	b530      	push	{r4, r5, lr}
 801390a:	b083      	sub	sp, #12
 801390c:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801390e:	2300      	movs	r3, #0
 8013910:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8013914:	f10d 0107 	add.w	r1, sp, #7
 8013918:	6840      	ldr	r0, [r0, #4]
 801391a:	f7ff fbaf 	bl	801307c <VerifyRfFreq>
 801391e:	b1a8      	cbz	r0, 801394c <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 8013920:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8013922:	2207      	movs	r2, #7
 8013924:	2100      	movs	r1, #0
 8013926:	f994 0000 	ldrsb.w	r0, [r4]
 801392a:	f7ff f898 	bl	8012a5e <RegionCommonValueInRange>
 801392e:	b908      	cbnz	r0, 8013934 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 8013930:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8013934:	2205      	movs	r2, #5
 8013936:	2100      	movs	r1, #0
 8013938:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801393c:	f7ff f88f 	bl	8012a5e <RegionCommonValueInRange>
 8013940:	b908      	cbnz	r0, 8013946 <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8013942:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 8013946:	4628      	mov	r0, r5
 8013948:	b003      	add	sp, #12
 801394a:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 801394c:	2506      	movs	r5, #6
 801394e:	e7e8      	b.n	8013922 <RegionEU868RxParamSetupReq+0x1a>

08013950 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8013950:	f04f 30ff 	mov.w	r0, #4294967295
 8013954:	4770      	bx	lr
	...

08013958 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8013958:	b510      	push	{r4, lr}
 801395a:	b082      	sub	sp, #8
 801395c:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801395e:	2300      	movs	r3, #0
 8013960:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8013964:	f10d 0107 	add.w	r1, sp, #7
 8013968:	6840      	ldr	r0, [r0, #4]
 801396a:	f7ff fb87 	bl	801307c <VerifyRfFreq>
 801396e:	b178      	cbz	r0, 8013990 <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 8013970:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8013972:	4b0c      	ldr	r3, [pc, #48]	; (80139a4 <RegionEU868DlChannelReq+0x4c>)
 8013974:	681a      	ldr	r2, [r3, #0]
 8013976:	7823      	ldrb	r3, [r4, #0]
 8013978:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801397c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8013980:	b909      	cbnz	r1, 8013986 <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 8013982:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8013986:	2803      	cmp	r0, #3
 8013988:	d004      	beq.n	8013994 <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 801398a:	b240      	sxtb	r0, r0
 801398c:	b002      	add	sp, #8
 801398e:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 8013990:	2002      	movs	r0, #2
 8013992:	e7ee      	b.n	8013972 <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8013994:	6861      	ldr	r1, [r4, #4]
 8013996:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801399a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801399e:	6059      	str	r1, [r3, #4]
 80139a0:	e7f3      	b.n	801398a <RegionEU868DlChannelReq+0x32>
 80139a2:	bf00      	nop
 80139a4:	200011a0 	.word	0x200011a0

080139a8 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 80139a8:	4770      	bx	lr
	...

080139ac <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80139ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139ae:	b097      	sub	sp, #92	; 0x5c
 80139b0:	4604      	mov	r4, r0
 80139b2:	460f      	mov	r7, r1
 80139b4:	4616      	mov	r6, r2
 80139b6:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80139b8:	2100      	movs	r1, #0
 80139ba:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 80139be:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80139c2:	9111      	str	r1, [sp, #68]	; 0x44
 80139c4:	9112      	str	r1, [sp, #72]	; 0x48
 80139c6:	9113      	str	r1, [sp, #76]	; 0x4c
 80139c8:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80139ca:	2307      	movs	r3, #7
 80139cc:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80139d0:	4b34      	ldr	r3, [pc, #208]	; (8013aa4 <RegionEU868NextChannel+0xf8>)
 80139d2:	6818      	ldr	r0, [r3, #0]
 80139d4:	2201      	movs	r2, #1
 80139d6:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80139da:	f7ff f89b 	bl	8012b14 <RegionCommonCountChannels>
 80139de:	b938      	cbnz	r0, 80139f0 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80139e0:	4b30      	ldr	r3, [pc, #192]	; (8013aa4 <RegionEU868NextChannel+0xf8>)
 80139e2:	681a      	ldr	r2, [r3, #0]
 80139e4:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 80139e8:	f043 0307 	orr.w	r3, r3, #7
 80139ec:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80139f0:	7a63      	ldrb	r3, [r4, #9]
 80139f2:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80139f6:	7a23      	ldrb	r3, [r4, #8]
 80139f8:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80139fc:	4b29      	ldr	r3, [pc, #164]	; (8013aa4 <RegionEU868NextChannel+0xf8>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	f503 7258 	add.w	r2, r3, #864	; 0x360
 8013a04:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8013a06:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8013a08:	4b27      	ldr	r3, [pc, #156]	; (8013aa8 <RegionEU868NextChannel+0xfc>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8013a0e:	2310      	movs	r3, #16
 8013a10:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 8013a14:	f10d 030a 	add.w	r3, sp, #10
 8013a18:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8013a1a:	6823      	ldr	r3, [r4, #0]
 8013a1c:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8013a1e:	6863      	ldr	r3, [r4, #4]
 8013a20:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8013a22:	7aa3      	ldrb	r3, [r4, #10]
 8013a24:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8013a28:	2306      	movs	r3, #6
 8013a2a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8013a2e:	ab0c      	add	r3, sp, #48	; 0x30
 8013a30:	f104 020c 	add.w	r2, r4, #12
 8013a34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013a38:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8013a3c:	7d23      	ldrb	r3, [r4, #20]
 8013a3e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8013a42:	8ae1      	ldrh	r1, [r4, #22]
 8013a44:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8013a48:	f7ff fb6c 	bl	8013124 <GetTimeOnAir>
 8013a4c:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8013a4e:	ab03      	add	r3, sp, #12
 8013a50:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8013a52:	9601      	str	r6, [sp, #4]
 8013a54:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 8013a58:	9300      	str	r3, [sp, #0]
 8013a5a:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 8013a5e:	aa11      	add	r2, sp, #68	; 0x44
 8013a60:	4629      	mov	r1, r5
 8013a62:	a809      	add	r0, sp, #36	; 0x24
 8013a64:	f7ff fa58 	bl	8012f18 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8013a68:	4604      	mov	r4, r0
 8013a6a:	b120      	cbz	r0, 8013a76 <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8013a6c:	280c      	cmp	r0, #12
 8013a6e:	d00f      	beq.n	8013a90 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8013a70:	4620      	mov	r0, r4
 8013a72:	b017      	add	sp, #92	; 0x5c
 8013a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8013a76:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 8013a7a:	3901      	subs	r1, #1
 8013a7c:	f001 fe10 	bl	80156a0 <randr>
 8013a80:	f100 0358 	add.w	r3, r0, #88	; 0x58
 8013a84:	eb0d 0003 	add.w	r0, sp, r3
 8013a88:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 8013a8c:	703b      	strb	r3, [r7, #0]
 8013a8e:	e7ef      	b.n	8013a70 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8013a90:	4b04      	ldr	r3, [pc, #16]	; (8013aa4 <RegionEU868NextChannel+0xf8>)
 8013a92:	681a      	ldr	r2, [r3, #0]
 8013a94:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 8013a98:	f043 0307 	orr.w	r3, r3, #7
 8013a9c:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 8013aa0:	e7e6      	b.n	8013a70 <RegionEU868NextChannel+0xc4>
 8013aa2:	bf00      	nop
 8013aa4:	200011a0 	.word	0x200011a0
 8013aa8:	2000119c 	.word	0x2000119c

08013aac <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8013aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013aae:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 8013ab6:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8013ab8:	2d02      	cmp	r5, #2
 8013aba:	d94f      	bls.n	8013b5c <RegionEU868ChannelAdd+0xb0>
 8013abc:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8013abe:	2d0f      	cmp	r5, #15
 8013ac0:	d84e      	bhi.n	8013b60 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8013ac2:	6803      	ldr	r3, [r0, #0]
 8013ac4:	7a18      	ldrb	r0, [r3, #8]
 8013ac6:	f340 0003 	sbfx	r0, r0, #0, #4
 8013aca:	2207      	movs	r2, #7
 8013acc:	2100      	movs	r1, #0
 8013ace:	b240      	sxtb	r0, r0
 8013ad0:	f7fe ffc5 	bl	8012a5e <RegionCommonValueInRange>
 8013ad4:	2800      	cmp	r0, #0
 8013ad6:	d03d      	beq.n	8013b54 <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 8013ad8:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8013ada:	6823      	ldr	r3, [r4, #0]
 8013adc:	7a18      	ldrb	r0, [r3, #8]
 8013ade:	f340 1003 	sbfx	r0, r0, #4, #4
 8013ae2:	2207      	movs	r2, #7
 8013ae4:	2100      	movs	r1, #0
 8013ae6:	b240      	sxtb	r0, r0
 8013ae8:	f7fe ffb9 	bl	8012a5e <RegionCommonValueInRange>
 8013aec:	b900      	cbnz	r0, 8013af0 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 8013aee:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8013af0:	6820      	ldr	r0, [r4, #0]
 8013af2:	7a03      	ldrb	r3, [r0, #8]
 8013af4:	f343 0203 	sbfx	r2, r3, #0, #4
 8013af8:	b252      	sxtb	r2, r2
 8013afa:	f343 1303 	sbfx	r3, r3, #4, #4
 8013afe:	b25b      	sxtb	r3, r3
 8013b00:	429a      	cmp	r2, r3
 8013b02:	dd00      	ble.n	8013b06 <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 8013b04:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8013b06:	f10d 0107 	add.w	r1, sp, #7
 8013b0a:	6800      	ldr	r0, [r0, #0]
 8013b0c:	f7ff fab6 	bl	801307c <VerifyRfFreq>
 8013b10:	b310      	cbz	r0, 8013b58 <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 8013b12:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8013b14:	b106      	cbz	r6, 8013b18 <RegionEU868ChannelAdd+0x6c>
 8013b16:	bb33      	cbnz	r3, 8013b66 <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 8013b18:	bb3e      	cbnz	r6, 8013b6a <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 8013b1a:	bb43      	cbnz	r3, 8013b6e <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8013b1c:	4f15      	ldr	r7, [pc, #84]	; (8013b74 <RegionEU868ChannelAdd+0xc8>)
 8013b1e:	683b      	ldr	r3, [r7, #0]
 8013b20:	006e      	lsls	r6, r5, #1
 8013b22:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8013b26:	220c      	movs	r2, #12
 8013b28:	6821      	ldr	r1, [r4, #0]
 8013b2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013b2e:	f001 fdc4 	bl	80156ba <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8013b32:	683a      	ldr	r2, [r7, #0]
 8013b34:	442e      	add	r6, r5
 8013b36:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013b3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013b3e:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8013b40:	2301      	movs	r3, #1
 8013b42:	fa03 f505 	lsl.w	r5, r3, r5
 8013b46:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 8013b4a:	431d      	orrs	r5, r3
 8013b4c:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8013b50:	2000      	movs	r0, #0
 8013b52:	e006      	b.n	8013b62 <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 8013b54:	2601      	movs	r6, #1
 8013b56:	e7c0      	b.n	8013ada <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 8013b58:	2301      	movs	r3, #1
 8013b5a:	e7db      	b.n	8013b14 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8013b5c:	2006      	movs	r0, #6
 8013b5e:	e000      	b.n	8013b62 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013b60:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8013b62:	b003      	add	sp, #12
 8013b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8013b66:	2006      	movs	r0, #6
 8013b68:	e7fb      	b.n	8013b62 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 8013b6a:	2005      	movs	r0, #5
 8013b6c:	e7f9      	b.n	8013b62 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8013b6e:	2004      	movs	r0, #4
 8013b70:	e7f7      	b.n	8013b62 <RegionEU868ChannelAdd+0xb6>
 8013b72:	bf00      	nop
 8013b74:	200011a0 	.word	0x200011a0

08013b78 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8013b78:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8013b7a:	2902      	cmp	r1, #2
 8013b7c:	d801      	bhi.n	8013b82 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 8013b7e:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 8013b80:	4770      	bx	lr
{
 8013b82:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8013b84:	4b09      	ldr	r3, [pc, #36]	; (8013bac <RegionEU868ChannelsRemove+0x34>)
 8013b86:	6818      	ldr	r0, [r3, #0]
 8013b88:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8013b8c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8013b90:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8013b94:	2200      	movs	r2, #0
 8013b96:	f840 200c 	str.w	r2, [r0, ip]
 8013b9a:	605a      	str	r2, [r3, #4]
 8013b9c:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8013b9e:	2210      	movs	r2, #16
 8013ba0:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8013ba4:	f7fe ff9d 	bl	8012ae2 <RegionCommonChanDisable>
}
 8013ba8:	bd08      	pop	{r3, pc}
 8013baa:	bf00      	nop
 8013bac:	200011a0 	.word	0x200011a0

08013bb0 <RegionEU868ApplyCFList>:
{
 8013bb0:	b570      	push	{r4, r5, r6, lr}
 8013bb2:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8013bb4:	2350      	movs	r3, #80	; 0x50
 8013bb6:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 8013bba:	7a03      	ldrb	r3, [r0, #8]
 8013bbc:	2b10      	cmp	r3, #16
 8013bbe:	d136      	bne.n	8013c2e <RegionEU868ApplyCFList+0x7e>
 8013bc0:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 8013bc2:	6843      	ldr	r3, [r0, #4]
 8013bc4:	7bdd      	ldrb	r5, [r3, #15]
 8013bc6:	2d00      	cmp	r5, #0
 8013bc8:	d131      	bne.n	8013c2e <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8013bca:	2403      	movs	r4, #3
 8013bcc:	e01b      	b.n	8013c06 <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8013bce:	6872      	ldr	r2, [r6, #4]
 8013bd0:	5d53      	ldrb	r3, [r2, r5]
 8013bd2:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8013bd4:	442a      	add	r2, r5
 8013bd6:	7851      	ldrb	r1, [r2, #1]
 8013bd8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8013bdc:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8013bde:	7892      	ldrb	r2, [r2, #2]
 8013be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013be4:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 8013be6:	2264      	movs	r2, #100	; 0x64
 8013be8:	fb02 f303 	mul.w	r3, r2, r3
 8013bec:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 8013bee:	2300      	movs	r3, #0
 8013bf0:	9304      	str	r3, [sp, #16]
 8013bf2:	e011      	b.n	8013c18 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 8013bf4:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 8013bf8:	4668      	mov	r0, sp
 8013bfa:	f7ff ffbd 	bl	8013b78 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8013bfe:	3503      	adds	r5, #3
 8013c00:	b2ed      	uxtb	r5, r5
 8013c02:	3401      	adds	r4, #1
 8013c04:	b2e4      	uxtb	r4, r4
 8013c06:	2c0f      	cmp	r4, #15
 8013c08:	d811      	bhi.n	8013c2e <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8013c0a:	2c07      	cmp	r4, #7
 8013c0c:	d9df      	bls.n	8013bce <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 8013c12:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 8013c16:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 8013c18:	9b03      	ldr	r3, [sp, #12]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d0ea      	beq.n	8013bf4 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 8013c1e:	ab03      	add	r3, sp, #12
 8013c20:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 8013c22:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 8013c26:	a801      	add	r0, sp, #4
 8013c28:	f7ff ff40 	bl	8013aac <RegionEU868ChannelAdd>
 8013c2c:	e7e7      	b.n	8013bfe <RegionEU868ApplyCFList+0x4e>
}
 8013c2e:	b006      	add	sp, #24
 8013c30:	bd70      	pop	{r4, r5, r6, pc}

08013c32 <RegionEU868NewChannelReq>:
{
 8013c32:	b500      	push	{lr}
 8013c34:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 8013c36:	6803      	ldr	r3, [r0, #0]
 8013c38:	681a      	ldr	r2, [r3, #0]
 8013c3a:	b952      	cbnz	r2, 8013c52 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8013c3c:	7903      	ldrb	r3, [r0, #4]
 8013c3e:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8013c42:	a801      	add	r0, sp, #4
 8013c44:	f7ff ff98 	bl	8013b78 <RegionEU868ChannelsRemove>
 8013c48:	b1d0      	cbz	r0, 8013c80 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 8013c4a:	2003      	movs	r0, #3
}
 8013c4c:	b005      	add	sp, #20
 8013c4e:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8013c52:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8013c54:	7903      	ldrb	r3, [r0, #4]
 8013c56:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8013c5a:	a802      	add	r0, sp, #8
 8013c5c:	f7ff ff26 	bl	8013aac <RegionEU868ChannelAdd>
 8013c60:	2806      	cmp	r0, #6
 8013c62:	d80b      	bhi.n	8013c7c <RegionEU868NewChannelReq+0x4a>
 8013c64:	e8df f000 	tbb	[pc, r0]
 8013c68:	0a0a0a04 	.word	0x0a0a0a04
 8013c6c:	060e      	.short	0x060e
 8013c6e:	08          	.byte	0x08
 8013c6f:	00          	.byte	0x00
 8013c70:	2003      	movs	r0, #3
 8013c72:	e7eb      	b.n	8013c4c <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 8013c74:	2001      	movs	r0, #1
                break;
 8013c76:	e7e9      	b.n	8013c4c <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 8013c78:	2000      	movs	r0, #0
                break;
 8013c7a:	e7e7      	b.n	8013c4c <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 8013c7c:	2000      	movs	r0, #0
                break;
 8013c7e:	e7e5      	b.n	8013c4c <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 8013c80:	2000      	movs	r0, #0
 8013c82:	e7e3      	b.n	8013c4c <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 8013c84:	2002      	movs	r0, #2
 8013c86:	e7e1      	b.n	8013c4c <RegionEU868NewChannelReq+0x1a>

08013c88 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8013c88:	1a88      	subs	r0, r1, r2
 8013c8a:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 8013c8c:	2800      	cmp	r0, #0
 8013c8e:	db01      	blt.n	8013c94 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 8013c90:	b2c0      	uxtb	r0, r0
 8013c92:	4770      	bx	lr
        datarate = DR_0;
 8013c94:	2000      	movs	r0, #0
 8013c96:	e7fb      	b.n	8013c90 <RegionEU868ApplyDrOffset+0x8>

08013c98 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 8013c98:	b510      	push	{r4, lr}
 8013c9a:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8013c9c:	4b10      	ldr	r3, [pc, #64]	; (8013ce0 <VerifyRfFreq+0x48>)
 8013c9e:	6a1b      	ldr	r3, [r3, #32]
 8013ca0:	4798      	blx	r3
 8013ca2:	b1c8      	cbz	r0, 8013cd8 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8013ca4:	4b0f      	ldr	r3, [pc, #60]	; (8013ce4 <VerifyRfFreq+0x4c>)
 8013ca6:	4423      	add	r3, r4
 8013ca8:	4a0f      	ldr	r2, [pc, #60]	; (8013ce8 <VerifyRfFreq+0x50>)
 8013caa:	4293      	cmp	r3, r2
 8013cac:	d813      	bhi.n	8013cd6 <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8013cae:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 8013cb2:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 8013cb6:	f202 7245 	addw	r2, r2, #1861	; 0x745
 8013cba:	fba2 1203 	umull	r1, r2, r2, r3
 8013cbe:	0c92      	lsrs	r2, r2, #18
 8013cc0:	490a      	ldr	r1, [pc, #40]	; (8013cec <VerifyRfFreq+0x54>)
 8013cc2:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8013cc6:	b942      	cbnz	r2, 8013cda <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8013cc8:	4b09      	ldr	r3, [pc, #36]	; (8013cf0 <VerifyRfFreq+0x58>)
 8013cca:	4423      	add	r3, r4
 8013ccc:	4a09      	ldr	r2, [pc, #36]	; (8013cf4 <VerifyRfFreq+0x5c>)
 8013cce:	4293      	cmp	r3, r2
 8013cd0:	d902      	bls.n	8013cd8 <VerifyRfFreq+0x40>
    {
        return false;
 8013cd2:	2000      	movs	r0, #0
 8013cd4:	e000      	b.n	8013cd8 <VerifyRfFreq+0x40>
        return false;
 8013cd6:	2000      	movs	r0, #0
    }
    return true;
}
 8013cd8:	bd10      	pop	{r4, pc}
        return false;
 8013cda:	2000      	movs	r0, #0
 8013cdc:	e7fc      	b.n	8013cd8 <VerifyRfFreq+0x40>
 8013cde:	bf00      	nop
 8013ce0:	0801c3a0 	.word	0x0801c3a0
 8013ce4:	c8f78f60 	.word	0xc8f78f60
 8013ce8:	00401640 	.word	0x00401640
 8013cec:	000927c0 	.word	0x000927c0
 8013cf0:	ca37fea0 	.word	0xca37fea0
 8013cf4:	01808580 	.word	0x01808580

08013cf8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8013cf8:	b570      	push	{r4, r5, r6, lr}
 8013cfa:	b084      	sub	sp, #16
 8013cfc:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 8013cfe:	4b0a      	ldr	r3, [pc, #40]	; (8013d28 <GetTimeOnAir+0x30>)
 8013d00:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8013d02:	490a      	ldr	r1, [pc, #40]	; (8013d2c <GetTimeOnAir+0x34>)
 8013d04:	f7ff f976 	bl	8012ff4 <RegionCommonGetBandwidth>
 8013d08:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8013d0a:	4b09      	ldr	r3, [pc, #36]	; (8013d30 <GetTimeOnAir+0x38>)
 8013d0c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8013d0e:	2001      	movs	r0, #1
 8013d10:	9003      	str	r0, [sp, #12]
 8013d12:	b2e4      	uxtb	r4, r4
 8013d14:	9402      	str	r4, [sp, #8]
 8013d16:	2200      	movs	r2, #0
 8013d18:	9201      	str	r2, [sp, #4]
 8013d1a:	2208      	movs	r2, #8
 8013d1c:	9200      	str	r2, [sp, #0]
 8013d1e:	4603      	mov	r3, r0
 8013d20:	4632      	mov	r2, r6
 8013d22:	47a8      	blx	r5
}
 8013d24:	b004      	add	sp, #16
 8013d26:	bd70      	pop	{r4, r5, r6, pc}
 8013d28:	0801be0c 	.word	0x0801be0c
 8013d2c:	0801bdb8 	.word	0x0801bdb8
 8013d30:	0801c3a0 	.word	0x0801c3a0

08013d34 <LimitTxPower>:
{
 8013d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d36:	4606      	mov	r6, r0
 8013d38:	4615      	mov	r5, r2
 8013d3a:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8013d3c:	f7ff f955 	bl	8012fea <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 8013d40:	2d04      	cmp	r5, #4
 8013d42:	d105      	bne.n	8013d50 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8013d44:	4634      	mov	r4, r6
 8013d46:	2e02      	cmp	r6, #2
 8013d48:	bfb8      	it	lt
 8013d4a:	2402      	movlt	r4, #2
}
 8013d4c:	4620      	mov	r0, r4
 8013d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d50:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8013d52:	2204      	movs	r2, #4
 8013d54:	2100      	movs	r1, #0
 8013d56:	4638      	mov	r0, r7
 8013d58:	f7fe fedc 	bl	8012b14 <RegionCommonCountChannels>
 8013d5c:	2831      	cmp	r0, #49	; 0x31
 8013d5e:	d8f5      	bhi.n	8013d4c <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8013d60:	4634      	mov	r4, r6
 8013d62:	2e05      	cmp	r6, #5
 8013d64:	bfb8      	it	lt
 8013d66:	2405      	movlt	r4, #5
 8013d68:	e7f0      	b.n	8013d4c <LimitTxPower+0x18>
	...

08013d6c <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8013d6c:	b500      	push	{lr}
 8013d6e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8013d70:	2300      	movs	r3, #0
 8013d72:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8013d74:	7803      	ldrb	r3, [r0, #0]
 8013d76:	3b01      	subs	r3, #1
 8013d78:	2b37      	cmp	r3, #55	; 0x37
 8013d7a:	d81f      	bhi.n	8013dbc <RegionUS915GetPhyParam+0x50>
 8013d7c:	e8df f003 	tbb	[pc, r3]
 8013d80:	1e1e1e1c 	.word	0x1e1e1e1c
 8013d84:	1e1e1e1e 	.word	0x1e1e1e1e
 8013d88:	3e3b1e1e 	.word	0x3e3b1e1e
 8013d8c:	4d1e4741 	.word	0x4d1e4741
 8013d90:	5d595551 	.word	0x5d595551
 8013d94:	6d6a1e61 	.word	0x6d6a1e61
 8013d98:	7f7c7670 	.word	0x7f7c7670
 8013d9c:	86831e1e 	.word	0x86831e1e
 8013da0:	1e1e1e23 	.word	0x1e1e1e23
 8013da4:	1e1e1e1e 	.word	0x1e1e1e1e
 8013da8:	1e1e1e1e 	.word	0x1e1e1e1e
 8013dac:	90891e1e 	.word	0x90891e1e
 8013db0:	a01e9d9a 	.word	0xa01e9d9a
 8013db4:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8013db8:	2308      	movs	r3, #8
 8013dba:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8013dbc:	9804      	ldr	r0, [sp, #16]
 8013dbe:	9005      	str	r0, [sp, #20]
}
 8013dc0:	b007      	add	sp, #28
 8013dc2:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 8013dc6:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8013dca:	f88d 3004 	strb.w	r3, [sp, #4]
 8013dce:	2304      	movs	r3, #4
 8013dd0:	f88d 3005 	strb.w	r3, [sp, #5]
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	f88d 3006 	strb.w	r3, [sp, #6]
 8013dda:	2348      	movs	r3, #72	; 0x48
 8013ddc:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8013de0:	4b44      	ldr	r3, [pc, #272]	; (8013ef4 <RegionUS915GetPhyParam+0x188>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8013de8:	9202      	str	r2, [sp, #8]
 8013dea:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8013dec:	a801      	add	r0, sp, #4
 8013dee:	f7ff f8dd 	bl	8012fac <RegionCommonGetNextLowerTxDr>
 8013df2:	9004      	str	r0, [sp, #16]
            break;
 8013df4:	e7e2      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8013df6:	2340      	movs	r3, #64	; 0x40
 8013df8:	9304      	str	r3, [sp, #16]
            break;
 8013dfa:	e7df      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8013dfc:	2320      	movs	r3, #32
 8013dfe:	9304      	str	r3, [sp, #16]
            break;
 8013e00:	e7dc      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8013e02:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8013e06:	4a3c      	ldr	r2, [pc, #240]	; (8013ef8 <RegionUS915GetPhyParam+0x18c>)
 8013e08:	5cd3      	ldrb	r3, [r2, r3]
 8013e0a:	9304      	str	r3, [sp, #16]
            break;
 8013e0c:	e7d6      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8013e0e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8013e12:	4a3a      	ldr	r2, [pc, #232]	; (8013efc <RegionUS915GetPhyParam+0x190>)
 8013e14:	5cd3      	ldrb	r3, [r2, r3]
 8013e16:	9304      	str	r3, [sp, #16]
            break;
 8013e18:	e7d0      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 8013e1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8013e1e:	9304      	str	r3, [sp, #16]
            break;
 8013e20:	e7cc      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8013e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013e26:	9304      	str	r3, [sp, #16]
            break;
 8013e28:	e7c8      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8013e2a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8013e2e:	9304      	str	r3, [sp, #16]
            break;
 8013e30:	e7c4      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8013e32:	f241 3388 	movw	r3, #5000	; 0x1388
 8013e36:	9304      	str	r3, [sp, #16]
            break;
 8013e38:	e7c0      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8013e3a:	f241 7370 	movw	r3, #6000	; 0x1770
 8013e3e:	9304      	str	r3, [sp, #16]
            break;
 8013e40:	e7bc      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8013e42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013e46:	482e      	ldr	r0, [pc, #184]	; (8013f00 <RegionUS915GetPhyParam+0x194>)
 8013e48:	f001 fc2a 	bl	80156a0 <randr>
 8013e4c:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8013e50:	9004      	str	r0, [sp, #16]
            break;
 8013e52:	e7b3      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 8013e54:	4b2b      	ldr	r3, [pc, #172]	; (8013f04 <RegionUS915GetPhyParam+0x198>)
 8013e56:	9304      	str	r3, [sp, #16]
            break;
 8013e58:	e7b0      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 8013e5a:	2308      	movs	r3, #8
 8013e5c:	9304      	str	r3, [sp, #16]
            break;
 8013e5e:	e7ad      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8013e60:	4b24      	ldr	r3, [pc, #144]	; (8013ef4 <RegionUS915GetPhyParam+0x188>)
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8013e68:	9304      	str	r3, [sp, #16]
            break;
 8013e6a:	e7a7      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8013e6c:	4b21      	ldr	r3, [pc, #132]	; (8013ef4 <RegionUS915GetPhyParam+0x188>)
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8013e74:	9304      	str	r3, [sp, #16]
            break;
 8013e76:	e7a1      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8013e78:	2348      	movs	r3, #72	; 0x48
 8013e7a:	9304      	str	r3, [sp, #16]
            break;
 8013e7c:	e79e      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8013e7e:	4b1d      	ldr	r3, [pc, #116]	; (8013ef4 <RegionUS915GetPhyParam+0x188>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	9304      	str	r3, [sp, #16]
            break;
 8013e84:	e79a      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8013e86:	4b20      	ldr	r3, [pc, #128]	; (8013f08 <RegionUS915GetPhyParam+0x19c>)
 8013e88:	9304      	str	r3, [sp, #16]
            break;
 8013e8a:	e797      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	9304      	str	r3, [sp, #16]
            break;
 8013e90:	e794      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8013e92:	4a1e      	ldr	r2, [pc, #120]	; (8013f0c <RegionUS915GetPhyParam+0x1a0>)
 8013e94:	491b      	ldr	r1, [pc, #108]	; (8013f04 <RegionUS915GetPhyParam+0x198>)
 8013e96:	7900      	ldrb	r0, [r0, #4]
 8013e98:	f7fe fd12 	bl	80128c0 <RegionBaseUSCalcDownlinkFrequency>
 8013e9c:	9004      	str	r0, [sp, #16]
            break;
 8013e9e:	e78d      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8013ea0:	2317      	movs	r3, #23
 8013ea2:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8013ea6:	2304      	movs	r3, #4
 8013ea8:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8013eac:	2303      	movs	r3, #3
 8013eae:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 8013eb2:	e783      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8013eb4:	2308      	movs	r3, #8
 8013eb6:	9304      	str	r3, [sp, #16]
            break;
 8013eb8:	e780      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8013eba:	2308      	movs	r3, #8
 8013ebc:	9304      	str	r3, [sp, #16]
            break;
 8013ebe:	e77d      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8013ec0:	4a12      	ldr	r2, [pc, #72]	; (8013f0c <RegionUS915GetPhyParam+0x1a0>)
 8013ec2:	4910      	ldr	r1, [pc, #64]	; (8013f04 <RegionUS915GetPhyParam+0x198>)
 8013ec4:	7900      	ldrb	r0, [r0, #4]
 8013ec6:	f7fe fcfb 	bl	80128c0 <RegionBaseUSCalcDownlinkFrequency>
 8013eca:	9004      	str	r0, [sp, #16]
            break;
 8013ecc:	e776      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8013ece:	2308      	movs	r3, #8
 8013ed0:	9304      	str	r3, [sp, #16]
            break;
 8013ed2:	e773      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8013ed4:	2308      	movs	r3, #8
 8013ed6:	9304      	str	r3, [sp, #16]
            break;
 8013ed8:	e770      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8013eda:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8013ede:	4a0c      	ldr	r2, [pc, #48]	; (8013f10 <RegionUS915GetPhyParam+0x1a4>)
 8013ee0:	5cd3      	ldrb	r3, [r2, r3]
 8013ee2:	9304      	str	r3, [sp, #16]
            break;
 8013ee4:	e76a      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8013ee6:	490b      	ldr	r1, [pc, #44]	; (8013f14 <RegionUS915GetPhyParam+0x1a8>)
 8013ee8:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8013eec:	f7ff f882 	bl	8012ff4 <RegionCommonGetBandwidth>
 8013ef0:	9004      	str	r0, [sp, #16]
            break;
 8013ef2:	e763      	b.n	8013dbc <RegionUS915GetPhyParam+0x50>
 8013ef4:	200011ac 	.word	0x200011ac
 8013ef8:	0801be2c 	.word	0x0801be2c
 8013efc:	0801be1c 	.word	0x0801be1c
 8013f00:	fffffc18 	.word	0xfffffc18
 8013f04:	370870a0 	.word	0x370870a0
 8013f08:	4200999a 	.word	0x4200999a
 8013f0c:	000927c0 	.word	0x000927c0
 8013f10:	0801be0c 	.word	0x0801be0c
 8013f14:	0801bdb8 	.word	0x0801bdb8

08013f18 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8013f18:	b510      	push	{r4, lr}
 8013f1a:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8013f1c:	4b0b      	ldr	r3, [pc, #44]	; (8013f4c <RegionUS915SetBandTxDone+0x34>)
 8013f1e:	681a      	ldr	r2, [r3, #0]
 8013f20:	7803      	ldrb	r3, [r0, #0]
 8013f22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013f26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013f2a:	7a5b      	ldrb	r3, [r3, #9]
 8013f2c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8013f30:	4b07      	ldr	r3, [pc, #28]	; (8013f50 <RegionUS915SetBandTxDone+0x38>)
 8013f32:	681c      	ldr	r4, [r3, #0]
 8013f34:	6903      	ldr	r3, [r0, #16]
 8013f36:	9300      	str	r3, [sp, #0]
 8013f38:	68c3      	ldr	r3, [r0, #12]
 8013f3a:	7842      	ldrb	r2, [r0, #1]
 8013f3c:	6881      	ldr	r1, [r0, #8]
 8013f3e:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 8013f42:	f7fe fe0c 	bl	8012b5e <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8013f46:	b002      	add	sp, #8
 8013f48:	bd10      	pop	{r4, pc}
 8013f4a:	bf00      	nop
 8013f4c:	200011ac 	.word	0x200011ac
 8013f50:	200011a4 	.word	0x200011a4

08013f54 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8013f54:	b510      	push	{r4, lr}
 8013f56:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8013f58:	2301      	movs	r3, #1
 8013f5a:	f8ad 3000 	strh.w	r3, [sp]
 8013f5e:	2300      	movs	r3, #0
 8013f60:	f88d 3002 	strb.w	r3, [sp, #2]
 8013f64:	9301      	str	r3, [sp, #4]
 8013f66:	9302      	str	r3, [sp, #8]
 8013f68:	9303      	str	r3, [sp, #12]
 8013f6a:	9304      	str	r3, [sp, #16]
 8013f6c:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 8013f70:	7b04      	ldrb	r4, [r0, #12]
 8013f72:	b174      	cbz	r4, 8013f92 <RegionUS915InitDefaults+0x3e>
 8013f74:	3c01      	subs	r4, #1
 8013f76:	b2e4      	uxtb	r4, r4
 8013f78:	2c01      	cmp	r4, #1
 8013f7a:	d87e      	bhi.n	801407a <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8013f7c:	4b40      	ldr	r3, [pc, #256]	; (8014080 <RegionUS915InitDefaults+0x12c>)
 8013f7e:	6818      	ldr	r0, [r3, #0]
 8013f80:	2206      	movs	r2, #6
 8013f82:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8013f86:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8013f8a:	f7fe fdd9 	bl	8012b40 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8013f8e:	2300      	movs	r3, #0
 8013f90:	e071      	b.n	8014076 <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8013f92:	6803      	ldr	r3, [r0, #0]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d070      	beq.n	801407a <RegionUS915InitDefaults+0x126>
 8013f98:	6842      	ldr	r2, [r0, #4]
 8013f9a:	2a00      	cmp	r2, #0
 8013f9c:	d06d      	beq.n	801407a <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8013f9e:	4939      	ldr	r1, [pc, #228]	; (8014084 <RegionUS915InitDefaults+0x130>)
 8013fa0:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8013fa2:	4937      	ldr	r1, [pc, #220]	; (8014080 <RegionUS915InitDefaults+0x12c>)
 8013fa4:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 8013fa6:	6880      	ldr	r0, [r0, #8]
 8013fa8:	4a37      	ldr	r2, [pc, #220]	; (8014088 <RegionUS915InitDefaults+0x134>)
 8013faa:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8013fac:	2200      	movs	r2, #0
 8013fae:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8013fb0:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8013fb2:	2218      	movs	r2, #24
 8013fb4:	4669      	mov	r1, sp
 8013fb6:	f001 fb80 	bl	80156ba <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8013fba:	e011      	b.n	8013fe0 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8013fbc:	4b30      	ldr	r3, [pc, #192]	; (8014080 <RegionUS915InitDefaults+0x12c>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	4932      	ldr	r1, [pc, #200]	; (801408c <RegionUS915InitDefaults+0x138>)
 8013fc2:	4a33      	ldr	r2, [pc, #204]	; (8014090 <RegionUS915InitDefaults+0x13c>)
 8013fc4:	fb01 2204 	mla	r2, r1, r4, r2
 8013fc8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8013fcc:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8013fd0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8013fd4:	2230      	movs	r2, #48	; 0x30
 8013fd6:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 8013fd8:	2200      	movs	r2, #0
 8013fda:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8013fdc:	3401      	adds	r4, #1
 8013fde:	b2e4      	uxtb	r4, r4
 8013fe0:	2c3f      	cmp	r4, #63	; 0x3f
 8013fe2:	d9eb      	bls.n	8013fbc <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8013fe4:	2340      	movs	r3, #64	; 0x40
 8013fe6:	2b47      	cmp	r3, #71	; 0x47
 8013fe8:	d814      	bhi.n	8014014 <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8013fea:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 8013fee:	4a24      	ldr	r2, [pc, #144]	; (8014080 <RegionUS915InitDefaults+0x12c>)
 8013ff0:	6812      	ldr	r2, [r2, #0]
 8013ff2:	4c28      	ldr	r4, [pc, #160]	; (8014094 <RegionUS915InitDefaults+0x140>)
 8013ff4:	4928      	ldr	r1, [pc, #160]	; (8014098 <RegionUS915InitDefaults+0x144>)
 8013ff6:	fb04 1100 	mla	r1, r4, r0, r1
 8013ffa:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8013ffe:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8014002:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8014006:	2144      	movs	r1, #68	; 0x44
 8014008:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 801400a:	2100      	movs	r1, #0
 801400c:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801400e:	3301      	adds	r3, #1
 8014010:	b2db      	uxtb	r3, r3
 8014012:	e7e8      	b.n	8013fe6 <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8014014:	4c1a      	ldr	r4, [pc, #104]	; (8014080 <RegionUS915InitDefaults+0x12c>)
 8014016:	6820      	ldr	r0, [r4, #0]
 8014018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801401c:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8014020:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8014024:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8014028:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801402c:	23ff      	movs	r3, #255	; 0xff
 801402e:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8014032:	2300      	movs	r3, #0
 8014034:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014038:	2206      	movs	r2, #6
 801403a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 801403e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8014042:	f7fe fd7d 	bl	8012b40 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8014046:	6821      	ldr	r1, [r4, #0]
 8014048:	2206      	movs	r2, #6
 801404a:	f501 7158 	add.w	r1, r1, #864	; 0x360
 801404e:	4b0d      	ldr	r3, [pc, #52]	; (8014084 <RegionUS915InitDefaults+0x130>)
 8014050:	6818      	ldr	r0, [r3, #0]
 8014052:	f7fe fd75 	bl	8012b40 <RegionCommonChanMaskCopy>
            break;
 8014056:	e010      	b.n	801407a <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8014058:	4a0a      	ldr	r2, [pc, #40]	; (8014084 <RegionUS915InitDefaults+0x130>)
 801405a:	6811      	ldr	r1, [r2, #0]
 801405c:	4a08      	ldr	r2, [pc, #32]	; (8014080 <RegionUS915InitDefaults+0x12c>)
 801405e:	6812      	ldr	r2, [r2, #0]
 8014060:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8014064:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8014068:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801406c:	4002      	ands	r2, r0
 801406e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8014072:	3301      	adds	r3, #1
 8014074:	b2db      	uxtb	r3, r3
 8014076:	2b05      	cmp	r3, #5
 8014078:	d9ee      	bls.n	8014058 <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 801407a:	b006      	add	sp, #24
 801407c:	bd10      	pop	{r4, pc}
 801407e:	bf00      	nop
 8014080:	200011ac 	.word	0x200011ac
 8014084:	200011a8 	.word	0x200011a8
 8014088:	200011a4 	.word	0x200011a4
 801408c:	00030d40 	.word	0x00030d40
 8014090:	35c80160 	.word	0x35c80160
 8014094:	00186a00 	.word	0x00186a00
 8014098:	35d2afc0 	.word	0x35d2afc0

0801409c <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801409c:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 801409e:	290a      	cmp	r1, #10
 80140a0:	d833      	bhi.n	801410a <RegionUS915Verify+0x6e>
 80140a2:	e8df f001 	tbb	[pc, r1]
 80140a6:	3206      	.short	0x3206
 80140a8:	0a323232 	.word	0x0a323232
 80140ac:	28321e14 	.word	0x28321e14
 80140b0:	28          	.byte	0x28
 80140b1:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80140b2:	6800      	ldr	r0, [r0, #0]
 80140b4:	f7ff fdf0 	bl	8013c98 <VerifyRfFreq>
 80140b8:	e028      	b.n	801410c <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 80140ba:	2204      	movs	r2, #4
 80140bc:	2100      	movs	r1, #0
 80140be:	f990 0000 	ldrsb.w	r0, [r0]
 80140c2:	f7fe fccc 	bl	8012a5e <RegionCommonValueInRange>
 80140c6:	3800      	subs	r0, #0
 80140c8:	bf18      	it	ne
 80140ca:	2001      	movne	r0, #1
 80140cc:	e01e      	b.n	801410c <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80140ce:	2205      	movs	r2, #5
 80140d0:	2100      	movs	r1, #0
 80140d2:	f990 0000 	ldrsb.w	r0, [r0]
 80140d6:	f7fe fcc2 	bl	8012a5e <RegionCommonValueInRange>
 80140da:	3800      	subs	r0, #0
 80140dc:	bf18      	it	ne
 80140de:	2001      	movne	r0, #1
 80140e0:	e014      	b.n	801410c <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 80140e2:	220d      	movs	r2, #13
 80140e4:	2108      	movs	r1, #8
 80140e6:	f990 0000 	ldrsb.w	r0, [r0]
 80140ea:	f7fe fcb8 	bl	8012a5e <RegionCommonValueInRange>
 80140ee:	3800      	subs	r0, #0
 80140f0:	bf18      	it	ne
 80140f2:	2001      	movne	r0, #1
 80140f4:	e00a      	b.n	801410c <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80140f6:	220e      	movs	r2, #14
 80140f8:	2100      	movs	r1, #0
 80140fa:	f990 0000 	ldrsb.w	r0, [r0]
 80140fe:	f7fe fcae 	bl	8012a5e <RegionCommonValueInRange>
 8014102:	3800      	subs	r0, #0
 8014104:	bf18      	it	ne
 8014106:	2001      	movne	r0, #1
 8014108:	e000      	b.n	801410c <RegionUS915Verify+0x70>
    switch( phyAttribute )
 801410a:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801410c:	bd08      	pop	{r3, pc}
	...

08014110 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8014110:	7a03      	ldrb	r3, [r0, #8]
 8014112:	2b10      	cmp	r3, #16
 8014114:	d134      	bne.n	8014180 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8014116:	6843      	ldr	r3, [r0, #4]
 8014118:	7bdb      	ldrb	r3, [r3, #15]
 801411a:	2b01      	cmp	r3, #1
 801411c:	d130      	bne.n	8014180 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801411e:	2200      	movs	r2, #0
 8014120:	4613      	mov	r3, r2
 8014122:	2a04      	cmp	r2, #4
 8014124:	d82b      	bhi.n	801417e <RegionUS915ApplyCFList+0x6e>
{
 8014126:	b530      	push	{r4, r5, lr}
 8014128:	e010      	b.n	801414c <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 801412a:	4916      	ldr	r1, [pc, #88]	; (8014184 <RegionUS915ApplyCFList+0x74>)
 801412c:	680d      	ldr	r5, [r1, #0]
 801412e:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 8014132:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8014136:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 801413a:	4021      	ands	r1, r4
 801413c:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8014140:	3301      	adds	r3, #1
 8014142:	b2db      	uxtb	r3, r3
 8014144:	3202      	adds	r2, #2
 8014146:	b2d2      	uxtb	r2, r2
 8014148:	2b04      	cmp	r3, #4
 801414a:	d817      	bhi.n	801417c <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801414c:	6841      	ldr	r1, [r0, #4]
 801414e:	4c0e      	ldr	r4, [pc, #56]	; (8014188 <RegionUS915ApplyCFList+0x78>)
 8014150:	6824      	ldr	r4, [r4, #0]
 8014152:	469c      	mov	ip, r3
 8014154:	5c89      	ldrb	r1, [r1, r2]
 8014156:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 801415a:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801415e:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8014162:	4496      	add	lr, r2
 8014164:	f89e e001 	ldrb.w	lr, [lr, #1]
 8014168:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 801416c:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 8014170:	2b04      	cmp	r3, #4
 8014172:	d1da      	bne.n	801412a <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8014174:	b2c9      	uxtb	r1, r1
 8014176:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 801417a:	e7d6      	b.n	801412a <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 801417c:	bd30      	pop	{r4, r5, pc}
 801417e:	4770      	bx	lr
 8014180:	4770      	bx	lr
 8014182:	bf00      	nop
 8014184:	200011a8 	.word	0x200011a8
 8014188:	200011ac 	.word	0x200011ac

0801418c <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801418c:	b570      	push	{r4, r5, r6, lr}
 801418e:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8014190:	2204      	movs	r2, #4
 8014192:	2100      	movs	r1, #0
 8014194:	6800      	ldr	r0, [r0, #0]
 8014196:	f7fe fcbd 	bl	8012b14 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801419a:	2801      	cmp	r0, #1
 801419c:	d031      	beq.n	8014202 <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 801419e:	792c      	ldrb	r4, [r5, #4]
 80141a0:	b11c      	cbz	r4, 80141aa <RegionUS915ChanMaskSet+0x1e>
 80141a2:	2c01      	cmp	r4, #1
 80141a4:	d023      	beq.n	80141ee <RegionUS915ChanMaskSet+0x62>
 80141a6:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 80141a8:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80141aa:	4e17      	ldr	r6, [pc, #92]	; (8014208 <RegionUS915ChanMaskSet+0x7c>)
 80141ac:	6830      	ldr	r0, [r6, #0]
 80141ae:	2206      	movs	r2, #6
 80141b0:	6829      	ldr	r1, [r5, #0]
 80141b2:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80141b6:	f7fe fcc3 	bl	8012b40 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 80141ba:	6830      	ldr	r0, [r6, #0]
 80141bc:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 80141c0:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80141c4:	2300      	movs	r3, #0
 80141c6:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80141ca:	e00c      	b.n	80141e6 <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80141cc:	4b0f      	ldr	r3, [pc, #60]	; (801420c <RegionUS915ChanMaskSet+0x80>)
 80141ce:	681a      	ldr	r2, [r3, #0]
 80141d0:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 80141d4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80141d8:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 80141dc:	400b      	ands	r3, r1
 80141de:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80141e2:	3401      	adds	r4, #1
 80141e4:	b2e4      	uxtb	r4, r4
 80141e6:	2c05      	cmp	r4, #5
 80141e8:	d9f0      	bls.n	80141cc <RegionUS915ChanMaskSet+0x40>
    return true;
 80141ea:	2001      	movs	r0, #1
 80141ec:	e7dc      	b.n	80141a8 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80141ee:	4b06      	ldr	r3, [pc, #24]	; (8014208 <RegionUS915ChanMaskSet+0x7c>)
 80141f0:	6818      	ldr	r0, [r3, #0]
 80141f2:	2206      	movs	r2, #6
 80141f4:	6829      	ldr	r1, [r5, #0]
 80141f6:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 80141fa:	f7fe fca1 	bl	8012b40 <RegionCommonChanMaskCopy>
    return true;
 80141fe:	2001      	movs	r0, #1
            break;
 8014200:	e7d2      	b.n	80141a8 <RegionUS915ChanMaskSet+0x1c>
        return false;
 8014202:	2000      	movs	r0, #0
 8014204:	e7d0      	b.n	80141a8 <RegionUS915ChanMaskSet+0x1c>
 8014206:	bf00      	nop
 8014208:	200011ac 	.word	0x200011ac
 801420c:	200011a8 	.word	0x200011a8

08014210 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014212:	b083      	sub	sp, #12
 8014214:	460e      	mov	r6, r1
 8014216:	4617      	mov	r7, r2
 8014218:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801421a:	280d      	cmp	r0, #13
 801421c:	bfa8      	it	ge
 801421e:	200d      	movge	r0, #13
 8014220:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8014222:	4d0f      	ldr	r5, [pc, #60]	; (8014260 <RegionUS915ComputeRxWindowParameters+0x50>)
 8014224:	4629      	mov	r1, r5
 8014226:	f7fe fee5 	bl	8012ff4 <RegionCommonGetBandwidth>
 801422a:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801422c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8014230:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8014234:	4a0b      	ldr	r2, [pc, #44]	; (8014264 <RegionUS915ComputeRxWindowParameters+0x54>)
 8014236:	5cd0      	ldrb	r0, [r2, r3]
 8014238:	f7fe fda8 	bl	8012d8c <RegionCommonComputeSymbolTimeLoRa>
 801423c:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801423e:	4b0a      	ldr	r3, [pc, #40]	; (8014268 <RegionUS915ComputeRxWindowParameters+0x58>)
 8014240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014242:	4798      	blx	r3
 8014244:	4603      	mov	r3, r0
 8014246:	f104 020c 	add.w	r2, r4, #12
 801424a:	9201      	str	r2, [sp, #4]
 801424c:	3408      	adds	r4, #8
 801424e:	9400      	str	r4, [sp, #0]
 8014250:	463a      	mov	r2, r7
 8014252:	4631      	mov	r1, r6
 8014254:	4628      	mov	r0, r5
 8014256:	f7fe fda7 	bl	8012da8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801425a:	b003      	add	sp, #12
 801425c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801425e:	bf00      	nop
 8014260:	0801bdb8 	.word	0x0801bdb8
 8014264:	0801be0c 	.word	0x0801be0c
 8014268:	0801c3a0 	.word	0x0801c3a0

0801426c <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801426c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014270:	b08b      	sub	sp, #44	; 0x2c
 8014272:	4604      	mov	r4, r0
 8014274:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8014276:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801427a:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 801427c:	4b22      	ldr	r3, [pc, #136]	; (8014308 <RegionUS915RxConfig+0x9c>)
 801427e:	685b      	ldr	r3, [r3, #4]
 8014280:	4798      	blx	r3
 8014282:	2800      	cmp	r0, #0
 8014284:	d13d      	bne.n	8014302 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8014286:	7ce3      	ldrb	r3, [r4, #19]
 8014288:	b933      	cbnz	r3, 8014298 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801428a:	7827      	ldrb	r7, [r4, #0]
 801428c:	f007 0307 	and.w	r3, r7, #7
 8014290:	4a1e      	ldr	r2, [pc, #120]	; (801430c <RegionUS915RxConfig+0xa0>)
 8014292:	4f1f      	ldr	r7, [pc, #124]	; (8014310 <RegionUS915RxConfig+0xa4>)
 8014294:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8014298:	4b1e      	ldr	r3, [pc, #120]	; (8014314 <RegionUS915RxConfig+0xa8>)
 801429a:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 801429e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8014308 <RegionUS915RxConfig+0x9c>
 80142a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80142a6:	4638      	mov	r0, r7
 80142a8:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80142aa:	f8d8 8018 	ldr.w	r8, [r8, #24]
 80142ae:	7ca3      	ldrb	r3, [r4, #18]
 80142b0:	9309      	str	r3, [sp, #36]	; 0x24
 80142b2:	2001      	movs	r0, #1
 80142b4:	9008      	str	r0, [sp, #32]
 80142b6:	2200      	movs	r2, #0
 80142b8:	9207      	str	r2, [sp, #28]
 80142ba:	9206      	str	r2, [sp, #24]
 80142bc:	9205      	str	r2, [sp, #20]
 80142be:	9204      	str	r2, [sp, #16]
 80142c0:	9203      	str	r2, [sp, #12]
 80142c2:	8923      	ldrh	r3, [r4, #8]
 80142c4:	9302      	str	r3, [sp, #8]
 80142c6:	2308      	movs	r3, #8
 80142c8:	9301      	str	r3, [sp, #4]
 80142ca:	9200      	str	r2, [sp, #0]
 80142cc:	4603      	mov	r3, r0
 80142ce:	464a      	mov	r2, r9
 80142d0:	78a1      	ldrb	r1, [r4, #2]
 80142d2:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80142d4:	7c63      	ldrb	r3, [r4, #17]
 80142d6:	b18b      	cbz	r3, 80142fc <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 80142d8:	4b0f      	ldr	r3, [pc, #60]	; (8014318 <RegionUS915RxConfig+0xac>)
 80142da:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80142dc:	4b0a      	ldr	r3, [pc, #40]	; (8014308 <RegionUS915RxConfig+0x9c>)
 80142de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142e0:	310d      	adds	r1, #13
 80142e2:	b2c9      	uxtb	r1, r1
 80142e4:	2001      	movs	r0, #1
 80142e6:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80142e8:	4632      	mov	r2, r6
 80142ea:	4639      	mov	r1, r7
 80142ec:	7ce0      	ldrb	r0, [r4, #19]
 80142ee:	f7fe fe93 	bl	8013018 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80142f2:	702e      	strb	r6, [r5, #0]
    return true;
 80142f4:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80142f6:	b00b      	add	sp, #44	; 0x2c
 80142f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 80142fc:	4b07      	ldr	r3, [pc, #28]	; (801431c <RegionUS915RxConfig+0xb0>)
 80142fe:	5d99      	ldrb	r1, [r3, r6]
 8014300:	e7ec      	b.n	80142dc <RegionUS915RxConfig+0x70>
        return false;
 8014302:	2000      	movs	r0, #0
 8014304:	e7f7      	b.n	80142f6 <RegionUS915RxConfig+0x8a>
 8014306:	bf00      	nop
 8014308:	0801c3a0 	.word	0x0801c3a0
 801430c:	000927c0 	.word	0x000927c0
 8014310:	370870a0 	.word	0x370870a0
 8014314:	0801be0c 	.word	0x0801be0c
 8014318:	0801be1c 	.word	0x0801be1c
 801431c:	0801be2c 	.word	0x0801be2c

08014320 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014324:	b08d      	sub	sp, #52	; 0x34
 8014326:	4604      	mov	r4, r0
 8014328:	468b      	mov	fp, r1
 801432a:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801432c:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8014330:	4b32      	ldr	r3, [pc, #200]	; (80143fc <RegionUS915TxConfig+0xdc>)
 8014332:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8014336:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8014400 <RegionUS915TxConfig+0xe0>
 801433a:	f8d9 3000 	ldr.w	r3, [r9]
 801433e:	7801      	ldrb	r1, [r0, #0]
 8014340:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014344:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8014348:	7a49      	ldrb	r1, [r1, #9]
 801434a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801434e:	482d      	ldr	r0, [pc, #180]	; (8014404 <RegionUS915TxConfig+0xe4>)
 8014350:	6800      	ldr	r0, [r0, #0]
 8014352:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8014356:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801435a:	f991 1002 	ldrsb.w	r1, [r1, #2]
 801435e:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8014362:	f7ff fce7 	bl	8013d34 <LimitTxPower>
 8014366:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8014368:	4927      	ldr	r1, [pc, #156]	; (8014408 <RegionUS915TxConfig+0xe8>)
 801436a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801436e:	f7fe fe41 	bl	8012ff4 <RegionCommonGetBandwidth>
 8014372:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8014374:	2200      	movs	r2, #0
 8014376:	4925      	ldr	r1, [pc, #148]	; (801440c <RegionUS915TxConfig+0xec>)
 8014378:	4630      	mov	r0, r6
 801437a:	f7fe fd51 	bl	8012e20 <RegionCommonComputeTxPower>
 801437e:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8014380:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8014410 <RegionUS915TxConfig+0xf0>
 8014384:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8014388:	f8d9 1000 	ldr.w	r1, [r9]
 801438c:	7823      	ldrb	r3, [r4, #0]
 801438e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014392:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8014396:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8014398:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801439c:	9308      	str	r3, [sp, #32]
 801439e:	2200      	movs	r2, #0
 80143a0:	9207      	str	r2, [sp, #28]
 80143a2:	9206      	str	r2, [sp, #24]
 80143a4:	9205      	str	r2, [sp, #20]
 80143a6:	2501      	movs	r5, #1
 80143a8:	9504      	str	r5, [sp, #16]
 80143aa:	9203      	str	r2, [sp, #12]
 80143ac:	2308      	movs	r3, #8
 80143ae:	9302      	str	r3, [sp, #8]
 80143b0:	9501      	str	r5, [sp, #4]
 80143b2:	f8cd a000 	str.w	sl, [sp]
 80143b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80143ba:	4628      	mov	r0, r5
 80143bc:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 80143c0:	47e0      	blx	ip
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80143c2:	f8d9 2000 	ldr.w	r2, [r9]
 80143c6:	7823      	ldrb	r3, [r4, #0]
 80143c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80143cc:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80143d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80143d4:	f7fe fe42 	bl	801305c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 80143d8:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80143dc:	7b21      	ldrb	r1, [r4, #12]
 80143de:	4628      	mov	r0, r5
 80143e0:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80143e2:	89a1      	ldrh	r1, [r4, #12]
 80143e4:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80143e8:	f7ff fc86 	bl	8013cf8 <GetTimeOnAir>
 80143ec:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 80143ee:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 80143f2:	4628      	mov	r0, r5
 80143f4:	b00d      	add	sp, #52	; 0x34
 80143f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143fa:	bf00      	nop
 80143fc:	0801be0c 	.word	0x0801be0c
 8014400:	200011ac 	.word	0x200011ac
 8014404:	200011a4 	.word	0x200011a4
 8014408:	0801bdb8 	.word	0x0801bdb8
 801440c:	41f00000 	.word	0x41f00000
 8014410:	0801c3a0 	.word	0x0801c3a0

08014414 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014418:	b091      	sub	sp, #68	; 0x44
 801441a:	4605      	mov	r5, r0
 801441c:	4688      	mov	r8, r1
 801441e:	4617      	mov	r7, r2
 8014420:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8014422:	2400      	movs	r4, #0
 8014424:	940e      	str	r4, [sp, #56]	; 0x38
 8014426:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801442a:	940b      	str	r4, [sp, #44]	; 0x2c
 801442c:	940c      	str	r4, [sp, #48]	; 0x30
 801442e:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8014430:	4b97      	ldr	r3, [pc, #604]	; (8014690 <RegionUS915LinkAdrReq+0x27c>)
 8014432:	6819      	ldr	r1, [r3, #0]
 8014434:	2206      	movs	r2, #6
 8014436:	f501 7158 	add.w	r1, r1, #864	; 0x360
 801443a:	a80b      	add	r0, sp, #44	; 0x2c
 801443c:	f7fe fb80 	bl	8012b40 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8014440:	e00d      	b.n	801445e <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8014442:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014446:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 801444a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 801444e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 8014452:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8014456:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 801445a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801445e:	7a2b      	ldrb	r3, [r5, #8]
 8014460:	42a3      	cmp	r3, r4
 8014462:	f240 8081 	bls.w	8014568 <RegionUS915LinkAdrReq+0x154>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8014466:	6868      	ldr	r0, [r5, #4]
 8014468:	a90e      	add	r1, sp, #56	; 0x38
 801446a:	4420      	add	r0, r4
 801446c:	f7fe fc18 	bl	8012ca0 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8014470:	2800      	cmp	r0, #0
 8014472:	d079      	beq.n	8014568 <RegionUS915LinkAdrReq+0x154>
        bytesProcessed += nextIndex;
 8014474:	4404      	add	r4, r0
 8014476:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 8014478:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 801447c:	f1bc 0f06 	cmp.w	ip, #6
 8014480:	d0df      	beq.n	8014442 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8014482:	f1bc 0f07 	cmp.w	ip, #7
 8014486:	d00a      	beq.n	801449e <RegionUS915LinkAdrReq+0x8a>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8014488:	f1bc 0f05 	cmp.w	ip, #5
 801448c:	d068      	beq.n	8014560 <RegionUS915LinkAdrReq+0x14c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801448e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8014492:	aa10      	add	r2, sp, #64	; 0x40
 8014494:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8014498:	f82c 3c14 	strh.w	r3, [ip, #-20]
 801449c:	e7df      	b.n	801445e <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 801449e:	2300      	movs	r3, #0
 80144a0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 80144a4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 80144a8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 80144ac:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80144b0:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80144b4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80144b8:	e7d1      	b.n	801445e <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 80144ba:	aa10      	add	r2, sp, #64	; 0x40
 80144bc:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80144c0:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 80144c4:	f062 02ff 	orn	r2, r2, #255	; 0xff
 80144c8:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 80144cc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80144d0:	4313      	orrs	r3, r2
 80144d2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 80144d6:	3101      	adds	r1, #1
 80144d8:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 80144da:	f10c 0c01 	add.w	ip, ip, #1
 80144de:	fa5f fc8c 	uxtb.w	ip, ip
 80144e2:	f1bc 0f07 	cmp.w	ip, #7
 80144e6:	d8ba      	bhi.n	801445e <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80144e8:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80144ec:	2301      	movs	r3, #1
 80144ee:	fa03 f30c 	lsl.w	r3, r3, ip
 80144f2:	421a      	tst	r2, r3
 80144f4:	d011      	beq.n	801451a <RegionUS915LinkAdrReq+0x106>
                    if( ( i % 2 ) == 0 )
 80144f6:	f01c 0f01 	tst.w	ip, #1
 80144fa:	d1de      	bne.n	80144ba <RegionUS915LinkAdrReq+0xa6>
                        channelsMask[cntChannelMask] |= 0x00FF;
 80144fc:	aa10      	add	r2, sp, #64	; 0x40
 80144fe:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8014502:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8014506:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 801450a:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 801450e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8014512:	4313      	orrs	r3, r2
 8014514:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8014518:	e7df      	b.n	80144da <RegionUS915LinkAdrReq+0xc6>
                    if( ( i % 2 ) == 0 )
 801451a:	f01c 0f01 	tst.w	ip, #1
 801451e:	d10f      	bne.n	8014540 <RegionUS915LinkAdrReq+0x12c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 8014520:	aa10      	add	r2, sp, #64	; 0x40
 8014522:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8014526:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 801452a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801452e:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8014532:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8014536:	ea22 0303 	bic.w	r3, r2, r3
 801453a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801453e:	e7cc      	b.n	80144da <RegionUS915LinkAdrReq+0xc6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 8014540:	aa10      	add	r2, sp, #64	; 0x40
 8014542:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8014546:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 801454a:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 801454e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8014552:	ea22 0303 	bic.w	r3, r2, r3
 8014556:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 801455a:	3101      	adds	r1, #1
 801455c:	b2c9      	uxtb	r1, r1
 801455e:	e7bc      	b.n	80144da <RegionUS915LinkAdrReq+0xc6>
            for( uint8_t i = 0; i <= 7; i++ )
 8014560:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 8014564:	4661      	mov	r1, ip
 8014566:	e7bc      	b.n	80144e2 <RegionUS915LinkAdrReq+0xce>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8014568:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 801456c:	2b03      	cmp	r3, #3
 801456e:	dd58      	ble.n	8014622 <RegionUS915LinkAdrReq+0x20e>
 8014570:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014574:	2302      	movs	r3, #2
 8014576:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801457a:	7a6b      	ldrb	r3, [r5, #9]
 801457c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8014580:	a809      	add	r0, sp, #36	; 0x24
 8014582:	f7ff fbf3 	bl	8013d6c <RegionUS915GetPhyParam>
 8014586:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 8014588:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801458c:	7aab      	ldrb	r3, [r5, #10]
 801458e:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8014592:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8014596:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801459a:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 801459e:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80145a2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80145a6:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80145aa:	f995 300b 	ldrsb.w	r3, [r5, #11]
 80145ae:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80145b2:	f995 300c 	ldrsb.w	r3, [r5, #12]
 80145b6:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80145ba:	f995 300d 	ldrsb.w	r3, [r5, #13]
 80145be:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 80145c2:	2348      	movs	r3, #72	; 0x48
 80145c4:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 80145c8:	ab0b      	add	r3, sp, #44	; 0x2c
 80145ca:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80145cc:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 80145d0:	2304      	movs	r3, #4
 80145d2:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80145d6:	4b2e      	ldr	r3, [pc, #184]	; (8014690 <RegionUS915LinkAdrReq+0x27c>)
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 80145dc:	230e      	movs	r3, #14
 80145de:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 80145e2:	2300      	movs	r3, #0
 80145e4:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80145e8:	682b      	ldr	r3, [r5, #0]
 80145ea:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80145ec:	ab0e      	add	r3, sp, #56	; 0x38
 80145ee:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 80145f2:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 80145f6:	4668      	mov	r0, sp
 80145f8:	f7fe fb70 	bl	8012cdc <RegionCommonLinkAdrReqVerifyParams>
 80145fc:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80145fe:	2807      	cmp	r0, #7
 8014600:	d01c      	beq.n	801463c <RegionUS915LinkAdrReq+0x228>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8014602:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8014606:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 801460a:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 801460e:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8014610:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8014614:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 8014616:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014618:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 801461a:	4628      	mov	r0, r5
 801461c:	b011      	add	sp, #68	; 0x44
 801461e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8014622:	2204      	movs	r2, #4
 8014624:	2100      	movs	r1, #0
 8014626:	a80b      	add	r0, sp, #44	; 0x2c
 8014628:	f7fe fa74 	bl	8012b14 <RegionCommonCountChannels>
 801462c:	2801      	cmp	r0, #1
 801462e:	d902      	bls.n	8014636 <RegionUS915LinkAdrReq+0x222>
 8014630:	f04f 0907 	mov.w	r9, #7
 8014634:	e79e      	b.n	8014574 <RegionUS915LinkAdrReq+0x160>
        status &= 0xFE; // Channel mask KO
 8014636:	f04f 0906 	mov.w	r9, #6
 801463a:	e79b      	b.n	8014574 <RegionUS915LinkAdrReq+0x160>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801463c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8014690 <RegionUS915LinkAdrReq+0x27c>
 8014640:	f8d9 0000 	ldr.w	r0, [r9]
 8014644:	2206      	movs	r2, #6
 8014646:	a90b      	add	r1, sp, #44	; 0x2c
 8014648:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801464c:	f7fe fa78 	bl	8012b40 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8014650:	4b10      	ldr	r3, [pc, #64]	; (8014694 <RegionUS915LinkAdrReq+0x280>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	f8d9 2000 	ldr.w	r2, [r9]
 8014658:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 801465c:	8818      	ldrh	r0, [r3, #0]
 801465e:	4001      	ands	r1, r0
 8014660:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8014662:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 8014666:	8858      	ldrh	r0, [r3, #2]
 8014668:	4001      	ands	r1, r0
 801466a:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801466c:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 8014670:	8898      	ldrh	r0, [r3, #4]
 8014672:	4001      	ands	r1, r0
 8014674:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8014676:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 801467a:	88d8      	ldrh	r0, [r3, #6]
 801467c:	4001      	ands	r1, r0
 801467e:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8014680:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 8014684:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8014686:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 801468a:	815a      	strh	r2, [r3, #10]
 801468c:	e7b9      	b.n	8014602 <RegionUS915LinkAdrReq+0x1ee>
 801468e:	bf00      	nop
 8014690:	200011ac 	.word	0x200011ac
 8014694:	200011a8 	.word	0x200011a8

08014698 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014698:	b538      	push	{r3, r4, r5, lr}
 801469a:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801469c:	6840      	ldr	r0, [r0, #4]
 801469e:	f7ff fafb 	bl	8013c98 <VerifyRfFreq>
 80146a2:	b310      	cbz	r0, 80146ea <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 80146a4:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 80146a6:	220d      	movs	r2, #13
 80146a8:	2108      	movs	r1, #8
 80146aa:	f994 0000 	ldrsb.w	r0, [r4]
 80146ae:	f7fe f9d6 	bl	8012a5e <RegionCommonValueInRange>
 80146b2:	b908      	cbnz	r0, 80146b8 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 80146b4:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80146b8:	2207      	movs	r2, #7
 80146ba:	2105      	movs	r1, #5
 80146bc:	f994 0000 	ldrsb.w	r0, [r4]
 80146c0:	f7fe f9cd 	bl	8012a5e <RegionCommonValueInRange>
 80146c4:	2801      	cmp	r0, #1
 80146c6:	d003      	beq.n	80146d0 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 80146c8:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80146cc:	2b0d      	cmp	r3, #13
 80146ce:	dd01      	ble.n	80146d4 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 80146d0:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 80146d4:	2203      	movs	r2, #3
 80146d6:	2100      	movs	r1, #0
 80146d8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80146dc:	f7fe f9bf 	bl	8012a5e <RegionCommonValueInRange>
 80146e0:	b908      	cbnz	r0, 80146e6 <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80146e2:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 80146e6:	4628      	mov	r0, r5
 80146e8:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 80146ea:	2506      	movs	r5, #6
 80146ec:	e7db      	b.n	80146a6 <RegionUS915RxParamSetupReq+0xe>

080146ee <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 80146ee:	f04f 30ff 	mov.w	r0, #4294967295
 80146f2:	4770      	bx	lr

080146f4 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 80146f4:	f04f 30ff 	mov.w	r0, #4294967295
 80146f8:	4770      	bx	lr

080146fa <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 80146fa:	f04f 30ff 	mov.w	r0, #4294967295
 80146fe:	4770      	bx	lr

08014700 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8014700:	b999      	cbnz	r1, 801472a <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8014702:	4b0e      	ldr	r3, [pc, #56]	; (801473c <RegionUS915AlternateDr+0x3c>)
 8014704:	681a      	ldr	r2, [r3, #0]
 8014706:	7b53      	ldrb	r3, [r2, #13]
 8014708:	3301      	adds	r3, #1
 801470a:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 801470c:	4b0b      	ldr	r3, [pc, #44]	; (801473c <RegionUS915AlternateDr+0x3c>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	7b5a      	ldrb	r2, [r3, #13]
 8014712:	4b0b      	ldr	r3, [pc, #44]	; (8014740 <RegionUS915AlternateDr+0x40>)
 8014714:	fba3 1302 	umull	r1, r3, r3, r2
 8014718:	085b      	lsrs	r3, r3, #1
 801471a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 801471e:	1ad3      	subs	r3, r2, r3
 8014720:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014724:	d007      	beq.n	8014736 <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 8014726:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 8014728:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 801472a:	4b04      	ldr	r3, [pc, #16]	; (801473c <RegionUS915AlternateDr+0x3c>)
 801472c:	681a      	ldr	r2, [r3, #0]
 801472e:	7b53      	ldrb	r3, [r2, #13]
 8014730:	3b01      	subs	r3, #1
 8014732:	7353      	strb	r3, [r2, #13]
 8014734:	e7ea      	b.n	801470c <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 8014736:	2004      	movs	r0, #4
 8014738:	4770      	bx	lr
 801473a:	bf00      	nop
 801473c:	200011a8 	.word	0x200011a8
 8014740:	38e38e39 	.word	0x38e38e39

08014744 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014748:	b0a4      	sub	sp, #144	; 0x90
 801474a:	4604      	mov	r4, r0
 801474c:	460e      	mov	r6, r1
 801474e:	4690      	mov	r8, r2
 8014750:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8014752:	2500      	movs	r5, #0
 8014754:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 8014758:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801475c:	9511      	str	r5, [sp, #68]	; 0x44
 801475e:	2244      	movs	r2, #68	; 0x44
 8014760:	4629      	mov	r1, r5
 8014762:	a812      	add	r0, sp, #72	; 0x48
 8014764:	f003 fd2c 	bl	80181c0 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8014768:	2204      	movs	r2, #4
 801476a:	4629      	mov	r1, r5
 801476c:	4b49      	ldr	r3, [pc, #292]	; (8014894 <RegionUS915NextChannel+0x150>)
 801476e:	6818      	ldr	r0, [r3, #0]
 8014770:	f7fe f9d0 	bl	8012b14 <RegionCommonCountChannels>
 8014774:	2800      	cmp	r0, #0
 8014776:	d052      	beq.n	801481e <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8014778:	f994 3008 	ldrsb.w	r3, [r4, #8]
 801477c:	2b03      	cmp	r3, #3
 801477e:	dd08      	ble.n	8014792 <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8014780:	4b44      	ldr	r3, [pc, #272]	; (8014894 <RegionUS915NextChannel+0x150>)
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	7a1a      	ldrb	r2, [r3, #8]
 8014786:	b922      	cbnz	r2, 8014792 <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8014788:	4a43      	ldr	r2, [pc, #268]	; (8014898 <RegionUS915NextChannel+0x154>)
 801478a:	6812      	ldr	r2, [r2, #0]
 801478c:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8014790:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8014792:	7a63      	ldrb	r3, [r4, #9]
 8014794:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8014798:	7a23      	ldrb	r3, [r4, #8]
 801479a:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801479e:	4b3d      	ldr	r3, [pc, #244]	; (8014894 <RegionUS915NextChannel+0x150>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80147a4:	4b3c      	ldr	r3, [pc, #240]	; (8014898 <RegionUS915NextChannel+0x154>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 80147aa:	4b3c      	ldr	r3, [pc, #240]	; (801489c <RegionUS915NextChannel+0x158>)
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 80147b0:	2348      	movs	r3, #72	; 0x48
 80147b2:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 80147b6:	2300      	movs	r3, #0
 80147b8:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80147ba:	6823      	ldr	r3, [r4, #0]
 80147bc:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80147be:	6863      	ldr	r3, [r4, #4]
 80147c0:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80147c2:	7aa3      	ldrb	r3, [r4, #10]
 80147c4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 80147c8:	2301      	movs	r3, #1
 80147ca:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80147ce:	ab03      	add	r3, sp, #12
 80147d0:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80147d2:	ab0c      	add	r3, sp, #48	; 0x30
 80147d4:	f104 020c 	add.w	r2, r4, #12
 80147d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147dc:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80147e0:	7d23      	ldrb	r3, [r4, #20]
 80147e2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80147e6:	8ae1      	ldrh	r1, [r4, #22]
 80147e8:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80147ec:	f7ff fa84 	bl	8013cf8 <GetTimeOnAir>
 80147f0:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80147f2:	f8cd 8004 	str.w	r8, [sp, #4]
 80147f6:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 80147fa:	9300      	str	r3, [sp, #0]
 80147fc:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 8014800:	aa11      	add	r2, sp, #68	; 0x44
 8014802:	4639      	mov	r1, r7
 8014804:	a809      	add	r0, sp, #36	; 0x24
 8014806:	f7fe fb87 	bl	8012f18 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801480a:	4605      	mov	r5, r0
 801480c:	2800      	cmp	r0, #0
 801480e:	d13c      	bne.n	801488a <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 8014810:	7a63      	ldrb	r3, [r4, #9]
 8014812:	b98b      	cbnz	r3, 8014838 <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8014814:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8014818:	b1db      	cbz	r3, 8014852 <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801481a:	4603      	mov	r3, r0
 801481c:	e026      	b.n	801486c <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801481e:	4d1d      	ldr	r5, [pc, #116]	; (8014894 <RegionUS915NextChannel+0x150>)
 8014820:	4b1d      	ldr	r3, [pc, #116]	; (8014898 <RegionUS915NextChannel+0x154>)
 8014822:	6819      	ldr	r1, [r3, #0]
 8014824:	2204      	movs	r2, #4
 8014826:	f501 7158 	add.w	r1, r1, #864	; 0x360
 801482a:	6828      	ldr	r0, [r5, #0]
 801482c:	f7fe f988 	bl	8012b40 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8014830:	682b      	ldr	r3, [r5, #0]
 8014832:	2200      	movs	r2, #0
 8014834:	731a      	strb	r2, [r3, #12]
 8014836:	e79f      	b.n	8014778 <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8014838:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 801483c:	3901      	subs	r1, #1
 801483e:	f000 ff2f 	bl	80156a0 <randr>
 8014842:	f100 0390 	add.w	r3, r0, #144	; 0x90
 8014846:	eb0d 0003 	add.w	r0, sp, r3
 801484a:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 801484e:	7033      	strb	r3, [r6, #0]
 8014850:	e015      	b.n	801487e <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8014852:	4b10      	ldr	r3, [pc, #64]	; (8014894 <RegionUS915NextChannel+0x150>)
 8014854:	6818      	ldr	r0, [r3, #0]
 8014856:	4632      	mov	r2, r6
 8014858:	f100 010c 	add.w	r1, r0, #12
 801485c:	f7fd ffe2 	bl	8012824 <RegionBaseUSComputeNext125kHzJoinChannel>
 8014860:	2803      	cmp	r0, #3
 8014862:	d10c      	bne.n	801487e <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8014864:	4605      	mov	r5, r0
 8014866:	e010      	b.n	801488a <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 8014868:	3301      	adds	r3, #1
 801486a:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801486c:	4a09      	ldr	r2, [pc, #36]	; (8014894 <RegionUS915NextChannel+0x150>)
 801486e:	6812      	ldr	r2, [r2, #0]
 8014870:	7a10      	ldrb	r0, [r2, #8]
 8014872:	4118      	asrs	r0, r3
 8014874:	f010 0f01 	tst.w	r0, #1
 8014878:	d0f6      	beq.n	8014868 <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 801487a:	3340      	adds	r3, #64	; 0x40
 801487c:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801487e:	2248      	movs	r2, #72	; 0x48
 8014880:	7831      	ldrb	r1, [r6, #0]
 8014882:	4b04      	ldr	r3, [pc, #16]	; (8014894 <RegionUS915NextChannel+0x150>)
 8014884:	6818      	ldr	r0, [r3, #0]
 8014886:	f7fe f92c 	bl	8012ae2 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801488a:	4628      	mov	r0, r5
 801488c:	b024      	add	sp, #144	; 0x90
 801488e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014892:	bf00      	nop
 8014894:	200011a8 	.word	0x200011a8
 8014898:	200011ac 	.word	0x200011ac
 801489c:	200011a4 	.word	0x200011a4

080148a0 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 80148a0:	4b04      	ldr	r3, [pc, #16]	; (80148b4 <RegionUS915ApplyDrOffset+0x14>)
 80148a2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80148a6:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 80148a8:	2800      	cmp	r0, #0
 80148aa:	db01      	blt.n	80148b0 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 80148ac:	b2c0      	uxtb	r0, r0
 80148ae:	4770      	bx	lr
        datarate = DR_0;
 80148b0:	2000      	movs	r0, #0
 80148b2:	e7fb      	b.n	80148ac <RegionUS915ApplyDrOffset+0xc>
 80148b4:	0801bdf8 	.word	0x0801bdf8

080148b8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 80148b8:	b510      	push	{r4, lr}
 80148ba:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 80148bc:	2210      	movs	r2, #16
 80148be:	2100      	movs	r1, #0
 80148c0:	30f1      	adds	r0, #241	; 0xf1
 80148c2:	f000 ff12 	bl	80156ea <memset1>
    ctx->M_n = 0;
 80148c6:	2100      	movs	r1, #0
 80148c8:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80148cc:	22f0      	movs	r2, #240	; 0xf0
 80148ce:	4620      	mov	r0, r4
 80148d0:	f000 ff0b 	bl	80156ea <memset1>
}
 80148d4:	bd10      	pop	{r4, pc}

080148d6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 80148d6:	b508      	push	{r3, lr}
 80148d8:	4602      	mov	r2, r0
 80148da:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80148dc:	2110      	movs	r1, #16
 80148de:	f000 fb3b 	bl	8014f58 <lorawan_aes_set_key>
}
 80148e2:	bd08      	pop	{r3, pc}

080148e4 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 80148e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148e8:	b084      	sub	sp, #16
 80148ea:	4604      	mov	r4, r0
 80148ec:	460d      	mov	r5, r1
 80148ee:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 80148f0:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d054      	beq.n	80149a2 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 80148f8:	f1c3 0810 	rsb	r8, r3, #16
 80148fc:	4647      	mov	r7, r8
 80148fe:	4590      	cmp	r8, r2
 8014900:	bf28      	it	cs
 8014902:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8014904:	f200 1001 	addw	r0, r0, #257	; 0x101
 8014908:	b2ba      	uxth	r2, r7
 801490a:	4418      	add	r0, r3
 801490c:	f000 fed5 	bl	80156ba <memcpy1>
        ctx->M_n += mlen;
 8014910:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8014914:	443b      	add	r3, r7
 8014916:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 801491a:	2b0f      	cmp	r3, #15
 801491c:	d94d      	bls.n	80149ba <AES_CMAC_Update+0xd6>
 801491e:	45b0      	cmp	r8, r6
 8014920:	d24b      	bcs.n	80149ba <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 8014922:	2300      	movs	r3, #0
 8014924:	e008      	b.n	8014938 <AES_CMAC_Update+0x54>
 8014926:	18e2      	adds	r2, r4, r3
 8014928:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 801492c:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 8014930:	4041      	eors	r1, r0
 8014932:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 8014936:	3301      	adds	r3, #1
 8014938:	2b0f      	cmp	r3, #15
 801493a:	ddf4      	ble.n	8014926 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801493c:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 8014940:	2210      	movs	r2, #16
 8014942:	4641      	mov	r1, r8
 8014944:	4668      	mov	r0, sp
 8014946:	f000 feb8 	bl	80156ba <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801494a:	4622      	mov	r2, r4
 801494c:	4669      	mov	r1, sp
 801494e:	4668      	mov	r0, sp
 8014950:	f000 fb84 	bl	801505c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8014954:	2210      	movs	r2, #16
 8014956:	4669      	mov	r1, sp
 8014958:	4640      	mov	r0, r8
 801495a:	f000 feae 	bl	80156ba <memcpy1>

        data += mlen;
 801495e:	443d      	add	r5, r7
        len -= mlen;
 8014960:	1bf6      	subs	r6, r6, r7
 8014962:	e01e      	b.n	80149a2 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 8014964:	eb04 0e03 	add.w	lr, r4, r3
 8014968:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 801496c:	5cea      	ldrb	r2, [r5, r3]
 801496e:	ea8c 0c02 	eor.w	ip, ip, r2
 8014972:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 8014976:	3301      	adds	r3, #1
 8014978:	2b0f      	cmp	r3, #15
 801497a:	ddf3      	ble.n	8014964 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801497c:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 8014980:	2210      	movs	r2, #16
 8014982:	4639      	mov	r1, r7
 8014984:	4668      	mov	r0, sp
 8014986:	f000 fe98 	bl	80156ba <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801498a:	4622      	mov	r2, r4
 801498c:	4669      	mov	r1, sp
 801498e:	4668      	mov	r0, sp
 8014990:	f000 fb64 	bl	801505c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8014994:	2210      	movs	r2, #16
 8014996:	4669      	mov	r1, sp
 8014998:	4638      	mov	r0, r7
 801499a:	f000 fe8e 	bl	80156ba <memcpy1>

        data += 16;
 801499e:	3510      	adds	r5, #16
        len -= 16;
 80149a0:	3e10      	subs	r6, #16
    while( len > 16 )
 80149a2:	2e10      	cmp	r6, #16
 80149a4:	d901      	bls.n	80149aa <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 80149a6:	2300      	movs	r3, #0
 80149a8:	e7e6      	b.n	8014978 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 80149aa:	b2b2      	uxth	r2, r6
 80149ac:	4629      	mov	r1, r5
 80149ae:	f204 1001 	addw	r0, r4, #257	; 0x101
 80149b2:	f000 fe82 	bl	80156ba <memcpy1>
    ctx->M_n = len;
 80149b6:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 80149ba:	b004      	add	sp, #16
 80149bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080149c0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 80149c0:	b530      	push	{r4, r5, lr}
 80149c2:	b089      	sub	sp, #36	; 0x24
 80149c4:	4605      	mov	r5, r0
 80149c6:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 80149c8:	2210      	movs	r2, #16
 80149ca:	2100      	movs	r1, #0
 80149cc:	eb0d 0002 	add.w	r0, sp, r2
 80149d0:	f000 fe8b 	bl	80156ea <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 80149d4:	4622      	mov	r2, r4
 80149d6:	a904      	add	r1, sp, #16
 80149d8:	4608      	mov	r0, r1
 80149da:	f000 fb3f 	bl	801505c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 80149de:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	db01      	blt.n	80149ea <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 80149e6:	2300      	movs	r3, #0
 80149e8:	e030      	b.n	8014a4c <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 80149ea:	2300      	movs	r3, #0
 80149ec:	2b0e      	cmp	r3, #14
 80149ee:	dc11      	bgt.n	8014a14 <AES_CMAC_Final+0x54>
 80149f0:	f103 0220 	add.w	r2, r3, #32
 80149f4:	eb0d 0102 	add.w	r1, sp, r2
 80149f8:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 80149fc:	3301      	adds	r3, #1
 80149fe:	f103 0220 	add.w	r2, r3, #32
 8014a02:	446a      	add	r2, sp
 8014a04:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8014a08:	09d2      	lsrs	r2, r2, #7
 8014a0a:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8014a0e:	f801 2c10 	strb.w	r2, [r1, #-16]
 8014a12:	e7eb      	b.n	80149ec <AES_CMAC_Final+0x2c>
 8014a14:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8014a18:	005b      	lsls	r3, r3, #1
 8014a1a:	b2db      	uxtb	r3, r3
 8014a1c:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 8014a20:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8014a24:	f88d 301f 	strb.w	r3, [sp, #31]
 8014a28:	e017      	b.n	8014a5a <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 8014a2a:	f103 0220 	add.w	r2, r3, #32
 8014a2e:	eb0d 0102 	add.w	r1, sp, r2
 8014a32:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8014a36:	3301      	adds	r3, #1
 8014a38:	f103 0220 	add.w	r2, r3, #32
 8014a3c:	446a      	add	r2, sp
 8014a3e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8014a42:	09d2      	lsrs	r2, r2, #7
 8014a44:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8014a48:	f801 2c10 	strb.w	r2, [r1, #-16]
 8014a4c:	2b0e      	cmp	r3, #14
 8014a4e:	ddec      	ble.n	8014a2a <AES_CMAC_Final+0x6a>
 8014a50:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8014a54:	005b      	lsls	r3, r3, #1
 8014a56:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 8014a5a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8014a5e:	2810      	cmp	r0, #16
 8014a60:	d014      	beq.n	8014a8c <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8014a62:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	db30      	blt.n	8014acc <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	e041      	b.n	8014af2 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 8014a6e:	18e1      	adds	r1, r4, r3
 8014a70:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8014a74:	f103 0020 	add.w	r0, r3, #32
 8014a78:	4468      	add	r0, sp
 8014a7a:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8014a7e:	4042      	eors	r2, r0
 8014a80:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8014a84:	3301      	adds	r3, #1
 8014a86:	2b0f      	cmp	r3, #15
 8014a88:	ddf1      	ble.n	8014a6e <AES_CMAC_Final+0xae>
 8014a8a:	e059      	b.n	8014b40 <AES_CMAC_Final+0x180>
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	e7fa      	b.n	8014a86 <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 8014a90:	f103 0220 	add.w	r2, r3, #32
 8014a94:	eb0d 0102 	add.w	r1, sp, r2
 8014a98:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8014a9c:	3301      	adds	r3, #1
 8014a9e:	f103 0220 	add.w	r2, r3, #32
 8014aa2:	446a      	add	r2, sp
 8014aa4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8014aa8:	09d2      	lsrs	r2, r2, #7
 8014aaa:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8014aae:	f801 2c10 	strb.w	r2, [r1, #-16]
 8014ab2:	2b0e      	cmp	r3, #14
 8014ab4:	ddec      	ble.n	8014a90 <AES_CMAC_Final+0xd0>
 8014ab6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8014aba:	005b      	lsls	r3, r3, #1
 8014abc:	b2db      	uxtb	r3, r3
 8014abe:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 8014ac2:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8014ac6:	f88d 301f 	strb.w	r3, [sp, #31]
 8014aca:	e019      	b.n	8014b00 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 8014acc:	2300      	movs	r3, #0
 8014ace:	e7f0      	b.n	8014ab2 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 8014ad0:	f103 0220 	add.w	r2, r3, #32
 8014ad4:	eb0d 0102 	add.w	r1, sp, r2
 8014ad8:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8014adc:	3301      	adds	r3, #1
 8014ade:	f103 0220 	add.w	r2, r3, #32
 8014ae2:	446a      	add	r2, sp
 8014ae4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8014ae8:	09d2      	lsrs	r2, r2, #7
 8014aea:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8014aee:	f801 2c10 	strb.w	r2, [r1, #-16]
 8014af2:	2b0e      	cmp	r3, #14
 8014af4:	ddec      	ble.n	8014ad0 <AES_CMAC_Final+0x110>
 8014af6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8014afa:	005b      	lsls	r3, r3, #1
 8014afc:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8014b00:	4420      	add	r0, r4
 8014b02:	2380      	movs	r3, #128	; 0x80
 8014b04:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8014b08:	e003      	b.n	8014b12 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 8014b0a:	4423      	add	r3, r4
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8014b12:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8014b16:	3301      	adds	r3, #1
 8014b18:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8014b1c:	2b0f      	cmp	r3, #15
 8014b1e:	d9f4      	bls.n	8014b0a <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 8014b20:	2300      	movs	r3, #0
 8014b22:	e00b      	b.n	8014b3c <AES_CMAC_Final+0x17c>
 8014b24:	18e1      	adds	r1, r4, r3
 8014b26:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8014b2a:	f103 0020 	add.w	r0, r3, #32
 8014b2e:	4468      	add	r0, sp
 8014b30:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8014b34:	4042      	eors	r2, r0
 8014b36:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8014b3a:	3301      	adds	r3, #1
 8014b3c:	2b0f      	cmp	r3, #15
 8014b3e:	ddf1      	ble.n	8014b24 <AES_CMAC_Final+0x164>
 8014b40:	2300      	movs	r3, #0
 8014b42:	e009      	b.n	8014b58 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 8014b44:	18e2      	adds	r2, r4, r3
 8014b46:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 8014b4a:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 8014b4e:	ea8c 0c01 	eor.w	ip, ip, r1
 8014b52:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 8014b56:	3301      	adds	r3, #1
 8014b58:	2b0f      	cmp	r3, #15
 8014b5a:	ddf3      	ble.n	8014b44 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8014b5c:	2210      	movs	r2, #16
 8014b5e:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 8014b62:	4668      	mov	r0, sp
 8014b64:	f000 fda9 	bl	80156ba <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8014b68:	4622      	mov	r2, r4
 8014b6a:	4629      	mov	r1, r5
 8014b6c:	4668      	mov	r0, sp
 8014b6e:	f000 fa75 	bl	801505c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8014b72:	2210      	movs	r2, #16
 8014b74:	2100      	movs	r1, #0
 8014b76:	eb0d 0002 	add.w	r0, sp, r2
 8014b7a:	f000 fdb6 	bl	80156ea <memset1>
}
 8014b7e:	b009      	add	sp, #36	; 0x24
 8014b80:	bd30      	pop	{r4, r5, pc}

08014b82 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8014b82:	780b      	ldrb	r3, [r1, #0]
 8014b84:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8014b86:	784b      	ldrb	r3, [r1, #1]
 8014b88:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8014b8a:	788b      	ldrb	r3, [r1, #2]
 8014b8c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8014b8e:	78cb      	ldrb	r3, [r1, #3]
 8014b90:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8014b92:	790b      	ldrb	r3, [r1, #4]
 8014b94:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8014b96:	794b      	ldrb	r3, [r1, #5]
 8014b98:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8014b9a:	798b      	ldrb	r3, [r1, #6]
 8014b9c:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8014b9e:	79cb      	ldrb	r3, [r1, #7]
 8014ba0:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8014ba2:	7a0b      	ldrb	r3, [r1, #8]
 8014ba4:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8014ba6:	7a4b      	ldrb	r3, [r1, #9]
 8014ba8:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8014baa:	7a8b      	ldrb	r3, [r1, #10]
 8014bac:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8014bae:	7acb      	ldrb	r3, [r1, #11]
 8014bb0:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8014bb2:	7b0b      	ldrb	r3, [r1, #12]
 8014bb4:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8014bb6:	7b4b      	ldrb	r3, [r1, #13]
 8014bb8:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8014bba:	7b8b      	ldrb	r3, [r1, #14]
 8014bbc:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8014bbe:	7bcb      	ldrb	r3, [r1, #15]
 8014bc0:	73c3      	strb	r3, [r0, #15]
#endif
}
 8014bc2:	4770      	bx	lr

08014bc4 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 8014bc4:	e004      	b.n	8014bd0 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8014bc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014bca:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 8014bce:	461a      	mov	r2, r3
 8014bd0:	1e53      	subs	r3, r2, #1
 8014bd2:	b2db      	uxtb	r3, r3
 8014bd4:	2a00      	cmp	r2, #0
 8014bd6:	d1f6      	bne.n	8014bc6 <copy_block_nn+0x2>
}
 8014bd8:	4770      	bx	lr

08014bda <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8014bda:	780b      	ldrb	r3, [r1, #0]
 8014bdc:	7802      	ldrb	r2, [r0, #0]
 8014bde:	4053      	eors	r3, r2
 8014be0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8014be2:	784b      	ldrb	r3, [r1, #1]
 8014be4:	7842      	ldrb	r2, [r0, #1]
 8014be6:	4053      	eors	r3, r2
 8014be8:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8014bea:	788b      	ldrb	r3, [r1, #2]
 8014bec:	7882      	ldrb	r2, [r0, #2]
 8014bee:	4053      	eors	r3, r2
 8014bf0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8014bf2:	78cb      	ldrb	r3, [r1, #3]
 8014bf4:	78c2      	ldrb	r2, [r0, #3]
 8014bf6:	4053      	eors	r3, r2
 8014bf8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8014bfa:	790b      	ldrb	r3, [r1, #4]
 8014bfc:	7902      	ldrb	r2, [r0, #4]
 8014bfe:	4053      	eors	r3, r2
 8014c00:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8014c02:	794b      	ldrb	r3, [r1, #5]
 8014c04:	7942      	ldrb	r2, [r0, #5]
 8014c06:	4053      	eors	r3, r2
 8014c08:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8014c0a:	798b      	ldrb	r3, [r1, #6]
 8014c0c:	7982      	ldrb	r2, [r0, #6]
 8014c0e:	4053      	eors	r3, r2
 8014c10:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8014c12:	79cb      	ldrb	r3, [r1, #7]
 8014c14:	79c2      	ldrb	r2, [r0, #7]
 8014c16:	4053      	eors	r3, r2
 8014c18:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8014c1a:	7a0b      	ldrb	r3, [r1, #8]
 8014c1c:	7a02      	ldrb	r2, [r0, #8]
 8014c1e:	4053      	eors	r3, r2
 8014c20:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8014c22:	7a4b      	ldrb	r3, [r1, #9]
 8014c24:	7a42      	ldrb	r2, [r0, #9]
 8014c26:	4053      	eors	r3, r2
 8014c28:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8014c2a:	7a8b      	ldrb	r3, [r1, #10]
 8014c2c:	7a82      	ldrb	r2, [r0, #10]
 8014c2e:	4053      	eors	r3, r2
 8014c30:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8014c32:	7acb      	ldrb	r3, [r1, #11]
 8014c34:	7ac2      	ldrb	r2, [r0, #11]
 8014c36:	4053      	eors	r3, r2
 8014c38:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8014c3a:	7b0b      	ldrb	r3, [r1, #12]
 8014c3c:	7b02      	ldrb	r2, [r0, #12]
 8014c3e:	4053      	eors	r3, r2
 8014c40:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8014c42:	7b4b      	ldrb	r3, [r1, #13]
 8014c44:	7b42      	ldrb	r2, [r0, #13]
 8014c46:	4053      	eors	r3, r2
 8014c48:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8014c4a:	7b8b      	ldrb	r3, [r1, #14]
 8014c4c:	7b82      	ldrb	r2, [r0, #14]
 8014c4e:	4053      	eors	r3, r2
 8014c50:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8014c52:	7bcb      	ldrb	r3, [r1, #15]
 8014c54:	7bc2      	ldrb	r2, [r0, #15]
 8014c56:	4053      	eors	r3, r2
 8014c58:	73c3      	strb	r3, [r0, #15]
#endif
}
 8014c5a:	4770      	bx	lr

08014c5c <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8014c5c:	780b      	ldrb	r3, [r1, #0]
 8014c5e:	f892 c000 	ldrb.w	ip, [r2]
 8014c62:	ea83 030c 	eor.w	r3, r3, ip
 8014c66:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8014c68:	784b      	ldrb	r3, [r1, #1]
 8014c6a:	f892 c001 	ldrb.w	ip, [r2, #1]
 8014c6e:	ea83 030c 	eor.w	r3, r3, ip
 8014c72:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8014c74:	788b      	ldrb	r3, [r1, #2]
 8014c76:	f892 c002 	ldrb.w	ip, [r2, #2]
 8014c7a:	ea83 030c 	eor.w	r3, r3, ip
 8014c7e:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8014c80:	78cb      	ldrb	r3, [r1, #3]
 8014c82:	f892 c003 	ldrb.w	ip, [r2, #3]
 8014c86:	ea83 030c 	eor.w	r3, r3, ip
 8014c8a:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8014c8c:	790b      	ldrb	r3, [r1, #4]
 8014c8e:	f892 c004 	ldrb.w	ip, [r2, #4]
 8014c92:	ea83 030c 	eor.w	r3, r3, ip
 8014c96:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8014c98:	794b      	ldrb	r3, [r1, #5]
 8014c9a:	f892 c005 	ldrb.w	ip, [r2, #5]
 8014c9e:	ea83 030c 	eor.w	r3, r3, ip
 8014ca2:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8014ca4:	798b      	ldrb	r3, [r1, #6]
 8014ca6:	f892 c006 	ldrb.w	ip, [r2, #6]
 8014caa:	ea83 030c 	eor.w	r3, r3, ip
 8014cae:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8014cb0:	79cb      	ldrb	r3, [r1, #7]
 8014cb2:	f892 c007 	ldrb.w	ip, [r2, #7]
 8014cb6:	ea83 030c 	eor.w	r3, r3, ip
 8014cba:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8014cbc:	7a0b      	ldrb	r3, [r1, #8]
 8014cbe:	f892 c008 	ldrb.w	ip, [r2, #8]
 8014cc2:	ea83 030c 	eor.w	r3, r3, ip
 8014cc6:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8014cc8:	7a4b      	ldrb	r3, [r1, #9]
 8014cca:	f892 c009 	ldrb.w	ip, [r2, #9]
 8014cce:	ea83 030c 	eor.w	r3, r3, ip
 8014cd2:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8014cd4:	7a8b      	ldrb	r3, [r1, #10]
 8014cd6:	f892 c00a 	ldrb.w	ip, [r2, #10]
 8014cda:	ea83 030c 	eor.w	r3, r3, ip
 8014cde:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8014ce0:	7acb      	ldrb	r3, [r1, #11]
 8014ce2:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8014ce6:	ea83 030c 	eor.w	r3, r3, ip
 8014cea:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8014cec:	7b0b      	ldrb	r3, [r1, #12]
 8014cee:	f892 c00c 	ldrb.w	ip, [r2, #12]
 8014cf2:	ea83 030c 	eor.w	r3, r3, ip
 8014cf6:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8014cf8:	7b4b      	ldrb	r3, [r1, #13]
 8014cfa:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8014cfe:	ea83 030c 	eor.w	r3, r3, ip
 8014d02:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8014d04:	7b8b      	ldrb	r3, [r1, #14]
 8014d06:	f892 c00e 	ldrb.w	ip, [r2, #14]
 8014d0a:	ea83 030c 	eor.w	r3, r3, ip
 8014d0e:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8014d10:	7bcb      	ldrb	r3, [r1, #15]
 8014d12:	7bd2      	ldrb	r2, [r2, #15]
 8014d14:	4053      	eors	r3, r2
 8014d16:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8014d18:	4770      	bx	lr

08014d1a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8014d1a:	b508      	push	{r3, lr}
    xor_block(d, k);
 8014d1c:	f7ff ff5d 	bl	8014bda <xor_block>
}
 8014d20:	bd08      	pop	{r3, pc}
	...

08014d24 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8014d24:	7802      	ldrb	r2, [r0, #0]
 8014d26:	4b18      	ldr	r3, [pc, #96]	; (8014d88 <shift_sub_rows+0x64>)
 8014d28:	5c9a      	ldrb	r2, [r3, r2]
 8014d2a:	7002      	strb	r2, [r0, #0]
 8014d2c:	7902      	ldrb	r2, [r0, #4]
 8014d2e:	5c9a      	ldrb	r2, [r3, r2]
 8014d30:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8014d32:	7a02      	ldrb	r2, [r0, #8]
 8014d34:	5c9a      	ldrb	r2, [r3, r2]
 8014d36:	7202      	strb	r2, [r0, #8]
 8014d38:	7b02      	ldrb	r2, [r0, #12]
 8014d3a:	5c9a      	ldrb	r2, [r3, r2]
 8014d3c:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8014d3e:	7842      	ldrb	r2, [r0, #1]
 8014d40:	7941      	ldrb	r1, [r0, #5]
 8014d42:	5c59      	ldrb	r1, [r3, r1]
 8014d44:	7041      	strb	r1, [r0, #1]
 8014d46:	7a41      	ldrb	r1, [r0, #9]
 8014d48:	5c59      	ldrb	r1, [r3, r1]
 8014d4a:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8014d4c:	7b41      	ldrb	r1, [r0, #13]
 8014d4e:	5c59      	ldrb	r1, [r3, r1]
 8014d50:	7241      	strb	r1, [r0, #9]
 8014d52:	5c9a      	ldrb	r2, [r3, r2]
 8014d54:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8014d56:	7882      	ldrb	r2, [r0, #2]
 8014d58:	7a81      	ldrb	r1, [r0, #10]
 8014d5a:	5c59      	ldrb	r1, [r3, r1]
 8014d5c:	7081      	strb	r1, [r0, #2]
 8014d5e:	5c9a      	ldrb	r2, [r3, r2]
 8014d60:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8014d62:	7982      	ldrb	r2, [r0, #6]
 8014d64:	7b81      	ldrb	r1, [r0, #14]
 8014d66:	5c59      	ldrb	r1, [r3, r1]
 8014d68:	7181      	strb	r1, [r0, #6]
 8014d6a:	5c9a      	ldrb	r2, [r3, r2]
 8014d6c:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8014d6e:	7bc2      	ldrb	r2, [r0, #15]
 8014d70:	7ac1      	ldrb	r1, [r0, #11]
 8014d72:	5c59      	ldrb	r1, [r3, r1]
 8014d74:	73c1      	strb	r1, [r0, #15]
 8014d76:	79c1      	ldrb	r1, [r0, #7]
 8014d78:	5c59      	ldrb	r1, [r3, r1]
 8014d7a:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8014d7c:	78c1      	ldrb	r1, [r0, #3]
 8014d7e:	5c59      	ldrb	r1, [r3, r1]
 8014d80:	71c1      	strb	r1, [r0, #7]
 8014d82:	5c9b      	ldrb	r3, [r3, r2]
 8014d84:	70c3      	strb	r3, [r0, #3]
}
 8014d86:	4770      	bx	lr
 8014d88:	0801c03c 	.word	0x0801c03c

08014d8c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8014d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d90:	b084      	sub	sp, #16
 8014d92:	4604      	mov	r4, r0
    block_copy(st, dt);
 8014d94:	4601      	mov	r1, r0
 8014d96:	4668      	mov	r0, sp
 8014d98:	f7ff fef3 	bl	8014b82 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8014d9c:	f89d c000 	ldrb.w	ip, [sp]
 8014da0:	4b6a      	ldr	r3, [pc, #424]	; (8014f4c <mix_sub_columns+0x1c0>)
 8014da2:	f813 000c 	ldrb.w	r0, [r3, ip]
 8014da6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8014daa:	4a69      	ldr	r2, [pc, #420]	; (8014f50 <mix_sub_columns+0x1c4>)
 8014dac:	f812 9008 	ldrb.w	r9, [r2, r8]
 8014db0:	f89d e00a 	ldrb.w	lr, [sp, #10]
 8014db4:	4967      	ldr	r1, [pc, #412]	; (8014f54 <mix_sub_columns+0x1c8>)
 8014db6:	f811 500e 	ldrb.w	r5, [r1, lr]
 8014dba:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8014dbe:	5dce      	ldrb	r6, [r1, r7]
 8014dc0:	ea80 0009 	eor.w	r0, r0, r9
 8014dc4:	4068      	eors	r0, r5
 8014dc6:	4070      	eors	r0, r6
 8014dc8:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8014dca:	f811 000c 	ldrb.w	r0, [r1, ip]
 8014dce:	f813 a008 	ldrb.w	sl, [r3, r8]
 8014dd2:	f812 900e 	ldrb.w	r9, [r2, lr]
 8014dd6:	ea80 0a0a 	eor.w	sl, r0, sl
 8014dda:	ea89 090a 	eor.w	r9, r9, sl
 8014dde:	ea86 0609 	eor.w	r6, r6, r9
 8014de2:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8014de4:	f811 8008 	ldrb.w	r8, [r1, r8]
 8014de8:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8014dec:	5dd6      	ldrb	r6, [r2, r7]
 8014dee:	ea80 0008 	eor.w	r0, r0, r8
 8014df2:	ea8e 0000 	eor.w	r0, lr, r0
 8014df6:	4070      	eors	r0, r6
 8014df8:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8014dfa:	f812 600c 	ldrb.w	r6, [r2, ip]
 8014dfe:	5dd8      	ldrb	r0, [r3, r7]
 8014e00:	ea86 0608 	eor.w	r6, r6, r8
 8014e04:	4075      	eors	r5, r6
 8014e06:	4045      	eors	r5, r0
 8014e08:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8014e0a:	f89d c004 	ldrb.w	ip, [sp, #4]
 8014e0e:	f813 000c 	ldrb.w	r0, [r3, ip]
 8014e12:	f89d 8009 	ldrb.w	r8, [sp, #9]
 8014e16:	f812 9008 	ldrb.w	r9, [r2, r8]
 8014e1a:	f89d e00e 	ldrb.w	lr, [sp, #14]
 8014e1e:	f811 500e 	ldrb.w	r5, [r1, lr]
 8014e22:	f89d 7003 	ldrb.w	r7, [sp, #3]
 8014e26:	5dce      	ldrb	r6, [r1, r7]
 8014e28:	ea80 0009 	eor.w	r0, r0, r9
 8014e2c:	4068      	eors	r0, r5
 8014e2e:	4070      	eors	r0, r6
 8014e30:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8014e32:	f811 000c 	ldrb.w	r0, [r1, ip]
 8014e36:	f813 a008 	ldrb.w	sl, [r3, r8]
 8014e3a:	f812 900e 	ldrb.w	r9, [r2, lr]
 8014e3e:	ea80 0a0a 	eor.w	sl, r0, sl
 8014e42:	ea89 090a 	eor.w	r9, r9, sl
 8014e46:	ea86 0609 	eor.w	r6, r6, r9
 8014e4a:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8014e4c:	f811 8008 	ldrb.w	r8, [r1, r8]
 8014e50:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8014e54:	5dd6      	ldrb	r6, [r2, r7]
 8014e56:	ea80 0008 	eor.w	r0, r0, r8
 8014e5a:	ea8e 0000 	eor.w	r0, lr, r0
 8014e5e:	4070      	eors	r0, r6
 8014e60:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8014e62:	f812 600c 	ldrb.w	r6, [r2, ip]
 8014e66:	5dd8      	ldrb	r0, [r3, r7]
 8014e68:	ea86 0608 	eor.w	r6, r6, r8
 8014e6c:	4075      	eors	r5, r6
 8014e6e:	4045      	eors	r5, r0
 8014e70:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8014e72:	f89d c008 	ldrb.w	ip, [sp, #8]
 8014e76:	f813 000c 	ldrb.w	r0, [r3, ip]
 8014e7a:	f89d 800d 	ldrb.w	r8, [sp, #13]
 8014e7e:	f812 9008 	ldrb.w	r9, [r2, r8]
 8014e82:	f89d e002 	ldrb.w	lr, [sp, #2]
 8014e86:	f811 500e 	ldrb.w	r5, [r1, lr]
 8014e8a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8014e8e:	5dce      	ldrb	r6, [r1, r7]
 8014e90:	ea80 0009 	eor.w	r0, r0, r9
 8014e94:	4068      	eors	r0, r5
 8014e96:	4070      	eors	r0, r6
 8014e98:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8014e9a:	f811 000c 	ldrb.w	r0, [r1, ip]
 8014e9e:	f813 a008 	ldrb.w	sl, [r3, r8]
 8014ea2:	f812 900e 	ldrb.w	r9, [r2, lr]
 8014ea6:	ea80 0a0a 	eor.w	sl, r0, sl
 8014eaa:	ea89 090a 	eor.w	r9, r9, sl
 8014eae:	ea86 0609 	eor.w	r6, r6, r9
 8014eb2:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8014eb4:	f811 8008 	ldrb.w	r8, [r1, r8]
 8014eb8:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8014ebc:	5dd6      	ldrb	r6, [r2, r7]
 8014ebe:	ea80 0008 	eor.w	r0, r0, r8
 8014ec2:	ea8e 0000 	eor.w	r0, lr, r0
 8014ec6:	4070      	eors	r0, r6
 8014ec8:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8014eca:	f812 600c 	ldrb.w	r6, [r2, ip]
 8014ece:	5dd8      	ldrb	r0, [r3, r7]
 8014ed0:	ea86 0608 	eor.w	r6, r6, r8
 8014ed4:	4075      	eors	r5, r6
 8014ed6:	4045      	eors	r5, r0
 8014ed8:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8014eda:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8014ede:	5d98      	ldrb	r0, [r3, r6]
 8014ee0:	f89d 8001 	ldrb.w	r8, [sp, #1]
 8014ee4:	f812 9008 	ldrb.w	r9, [r2, r8]
 8014ee8:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8014eec:	f811 c007 	ldrb.w	ip, [r1, r7]
 8014ef0:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8014ef4:	f811 e005 	ldrb.w	lr, [r1, r5]
 8014ef8:	ea80 0009 	eor.w	r0, r0, r9
 8014efc:	ea8c 0000 	eor.w	r0, ip, r0
 8014f00:	ea8e 0000 	eor.w	r0, lr, r0
 8014f04:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8014f06:	5d88      	ldrb	r0, [r1, r6]
 8014f08:	f813 a008 	ldrb.w	sl, [r3, r8]
 8014f0c:	f812 9007 	ldrb.w	r9, [r2, r7]
 8014f10:	ea80 0a0a 	eor.w	sl, r0, sl
 8014f14:	ea89 090a 	eor.w	r9, r9, sl
 8014f18:	ea8e 0e09 	eor.w	lr, lr, r9
 8014f1c:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8014f20:	f811 1008 	ldrb.w	r1, [r1, r8]
 8014f24:	f813 e007 	ldrb.w	lr, [r3, r7]
 8014f28:	5d57      	ldrb	r7, [r2, r5]
 8014f2a:	4048      	eors	r0, r1
 8014f2c:	ea8e 0000 	eor.w	r0, lr, r0
 8014f30:	4078      	eors	r0, r7
 8014f32:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8014f34:	5d92      	ldrb	r2, [r2, r6]
 8014f36:	5d5b      	ldrb	r3, [r3, r5]
 8014f38:	4051      	eors	r1, r2
 8014f3a:	ea8c 0c01 	eor.w	ip, ip, r1
 8014f3e:	ea83 0c0c 	eor.w	ip, r3, ip
 8014f42:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 8014f46:	b004      	add	sp, #16
 8014f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f4c:	0801be3c 	.word	0x0801be3c
 8014f50:	0801bf3c 	.word	0x0801bf3c
 8014f54:	0801c03c 	.word	0x0801c03c

08014f58 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8014f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f5c:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8014f5e:	f1a1 0310 	sub.w	r3, r1, #16
 8014f62:	b2da      	uxtb	r2, r3
 8014f64:	2a10      	cmp	r2, #16
 8014f66:	d807      	bhi.n	8014f78 <lorawan_aes_set_key+0x20>
 8014f68:	460d      	mov	r5, r1
 8014f6a:	2301      	movs	r3, #1
 8014f6c:	4093      	lsls	r3, r2
 8014f6e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8014f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014f76:	b92b      	cbnz	r3, 8014f84 <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8014f78:	2300      	movs	r3, #0
 8014f7a:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 8014f7e:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8014f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 8014f84:	460a      	mov	r2, r1
 8014f86:	4601      	mov	r1, r0
 8014f88:	4620      	mov	r0, r4
 8014f8a:	f7ff fe1b 	bl	8014bc4 <copy_block_nn>
    hi = (keylen + 28) << 2;
 8014f8e:	f105 031c 	add.w	r3, r5, #28
 8014f92:	b2db      	uxtb	r3, r3
 8014f94:	009b      	lsls	r3, r3, #2
 8014f96:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 8014f9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8014f9e:	3b01      	subs	r3, #1
 8014fa0:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8014fa4:	462b      	mov	r3, r5
 8014fa6:	f04f 0c01 	mov.w	ip, #1
 8014faa:	e023      	b.n	8014ff4 <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 8014fac:	2d18      	cmp	r5, #24
 8014fae:	d901      	bls.n	8014fb4 <lorawan_aes_set_key+0x5c>
 8014fb0:	2a10      	cmp	r2, #16
 8014fb2:	d047      	beq.n	8015044 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 8014fb4:	1b5a      	subs	r2, r3, r5
 8014fb6:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8014fb8:	f814 9002 	ldrb.w	r9, [r4, r2]
 8014fbc:	ea89 0808 	eor.w	r8, r9, r8
 8014fc0:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8014fc4:	f102 0801 	add.w	r8, r2, #1
 8014fc8:	f814 8008 	ldrb.w	r8, [r4, r8]
 8014fcc:	f100 0901 	add.w	r9, r0, #1
 8014fd0:	ea88 0707 	eor.w	r7, r8, r7
 8014fd4:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8014fd8:	1c97      	adds	r7, r2, #2
 8014fda:	5de7      	ldrb	r7, [r4, r7]
 8014fdc:	f100 0802 	add.w	r8, r0, #2
 8014fe0:	407e      	eors	r6, r7
 8014fe2:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8014fe6:	3203      	adds	r2, #3
 8014fe8:	5ca6      	ldrb	r6, [r4, r2]
 8014fea:	1cc2      	adds	r2, r0, #3
 8014fec:	4071      	eors	r1, r6
 8014fee:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8014ff0:	3304      	adds	r3, #4
 8014ff2:	b2db      	uxtb	r3, r3
 8014ff4:	4573      	cmp	r3, lr
 8014ff6:	d22c      	bcs.n	8015052 <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	1f1a      	subs	r2, r3, #4
 8014ffc:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8015000:	1eda      	subs	r2, r3, #3
 8015002:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 8015004:	1e9a      	subs	r2, r3, #2
 8015006:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 8015008:	1e5a      	subs	r2, r3, #1
 801500a:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 801500c:	fbb3 f2f5 	udiv	r2, r3, r5
 8015010:	fb05 3212 	mls	r2, r5, r2, r3
 8015014:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8015018:	d1c8      	bne.n	8014fac <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 801501a:	4a0f      	ldr	r2, [pc, #60]	; (8015058 <lorawan_aes_set_key+0x100>)
 801501c:	f812 9007 	ldrb.w	r9, [r2, r7]
 8015020:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 8015024:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 8015026:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 8015028:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 801502c:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8015030:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015034:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8015038:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 801503c:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 8015040:	46c8      	mov	r8, r9
 8015042:	e7b7      	b.n	8014fb4 <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 8015044:	4a04      	ldr	r2, [pc, #16]	; (8015058 <lorawan_aes_set_key+0x100>)
 8015046:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 801504a:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 801504c:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 801504e:	5c51      	ldrb	r1, [r2, r1]
 8015050:	e7b0      	b.n	8014fb4 <lorawan_aes_set_key+0x5c>
    return 0;
 8015052:	2000      	movs	r0, #0
 8015054:	e794      	b.n	8014f80 <lorawan_aes_set_key+0x28>
 8015056:	bf00      	nop
 8015058:	0801c03c 	.word	0x0801c03c

0801505c <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 801505c:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8015060:	b31b      	cbz	r3, 80150aa <lorawan_aes_encrypt+0x4e>
{
 8015062:	b570      	push	{r4, r5, r6, lr}
 8015064:	b084      	sub	sp, #16
 8015066:	460e      	mov	r6, r1
 8015068:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 801506a:	4601      	mov	r1, r0
 801506c:	4668      	mov	r0, sp
 801506e:	f7ff fdf5 	bl	8014c5c <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8015072:	2401      	movs	r4, #1
 8015074:	e009      	b.n	801508a <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8015076:	4668      	mov	r0, sp
 8015078:	f7ff fe88 	bl	8014d8c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 801507c:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 8015080:	4668      	mov	r0, sp
 8015082:	f7ff fe4a 	bl	8014d1a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8015086:	3401      	adds	r4, #1
 8015088:	b2e4      	uxtb	r4, r4
 801508a:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 801508e:	42a3      	cmp	r3, r4
 8015090:	d8f1      	bhi.n	8015076 <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8015092:	4668      	mov	r0, sp
 8015094:	f7ff fe46 	bl	8014d24 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8015098:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 801509c:	4669      	mov	r1, sp
 801509e:	4630      	mov	r0, r6
 80150a0:	f7ff fddc 	bl	8014c5c <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 80150a4:	2000      	movs	r0, #0
}
 80150a6:	b004      	add	sp, #16
 80150a8:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 80150aa:	20ff      	movs	r0, #255	; 0xff
}
 80150ac:	4770      	bx	lr
	...

080150b0 <GetKeyByID>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80150b0:	2300      	movs	r3, #0
 80150b2:	2b09      	cmp	r3, #9
 80150b4:	d817      	bhi.n	80150e6 <GetKeyByID+0x36>
{
 80150b6:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 80150b8:	4a0c      	ldr	r2, [pc, #48]	; (80150ec <GetKeyByID+0x3c>)
 80150ba:	6814      	ldr	r4, [r2, #0]
 80150bc:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80150c0:	4422      	add	r2, r4
 80150c2:	7c12      	ldrb	r2, [r2, #16]
 80150c4:	4282      	cmp	r2, r0
 80150c6:	d006      	beq.n	80150d6 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80150c8:	3301      	adds	r3, #1
 80150ca:	b2db      	uxtb	r3, r3
 80150cc:	2b09      	cmp	r3, #9
 80150ce:	d9f3      	bls.n	80150b8 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80150d0:	2003      	movs	r0, #3
}
 80150d2:	bc10      	pop	{r4}
 80150d4:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 80150d6:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 80150da:	f10c 0c10 	add.w	ip, ip, #16
 80150de:	4464      	add	r4, ip
 80150e0:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 80150e2:	2000      	movs	r0, #0
 80150e4:	e7f5      	b.n	80150d2 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80150e6:	2003      	movs	r0, #3
}
 80150e8:	4770      	bx	lr
 80150ea:	bf00      	nop
 80150ec:	200011b0 	.word	0x200011b0

080150f0 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 80150f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150f4:	b0cc      	sub	sp, #304	; 0x130
 80150f6:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 80150f8:	b3a9      	cbz	r1, 8015166 <ComputeCmac+0x76>
 80150fa:	4605      	mov	r5, r0
 80150fc:	4617      	mov	r7, r2
 80150fe:	461c      	mov	r4, r3
 8015100:	4688      	mov	r8, r1
 8015102:	b396      	cbz	r6, 801516a <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8015104:	a802      	add	r0, sp, #8
 8015106:	f7ff fbd7 	bl	80148b8 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 801510a:	a901      	add	r1, sp, #4
 801510c:	4620      	mov	r0, r4
 801510e:	f7ff ffcf 	bl	80150b0 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8015112:	4604      	mov	r4, r0
 8015114:	b118      	cbz	r0, 801511e <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 8015116:	4620      	mov	r0, r4
 8015118:	b04c      	add	sp, #304	; 0x130
 801511a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 801511e:	9901      	ldr	r1, [sp, #4]
 8015120:	3101      	adds	r1, #1
 8015122:	a802      	add	r0, sp, #8
 8015124:	f7ff fbd7 	bl	80148d6 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8015128:	b125      	cbz	r5, 8015134 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 801512a:	2210      	movs	r2, #16
 801512c:	4629      	mov	r1, r5
 801512e:	a802      	add	r0, sp, #8
 8015130:	f7ff fbd8 	bl	80148e4 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8015134:	463a      	mov	r2, r7
 8015136:	4641      	mov	r1, r8
 8015138:	a802      	add	r0, sp, #8
 801513a:	f7ff fbd3 	bl	80148e4 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 801513e:	a902      	add	r1, sp, #8
 8015140:	a848      	add	r0, sp, #288	; 0x120
 8015142:	f7ff fc3d 	bl	80149c0 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8015146:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 801514a:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 801514e:	041b      	lsls	r3, r3, #16
 8015150:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015154:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 8015158:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 801515c:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8015160:	4313      	orrs	r3, r2
 8015162:	6033      	str	r3, [r6, #0]
 8015164:	e7d7      	b.n	8015116 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 8015166:	2402      	movs	r4, #2
 8015168:	e7d5      	b.n	8015116 <ComputeCmac+0x26>
 801516a:	2402      	movs	r4, #2
 801516c:	e7d3      	b.n	8015116 <ComputeCmac+0x26>
	...

08015170 <SecureElementInit>:
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 8015170:	b168      	cbz	r0, 801518e <SecureElementInit+0x1e>
{
 8015172:	b510      	push	{r4, lr}
 8015174:	460c      	mov	r4, r1
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 8015176:	4a08      	ldr	r2, [pc, #32]	; (8015198 <SecureElementInit+0x28>)
 8015178:	6010      	str	r0, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 801517a:	22c0      	movs	r2, #192	; 0xc0
 801517c:	4907      	ldr	r1, [pc, #28]	; (801519c <SecureElementInit+0x2c>)
 801517e:	f000 fa9c 	bl	80156ba <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 8015182:	b134      	cbz	r4, 8015192 <SecureElementInit+0x22>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 8015184:	4b04      	ldr	r3, [pc, #16]	; (8015198 <SecureElementInit+0x28>)
 8015186:	6818      	ldr	r0, [r3, #0]
 8015188:	47a0      	blx	r4
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 801518a:	2000      	movs	r0, #0
}
 801518c:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801518e:	2002      	movs	r0, #2
}
 8015190:	4770      	bx	lr
    return SECURE_ELEMENT_SUCCESS;
 8015192:	2000      	movs	r0, #0
 8015194:	e7fa      	b.n	801518c <SecureElementInit+0x1c>
 8015196:	bf00      	nop
 8015198:	200011b0 	.word	0x200011b0
 801519c:	0803e500 	.word	0x0803e500

080151a0 <SecureElementGetKeyByID>:
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 80151a0:	2300      	movs	r3, #0
 80151a2:	2b09      	cmp	r3, #9
 80151a4:	d817      	bhi.n	80151d6 <SecureElementGetKeyByID+0x36>
{
 80151a6:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 80151a8:	4a0c      	ldr	r2, [pc, #48]	; (80151dc <SecureElementGetKeyByID+0x3c>)
 80151aa:	6814      	ldr	r4, [r2, #0]
 80151ac:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80151b0:	4422      	add	r2, r4
 80151b2:	7c12      	ldrb	r2, [r2, #16]
 80151b4:	4282      	cmp	r2, r0
 80151b6:	d006      	beq.n	80151c6 <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 80151b8:	3301      	adds	r3, #1
 80151ba:	b2db      	uxtb	r3, r3
 80151bc:	2b09      	cmp	r3, #9
 80151be:	d9f3      	bls.n	80151a8 <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80151c0:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 80151c2:	bc10      	pop	{r4}
 80151c4:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 80151c6:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 80151ca:	f10c 0c10 	add.w	ip, ip, #16
 80151ce:	4464      	add	r4, ip
 80151d0:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 80151d2:	2000      	movs	r0, #0
 80151d4:	e7f5      	b.n	80151c2 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80151d6:	2003      	movs	r0, #3
}
 80151d8:	4770      	bx	lr
 80151da:	bf00      	nop
 80151dc:	200011b0 	.word	0x200011b0

080151e0 <PrintKey>:
{
 80151e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151e4:	b095      	sub	sp, #84	; 0x54
 80151e6:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 80151e8:	a913      	add	r1, sp, #76	; 0x4c
 80151ea:	f7ff ffd9 	bl	80151a0 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 80151ee:	2800      	cmp	r0, #0
 80151f0:	d154      	bne.n	801529c <PrintKey+0xbc>
        if (key == APP_KEY)
 80151f2:	b1b4      	cbz	r4, 8015222 <PrintKey+0x42>
        else if (key == NWK_KEY)
 80151f4:	2c01      	cmp	r4, #1
 80151f6:	d054      	beq.n	80152a2 <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 80151f8:	2c03      	cmp	r4, #3
 80151fa:	d059      	beq.n	80152b0 <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 80151fc:	2c02      	cmp	r4, #2
 80151fe:	d05e      	beq.n	80152be <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 8015200:	2c04      	cmp	r4, #4
 8015202:	d063      	beq.n	80152cc <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 8015204:	2c7f      	cmp	r4, #127	; 0x7f
 8015206:	d068      	beq.n	80152da <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 8015208:	2c80      	cmp	r4, #128	; 0x80
 801520a:	d06d      	beq.n	80152e8 <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 801520c:	2c81      	cmp	r4, #129	; 0x81
 801520e:	d072      	beq.n	80152f6 <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 8015210:	2c82      	cmp	r4, #130	; 0x82
 8015212:	d10c      	bne.n	801522e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 8015214:	4b3b      	ldr	r3, [pc, #236]	; (8015304 <PrintKey+0x124>)
 8015216:	2200      	movs	r2, #0
 8015218:	4611      	mov	r1, r2
 801521a:	2002      	movs	r0, #2
 801521c:	f002 f8f6 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
 8015220:	e005      	b.n	801522e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 8015222:	4b39      	ldr	r3, [pc, #228]	; (8015308 <PrintKey+0x128>)
 8015224:	2200      	movs	r2, #0
 8015226:	4611      	mov	r1, r2
 8015228:	2002      	movs	r0, #2
 801522a:	f002 f8ef 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 801522e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015230:	785a      	ldrb	r2, [r3, #1]
 8015232:	9210      	str	r2, [sp, #64]	; 0x40
 8015234:	7899      	ldrb	r1, [r3, #2]
 8015236:	9111      	str	r1, [sp, #68]	; 0x44
 8015238:	78da      	ldrb	r2, [r3, #3]
 801523a:	7919      	ldrb	r1, [r3, #4]
 801523c:	7958      	ldrb	r0, [r3, #5]
 801523e:	799c      	ldrb	r4, [r3, #6]
 8015240:	79dd      	ldrb	r5, [r3, #7]
 8015242:	7a1e      	ldrb	r6, [r3, #8]
 8015244:	7a5f      	ldrb	r7, [r3, #9]
 8015246:	f893 c00a 	ldrb.w	ip, [r3, #10]
 801524a:	f893 e00b 	ldrb.w	lr, [r3, #11]
 801524e:	f893 800c 	ldrb.w	r8, [r3, #12]
 8015252:	f893 900d 	ldrb.w	r9, [r3, #13]
 8015256:	f893 a00e 	ldrb.w	sl, [r3, #14]
 801525a:	f893 b00f 	ldrb.w	fp, [r3, #15]
 801525e:	7c1b      	ldrb	r3, [r3, #16]
 8015260:	930f      	str	r3, [sp, #60]	; 0x3c
 8015262:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8015266:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801526a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801526e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8015272:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8015276:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 801527a:	9708      	str	r7, [sp, #32]
 801527c:	9607      	str	r6, [sp, #28]
 801527e:	9506      	str	r5, [sp, #24]
 8015280:	9405      	str	r4, [sp, #20]
 8015282:	9004      	str	r0, [sp, #16]
 8015284:	9103      	str	r1, [sp, #12]
 8015286:	9202      	str	r2, [sp, #8]
 8015288:	9911      	ldr	r1, [sp, #68]	; 0x44
 801528a:	9101      	str	r1, [sp, #4]
 801528c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801528e:	9200      	str	r2, [sp, #0]
 8015290:	4b1e      	ldr	r3, [pc, #120]	; (801530c <PrintKey+0x12c>)
 8015292:	2200      	movs	r2, #0
 8015294:	4611      	mov	r1, r2
 8015296:	2002      	movs	r0, #2
 8015298:	f002 f8b8 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 801529c:	b015      	add	sp, #84	; 0x54
 801529e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 80152a2:	4b1b      	ldr	r3, [pc, #108]	; (8015310 <PrintKey+0x130>)
 80152a4:	2200      	movs	r2, #0
 80152a6:	4611      	mov	r1, r2
 80152a8:	2002      	movs	r0, #2
 80152aa:	f002 f8af 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
 80152ae:	e7be      	b.n	801522e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 80152b0:	4b18      	ldr	r3, [pc, #96]	; (8015314 <PrintKey+0x134>)
 80152b2:	2200      	movs	r2, #0
 80152b4:	4611      	mov	r1, r2
 80152b6:	2002      	movs	r0, #2
 80152b8:	f002 f8a8 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
 80152bc:	e7b7      	b.n	801522e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 80152be:	4b16      	ldr	r3, [pc, #88]	; (8015318 <PrintKey+0x138>)
 80152c0:	2200      	movs	r2, #0
 80152c2:	4611      	mov	r1, r2
 80152c4:	2002      	movs	r0, #2
 80152c6:	f002 f8a1 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
 80152ca:	e7b0      	b.n	801522e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 80152cc:	4b13      	ldr	r3, [pc, #76]	; (801531c <PrintKey+0x13c>)
 80152ce:	2200      	movs	r2, #0
 80152d0:	4611      	mov	r1, r2
 80152d2:	2002      	movs	r0, #2
 80152d4:	f002 f89a 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
 80152d8:	e7a9      	b.n	801522e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 80152da:	4b11      	ldr	r3, [pc, #68]	; (8015320 <PrintKey+0x140>)
 80152dc:	2200      	movs	r2, #0
 80152de:	4611      	mov	r1, r2
 80152e0:	2002      	movs	r0, #2
 80152e2:	f002 f893 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
 80152e6:	e7a2      	b.n	801522e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 80152e8:	4b0e      	ldr	r3, [pc, #56]	; (8015324 <PrintKey+0x144>)
 80152ea:	2200      	movs	r2, #0
 80152ec:	4611      	mov	r1, r2
 80152ee:	2002      	movs	r0, #2
 80152f0:	f002 f88c 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
 80152f4:	e79b      	b.n	801522e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 80152f6:	4b0c      	ldr	r3, [pc, #48]	; (8015328 <PrintKey+0x148>)
 80152f8:	2200      	movs	r2, #0
 80152fa:	4611      	mov	r1, r2
 80152fc:	2002      	movs	r0, #2
 80152fe:	f002 f885 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
 8015302:	e794      	b.n	801522e <PrintKey+0x4e>
 8015304:	0801c1fc 	.word	0x0801c1fc
 8015308:	0801c13c 	.word	0x0801c13c
 801530c:	0801c214 	.word	0x0801c214
 8015310:	0801c154 	.word	0x0801c154
 8015314:	0801c16c 	.word	0x0801c16c
 8015318:	0801c184 	.word	0x0801c184
 801531c:	0801c19c 	.word	0x0801c19c
 8015320:	0801c1b4 	.word	0x0801c1b4
 8015324:	0801c1cc 	.word	0x0801c1cc
 8015328:	0801c1e4 	.word	0x0801c1e4

0801532c <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 801532c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801532e:	b089      	sub	sp, #36	; 0x24
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8015330:	4b28      	ldr	r3, [pc, #160]	; (80153d4 <SecureElementPrintKeys+0xa8>)
 8015332:	2200      	movs	r2, #0
 8015334:	4611      	mov	r1, r2
 8015336:	2002      	movs	r0, #2
 8015338:	f002 f868 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 801533c:	2000      	movs	r0, #0
 801533e:	f7ff ff4f 	bl	80151e0 <PrintKey>
    PrintKey(NWK_KEY);
 8015342:	2001      	movs	r0, #1
 8015344:	f7ff ff4c 	bl	80151e0 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8015348:	4b23      	ldr	r3, [pc, #140]	; (80153d8 <SecureElementPrintKeys+0xac>)
 801534a:	2200      	movs	r2, #0
 801534c:	4611      	mov	r1, r2
 801534e:	2002      	movs	r0, #2
 8015350:	f002 f85c 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 8015354:	2003      	movs	r0, #3
 8015356:	f7ff ff43 	bl	80151e0 <PrintKey>
    PrintKey(NWK_S_KEY);
 801535a:	2002      	movs	r0, #2
 801535c:	f7ff ff40 	bl	80151e0 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 8015360:	4b1e      	ldr	r3, [pc, #120]	; (80153dc <SecureElementPrintKeys+0xb0>)
 8015362:	2200      	movs	r2, #0
 8015364:	4611      	mov	r1, r2
 8015366:	2002      	movs	r0, #2
 8015368:	f002 f850 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 801536c:	4c1c      	ldr	r4, [pc, #112]	; (80153e0 <SecureElementPrintKeys+0xb4>)
 801536e:	6823      	ldr	r3, [r4, #0]
 8015370:	781a      	ldrb	r2, [r3, #0]
 8015372:	7859      	ldrb	r1, [r3, #1]
 8015374:	7898      	ldrb	r0, [r3, #2]
 8015376:	78dd      	ldrb	r5, [r3, #3]
 8015378:	791e      	ldrb	r6, [r3, #4]
 801537a:	795f      	ldrb	r7, [r3, #5]
 801537c:	f893 c006 	ldrb.w	ip, [r3, #6]
 8015380:	79db      	ldrb	r3, [r3, #7]
 8015382:	9307      	str	r3, [sp, #28]
 8015384:	f8cd c018 	str.w	ip, [sp, #24]
 8015388:	9705      	str	r7, [sp, #20]
 801538a:	9604      	str	r6, [sp, #16]
 801538c:	9503      	str	r5, [sp, #12]
 801538e:	9002      	str	r0, [sp, #8]
 8015390:	9101      	str	r1, [sp, #4]
 8015392:	9200      	str	r2, [sp, #0]
 8015394:	4b13      	ldr	r3, [pc, #76]	; (80153e4 <SecureElementPrintKeys+0xb8>)
 8015396:	2200      	movs	r2, #0
 8015398:	4611      	mov	r1, r2
 801539a:	2002      	movs	r0, #2
 801539c:	f002 f836 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80153a0:	6823      	ldr	r3, [r4, #0]
 80153a2:	7a1a      	ldrb	r2, [r3, #8]
 80153a4:	7a59      	ldrb	r1, [r3, #9]
 80153a6:	7a98      	ldrb	r0, [r3, #10]
 80153a8:	7adc      	ldrb	r4, [r3, #11]
 80153aa:	7b1d      	ldrb	r5, [r3, #12]
 80153ac:	7b5e      	ldrb	r6, [r3, #13]
 80153ae:	7b9f      	ldrb	r7, [r3, #14]
 80153b0:	7bdb      	ldrb	r3, [r3, #15]
 80153b2:	9307      	str	r3, [sp, #28]
 80153b4:	9706      	str	r7, [sp, #24]
 80153b6:	9605      	str	r6, [sp, #20]
 80153b8:	9504      	str	r5, [sp, #16]
 80153ba:	9403      	str	r4, [sp, #12]
 80153bc:	9002      	str	r0, [sp, #8]
 80153be:	9101      	str	r1, [sp, #4]
 80153c0:	9200      	str	r2, [sp, #0]
 80153c2:	4b09      	ldr	r3, [pc, #36]	; (80153e8 <SecureElementPrintKeys+0xbc>)
 80153c4:	2200      	movs	r2, #0
 80153c6:	4611      	mov	r1, r2
 80153c8:	2002      	movs	r0, #2
 80153ca:	f002 f81f 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
}
 80153ce:	2000      	movs	r0, #0
 80153d0:	b009      	add	sp, #36	; 0x24
 80153d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153d4:	0801c268 	.word	0x0801c268
 80153d8:	0801c280 	.word	0x0801c280
 80153dc:	0801c298 	.word	0x0801c298
 80153e0:	200011b0 	.word	0x200011b0
 80153e4:	0801c2b0 	.word	0x0801c2b0
 80153e8:	0801c2f0 	.word	0x0801c2f0

080153ec <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 80153ec:	b508      	push	{r3, lr}
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 80153ee:	2004      	movs	r0, #4
 80153f0:	f7ff fef6 	bl	80151e0 <PrintKey>
    PrintKey(MC_KE_KEY);
 80153f4:	207f      	movs	r0, #127	; 0x7f
 80153f6:	f7ff fef3 	bl	80151e0 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 80153fa:	2002      	movs	r0, #2
 80153fc:	f7ff fef0 	bl	80151e0 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 8015400:	2003      	movs	r0, #3
 8015402:	f7ff feed 	bl	80151e0 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
}
 8015406:	2000      	movs	r0, #0
 8015408:	bd08      	pop	{r3, pc}

0801540a <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 801540a:	2b7e      	cmp	r3, #126	; 0x7e
 801540c:	d80a      	bhi.n	8015424 <SecureElementComputeAesCmac+0x1a>
{
 801540e:	b500      	push	{lr}
 8015410:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8015412:	f8dd c010 	ldr.w	ip, [sp, #16]
 8015416:	f8cd c000 	str.w	ip, [sp]
 801541a:	f7ff fe69 	bl	80150f0 <ComputeCmac>
}
 801541e:	b003      	add	sp, #12
 8015420:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8015424:	2003      	movs	r0, #3
}
 8015426:	4770      	bx	lr

08015428 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 8015428:	b190      	cbz	r0, 8015450 <SecureElementVerifyAesCmac+0x28>
{
 801542a:	b510      	push	{r4, lr}
 801542c:	b084      	sub	sp, #16
 801542e:	468c      	mov	ip, r1
 8015430:	4614      	mov	r4, r2
 8015432:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 8015434:	2000      	movs	r0, #0
 8015436:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8015438:	aa03      	add	r2, sp, #12
 801543a:	9200      	str	r2, [sp, #0]
 801543c:	4662      	mov	r2, ip
 801543e:	f7ff fe57 	bl	80150f0 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8015442:	b918      	cbnz	r0, 801544c <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8015444:	9b03      	ldr	r3, [sp, #12]
 8015446:	42a3      	cmp	r3, r4
 8015448:	d000      	beq.n	801544c <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 801544a:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 801544c:	b004      	add	sp, #16
 801544e:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8015450:	2002      	movs	r0, #2
}
 8015452:	4770      	bx	lr

08015454 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 8015454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015458:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 801545a:	b350      	cbz	r0, 80154b2 <SecureElementAesEncrypt+0x5e>
 801545c:	460c      	mov	r4, r1
 801545e:	4615      	mov	r5, r2
 8015460:	461e      	mov	r6, r3
 8015462:	4607      	mov	r7, r0
 8015464:	b343      	cbz	r3, 80154b8 <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8015466:	f011 0f0f 	tst.w	r1, #15
 801546a:	d128      	bne.n	80154be <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 801546c:	22f0      	movs	r2, #240	; 0xf0
 801546e:	2100      	movs	r1, #0
 8015470:	a801      	add	r0, sp, #4
 8015472:	f000 f93a 	bl	80156ea <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8015476:	4669      	mov	r1, sp
 8015478:	4628      	mov	r0, r5
 801547a:	f7ff fe19 	bl	80150b0 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 801547e:	4680      	mov	r8, r0
 8015480:	b118      	cbz	r0, 801548a <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 8015482:	4640      	mov	r0, r8
 8015484:	b03e      	add	sp, #248	; 0xf8
 8015486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 801548a:	aa01      	add	r2, sp, #4
 801548c:	2110      	movs	r1, #16
 801548e:	9800      	ldr	r0, [sp, #0]
 8015490:	3001      	adds	r0, #1
 8015492:	f7ff fd61 	bl	8014f58 <lorawan_aes_set_key>
        uint8_t block = 0;
 8015496:	4645      	mov	r5, r8
        while( size != 0 )
 8015498:	e008      	b.n	80154ac <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 801549a:	aa01      	add	r2, sp, #4
 801549c:	1971      	adds	r1, r6, r5
 801549e:	1978      	adds	r0, r7, r5
 80154a0:	f7ff fddc 	bl	801505c <lorawan_aes_encrypt>
            block = block + 16;
 80154a4:	3510      	adds	r5, #16
 80154a6:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 80154a8:	3c10      	subs	r4, #16
 80154aa:	b2a4      	uxth	r4, r4
        while( size != 0 )
 80154ac:	2c00      	cmp	r4, #0
 80154ae:	d1f4      	bne.n	801549a <SecureElementAesEncrypt+0x46>
 80154b0:	e7e7      	b.n	8015482 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 80154b2:	f04f 0802 	mov.w	r8, #2
 80154b6:	e7e4      	b.n	8015482 <SecureElementAesEncrypt+0x2e>
 80154b8:	f04f 0802 	mov.w	r8, #2
 80154bc:	e7e1      	b.n	8015482 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80154be:	f04f 0805 	mov.w	r8, #5
 80154c2:	e7de      	b.n	8015482 <SecureElementAesEncrypt+0x2e>

080154c4 <SecureElementSetKey>:
{
 80154c4:	b530      	push	{r4, r5, lr}
 80154c6:	b085      	sub	sp, #20
    if( key == NULL )
 80154c8:	2900      	cmp	r1, #0
 80154ca:	d038      	beq.n	801553e <SecureElementSetKey+0x7a>
 80154cc:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80154ce:	2300      	movs	r3, #0
 80154d0:	2b09      	cmp	r3, #9
 80154d2:	d830      	bhi.n	8015536 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 80154d4:	4a1b      	ldr	r2, [pc, #108]	; (8015544 <SecureElementSetKey+0x80>)
 80154d6:	6811      	ldr	r1, [r2, #0]
 80154d8:	461c      	mov	r4, r3
 80154da:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80154de:	440a      	add	r2, r1
 80154e0:	7c12      	ldrb	r2, [r2, #16]
 80154e2:	4282      	cmp	r2, r0
 80154e4:	d002      	beq.n	80154ec <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80154e6:	3301      	adds	r3, #1
 80154e8:	b2db      	uxtb	r3, r3
 80154ea:	e7f1      	b.n	80154d0 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 80154ec:	2880      	cmp	r0, #128	; 0x80
 80154ee:	d00a      	beq.n	8015506 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 80154f0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80154f4:	3310      	adds	r3, #16
 80154f6:	440b      	add	r3, r1
 80154f8:	2210      	movs	r2, #16
 80154fa:	4661      	mov	r1, ip
 80154fc:	1c58      	adds	r0, r3, #1
 80154fe:	f000 f8dc 	bl	80156ba <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8015502:	2500      	movs	r5, #0
 8015504:	e018      	b.n	8015538 <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 8015506:	2300      	movs	r3, #0
 8015508:	9300      	str	r3, [sp, #0]
 801550a:	9301      	str	r3, [sp, #4]
 801550c:	9302      	str	r3, [sp, #8]
 801550e:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8015510:	466b      	mov	r3, sp
 8015512:	227f      	movs	r2, #127	; 0x7f
 8015514:	2110      	movs	r1, #16
 8015516:	4660      	mov	r0, ip
 8015518:	f7ff ff9c 	bl	8015454 <SecureElementAesEncrypt>
 801551c:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 801551e:	4b09      	ldr	r3, [pc, #36]	; (8015544 <SecureElementSetKey+0x80>)
 8015520:	6818      	ldr	r0, [r3, #0]
 8015522:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8015526:	3410      	adds	r4, #16
 8015528:	4420      	add	r0, r4
 801552a:	2210      	movs	r2, #16
 801552c:	4669      	mov	r1, sp
 801552e:	3001      	adds	r0, #1
 8015530:	f000 f8c3 	bl	80156ba <memcpy1>
                return retval;
 8015534:	e000      	b.n	8015538 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8015536:	2503      	movs	r5, #3
}
 8015538:	4628      	mov	r0, r5
 801553a:	b005      	add	sp, #20
 801553c:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801553e:	2502      	movs	r5, #2
 8015540:	e7fa      	b.n	8015538 <SecureElementSetKey+0x74>
 8015542:	bf00      	nop
 8015544:	200011b0 	.word	0x200011b0

08015548 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8015548:	b1d0      	cbz	r0, 8015580 <SecureElementDeriveAndStoreKey+0x38>
{
 801554a:	b510      	push	{r4, lr}
 801554c:	b084      	sub	sp, #16
 801554e:	4614      	mov	r4, r2
 8015550:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 8015552:	2a7f      	cmp	r2, #127	; 0x7f
 8015554:	d101      	bne.n	801555a <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8015556:	2904      	cmp	r1, #4
 8015558:	d114      	bne.n	8015584 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 801555a:	2300      	movs	r3, #0
 801555c:	9300      	str	r3, [sp, #0]
 801555e:	9301      	str	r3, [sp, #4]
 8015560:	9302      	str	r3, [sp, #8]
 8015562:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8015564:	466b      	mov	r3, sp
 8015566:	460a      	mov	r2, r1
 8015568:	2110      	movs	r1, #16
 801556a:	4660      	mov	r0, ip
 801556c:	f7ff ff72 	bl	8015454 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8015570:	b108      	cbz	r0, 8015576 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8015572:	b004      	add	sp, #16
 8015574:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8015576:	4669      	mov	r1, sp
 8015578:	4620      	mov	r0, r4
 801557a:	f7ff ffa3 	bl	80154c4 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 801557e:	e7f8      	b.n	8015572 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8015580:	2002      	movs	r0, #2
}
 8015582:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8015584:	2003      	movs	r0, #3
 8015586:	e7f4      	b.n	8015572 <SecureElementDeriveAndStoreKey+0x2a>

08015588 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 8015588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801558c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8015590:	9d07      	ldr	r5, [sp, #28]
 8015592:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8015594:	b37b      	cbz	r3, 80155f6 <SecureElementProcessJoinAccept+0x6e>
 8015596:	4698      	mov	r8, r3
 8015598:	b37d      	cbz	r5, 80155fa <SecureElementProcessJoinAccept+0x72>
 801559a:	b386      	cbz	r6, 80155fe <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 801559c:	2c21      	cmp	r4, #33	; 0x21
 801559e:	d830      	bhi.n	8015602 <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80155a0:	b2a7      	uxth	r7, r4
 80155a2:	463a      	mov	r2, r7
 80155a4:	4619      	mov	r1, r3
 80155a6:	4628      	mov	r0, r5
 80155a8:	f000 f887 	bl	80156ba <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80155ac:	1e79      	subs	r1, r7, #1
 80155ae:	1c6b      	adds	r3, r5, #1
 80155b0:	2201      	movs	r2, #1
 80155b2:	b289      	uxth	r1, r1
 80155b4:	eb08 0002 	add.w	r0, r8, r2
 80155b8:	f7ff ff4c 	bl	8015454 <SecureElementAesEncrypt>
 80155bc:	bb20      	cbnz	r0, 8015608 <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 80155be:	7aeb      	ldrb	r3, [r5, #11]
 80155c0:	09db      	lsrs	r3, r3, #7
 80155c2:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 80155c4:	442c      	add	r4, r5
 80155c6:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 80155ca:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80155ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 80155d2:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80155d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 80155da:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80155de:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 80155e2:	b99b      	cbnz	r3, 801560c <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 80155e4:	1f39      	subs	r1, r7, #4
 80155e6:	2301      	movs	r3, #1
 80155e8:	b289      	uxth	r1, r1
 80155ea:	4628      	mov	r0, r5
 80155ec:	f7ff ff1c 	bl	8015428 <SecureElementVerifyAesCmac>
 80155f0:	b140      	cbz	r0, 8015604 <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 80155f2:	2001      	movs	r0, #1
 80155f4:	e006      	b.n	8015604 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 80155f6:	2002      	movs	r0, #2
 80155f8:	e004      	b.n	8015604 <SecureElementProcessJoinAccept+0x7c>
 80155fa:	2002      	movs	r0, #2
 80155fc:	e002      	b.n	8015604 <SecureElementProcessJoinAccept+0x7c>
 80155fe:	2002      	movs	r0, #2
 8015600:	e000      	b.n	8015604 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8015602:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8015604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8015608:	2007      	movs	r0, #7
 801560a:	e7fb      	b.n	8015604 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 801560c:	2004      	movs	r0, #4
 801560e:	e7f9      	b.n	8015604 <SecureElementProcessJoinAccept+0x7c>

08015610 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 8015610:	b140      	cbz	r0, 8015624 <SecureElementSetDevEui+0x14>
{
 8015612:	b508      	push	{r3, lr}
 8015614:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 8015616:	2208      	movs	r2, #8
 8015618:	4b03      	ldr	r3, [pc, #12]	; (8015628 <SecureElementSetDevEui+0x18>)
 801561a:	6818      	ldr	r0, [r3, #0]
 801561c:	f000 f84d 	bl	80156ba <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8015620:	2000      	movs	r0, #0
}
 8015622:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8015624:	2002      	movs	r0, #2
}
 8015626:	4770      	bx	lr
 8015628:	200011b0 	.word	0x200011b0

0801562c <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 801562c:	4b01      	ldr	r3, [pc, #4]	; (8015634 <SecureElementGetDevEui+0x8>)
 801562e:	6818      	ldr	r0, [r3, #0]
 8015630:	4770      	bx	lr
 8015632:	bf00      	nop
 8015634:	200011b0 	.word	0x200011b0

08015638 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 8015638:	b148      	cbz	r0, 801564e <SecureElementSetJoinEui+0x16>
{
 801563a:	b508      	push	{r3, lr}
 801563c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 801563e:	4b05      	ldr	r3, [pc, #20]	; (8015654 <SecureElementSetJoinEui+0x1c>)
 8015640:	6818      	ldr	r0, [r3, #0]
 8015642:	2208      	movs	r2, #8
 8015644:	4410      	add	r0, r2
 8015646:	f000 f838 	bl	80156ba <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 801564a:	2000      	movs	r0, #0
}
 801564c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801564e:	2002      	movs	r0, #2
}
 8015650:	4770      	bx	lr
 8015652:	bf00      	nop
 8015654:	200011b0 	.word	0x200011b0

08015658 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8015658:	4b01      	ldr	r3, [pc, #4]	; (8015660 <SecureElementGetJoinEui+0x8>)
 801565a:	6818      	ldr	r0, [r3, #0]
}
 801565c:	3008      	adds	r0, #8
 801565e:	4770      	bx	lr
 8015660:	200011b0 	.word	0x200011b0

08015664 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8015664:	4b09      	ldr	r3, [pc, #36]	; (801568c <rand1+0x28>)
 8015666:	681a      	ldr	r2, [r3, #0]
 8015668:	4909      	ldr	r1, [pc, #36]	; (8015690 <rand1+0x2c>)
 801566a:	f243 0039 	movw	r0, #12345	; 0x3039
 801566e:	fb01 0002 	mla	r0, r1, r2, r0
 8015672:	6018      	str	r0, [r3, #0]
 8015674:	2303      	movs	r3, #3
 8015676:	fba3 2300 	umull	r2, r3, r3, r0
 801567a:	1ac2      	subs	r2, r0, r3
 801567c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8015680:	0f9b      	lsrs	r3, r3, #30
 8015682:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 8015686:	1ac0      	subs	r0, r0, r3
 8015688:	4770      	bx	lr
 801568a:	bf00      	nop
 801568c:	20000110 	.word	0x20000110
 8015690:	41c64e6d 	.word	0x41c64e6d

08015694 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 8015694:	4b01      	ldr	r3, [pc, #4]	; (801569c <srand1+0x8>)
 8015696:	6018      	str	r0, [r3, #0]
}
 8015698:	4770      	bx	lr
 801569a:	bf00      	nop
 801569c:	20000110 	.word	0x20000110

080156a0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80156a0:	b538      	push	{r3, r4, r5, lr}
 80156a2:	4605      	mov	r5, r0
 80156a4:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80156a6:	f7ff ffdd 	bl	8015664 <rand1>
 80156aa:	1b61      	subs	r1, r4, r5
 80156ac:	3101      	adds	r1, #1
 80156ae:	fb90 f3f1 	sdiv	r3, r0, r1
 80156b2:	fb01 0013 	mls	r0, r1, r3, r0
}
 80156b6:	4428      	add	r0, r5
 80156b8:	bd38      	pop	{r3, r4, r5, pc}

080156ba <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 80156ba:	e004      	b.n	80156c6 <memcpy1+0xc>
    {
        *dst++ = *src++;
 80156bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80156c0:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 80156c4:	461a      	mov	r2, r3
 80156c6:	1e53      	subs	r3, r2, #1
 80156c8:	b29b      	uxth	r3, r3
 80156ca:	2a00      	cmp	r2, #0
 80156cc:	d1f6      	bne.n	80156bc <memcpy1+0x2>
    }
}
 80156ce:	4770      	bx	lr

080156d0 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 80156d0:	1e53      	subs	r3, r2, #1
 80156d2:	4418      	add	r0, r3
    while( size-- )
 80156d4:	e004      	b.n	80156e0 <memcpyr+0x10>
    {
        *dst-- = *src++;
 80156d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80156da:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 80156de:	461a      	mov	r2, r3
 80156e0:	1e53      	subs	r3, r2, #1
 80156e2:	b29b      	uxth	r3, r3
 80156e4:	2a00      	cmp	r2, #0
 80156e6:	d1f6      	bne.n	80156d6 <memcpyr+0x6>
    }
}
 80156e8:	4770      	bx	lr

080156ea <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 80156ea:	e002      	b.n	80156f2 <memset1+0x8>
    {
        *dst++ = value;
 80156ec:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 80156f0:	461a      	mov	r2, r3
 80156f2:	1e53      	subs	r3, r2, #1
 80156f4:	b29b      	uxth	r3, r3
 80156f6:	2a00      	cmp	r2, #0
 80156f8:	d1f8      	bne.n	80156ec <memset1+0x2>
    }
}
 80156fa:	4770      	bx	lr

080156fc <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 80156fc:	b1f0      	cbz	r0, 801573c <Crc32+0x40>
{
 80156fe:	b510      	push	{r4, lr}
 8015700:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 8015702:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 8015706:	f04f 30ff 	mov.w	r0, #4294967295
 801570a:	e00e      	b.n	801572a <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801570c:	f340 0c00 	sbfx	ip, r0, #0, #1
 8015710:	4a0b      	ldr	r2, [pc, #44]	; (8015740 <Crc32+0x44>)
 8015712:	ea0c 0202 	and.w	r2, ip, r2
 8015716:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 801571a:	3301      	adds	r3, #1
 801571c:	b29b      	uxth	r3, r3
 801571e:	2b07      	cmp	r3, #7
 8015720:	d9f4      	bls.n	801570c <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 8015722:	f10e 0e01 	add.w	lr, lr, #1
 8015726:	fa1f fe8e 	uxth.w	lr, lr
 801572a:	458e      	cmp	lr, r1
 801572c:	d204      	bcs.n	8015738 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 801572e:	f814 300e 	ldrb.w	r3, [r4, lr]
 8015732:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 8015734:	2300      	movs	r3, #0
 8015736:	e7f2      	b.n	801571e <Crc32+0x22>
        }
    }

    return ~crc;
 8015738:	43c0      	mvns	r0, r0
}
 801573a:	bd10      	pop	{r4, pc}
        return 0;
 801573c:	2000      	movs	r0, #0
}
 801573e:	4770      	bx	lr
 8015740:	edb88320 	.word	0xedb88320

08015744 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8015744:	2001      	movs	r0, #1
 8015746:	4770      	bx	lr

08015748 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8015748:	280a      	cmp	r0, #10
 801574a:	d807      	bhi.n	801575c <RadioGetLoRaBandwidthInHz+0x14>
 801574c:	e8df f000 	tbb	[pc, r0]
 8015750:	17110b20 	.word	0x17110b20
 8015754:	061e1c1a 	.word	0x061e1c1a
 8015758:	0e08      	.short	0x0e08
 801575a:	14          	.byte	0x14
 801575b:	00          	.byte	0x00
 801575c:	2000      	movs	r0, #0
 801575e:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8015760:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8015764:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8015766:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 801576a:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801576c:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8015770:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8015772:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 8015776:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8015778:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 801577c:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801577e:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8015782:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8015784:	4804      	ldr	r0, [pc, #16]	; (8015798 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8015786:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8015788:	4804      	ldr	r0, [pc, #16]	; (801579c <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 801578a:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801578c:	4804      	ldr	r0, [pc, #16]	; (80157a0 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 801578e:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8015790:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8015794:	4770      	bx	lr
 8015796:	bf00      	nop
 8015798:	0001e848 	.word	0x0001e848
 801579c:	0003d090 	.word	0x0003d090
 80157a0:	0007a120 	.word	0x0007a120

080157a4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80157a4:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80157a8:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80157aa:	b953      	cbnz	r3, 80157c2 <RadioGetGfskTimeOnAirNumerator+0x1e>
 80157ac:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 80157ae:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80157b0:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80157b2:	b141      	cbz	r1, 80157c6 <RadioGetGfskTimeOnAirNumerator+0x22>
 80157b4:	2302      	movs	r3, #2
 80157b6:	f89d 0000 	ldrb.w	r0, [sp]
 80157ba:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 80157bc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80157c0:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80157c2:	2000      	movs	r0, #0
 80157c4:	e7f3      	b.n	80157ae <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80157c6:	2300      	movs	r3, #0
 80157c8:	e7f5      	b.n	80157b6 <RadioGetGfskTimeOnAirNumerator+0x12>

080157ca <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80157ca:	b570      	push	{r4, r5, r6, lr}
 80157cc:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80157d0:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 80157d4:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80157d6:	f1a1 0c05 	sub.w	ip, r1, #5
 80157da:	f1bc 0f01 	cmp.w	ip, #1
 80157de:	d932      	bls.n	8015846 <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80157e0:	b918      	cbnz	r0, 80157ea <RadioGetLoRaTimeOnAirNumerator+0x20>
 80157e2:	f1a1 060b 	sub.w	r6, r1, #11
 80157e6:	2e01      	cmp	r6, #1
 80157e8:	d935      	bls.n	8015856 <RadioGetLoRaTimeOnAirNumerator+0x8c>
 80157ea:	2801      	cmp	r0, #1
 80157ec:	d02f      	beq.n	801584e <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 80157ee:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80157f0:	f89d e014 	ldrb.w	lr, [sp, #20]
 80157f4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 80157f8:	b38d      	cbz	r5, 801585e <RadioGetLoRaTimeOnAirNumerator+0x94>
 80157fa:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80157fe:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 8015800:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8015802:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8015806:	b36c      	cbz	r4, 8015864 <RadioGetLoRaTimeOnAirNumerator+0x9a>
 8015808:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 801580c:	44f4      	add	ip, lr

    if( datarate <= 6 )
 801580e:	2906      	cmp	r1, #6
 8015810:	d904      	bls.n	801581c <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8015812:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8015816:	b10e      	cbz	r6, 801581c <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8015818:	1e88      	subs	r0, r1, #2
 801581a:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 801581c:	f1bc 0f00 	cmp.w	ip, #0
 8015820:	db23      	blt.n	801586a <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8015822:	4484      	add	ip, r0
 8015824:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015828:	fb9c fcf0 	sdiv	ip, ip, r0
 801582c:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8015830:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8015834:	2906      	cmp	r1, #6
 8015836:	d801      	bhi.n	801583c <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 8015838:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801583c:	0080      	lsls	r0, r0, #2
 801583e:	3001      	adds	r0, #1
 8015840:	3902      	subs	r1, #2
}
 8015842:	4088      	lsls	r0, r1
 8015844:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8015846:	2b0b      	cmp	r3, #11
 8015848:	d8ca      	bhi.n	80157e0 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 801584a:	230c      	movs	r3, #12
 801584c:	e7c8      	b.n	80157e0 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801584e:	290c      	cmp	r1, #12
 8015850:	d003      	beq.n	801585a <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 8015852:	2600      	movs	r6, #0
 8015854:	e7cc      	b.n	80157f0 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8015856:	2601      	movs	r6, #1
 8015858:	e7ca      	b.n	80157f0 <RadioGetLoRaTimeOnAirNumerator+0x26>
 801585a:	2601      	movs	r6, #1
 801585c:	e7c8      	b.n	80157f0 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 801585e:	f04f 0c00 	mov.w	ip, #0
 8015862:	e7cc      	b.n	80157fe <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 8015864:	f04f 0c14 	mov.w	ip, #20
 8015868:	e7d0      	b.n	801580c <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 801586a:	f04f 0c00 	mov.w	ip, #0
 801586e:	e7d8      	b.n	8015822 <RadioGetLoRaTimeOnAirNumerator+0x58>

08015870 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8015870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015872:	b085      	sub	sp, #20
 8015874:	460e      	mov	r6, r1
 8015876:	4615      	mov	r5, r2
 8015878:	4619      	mov	r1, r3
 801587a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801587e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8015882:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8015886:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 801588a:	b148      	cbz	r0, 80158a0 <RadioTimeOnAir+0x30>
 801588c:	2801      	cmp	r0, #1
 801588e:	d012      	beq.n	80158b6 <RadioTimeOnAir+0x46>
 8015890:	2501      	movs	r5, #1
 8015892:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8015894:	442c      	add	r4, r5
 8015896:	1e60      	subs	r0, r4, #1
}
 8015898:	fbb0 f0f5 	udiv	r0, r0, r5
 801589c:	b005      	add	sp, #20
 801589e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80158a0:	f8cd c004 	str.w	ip, [sp, #4]
 80158a4:	9700      	str	r7, [sp, #0]
 80158a6:	4628      	mov	r0, r5
 80158a8:	f7ff ff7c 	bl	80157a4 <RadioGetGfskTimeOnAirNumerator>
 80158ac:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80158b0:	fb00 f404 	mul.w	r4, r0, r4
        break;
 80158b4:	e7ee      	b.n	8015894 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80158b6:	f8cd c008 	str.w	ip, [sp, #8]
 80158ba:	9701      	str	r7, [sp, #4]
 80158bc:	9300      	str	r3, [sp, #0]
 80158be:	4613      	mov	r3, r2
 80158c0:	460a      	mov	r2, r1
 80158c2:	4629      	mov	r1, r5
 80158c4:	4630      	mov	r0, r6
 80158c6:	f7ff ff80 	bl	80157ca <RadioGetLoRaTimeOnAirNumerator>
 80158ca:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80158ce:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80158d2:	4b03      	ldr	r3, [pc, #12]	; (80158e0 <RadioTimeOnAir+0x70>)
 80158d4:	5d98      	ldrb	r0, [r3, r6]
 80158d6:	f7ff ff37 	bl	8015748 <RadioGetLoRaBandwidthInHz>
 80158da:	4605      	mov	r5, r0
        break;
 80158dc:	e7da      	b.n	8015894 <RadioTimeOnAir+0x24>
 80158de:	bf00      	nop
 80158e0:	0801c39c 	.word	0x0801c39c

080158e4 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 80158e4:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80158e6:	4b05      	ldr	r3, [pc, #20]	; (80158fc <RadioOnTxTimeoutProcess+0x18>)
 80158e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80158ec:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80158ee:	4b04      	ldr	r3, [pc, #16]	; (8015900 <RadioOnTxTimeoutProcess+0x1c>)
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	b113      	cbz	r3, 80158fa <RadioOnTxTimeoutProcess+0x16>
 80158f4:	685b      	ldr	r3, [r3, #4]
 80158f6:	b103      	cbz	r3, 80158fa <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 80158f8:	4798      	blx	r3
    }
}
 80158fa:	bd08      	pop	{r3, pc}
 80158fc:	48000400 	.word	0x48000400
 8015900:	200012b4 	.word	0x200012b4

08015904 <RadioOnTxTimeoutIrq>:
{
 8015904:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8015906:	f7ff ffed 	bl	80158e4 <RadioOnTxTimeoutProcess>
}
 801590a:	bd08      	pop	{r3, pc}

0801590c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801590c:	b508      	push	{r3, lr}
 801590e:	4b05      	ldr	r3, [pc, #20]	; (8015924 <RadioOnRxTimeoutProcess+0x18>)
 8015910:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015914:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8015916:	4b04      	ldr	r3, [pc, #16]	; (8015928 <RadioOnRxTimeoutProcess+0x1c>)
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	b113      	cbz	r3, 8015922 <RadioOnRxTimeoutProcess+0x16>
 801591c:	68db      	ldr	r3, [r3, #12]
 801591e:	b103      	cbz	r3, 8015922 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8015920:	4798      	blx	r3
    }
}
 8015922:	bd08      	pop	{r3, pc}
 8015924:	48000400 	.word	0x48000400
 8015928:	200012b4 	.word	0x200012b4

0801592c <RadioOnRxTimeoutIrq>:
{
 801592c:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 801592e:	f7ff ffed 	bl	801590c <RadioOnRxTimeoutProcess>
}
 8015932:	bd08      	pop	{r3, pc}

08015934 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8015934:	f04f 30ff 	mov.w	r0, #4294967295
 8015938:	4770      	bx	lr

0801593a <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801593a:	f04f 30ff 	mov.w	r0, #4294967295
 801593e:	4770      	bx	lr

08015940 <RadioTxCw>:
{
 8015940:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8015942:	f001 fbab 	bl	801709c <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8015946:	2101      	movs	r1, #1
 8015948:	f001 fb94 	bl	8017074 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801594c:	f000 feac 	bl	80166a8 <SUBGRF_SetTxContinuousWave>
}
 8015950:	bd08      	pop	{r3, pc}
	...

08015954 <RadioSetRxDutyCycle>:
{
 8015954:	b570      	push	{r4, r5, r6, lr}
 8015956:	4604      	mov	r4, r0
 8015958:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801595a:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 801595e:	4e09      	ldr	r6, [pc, #36]	; (8015984 <RadioSetRxDutyCycle+0x30>)
 8015960:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8015962:	2300      	movs	r3, #0
 8015964:	461a      	mov	r2, r3
 8015966:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801596a:	4608      	mov	r0, r1
 801596c:	f000 ff47 	bl	80167fe <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8015970:	2100      	movs	r1, #0
 8015972:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8015976:	f001 fb7d 	bl	8017074 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801597a:	4629      	mov	r1, r5
 801597c:	4620      	mov	r0, r4
 801597e:	f000 fe63 	bl	8016648 <SUBGRF_SetRxDutyCycle>
}
 8015982:	bd70      	pop	{r4, r5, r6, pc}
 8015984:	200012d0 	.word	0x200012d0

08015988 <RadioRxBoosted>:
{
 8015988:	b538      	push	{r3, r4, r5, lr}
 801598a:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 801598c:	f001 fc57 	bl	801723e <RFW_Is_Init>
 8015990:	2801      	cmp	r0, #1
 8015992:	d019      	beq.n	80159c8 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8015994:	2300      	movs	r3, #0
 8015996:	461a      	mov	r2, r3
 8015998:	f240 2162 	movw	r1, #610	; 0x262
 801599c:	4608      	mov	r0, r1
 801599e:	f000 ff2e 	bl	80167fe <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80159a2:	b9a4      	cbnz	r4, 80159ce <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80159a4:	4c11      	ldr	r4, [pc, #68]	; (80159ec <RadioRxBoosted+0x64>)
 80159a6:	2100      	movs	r1, #0
 80159a8:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80159aa:	4b11      	ldr	r3, [pc, #68]	; (80159f0 <RadioRxBoosted+0x68>)
 80159ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80159b0:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80159b2:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80159b6:	f001 fb5d 	bl	8017074 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80159ba:	7863      	ldrb	r3, [r4, #1]
 80159bc:	b183      	cbz	r3, 80159e0 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80159be:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80159c2:	f000 ffef 	bl	80169a4 <SUBGRF_SetRxBoosted>
}
 80159c6:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 80159c8:	f001 fc41 	bl	801724e <RFW_ReceiveInit>
 80159cc:	e7e9      	b.n	80159a2 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80159ce:	4d09      	ldr	r5, [pc, #36]	; (80159f4 <RadioRxBoosted+0x6c>)
 80159d0:	4621      	mov	r1, r4
 80159d2:	4628      	mov	r0, r5
 80159d4:	f002 f90e 	bl	8017bf4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80159d8:	4628      	mov	r0, r5
 80159da:	f002 f8c5 	bl	8017b68 <UTIL_TIMER_Start>
 80159de:	e7e1      	b.n	80159a4 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80159e0:	4b02      	ldr	r3, [pc, #8]	; (80159ec <RadioRxBoosted+0x64>)
 80159e2:	6898      	ldr	r0, [r3, #8]
 80159e4:	0180      	lsls	r0, r0, #6
 80159e6:	f000 ffdd 	bl	80169a4 <SUBGRF_SetRxBoosted>
}
 80159ea:	e7ec      	b.n	80159c6 <RadioRxBoosted+0x3e>
 80159ec:	200012d0 	.word	0x200012d0
 80159f0:	48000400 	.word	0x48000400
 80159f4:	200012b8 	.word	0x200012b8

080159f8 <RadioStandby>:
{
 80159f8:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 80159fa:	2000      	movs	r0, #0
 80159fc:	f000 fdd6 	bl	80165ac <SUBGRF_SetStandby>
}
 8015a00:	bd08      	pop	{r3, pc}

08015a02 <RadioWrite>:
{
 8015a02:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 8015a04:	f000 ffbe 	bl	8016984 <SUBGRF_WriteRegister>
}
 8015a08:	bd08      	pop	{r3, pc}
	...

08015a0c <RadioTxPrbs>:
{
 8015a0c:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8015a0e:	2101      	movs	r1, #1
 8015a10:	4b07      	ldr	r3, [pc, #28]	; (8015a30 <RadioTxPrbs+0x24>)
 8015a12:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8015a16:	f001 fb2d 	bl	8017074 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8015a1a:	212d      	movs	r1, #45	; 0x2d
 8015a1c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8015a20:	f7ff ffef 	bl	8015a02 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8015a24:	f000 fe47 	bl	80166b6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8015a28:	4802      	ldr	r0, [pc, #8]	; (8015a34 <RadioTxPrbs+0x28>)
 8015a2a:	f000 fdd9 	bl	80165e0 <SUBGRF_SetTx>
}
 8015a2e:	bd08      	pop	{r3, pc}
 8015a30:	200012d0 	.word	0x200012d0
 8015a34:	000fffff 	.word	0x000fffff

08015a38 <RadioRead>:
{
 8015a38:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8015a3a:	f001 f895 	bl	8016b68 <SUBGRF_ReadRegister>
}
 8015a3e:	bd08      	pop	{r3, pc}

08015a40 <RadioGetStatus>:
{
 8015a40:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8015a42:	f000 fdad 	bl	80165a0 <SUBGRF_GetOperatingMode>
 8015a46:	2805      	cmp	r0, #5
 8015a48:	d007      	beq.n	8015a5a <RadioGetStatus+0x1a>
 8015a4a:	2807      	cmp	r0, #7
 8015a4c:	d007      	beq.n	8015a5e <RadioGetStatus+0x1e>
 8015a4e:	2804      	cmp	r0, #4
 8015a50:	d001      	beq.n	8015a56 <RadioGetStatus+0x16>
            return RF_IDLE;
 8015a52:	2000      	movs	r0, #0
}
 8015a54:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 8015a56:	2002      	movs	r0, #2
 8015a58:	e7fc      	b.n	8015a54 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 8015a5a:	2001      	movs	r0, #1
 8015a5c:	e7fa      	b.n	8015a54 <RadioGetStatus+0x14>
            return RF_CAD;
 8015a5e:	2003      	movs	r0, #3
 8015a60:	e7f8      	b.n	8015a54 <RadioGetStatus+0x14>
	...

08015a64 <RadioIrqProcess>:
{
 8015a64:	b530      	push	{r4, r5, lr}
 8015a66:	b083      	sub	sp, #12
    uint8_t size = 0;
 8015a68:	2300      	movs	r3, #0
 8015a6a:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8015a6e:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8015a70:	4ba5      	ldr	r3, [pc, #660]	; (8015d08 <RadioIrqProcess+0x2a4>)
 8015a72:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8015a76:	2b20      	cmp	r3, #32
 8015a78:	d829      	bhi.n	8015ace <RadioIrqProcess+0x6a>
 8015a7a:	b21a      	sxth	r2, r3
 8015a7c:	2a00      	cmp	r2, #0
 8015a7e:	f000 8140 	beq.w	8015d02 <RadioIrqProcess+0x29e>
 8015a82:	3b01      	subs	r3, #1
 8015a84:	2b1f      	cmp	r3, #31
 8015a86:	f200 813c 	bhi.w	8015d02 <RadioIrqProcess+0x29e>
 8015a8a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015a8e:	0063      	.short	0x0063
 8015a90:	013a007f 	.word	0x013a007f
 8015a94:	013a00f7 	.word	0x013a00f7
 8015a98:	013a013a 	.word	0x013a013a
 8015a9c:	013a0127 	.word	0x013a0127
 8015aa0:	013a013a 	.word	0x013a013a
 8015aa4:	013a013a 	.word	0x013a013a
 8015aa8:	013a013a 	.word	0x013a013a
 8015aac:	013a0134 	.word	0x013a0134
 8015ab0:	013a013a 	.word	0x013a013a
 8015ab4:	013a013a 	.word	0x013a013a
 8015ab8:	013a013a 	.word	0x013a013a
 8015abc:	013a013a 	.word	0x013a013a
 8015ac0:	013a013a 	.word	0x013a013a
 8015ac4:	013a013a 	.word	0x013a013a
 8015ac8:	013a013a 	.word	0x013a013a
 8015acc:	0155      	.short	0x0155
 8015ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015ad2:	f000 80b3 	beq.w	8015c3c <RadioIrqProcess+0x1d8>
 8015ad6:	d928      	bls.n	8015b2a <RadioIrqProcess+0xc6>
 8015ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015adc:	f040 8111 	bne.w	8015d02 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8015ae0:	4b8a      	ldr	r3, [pc, #552]	; (8015d0c <RadioIrqProcess+0x2a8>)
 8015ae2:	2201      	movs	r2, #1
 8015ae4:	2100      	movs	r1, #0
 8015ae6:	2002      	movs	r0, #2
 8015ae8:	f001 fc90 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8015aec:	f000 fd58 	bl	80165a0 <SUBGRF_GetOperatingMode>
 8015af0:	2804      	cmp	r0, #4
 8015af2:	f000 80b0 	beq.w	8015c56 <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8015af6:	f000 fd53 	bl	80165a0 <SUBGRF_GetOperatingMode>
 8015afa:	2805      	cmp	r0, #5
 8015afc:	f040 8101 	bne.w	8015d02 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8015b00:	4b83      	ldr	r3, [pc, #524]	; (8015d10 <RadioIrqProcess+0x2ac>)
 8015b02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015b06:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 8015b08:	4882      	ldr	r0, [pc, #520]	; (8015d14 <RadioIrqProcess+0x2b0>)
 8015b0a:	f001 ffd3 	bl	8017ab4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8015b0e:	2000      	movs	r0, #0
 8015b10:	f000 fd4c 	bl	80165ac <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8015b14:	4b80      	ldr	r3, [pc, #512]	; (8015d18 <RadioIrqProcess+0x2b4>)
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	f000 80f2 	beq.w	8015d02 <RadioIrqProcess+0x29e>
 8015b1e:	68db      	ldr	r3, [r3, #12]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	f000 80ee 	beq.w	8015d02 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 8015b26:	4798      	blx	r3
 8015b28:	e0eb      	b.n	8015d02 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8015b2a:	2b40      	cmp	r3, #64	; 0x40
 8015b2c:	f000 811d 	beq.w	8015d6a <RadioIrqProcess+0x306>
 8015b30:	2b80      	cmp	r3, #128	; 0x80
 8015b32:	f040 80e6 	bne.w	8015d02 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8015b36:	2000      	movs	r0, #0
 8015b38:	f000 fd38 	bl	80165ac <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8015b3c:	4b76      	ldr	r3, [pc, #472]	; (8015d18 <RadioIrqProcess+0x2b4>)
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	f000 80de 	beq.w	8015d02 <RadioIrqProcess+0x29e>
 8015b46:	699b      	ldr	r3, [r3, #24]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	f000 80da 	beq.w	8015d02 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8015b4e:	2000      	movs	r0, #0
 8015b50:	4798      	blx	r3
 8015b52:	e0d6      	b.n	8015d02 <RadioIrqProcess+0x29e>
 8015b54:	4b6e      	ldr	r3, [pc, #440]	; (8015d10 <RadioIrqProcess+0x2ac>)
 8015b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015b5a:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 8015b5c:	486f      	ldr	r0, [pc, #444]	; (8015d1c <RadioIrqProcess+0x2b8>)
 8015b5e:	f001 ffa9 	bl	8017ab4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8015b62:	2000      	movs	r0, #0
 8015b64:	f000 fd22 	bl	80165ac <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8015b68:	f001 fb6b 	bl	8017242 <RFW_Is_LongPacketModeEnabled>
 8015b6c:	2801      	cmp	r0, #1
 8015b6e:	d00a      	beq.n	8015b86 <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8015b70:	4b69      	ldr	r3, [pc, #420]	; (8015d18 <RadioIrqProcess+0x2b4>)
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	f000 80c4 	beq.w	8015d02 <RadioIrqProcess+0x29e>
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	f000 80c0 	beq.w	8015d02 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 8015b82:	4798      	blx	r3
 8015b84:	e0bd      	b.n	8015d02 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 8015b86:	f001 fb65 	bl	8017254 <RFW_DeInit_TxLongPacket>
 8015b8a:	e7f1      	b.n	8015b70 <RadioIrqProcess+0x10c>
 8015b8c:	4b60      	ldr	r3, [pc, #384]	; (8015d10 <RadioIrqProcess+0x2ac>)
 8015b8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015b92:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 8015b94:	485f      	ldr	r0, [pc, #380]	; (8015d14 <RadioIrqProcess+0x2b0>)
 8015b96:	f001 ff8d 	bl	8017ab4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8015b9a:	4b5b      	ldr	r3, [pc, #364]	; (8015d08 <RadioIrqProcess+0x2a4>)
 8015b9c:	785b      	ldrb	r3, [r3, #1]
 8015b9e:	b303      	cbz	r3, 8015be2 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8015ba0:	22ff      	movs	r2, #255	; 0xff
 8015ba2:	f10d 0107 	add.w	r1, sp, #7
 8015ba6:	485e      	ldr	r0, [pc, #376]	; (8015d20 <RadioIrqProcess+0x2bc>)
 8015ba8:	f001 fa4a 	bl	8017040 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8015bac:	485d      	ldr	r0, [pc, #372]	; (8015d24 <RadioIrqProcess+0x2c0>)
 8015bae:	f000 fead 	bl	801690c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8015bb2:	4b59      	ldr	r3, [pc, #356]	; (8015d18 <RadioIrqProcess+0x2b4>)
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	f000 80a3 	beq.w	8015d02 <RadioIrqProcess+0x29e>
 8015bbc:	689c      	ldr	r4, [r3, #8]
 8015bbe:	2c00      	cmp	r4, #0
 8015bc0:	f000 809f 	beq.w	8015d02 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8015bc4:	4b50      	ldr	r3, [pc, #320]	; (8015d08 <RadioIrqProcess+0x2a4>)
 8015bc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015bca:	2b01      	cmp	r3, #1
 8015bcc:	d11d      	bne.n	8015c0a <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8015bce:	4a4e      	ldr	r2, [pc, #312]	; (8015d08 <RadioIrqProcess+0x2a4>)
 8015bd0:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8015bd4:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8015bd8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015bdc:	4850      	ldr	r0, [pc, #320]	; (8015d20 <RadioIrqProcess+0x2bc>)
 8015bde:	47a0      	blx	r4
                break;
 8015be0:	e08f      	b.n	8015d02 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8015be2:	2000      	movs	r0, #0
 8015be4:	f000 fce2 	bl	80165ac <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8015be8:	2100      	movs	r1, #0
 8015bea:	f640 1002 	movw	r0, #2306	; 0x902
 8015bee:	f000 fec9 	bl	8016984 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8015bf2:	f640 1044 	movw	r0, #2372	; 0x944
 8015bf6:	f000 ffb7 	bl	8016b68 <SUBGRF_ReadRegister>
 8015bfa:	f040 0102 	orr.w	r1, r0, #2
 8015bfe:	b2c9      	uxtb	r1, r1
 8015c00:	f640 1044 	movw	r0, #2372	; 0x944
 8015c04:	f000 febe 	bl	8016984 <SUBGRF_WriteRegister>
 8015c08:	e7ca      	b.n	8015ba0 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8015c0a:	4c3f      	ldr	r4, [pc, #252]	; (8015d08 <RadioIrqProcess+0x2a4>)
 8015c0c:	4669      	mov	r1, sp
 8015c0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015c10:	f001 faca 	bl	80171a8 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8015c14:	4b40      	ldr	r3, [pc, #256]	; (8015d18 <RadioIrqProcess+0x2b4>)
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	689d      	ldr	r5, [r3, #8]
 8015c1a:	9b00      	ldr	r3, [sp, #0]
 8015c1c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8015c20:	4a41      	ldr	r2, [pc, #260]	; (8015d28 <RadioIrqProcess+0x2c4>)
 8015c22:	fb82 1203 	smull	r1, r2, r2, r3
 8015c26:	17db      	asrs	r3, r3, #31
 8015c28:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8015c2c:	b25b      	sxtb	r3, r3
 8015c2e:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8015c32:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015c36:	483a      	ldr	r0, [pc, #232]	; (8015d20 <RadioIrqProcess+0x2bc>)
 8015c38:	47a8      	blx	r5
                break;
 8015c3a:	e062      	b.n	8015d02 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8015c3c:	2000      	movs	r0, #0
 8015c3e:	f000 fcb5 	bl	80165ac <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8015c42:	4b35      	ldr	r3, [pc, #212]	; (8015d18 <RadioIrqProcess+0x2b4>)
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d05b      	beq.n	8015d02 <RadioIrqProcess+0x29e>
 8015c4a:	699b      	ldr	r3, [r3, #24]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d058      	beq.n	8015d02 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8015c50:	2001      	movs	r0, #1
 8015c52:	4798      	blx	r3
 8015c54:	e055      	b.n	8015d02 <RadioIrqProcess+0x29e>
 8015c56:	4b2e      	ldr	r3, [pc, #184]	; (8015d10 <RadioIrqProcess+0x2ac>)
 8015c58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015c5c:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 8015c5e:	482f      	ldr	r0, [pc, #188]	; (8015d1c <RadioIrqProcess+0x2b8>)
 8015c60:	f001 ff28 	bl	8017ab4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8015c64:	2000      	movs	r0, #0
 8015c66:	f000 fca1 	bl	80165ac <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8015c6a:	4b2b      	ldr	r3, [pc, #172]	; (8015d18 <RadioIrqProcess+0x2b4>)
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d047      	beq.n	8015d02 <RadioIrqProcess+0x29e>
 8015c72:	685b      	ldr	r3, [r3, #4]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d044      	beq.n	8015d02 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 8015c78:	4798      	blx	r3
 8015c7a:	e042      	b.n	8015d02 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8015c7c:	4b2b      	ldr	r3, [pc, #172]	; (8015d2c <RadioIrqProcess+0x2c8>)
 8015c7e:	2201      	movs	r2, #1
 8015c80:	2100      	movs	r1, #0
 8015c82:	2002      	movs	r0, #2
 8015c84:	f001 fbc2 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8015c88:	4b1f      	ldr	r3, [pc, #124]	; (8015d08 <RadioIrqProcess+0x2a4>)
 8015c8a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8015c8c:	b3c9      	cbz	r1, 8015d02 <RadioIrqProcess+0x29e>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8015c8e:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8015c92:	f640 1003 	movw	r0, #2307	; 0x903
 8015c96:	f7ff feb4 	bl	8015a02 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8015c9a:	4c1b      	ldr	r4, [pc, #108]	; (8015d08 <RadioIrqProcess+0x2a4>)
 8015c9c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8015ca0:	f640 1004 	movw	r0, #2308	; 0x904
 8015ca4:	f7ff fead 	bl	8015a02 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8015ca8:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8015cac:	f640 1005 	movw	r0, #2309	; 0x905
 8015cb0:	f7ff fea7 	bl	8015a02 <RadioWrite>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8015cb4:	f640 1002 	movw	r0, #2306	; 0x902
 8015cb8:	f7ff febe 	bl	8015a38 <RadioRead>
 8015cbc:	f040 0101 	orr.w	r1, r0, #1
 8015cc0:	b2c9      	uxtb	r1, r1
 8015cc2:	f640 1002 	movw	r0, #2306	; 0x902
 8015cc6:	f7ff fe9c 	bl	8015a02 <RadioWrite>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8015cca:	2200      	movs	r2, #0
 8015ccc:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8015cce:	4613      	mov	r3, r2
 8015cd0:	f240 2162 	movw	r1, #610	; 0x262
 8015cd4:	4608      	mov	r0, r1
 8015cd6:	f000 fd92 	bl	80167fe <SUBGRF_SetDioIrqParams>
 8015cda:	e012      	b.n	8015d02 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8015cdc:	4b14      	ldr	r3, [pc, #80]	; (8015d30 <RadioIrqProcess+0x2cc>)
 8015cde:	2201      	movs	r2, #1
 8015ce0:	2100      	movs	r1, #0
 8015ce2:	2002      	movs	r0, #2
 8015ce4:	f001 fb92 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8015ce8:	f001 faa9 	bl	801723e <RFW_Is_Init>
 8015cec:	2801      	cmp	r0, #1
 8015cee:	d108      	bne.n	8015d02 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8015cf0:	f001 fab1 	bl	8017256 <RFW_ReceivePayload>
 8015cf4:	e005      	b.n	8015d02 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8015cf6:	4b0f      	ldr	r3, [pc, #60]	; (8015d34 <RadioIrqProcess+0x2d0>)
 8015cf8:	2201      	movs	r2, #1
 8015cfa:	2100      	movs	r1, #0
 8015cfc:	2002      	movs	r0, #2
 8015cfe:	f001 fb85 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
}
 8015d02:	b003      	add	sp, #12
 8015d04:	bd30      	pop	{r4, r5, pc}
 8015d06:	bf00      	nop
 8015d08:	200012d0 	.word	0x200012d0
 8015d0c:	0801c330 	.word	0x0801c330
 8015d10:	48000400 	.word	0x48000400
 8015d14:	200012b8 	.word	0x200012b8
 8015d18:	200012b4 	.word	0x200012b4
 8015d1c:	2000132c 	.word	0x2000132c
 8015d20:	200011b4 	.word	0x200011b4
 8015d24:	200012f4 	.word	0x200012f4
 8015d28:	10624dd3 	.word	0x10624dd3
 8015d2c:	0801c344 	.word	0x0801c344
 8015d30:	0801c350 	.word	0x0801c350
 8015d34:	0801c35c 	.word	0x0801c35c
        TimerStop( &RxTimeoutTimer );
 8015d38:	4817      	ldr	r0, [pc, #92]	; (8015d98 <RadioIrqProcess+0x334>)
 8015d3a:	f001 febb 	bl	8017ab4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8015d3e:	4b17      	ldr	r3, [pc, #92]	; (8015d9c <RadioIrqProcess+0x338>)
 8015d40:	785b      	ldrb	r3, [r3, #1]
 8015d42:	b173      	cbz	r3, 8015d62 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8015d44:	4b16      	ldr	r3, [pc, #88]	; (8015da0 <RadioIrqProcess+0x33c>)
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d0da      	beq.n	8015d02 <RadioIrqProcess+0x29e>
 8015d4c:	68db      	ldr	r3, [r3, #12]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d0d7      	beq.n	8015d02 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 8015d52:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8015d54:	4b13      	ldr	r3, [pc, #76]	; (8015da4 <RadioIrqProcess+0x340>)
 8015d56:	2201      	movs	r2, #1
 8015d58:	2100      	movs	r1, #0
 8015d5a:	2002      	movs	r0, #2
 8015d5c:	f001 fb56 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
 8015d60:	e7cf      	b.n	8015d02 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8015d62:	2000      	movs	r0, #0
 8015d64:	f000 fc22 	bl	80165ac <SUBGRF_SetStandby>
 8015d68:	e7ec      	b.n	8015d44 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8015d6a:	4b0f      	ldr	r3, [pc, #60]	; (8015da8 <RadioIrqProcess+0x344>)
 8015d6c:	2201      	movs	r2, #1
 8015d6e:	2100      	movs	r1, #0
 8015d70:	2002      	movs	r0, #2
 8015d72:	f001 fb4b 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8015d76:	4b09      	ldr	r3, [pc, #36]	; (8015d9c <RadioIrqProcess+0x338>)
 8015d78:	785b      	ldrb	r3, [r3, #1]
 8015d7a:	b143      	cbz	r3, 8015d8e <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8015d7c:	4b08      	ldr	r3, [pc, #32]	; (8015da0 <RadioIrqProcess+0x33c>)
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d0be      	beq.n	8015d02 <RadioIrqProcess+0x29e>
 8015d84:	691b      	ldr	r3, [r3, #16]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d0bb      	beq.n	8015d02 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 8015d8a:	4798      	blx	r3
}
 8015d8c:	e7b9      	b.n	8015d02 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8015d8e:	2000      	movs	r0, #0
 8015d90:	f000 fc0c 	bl	80165ac <SUBGRF_SetStandby>
 8015d94:	e7f2      	b.n	8015d7c <RadioIrqProcess+0x318>
 8015d96:	bf00      	nop
 8015d98:	200012b8 	.word	0x200012b8
 8015d9c:	200012d0 	.word	0x200012d0
 8015da0:	200012b4 	.word	0x200012b4
 8015da4:	0801c368 	.word	0x0801c368
 8015da8:	0801c374 	.word	0x0801c374

08015dac <RadioOnDioIrq>:
{
 8015dac:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8015dae:	4b03      	ldr	r3, [pc, #12]	; (8015dbc <RadioOnDioIrq+0x10>)
 8015db0:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8015db4:	f7ff fe56 	bl	8015a64 <RadioIrqProcess>
}
 8015db8:	bd08      	pop	{r3, pc}
 8015dba:	bf00      	nop
 8015dbc:	200012d0 	.word	0x200012d0

08015dc0 <RadioGetWakeupTime>:
{
 8015dc0:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8015dc2:	f001 f982 	bl	80170ca <SUBGRF_GetRadioWakeUpTime>
}
 8015dc6:	3003      	adds	r0, #3
 8015dc8:	bd08      	pop	{r3, pc}
	...

08015dcc <RadioSetMaxPayloadLength>:
{
 8015dcc:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8015dce:	2801      	cmp	r0, #1
 8015dd0:	d004      	beq.n	8015ddc <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8015dd2:	4b0a      	ldr	r3, [pc, #40]	; (8015dfc <RadioSetMaxPayloadLength+0x30>)
 8015dd4:	7d5b      	ldrb	r3, [r3, #21]
 8015dd6:	2b01      	cmp	r3, #1
 8015dd8:	d008      	beq.n	8015dec <RadioSetMaxPayloadLength+0x20>
}
 8015dda:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8015ddc:	4b08      	ldr	r3, [pc, #32]	; (8015e00 <RadioSetMaxPayloadLength+0x34>)
 8015dde:	7019      	strb	r1, [r3, #0]
 8015de0:	4806      	ldr	r0, [pc, #24]	; (8015dfc <RadioSetMaxPayloadLength+0x30>)
 8015de2:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015de4:	300e      	adds	r0, #14
 8015de6:	f001 f843 	bl	8016e70 <SUBGRF_SetPacketParams>
 8015dea:	e7f6      	b.n	8015dda <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8015dec:	4b04      	ldr	r3, [pc, #16]	; (8015e00 <RadioSetMaxPayloadLength+0x34>)
 8015dee:	7019      	strb	r1, [r3, #0]
 8015df0:	4802      	ldr	r0, [pc, #8]	; (8015dfc <RadioSetMaxPayloadLength+0x30>)
 8015df2:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015df4:	300e      	adds	r0, #14
 8015df6:	f001 f83b 	bl	8016e70 <SUBGRF_SetPacketParams>
}
 8015dfa:	e7ee      	b.n	8015dda <RadioSetMaxPayloadLength+0xe>
 8015dfc:	200012d0 	.word	0x200012d0
 8015e00:	20000114 	.word	0x20000114

08015e04 <RadioReadRegisters>:
{
 8015e04:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8015e06:	f001 f8a5 	bl	8016f54 <SUBGRF_ReadRegisters>
}
 8015e0a:	bd08      	pop	{r3, pc}

08015e0c <RadioWriteRegisters>:
{
 8015e0c:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8015e0e:	f000 ffed 	bl	8016dec <SUBGRF_WriteRegisters>
}
 8015e12:	bd08      	pop	{r3, pc}

08015e14 <RadioRssi>:
{
 8015e14:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8015e16:	f000 fd6b 	bl	80168f0 <SUBGRF_GetRssiInst>
}
 8015e1a:	b200      	sxth	r0, r0
 8015e1c:	bd08      	pop	{r3, pc}
	...

08015e20 <RadioSetTxContinuousWave>:
{
 8015e20:	b538      	push	{r3, r4, r5, lr}
 8015e22:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8015e24:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8015e28:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 8015e2c:	f000 fd20 	bl	8016870 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8015e30:	4628      	mov	r0, r5
 8015e32:	f001 f933 	bl	801709c <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8015e36:	2101      	movs	r1, #1
 8015e38:	f001 f91c 	bl	8017074 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8015e3c:	f000 fc34 	bl	80166a8 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8015e40:	4d04      	ldr	r5, [pc, #16]	; (8015e54 <RadioSetTxContinuousWave+0x34>)
 8015e42:	4621      	mov	r1, r4
 8015e44:	4628      	mov	r0, r5
 8015e46:	f001 fed5 	bl	8017bf4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8015e4a:	4628      	mov	r0, r5
 8015e4c:	f001 fe8c 	bl	8017b68 <UTIL_TIMER_Start>
}
 8015e50:	bd38      	pop	{r3, r4, r5, pc}
 8015e52:	bf00      	nop
 8015e54:	2000132c 	.word	0x2000132c

08015e58 <RadioSetChannel>:
{
 8015e58:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8015e5a:	f000 fd09 	bl	8016870 <SUBGRF_SetRfFrequency>
}
 8015e5e:	bd08      	pop	{r3, pc}

08015e60 <RadioStartCad>:
{
 8015e60:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8015e62:	2100      	movs	r1, #0
 8015e64:	4b07      	ldr	r3, [pc, #28]	; (8015e84 <RadioStartCad+0x24>)
 8015e66:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8015e6a:	f001 f903 	bl	8017074 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8015e6e:	2300      	movs	r3, #0
 8015e70:	461a      	mov	r2, r3
 8015e72:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8015e76:	4608      	mov	r0, r1
 8015e78:	f000 fcc1 	bl	80167fe <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8015e7c:	f000 fc08 	bl	8016690 <SUBGRF_SetCad>
}
 8015e80:	bd08      	pop	{r3, pc}
 8015e82:	bf00      	nop
 8015e84:	200012d0 	.word	0x200012d0

08015e88 <RadioRx>:
{
 8015e88:	b538      	push	{r3, r4, r5, lr}
 8015e8a:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8015e8c:	f001 f9d7 	bl	801723e <RFW_Is_Init>
 8015e90:	2801      	cmp	r0, #1
 8015e92:	d019      	beq.n	8015ec8 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8015e94:	2300      	movs	r3, #0
 8015e96:	461a      	mov	r2, r3
 8015e98:	f240 2162 	movw	r1, #610	; 0x262
 8015e9c:	4608      	mov	r0, r1
 8015e9e:	f000 fcae 	bl	80167fe <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8015ea2:	b9a4      	cbnz	r4, 8015ece <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8015ea4:	4c11      	ldr	r4, [pc, #68]	; (8015eec <RadioRx+0x64>)
 8015ea6:	2100      	movs	r1, #0
 8015ea8:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8015eaa:	4b11      	ldr	r3, [pc, #68]	; (8015ef0 <RadioRx+0x68>)
 8015eac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015eb0:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8015eb2:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8015eb6:	f001 f8dd 	bl	8017074 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8015eba:	7863      	ldrb	r3, [r4, #1]
 8015ebc:	b183      	cbz	r3, 8015ee0 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8015ebe:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8015ec2:	f000 fba7 	bl	8016614 <SUBGRF_SetRx>
}
 8015ec6:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8015ec8:	f001 f9c1 	bl	801724e <RFW_ReceiveInit>
 8015ecc:	e7e9      	b.n	8015ea2 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8015ece:	4d09      	ldr	r5, [pc, #36]	; (8015ef4 <RadioRx+0x6c>)
 8015ed0:	4621      	mov	r1, r4
 8015ed2:	4628      	mov	r0, r5
 8015ed4:	f001 fe8e 	bl	8017bf4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8015ed8:	4628      	mov	r0, r5
 8015eda:	f001 fe45 	bl	8017b68 <UTIL_TIMER_Start>
 8015ede:	e7e1      	b.n	8015ea4 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8015ee0:	4b02      	ldr	r3, [pc, #8]	; (8015eec <RadioRx+0x64>)
 8015ee2:	6898      	ldr	r0, [r3, #8]
 8015ee4:	0180      	lsls	r0, r0, #6
 8015ee6:	f000 fb95 	bl	8016614 <SUBGRF_SetRx>
}
 8015eea:	e7ec      	b.n	8015ec6 <RadioRx+0x3e>
 8015eec:	200012d0 	.word	0x200012d0
 8015ef0:	48000400 	.word	0x48000400
 8015ef4:	200012b8 	.word	0x200012b8

08015ef8 <RadioSleep>:
{
 8015ef8:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8015efa:	f04f 0004 	mov.w	r0, #4
 8015efe:	f000 fe8d 	bl	8016c1c <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8015f02:	2002      	movs	r0, #2
 8015f04:	f7eb ff62 	bl	8001dcc <HAL_Delay>
}
 8015f08:	bd08      	pop	{r3, pc}
	...

08015f0c <RadioSend>:
{
 8015f0c:	b570      	push	{r4, r5, r6, lr}
 8015f0e:	b082      	sub	sp, #8
 8015f10:	4605      	mov	r5, r0
 8015f12:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8015f14:	2300      	movs	r3, #0
 8015f16:	461a      	mov	r2, r3
 8015f18:	f240 2101 	movw	r1, #513	; 0x201
 8015f1c:	4608      	mov	r0, r1
 8015f1e:	f000 fc6e 	bl	80167fe <SUBGRF_SetDioIrqParams>
 8015f22:	4b3e      	ldr	r3, [pc, #248]	; (801601c <RadioSend+0x110>)
 8015f24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015f28:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8015f2a:	4e3d      	ldr	r6, [pc, #244]	; (8016020 <RadioSend+0x114>)
 8015f2c:	2101      	movs	r1, #1
 8015f2e:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8015f32:	f001 f89f 	bl	8017074 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8015f36:	7833      	ldrb	r3, [r6, #0]
 8015f38:	2b01      	cmp	r3, #1
 8015f3a:	d103      	bne.n	8015f44 <RadioSend+0x38>
 8015f3c:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8015f40:	2b06      	cmp	r3, #6
 8015f42:	d012      	beq.n	8015f6a <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8015f44:	f640 0089 	movw	r0, #2185	; 0x889
 8015f48:	f000 fe0e 	bl	8016b68 <SUBGRF_ReadRegister>
 8015f4c:	f040 0104 	orr.w	r1, r0, #4
 8015f50:	b2c9      	uxtb	r1, r1
 8015f52:	f640 0089 	movw	r0, #2185	; 0x889
 8015f56:	f000 fd15 	bl	8016984 <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 8015f5a:	4b31      	ldr	r3, [pc, #196]	; (8016020 <RadioSend+0x114>)
 8015f5c:	781b      	ldrb	r3, [r3, #0]
 8015f5e:	2b03      	cmp	r3, #3
 8015f60:	d818      	bhi.n	8015f94 <RadioSend+0x88>
 8015f62:	e8df f003 	tbb	[pc, r3]
 8015f66:	0d22      	.short	0x0d22
 8015f68:	4d22      	.short	0x4d22
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8015f6a:	f640 0089 	movw	r0, #2185	; 0x889
 8015f6e:	f000 fdfb 	bl	8016b68 <SUBGRF_ReadRegister>
 8015f72:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8015f76:	f640 0089 	movw	r0, #2185	; 0x889
 8015f7a:	f000 fd03 	bl	8016984 <SUBGRF_WriteRegister>
 8015f7e:	e7ec      	b.n	8015f5a <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8015f80:	4827      	ldr	r0, [pc, #156]	; (8016020 <RadioSend+0x114>)
 8015f82:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015f84:	300e      	adds	r0, #14
 8015f86:	f000 ff73 	bl	8016e70 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	4621      	mov	r1, r4
 8015f8e:	4628      	mov	r0, r5
 8015f90:	f001 f83d 	bl	801700e <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8015f94:	4c23      	ldr	r4, [pc, #140]	; (8016024 <RadioSend+0x118>)
 8015f96:	4b22      	ldr	r3, [pc, #136]	; (8016020 <RadioSend+0x114>)
 8015f98:	6859      	ldr	r1, [r3, #4]
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	f001 fe2a 	bl	8017bf4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8015fa0:	4620      	mov	r0, r4
 8015fa2:	f001 fde1 	bl	8017b68 <UTIL_TIMER_Start>
}
 8015fa6:	b002      	add	sp, #8
 8015fa8:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8015faa:	f001 f948 	bl	801723e <RFW_Is_Init>
 8015fae:	2801      	cmp	r0, #1
 8015fb0:	d00a      	beq.n	8015fc8 <RadioSend+0xbc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8015fb2:	481b      	ldr	r0, [pc, #108]	; (8016020 <RadioSend+0x114>)
 8015fb4:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015fb6:	300e      	adds	r0, #14
 8015fb8:	f000 ff5a 	bl	8016e70 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	4621      	mov	r1, r4
 8015fc0:	4628      	mov	r0, r5
 8015fc2:	f001 f824 	bl	801700e <SUBGRF_SendPayload>
 8015fc6:	e7e5      	b.n	8015f94 <RadioSend+0x88>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8015fc8:	f10d 0207 	add.w	r2, sp, #7
 8015fcc:	4621      	mov	r1, r4
 8015fce:	4628      	mov	r0, r5
 8015fd0:	f001 f93a 	bl	8017248 <RFW_TransmitInit>
 8015fd4:	b968      	cbnz	r0, 8015ff2 <RadioSend+0xe6>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8015fd6:	4812      	ldr	r0, [pc, #72]	; (8016020 <RadioSend+0x114>)
 8015fd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015fdc:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015fde:	300e      	adds	r0, #14
 8015fe0:	f000 ff46 	bl	8016e70 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015fea:	4628      	mov	r0, r5
 8015fec:	f001 f80f 	bl	801700e <SUBGRF_SendPayload>
 8015ff0:	e7d0      	b.n	8015f94 <RadioSend+0x88>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8015ff2:	4b0d      	ldr	r3, [pc, #52]	; (8016028 <RadioSend+0x11c>)
 8015ff4:	2201      	movs	r2, #1
 8015ff6:	2100      	movs	r1, #0
 8015ff8:	2002      	movs	r0, #2
 8015ffa:	f001 fa07 	bl	801740c <UTIL_ADV_TRACE_COND_FSend>
                return;
 8015ffe:	e7d2      	b.n	8015fa6 <RadioSend+0x9a>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8016000:	4807      	ldr	r0, [pc, #28]	; (8016020 <RadioSend+0x114>)
 8016002:	2302      	movs	r3, #2
 8016004:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8016006:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016008:	300e      	adds	r0, #14
 801600a:	f000 ff31 	bl	8016e70 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801600e:	2200      	movs	r2, #0
 8016010:	4621      	mov	r1, r4
 8016012:	4628      	mov	r0, r5
 8016014:	f000 fffb 	bl	801700e <SUBGRF_SendPayload>
            break;
 8016018:	e7bc      	b.n	8015f94 <RadioSend+0x88>
 801601a:	bf00      	nop
 801601c:	48000400 	.word	0x48000400
 8016020:	200012d0 	.word	0x200012d0
 8016024:	2000132c 	.word	0x2000132c
 8016028:	0801c384 	.word	0x0801c384

0801602c <RadioRandom>:
{
 801602c:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801602e:	2300      	movs	r3, #0
 8016030:	461a      	mov	r2, r3
 8016032:	4619      	mov	r1, r3
 8016034:	4618      	mov	r0, r3
 8016036:	f000 fbe2 	bl	80167fe <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 801603a:	f000 ff9b 	bl	8016f74 <SUBGRF_GetRandom>
}
 801603e:	bd08      	pop	{r3, pc}

08016040 <RadioSetModem>:
{
 8016040:	b510      	push	{r4, lr}
 8016042:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8016044:	4b14      	ldr	r3, [pc, #80]	; (8016098 <RadioSetModem+0x58>)
 8016046:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8016048:	f001 f906 	bl	8017258 <RFW_SetRadioModem>
    switch( modem )
 801604c:	2c01      	cmp	r4, #1
 801604e:	d010      	beq.n	8016072 <RadioSetModem+0x32>
 8016050:	2c03      	cmp	r4, #3
 8016052:	d01a      	beq.n	801608a <RadioSetModem+0x4a>
 8016054:	b134      	cbz	r4, 8016064 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8016056:	2003      	movs	r0, #3
 8016058:	f000 fce4 	bl	8016a24 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 801605c:	4b0e      	ldr	r3, [pc, #56]	; (8016098 <RadioSetModem+0x58>)
 801605e:	2200      	movs	r2, #0
 8016060:	735a      	strb	r2, [r3, #13]
}
 8016062:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016064:	2000      	movs	r0, #0
 8016066:	f000 fcdd 	bl	8016a24 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 801606a:	4b0b      	ldr	r3, [pc, #44]	; (8016098 <RadioSetModem+0x58>)
 801606c:	2200      	movs	r2, #0
 801606e:	735a      	strb	r2, [r3, #13]
        break;
 8016070:	e7f7      	b.n	8016062 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8016072:	2001      	movs	r0, #1
 8016074:	f000 fcd6 	bl	8016a24 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016078:	4b07      	ldr	r3, [pc, #28]	; (8016098 <RadioSetModem+0x58>)
 801607a:	7b5a      	ldrb	r2, [r3, #13]
 801607c:	7b18      	ldrb	r0, [r3, #12]
 801607e:	4282      	cmp	r2, r0
 8016080:	d0ef      	beq.n	8016062 <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016082:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016084:	f000 f80a 	bl	801609c <RadioSetPublicNetwork>
 8016088:	e7eb      	b.n	8016062 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801608a:	2002      	movs	r0, #2
 801608c:	f000 fcca 	bl	8016a24 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8016090:	4b01      	ldr	r3, [pc, #4]	; (8016098 <RadioSetModem+0x58>)
 8016092:	2200      	movs	r2, #0
 8016094:	735a      	strb	r2, [r3, #13]
}
 8016096:	e7e4      	b.n	8016062 <RadioSetModem+0x22>
 8016098:	200012d0 	.word	0x200012d0

0801609c <RadioSetPublicNetwork>:
{
 801609c:	b510      	push	{r4, lr}
 801609e:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80160a0:	4b0e      	ldr	r3, [pc, #56]	; (80160dc <RadioSetPublicNetwork+0x40>)
 80160a2:	7318      	strb	r0, [r3, #12]
 80160a4:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 80160a6:	2001      	movs	r0, #1
 80160a8:	f7ff ffca 	bl	8016040 <RadioSetModem>
    if( enable == true )
 80160ac:	b154      	cbz	r4, 80160c4 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80160ae:	2134      	movs	r1, #52	; 0x34
 80160b0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80160b4:	f000 fc66 	bl	8016984 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80160b8:	2144      	movs	r1, #68	; 0x44
 80160ba:	f240 7041 	movw	r0, #1857	; 0x741
 80160be:	f000 fc61 	bl	8016984 <SUBGRF_WriteRegister>
}
 80160c2:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80160c4:	2114      	movs	r1, #20
 80160c6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80160ca:	f000 fc5b 	bl	8016984 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80160ce:	2124      	movs	r1, #36	; 0x24
 80160d0:	f240 7041 	movw	r0, #1857	; 0x741
 80160d4:	f000 fc56 	bl	8016984 <SUBGRF_WriteRegister>
}
 80160d8:	e7f3      	b.n	80160c2 <RadioSetPublicNetwork+0x26>
 80160da:	bf00      	nop
 80160dc:	200012d0 	.word	0x200012d0

080160e0 <RadioSetTxConfig>:
{
 80160e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160e4:	b083      	sub	sp, #12
 80160e6:	4604      	mov	r4, r0
 80160e8:	460e      	mov	r6, r1
 80160ea:	4617      	mov	r7, r2
 80160ec:	461d      	mov	r5, r3
 80160ee:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 80160f2:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 80160f6:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80160fa:	f001 f89f 	bl	801723c <RFW_DeInit>
    switch( modem )
 80160fe:	b174      	cbz	r4, 801611e <RadioSetTxConfig+0x3e>
 8016100:	2c01      	cmp	r4, #1
 8016102:	d053      	beq.n	80161ac <RadioSetTxConfig+0xcc>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8016104:	4630      	mov	r0, r6
 8016106:	f000 ffc9 	bl	801709c <SUBGRF_SetRfTxPower>
 801610a:	4c51      	ldr	r4, [pc, #324]	; (8016250 <RadioSetTxConfig+0x170>)
 801610c:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8016110:	f001 f899 	bl	8017246 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8016114:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016116:	6063      	str	r3, [r4, #4]
}
 8016118:	b003      	add	sp, #12
 801611a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801611e:	4c4c      	ldr	r4, [pc, #304]	; (8016250 <RadioSetTxConfig+0x170>)
 8016120:	f04f 0b00 	mov.w	fp, #0
 8016124:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801612a:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801612c:	230b      	movs	r3, #11
 801612e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016132:	4628      	mov	r0, r5
 8016134:	f001 f820 	bl	8017178 <SUBGRF_GetFskBandwidthRegValue>
 8016138:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801613c:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801613e:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016142:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8016146:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801614a:	2304      	movs	r3, #4
 801614c:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801614e:	2318      	movs	r3, #24
 8016150:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016152:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016156:	f089 0901 	eor.w	r9, r9, #1
 801615a:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 801615e:	f1ba 0f00 	cmp.w	sl, #0
 8016162:	d01f      	beq.n	80161a4 <RadioSetTxConfig+0xc4>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016164:	22f2      	movs	r2, #242	; 0xf2
 8016166:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016168:	4c39      	ldr	r4, [pc, #228]	; (8016250 <RadioSetTxConfig+0x170>)
 801616a:	2301      	movs	r3, #1
 801616c:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 801616e:	f7ff fc43 	bl	80159f8 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8016172:	2000      	movs	r0, #0
 8016174:	f7ff ff64 	bl	8016040 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016178:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801617c:	f000 fc6c 	bl	8016a58 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016180:	f104 000e 	add.w	r0, r4, #14
 8016184:	f000 fe74 	bl	8016e70 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016188:	4a32      	ldr	r2, [pc, #200]	; (8016254 <RadioSetTxConfig+0x174>)
 801618a:	466b      	mov	r3, sp
 801618c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016190:	e883 0003 	stmia.w	r3, {r0, r1}
 8016194:	4618      	mov	r0, r3
 8016196:	f000 fe39 	bl	8016e0c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801619a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801619e:	f000 fd5d 	bl	8016c5c <SUBGRF_SetWhiteningSeed>
            break;
 80161a2:	e7af      	b.n	8016104 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80161a4:	4b2a      	ldr	r3, [pc, #168]	; (8016250 <RadioSetTxConfig+0x170>)
 80161a6:	2201      	movs	r2, #1
 80161a8:	75da      	strb	r2, [r3, #23]
 80161aa:	e7dd      	b.n	8016168 <RadioSetTxConfig+0x88>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80161ac:	4a28      	ldr	r2, [pc, #160]	; (8016250 <RadioSetTxConfig+0x170>)
 80161ae:	2301      	movs	r3, #1
 80161b0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80161b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161b6:	b2db      	uxtb	r3, r3
 80161b8:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80161bc:	4926      	ldr	r1, [pc, #152]	; (8016258 <RadioSetTxConfig+0x178>)
 80161be:	5d49      	ldrb	r1, [r1, r5]
 80161c0:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80161c4:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 80161c8:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80161cc:	b91d      	cbnz	r5, 80161d6 <RadioSetTxConfig+0xf6>
 80161ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80161d0:	3a0b      	subs	r2, #11
 80161d2:	2a01      	cmp	r2, #1
 80161d4:	d92c      	bls.n	8016230 <RadioSetTxConfig+0x150>
 80161d6:	2d01      	cmp	r5, #1
 80161d8:	d027      	beq.n	801622a <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80161da:	4a1d      	ldr	r2, [pc, #116]	; (8016250 <RadioSetTxConfig+0x170>)
 80161dc:	2100      	movs	r1, #0
 80161de:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80161e2:	4a1b      	ldr	r2, [pc, #108]	; (8016250 <RadioSetTxConfig+0x170>)
 80161e4:	2101      	movs	r1, #1
 80161e6:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80161e8:	3b05      	subs	r3, #5
 80161ea:	b2db      	uxtb	r3, r3
 80161ec:	428b      	cmp	r3, r1
 80161ee:	d924      	bls.n	801623a <RadioSetTxConfig+0x15a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80161f0:	4b17      	ldr	r3, [pc, #92]	; (8016250 <RadioSetTxConfig+0x170>)
 80161f2:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80161f6:	4c16      	ldr	r4, [pc, #88]	; (8016250 <RadioSetTxConfig+0x170>)
 80161f8:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80161fc:	4b17      	ldr	r3, [pc, #92]	; (801625c <RadioSetTxConfig+0x17c>)
 80161fe:	781b      	ldrb	r3, [r3, #0]
 8016200:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016202:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016206:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801620a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 801620e:	f7ff fbf3 	bl	80159f8 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8016212:	2001      	movs	r0, #1
 8016214:	f7ff ff14 	bl	8016040 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016218:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801621c:	f000 fc1c 	bl	8016a58 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016220:	f104 000e 	add.w	r0, r4, #14
 8016224:	f000 fe24 	bl	8016e70 <SUBGRF_SetPacketParams>
            break;
 8016228:	e76c      	b.n	8016104 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801622a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801622c:	2a0c      	cmp	r2, #12
 801622e:	d1d4      	bne.n	80161da <RadioSetTxConfig+0xfa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016230:	4a07      	ldr	r2, [pc, #28]	; (8016250 <RadioSetTxConfig+0x170>)
 8016232:	2101      	movs	r1, #1
 8016234:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8016238:	e7d3      	b.n	80161e2 <RadioSetTxConfig+0x102>
                if( preambleLen < 12 )
 801623a:	f1b8 0f0b 	cmp.w	r8, #11
 801623e:	d803      	bhi.n	8016248 <RadioSetTxConfig+0x168>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016240:	4613      	mov	r3, r2
 8016242:	220c      	movs	r2, #12
 8016244:	839a      	strh	r2, [r3, #28]
 8016246:	e7d6      	b.n	80161f6 <RadioSetTxConfig+0x116>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016248:	4b01      	ldr	r3, [pc, #4]	; (8016250 <RadioSetTxConfig+0x170>)
 801624a:	f8a3 801c 	strh.w	r8, [r3, #28]
 801624e:	e7d2      	b.n	80161f6 <RadioSetTxConfig+0x116>
 8016250:	200012d0 	.word	0x200012d0
 8016254:	0801b280 	.word	0x0801b280
 8016258:	0801c39c 	.word	0x0801c39c
 801625c:	20000114 	.word	0x20000114

08016260 <RadioSetRxConfig>:
{
 8016260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016264:	b085      	sub	sp, #20
 8016266:	4604      	mov	r4, r0
 8016268:	460d      	mov	r5, r1
 801626a:	4616      	mov	r6, r2
 801626c:	9301      	str	r3, [sp, #4]
 801626e:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 8016272:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8016276:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 801627a:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 801627e:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 8016282:	4b6e      	ldr	r3, [pc, #440]	; (801643c <RadioSetRxConfig+0x1dc>)
 8016284:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016288:	f000 ffd8 	bl	801723c <RFW_DeInit>
    if( rxContinuous == true )
 801628c:	f1b8 0f00 	cmp.w	r8, #0
 8016290:	d001      	beq.n	8016296 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8016292:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8016296:	b14f      	cbz	r7, 80162ac <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 8016298:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801629c:	4b68      	ldr	r3, [pc, #416]	; (8016440 <RadioSetRxConfig+0x1e0>)
 801629e:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80162a0:	b144      	cbz	r4, 80162b4 <RadioSetRxConfig+0x54>
 80162a2:	2c01      	cmp	r4, #1
 80162a4:	d057      	beq.n	8016356 <RadioSetRxConfig+0xf6>
}
 80162a6:	b005      	add	sp, #20
 80162a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 80162ac:	4b64      	ldr	r3, [pc, #400]	; (8016440 <RadioSetRxConfig+0x1e0>)
 80162ae:	22ff      	movs	r2, #255	; 0xff
 80162b0:	701a      	strb	r2, [r3, #0]
 80162b2:	e7f5      	b.n	80162a0 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80162b4:	2000      	movs	r0, #0
 80162b6:	f000 fa05 	bl	80166c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80162ba:	4c60      	ldr	r4, [pc, #384]	; (801643c <RadioSetRxConfig+0x1dc>)
 80162bc:	f04f 0800 	mov.w	r8, #0
 80162c0:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80162c4:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80162c6:	230b      	movs	r3, #11
 80162c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80162cc:	4628      	mov	r0, r5
 80162ce:	f000 ff53 	bl	8017178 <SUBGRF_GetFskBandwidthRegValue>
 80162d2:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80162d6:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80162da:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80162de:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80162e2:	2304      	movs	r3, #4
 80162e4:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80162e6:	2318      	movs	r3, #24
 80162e8:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80162ea:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80162ee:	f087 0701 	eor.w	r7, r7, #1
 80162f2:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80162f4:	4b52      	ldr	r3, [pc, #328]	; (8016440 <RadioSetRxConfig+0x1e0>)
 80162f6:	781b      	ldrb	r3, [r3, #0]
 80162f8:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 80162fa:	f1bb 0f00 	cmp.w	fp, #0
 80162fe:	d026      	beq.n	801634e <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016300:	22f2      	movs	r2, #242	; 0xf2
 8016302:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016304:	4c4d      	ldr	r4, [pc, #308]	; (801643c <RadioSetRxConfig+0x1dc>)
 8016306:	2301      	movs	r3, #1
 8016308:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 801630a:	f7ff fb75 	bl	80159f8 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801630e:	2000      	movs	r0, #0
 8016310:	f7ff fe96 	bl	8016040 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016314:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8016318:	f000 fb9e 	bl	8016a58 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801631c:	f104 000e 	add.w	r0, r4, #14
 8016320:	f000 fda6 	bl	8016e70 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016324:	4a47      	ldr	r2, [pc, #284]	; (8016444 <RadioSetRxConfig+0x1e4>)
 8016326:	ab02      	add	r3, sp, #8
 8016328:	e892 0003 	ldmia.w	r2, {r0, r1}
 801632c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016330:	4618      	mov	r0, r3
 8016332:	f000 fd6b 	bl	8016e0c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016336:	f240 10ff 	movw	r0, #511	; 0x1ff
 801633a:	f000 fc8f 	bl	8016c5c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801633e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016342:	fb02 fa0a 	mul.w	sl, r2, sl
 8016346:	fbba f6f6 	udiv	r6, sl, r6
 801634a:	60a6      	str	r6, [r4, #8]
            break;
 801634c:	e7ab      	b.n	80162a6 <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801634e:	4b3b      	ldr	r3, [pc, #236]	; (801643c <RadioSetRxConfig+0x1dc>)
 8016350:	2201      	movs	r2, #1
 8016352:	75da      	strb	r2, [r3, #23]
 8016354:	e7d6      	b.n	8016304 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016356:	2000      	movs	r0, #0
 8016358:	f000 f9b4 	bl	80166c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801635c:	4a37      	ldr	r2, [pc, #220]	; (801643c <RadioSetRxConfig+0x1dc>)
 801635e:	2301      	movs	r3, #1
 8016360:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016364:	b2f3      	uxtb	r3, r6
 8016366:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801636a:	4937      	ldr	r1, [pc, #220]	; (8016448 <RadioSetRxConfig+0x1e8>)
 801636c:	5d49      	ldrb	r1, [r1, r5]
 801636e:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016372:	9901      	ldr	r1, [sp, #4]
 8016374:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016378:	b91d      	cbnz	r5, 8016382 <RadioSetRxConfig+0x122>
 801637a:	f1a6 020b 	sub.w	r2, r6, #11
 801637e:	2a01      	cmp	r2, #1
 8016380:	d941      	bls.n	8016406 <RadioSetRxConfig+0x1a6>
 8016382:	2d01      	cmp	r5, #1
 8016384:	d03d      	beq.n	8016402 <RadioSetRxConfig+0x1a2>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016386:	4a2d      	ldr	r2, [pc, #180]	; (801643c <RadioSetRxConfig+0x1dc>)
 8016388:	2100      	movs	r1, #0
 801638a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801638e:	4a2b      	ldr	r2, [pc, #172]	; (801643c <RadioSetRxConfig+0x1dc>)
 8016390:	2101      	movs	r1, #1
 8016392:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016394:	3b05      	subs	r3, #5
 8016396:	b2db      	uxtb	r3, r3
 8016398:	428b      	cmp	r3, r1
 801639a:	d939      	bls.n	8016410 <RadioSetRxConfig+0x1b0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801639c:	4b27      	ldr	r3, [pc, #156]	; (801643c <RadioSetRxConfig+0x1dc>)
 801639e:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80163a2:	4c26      	ldr	r4, [pc, #152]	; (801643c <RadioSetRxConfig+0x1dc>)
 80163a4:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80163a6:	4b26      	ldr	r3, [pc, #152]	; (8016440 <RadioSetRxConfig+0x1e0>)
 80163a8:	781b      	ldrb	r3, [r3, #0]
 80163aa:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80163ac:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80163b0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80163b4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80163b8:	f7ff fb1e 	bl	80159f8 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80163bc:	2001      	movs	r0, #1
 80163be:	f7ff fe3f 	bl	8016040 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80163c2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80163c6:	f000 fb47 	bl	8016a58 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80163ca:	f104 000e 	add.w	r0, r4, #14
 80163ce:	f000 fd4f 	bl	8016e70 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80163d2:	fa5f f08a 	uxtb.w	r0, sl
 80163d6:	f000 fb03 	bl	80169e0 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80163da:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80163de:	2b01      	cmp	r3, #1
 80163e0:	d021      	beq.n	8016426 <RadioSetRxConfig+0x1c6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80163e2:	f240 7036 	movw	r0, #1846	; 0x736
 80163e6:	f000 fbbf 	bl	8016b68 <SUBGRF_ReadRegister>
 80163ea:	f040 0104 	orr.w	r1, r0, #4
 80163ee:	b2c9      	uxtb	r1, r1
 80163f0:	f240 7036 	movw	r0, #1846	; 0x736
 80163f4:	f000 fac6 	bl	8016984 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80163f8:	4b10      	ldr	r3, [pc, #64]	; (801643c <RadioSetRxConfig+0x1dc>)
 80163fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80163fe:	609a      	str	r2, [r3, #8]
}
 8016400:	e751      	b.n	80162a6 <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016402:	2e0c      	cmp	r6, #12
 8016404:	d1bf      	bne.n	8016386 <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016406:	4a0d      	ldr	r2, [pc, #52]	; (801643c <RadioSetRxConfig+0x1dc>)
 8016408:	2101      	movs	r1, #1
 801640a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 801640e:	e7be      	b.n	801638e <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8016410:	f1b9 0f0b 	cmp.w	r9, #11
 8016414:	d803      	bhi.n	801641e <RadioSetRxConfig+0x1be>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016416:	4613      	mov	r3, r2
 8016418:	220c      	movs	r2, #12
 801641a:	839a      	strh	r2, [r3, #28]
 801641c:	e7c1      	b.n	80163a2 <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801641e:	4b07      	ldr	r3, [pc, #28]	; (801643c <RadioSetRxConfig+0x1dc>)
 8016420:	f8a3 901c 	strh.w	r9, [r3, #28]
 8016424:	e7bd      	b.n	80163a2 <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8016426:	f240 7036 	movw	r0, #1846	; 0x736
 801642a:	f000 fb9d 	bl	8016b68 <SUBGRF_ReadRegister>
 801642e:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8016432:	f240 7036 	movw	r0, #1846	; 0x736
 8016436:	f000 faa5 	bl	8016984 <SUBGRF_WriteRegister>
 801643a:	e7dd      	b.n	80163f8 <RadioSetRxConfig+0x198>
 801643c:	200012d0 	.word	0x200012d0
 8016440:	20000114 	.word	0x20000114
 8016444:	0801b280 	.word	0x0801b280
 8016448:	0801c39c 	.word	0x0801c39c

0801644c <RadioIsChannelFree>:
{
 801644c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801644e:	b08b      	sub	sp, #44	; 0x2c
 8016450:	4604      	mov	r4, r0
 8016452:	460f      	mov	r7, r1
 8016454:	4616      	mov	r6, r2
 8016456:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8016458:	f7ff face 	bl	80159f8 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 801645c:	2000      	movs	r0, #0
 801645e:	f7ff fdef 	bl	8016040 <RadioSetModem>
    RadioSetChannel( freq );
 8016462:	4620      	mov	r0, r4
 8016464:	f7ff fcf8 	bl	8015e58 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8016468:	2301      	movs	r3, #1
 801646a:	9309      	str	r3, [sp, #36]	; 0x24
 801646c:	2400      	movs	r4, #0
 801646e:	9408      	str	r4, [sp, #32]
 8016470:	9407      	str	r4, [sp, #28]
 8016472:	9406      	str	r4, [sp, #24]
 8016474:	9405      	str	r4, [sp, #20]
 8016476:	9404      	str	r4, [sp, #16]
 8016478:	9403      	str	r4, [sp, #12]
 801647a:	9402      	str	r4, [sp, #8]
 801647c:	2303      	movs	r3, #3
 801647e:	9301      	str	r3, [sp, #4]
 8016480:	9700      	str	r7, [sp, #0]
 8016482:	4623      	mov	r3, r4
 8016484:	f44f 7216 	mov.w	r2, #600	; 0x258
 8016488:	4639      	mov	r1, r7
 801648a:	4620      	mov	r0, r4
 801648c:	f7ff fee8 	bl	8016260 <RadioSetRxConfig>
    RadioRx( 0 );
 8016490:	4620      	mov	r0, r4
 8016492:	f7ff fcf9 	bl	8015e88 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8016496:	f7ff fc93 	bl	8015dc0 <RadioGetWakeupTime>
 801649a:	f7eb fc97 	bl	8001dcc <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 801649e:	f001 fac9 	bl	8017a34 <UTIL_TIMER_GetCurrentTime>
 80164a2:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80164a4:	4620      	mov	r0, r4
 80164a6:	f001 facf 	bl	8017a48 <UTIL_TIMER_GetElapsedTime>
 80164aa:	42a8      	cmp	r0, r5
 80164ac:	d206      	bcs.n	80164bc <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 80164ae:	2000      	movs	r0, #0
 80164b0:	f7ff fcb0 	bl	8015e14 <RadioRssi>
        if( rssi > rssiThresh )
 80164b4:	42b0      	cmp	r0, r6
 80164b6:	ddf5      	ble.n	80164a4 <RadioIsChannelFree+0x58>
            status = false;
 80164b8:	2400      	movs	r4, #0
 80164ba:	e000      	b.n	80164be <RadioIsChannelFree+0x72>
    bool status = true;
 80164bc:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80164be:	f7ff fa9b 	bl	80159f8 <RadioStandby>
}
 80164c2:	4620      	mov	r0, r4
 80164c4:	b00b      	add	sp, #44	; 0x2c
 80164c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080164c8 <RadioInit>:
{
 80164c8:	b570      	push	{r4, r5, r6, lr}
 80164ca:	b082      	sub	sp, #8
    RadioEvents = events;
 80164cc:	4b1d      	ldr	r3, [pc, #116]	; (8016544 <RadioInit+0x7c>)
 80164ce:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 80164d0:	4d1d      	ldr	r5, [pc, #116]	; (8016548 <RadioInit+0x80>)
 80164d2:	2400      	movs	r4, #0
 80164d4:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 80164d6:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 80164d8:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80164da:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 80164dc:	481b      	ldr	r0, [pc, #108]	; (801654c <RadioInit+0x84>)
 80164de:	f000 fb67 	bl	8016bb0 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 80164e2:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 80164e4:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 80164e6:	f000 f8fa 	bl	80166de <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80164ea:	4621      	mov	r1, r4
 80164ec:	4620      	mov	r0, r4
 80164ee:	f000 f9f1 	bl	80168d4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80164f2:	2204      	movs	r2, #4
 80164f4:	4621      	mov	r1, r4
 80164f6:	2001      	movs	r0, #1
 80164f8:	f000 fbc9 	bl	8016c8e <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80164fc:	4623      	mov	r3, r4
 80164fe:	4622      	mov	r2, r4
 8016500:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016504:	4608      	mov	r0, r1
 8016506:	f000 f97a 	bl	80167fe <SUBGRF_SetDioIrqParams>
    RadioSleep();
 801650a:	f7ff fcf5 	bl	8015ef8 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801650e:	4e10      	ldr	r6, [pc, #64]	; (8016550 <RadioInit+0x88>)
 8016510:	9400      	str	r4, [sp, #0]
 8016512:	4b10      	ldr	r3, [pc, #64]	; (8016554 <RadioInit+0x8c>)
 8016514:	4622      	mov	r2, r4
 8016516:	f04f 31ff 	mov.w	r1, #4294967295
 801651a:	4630      	mov	r0, r6
 801651c:	f001 fa6c 	bl	80179f8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8016520:	4d0d      	ldr	r5, [pc, #52]	; (8016558 <RadioInit+0x90>)
 8016522:	9400      	str	r4, [sp, #0]
 8016524:	4b0d      	ldr	r3, [pc, #52]	; (801655c <RadioInit+0x94>)
 8016526:	4622      	mov	r2, r4
 8016528:	f04f 31ff 	mov.w	r1, #4294967295
 801652c:	4628      	mov	r0, r5
 801652e:	f001 fa63 	bl	80179f8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8016532:	4630      	mov	r0, r6
 8016534:	f001 fabe 	bl	8017ab4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8016538:	4628      	mov	r0, r5
 801653a:	f001 fabb 	bl	8017ab4 <UTIL_TIMER_Stop>
}
 801653e:	b002      	add	sp, #8
 8016540:	bd70      	pop	{r4, r5, r6, pc}
 8016542:	bf00      	nop
 8016544:	200012b4 	.word	0x200012b4
 8016548:	200012d0 	.word	0x200012d0
 801654c:	08015dad 	.word	0x08015dad
 8016550:	2000132c 	.word	0x2000132c
 8016554:	08015905 	.word	0x08015905
 8016558:	200012b8 	.word	0x200012b8
 801655c:	0801592d 	.word	0x0801592d

08016560 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8016560:	b510      	push	{r4, lr}
 8016562:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016564:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016568:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801656a:	460a      	mov	r2, r1
 801656c:	4601      	mov	r1, r0
 801656e:	4803      	ldr	r0, [pc, #12]	; (801657c <SUBGRF_WriteCommand+0x1c>)
 8016570:	f7f5 faa8 	bl	800bac4 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016574:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8016578:	bd10      	pop	{r4, pc}
 801657a:	bf00      	nop
 801657c:	200003b0 	.word	0x200003b0

08016580 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8016580:	b510      	push	{r4, lr}
 8016582:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016584:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016588:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801658a:	460a      	mov	r2, r1
 801658c:	4601      	mov	r1, r0
 801658e:	4803      	ldr	r0, [pc, #12]	; (801659c <SUBGRF_ReadCommand+0x1c>)
 8016590:	f7f5 faee 	bl	800bb70 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016594:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8016598:	bd10      	pop	{r4, pc}
 801659a:	bf00      	nop
 801659c:	200003b0 	.word	0x200003b0

080165a0 <SUBGRF_GetOperatingMode>:
}
 80165a0:	4b01      	ldr	r3, [pc, #4]	; (80165a8 <SUBGRF_GetOperatingMode+0x8>)
 80165a2:	7818      	ldrb	r0, [r3, #0]
 80165a4:	4770      	bx	lr
 80165a6:	bf00      	nop
 80165a8:	2000134a 	.word	0x2000134a

080165ac <SUBGRF_SetStandby>:
{
 80165ac:	b500      	push	{lr}
 80165ae:	b083      	sub	sp, #12
 80165b0:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80165b4:	2201      	movs	r2, #1
 80165b6:	f10d 0107 	add.w	r1, sp, #7
 80165ba:	2080      	movs	r0, #128	; 0x80
 80165bc:	f7ff ffd0 	bl	8016560 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80165c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80165c4:	b92b      	cbnz	r3, 80165d2 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 80165c6:	4b05      	ldr	r3, [pc, #20]	; (80165dc <SUBGRF_SetStandby+0x30>)
 80165c8:	2201      	movs	r2, #1
 80165ca:	701a      	strb	r2, [r3, #0]
}
 80165cc:	b003      	add	sp, #12
 80165ce:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 80165d2:	4b02      	ldr	r3, [pc, #8]	; (80165dc <SUBGRF_SetStandby+0x30>)
 80165d4:	2202      	movs	r2, #2
 80165d6:	701a      	strb	r2, [r3, #0]
}
 80165d8:	e7f8      	b.n	80165cc <SUBGRF_SetStandby+0x20>
 80165da:	bf00      	nop
 80165dc:	2000134a 	.word	0x2000134a

080165e0 <SUBGRF_SetTx>:
{
 80165e0:	b500      	push	{lr}
 80165e2:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 80165e4:	4b0a      	ldr	r3, [pc, #40]	; (8016610 <SUBGRF_SetTx+0x30>)
 80165e6:	2204      	movs	r2, #4
 80165e8:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80165ea:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80165ee:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80165f2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80165f6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80165fa:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80165fe:	2203      	movs	r2, #3
 8016600:	a901      	add	r1, sp, #4
 8016602:	2083      	movs	r0, #131	; 0x83
 8016604:	f7ff ffac 	bl	8016560 <SUBGRF_WriteCommand>
}
 8016608:	b003      	add	sp, #12
 801660a:	f85d fb04 	ldr.w	pc, [sp], #4
 801660e:	bf00      	nop
 8016610:	2000134a 	.word	0x2000134a

08016614 <SUBGRF_SetRx>:
{
 8016614:	b500      	push	{lr}
 8016616:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8016618:	4b0a      	ldr	r3, [pc, #40]	; (8016644 <SUBGRF_SetRx+0x30>)
 801661a:	2205      	movs	r2, #5
 801661c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801661e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8016622:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8016626:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801662a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801662e:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8016632:	2203      	movs	r2, #3
 8016634:	a901      	add	r1, sp, #4
 8016636:	2082      	movs	r0, #130	; 0x82
 8016638:	f7ff ff92 	bl	8016560 <SUBGRF_WriteCommand>
}
 801663c:	b003      	add	sp, #12
 801663e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016642:	bf00      	nop
 8016644:	2000134a 	.word	0x2000134a

08016648 <SUBGRF_SetRxDutyCycle>:
{
 8016648:	b500      	push	{lr}
 801664a:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801664c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8016650:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8016654:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8016658:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801665c:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8016660:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8016664:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8016668:	f3c1 2307 	ubfx	r3, r1, #8, #8
 801666c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8016670:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8016674:	2206      	movs	r2, #6
 8016676:	4669      	mov	r1, sp
 8016678:	2094      	movs	r0, #148	; 0x94
 801667a:	f7ff ff71 	bl	8016560 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801667e:	4b03      	ldr	r3, [pc, #12]	; (801668c <SUBGRF_SetRxDutyCycle+0x44>)
 8016680:	2206      	movs	r2, #6
 8016682:	701a      	strb	r2, [r3, #0]
}
 8016684:	b003      	add	sp, #12
 8016686:	f85d fb04 	ldr.w	pc, [sp], #4
 801668a:	bf00      	nop
 801668c:	2000134a 	.word	0x2000134a

08016690 <SUBGRF_SetCad>:
{
 8016690:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8016692:	2200      	movs	r2, #0
 8016694:	4611      	mov	r1, r2
 8016696:	20c5      	movs	r0, #197	; 0xc5
 8016698:	f7ff ff62 	bl	8016560 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801669c:	4b01      	ldr	r3, [pc, #4]	; (80166a4 <SUBGRF_SetCad+0x14>)
 801669e:	2207      	movs	r2, #7
 80166a0:	701a      	strb	r2, [r3, #0]
}
 80166a2:	bd08      	pop	{r3, pc}
 80166a4:	2000134a 	.word	0x2000134a

080166a8 <SUBGRF_SetTxContinuousWave>:
{
 80166a8:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80166aa:	2200      	movs	r2, #0
 80166ac:	4611      	mov	r1, r2
 80166ae:	20d1      	movs	r0, #209	; 0xd1
 80166b0:	f7ff ff56 	bl	8016560 <SUBGRF_WriteCommand>
}
 80166b4:	bd08      	pop	{r3, pc}

080166b6 <SUBGRF_SetTxInfinitePreamble>:
{
 80166b6:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80166b8:	2200      	movs	r2, #0
 80166ba:	4611      	mov	r1, r2
 80166bc:	20d2      	movs	r0, #210	; 0xd2
 80166be:	f7ff ff4f 	bl	8016560 <SUBGRF_WriteCommand>
}
 80166c2:	bd08      	pop	{r3, pc}

080166c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 80166c4:	b500      	push	{lr}
 80166c6:	b083      	sub	sp, #12
 80166c8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80166cc:	2201      	movs	r2, #1
 80166ce:	f10d 0107 	add.w	r1, sp, #7
 80166d2:	209f      	movs	r0, #159	; 0x9f
 80166d4:	f7ff ff44 	bl	8016560 <SUBGRF_WriteCommand>
}
 80166d8:	b003      	add	sp, #12
 80166da:	f85d fb04 	ldr.w	pc, [sp], #4

080166de <SUBGRF_SetRegulatorMode>:
{
 80166de:	b500      	push	{lr}
 80166e0:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80166e2:	f7ec fca3 	bl	800302c <RBI_IsDCDC>
 80166e6:	2801      	cmp	r0, #1
 80166e8:	d00b      	beq.n	8016702 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 80166ea:	2300      	movs	r3, #0
 80166ec:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80166f0:	2201      	movs	r2, #1
 80166f2:	f10d 0107 	add.w	r1, sp, #7
 80166f6:	2096      	movs	r0, #150	; 0x96
 80166f8:	f7ff ff32 	bl	8016560 <SUBGRF_WriteCommand>
}
 80166fc:	b003      	add	sp, #12
 80166fe:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8016702:	2301      	movs	r3, #1
 8016704:	f88d 3007 	strb.w	r3, [sp, #7]
 8016708:	e7f2      	b.n	80166f0 <SUBGRF_SetRegulatorMode+0x12>

0801670a <SUBGRF_Calibrate>:
{
 801670a:	b500      	push	{lr}
 801670c:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801670e:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8016712:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8016716:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8016718:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801671c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801671e:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8016722:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8016724:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8016728:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801672a:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801672e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8016730:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8016734:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8016736:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801673a:	2201      	movs	r2, #1
 801673c:	f10d 0107 	add.w	r1, sp, #7
 8016740:	2089      	movs	r0, #137	; 0x89
 8016742:	f7ff ff0d 	bl	8016560 <SUBGRF_WriteCommand>
}
 8016746:	b003      	add	sp, #12
 8016748:	f85d fb04 	ldr.w	pc, [sp], #4

0801674c <SUBGRF_CalibrateImage>:
{
 801674c:	b500      	push	{lr}
 801674e:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8016750:	4b1c      	ldr	r3, [pc, #112]	; (80167c4 <SUBGRF_CalibrateImage+0x78>)
 8016752:	4298      	cmp	r0, r3
 8016754:	d90d      	bls.n	8016772 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8016756:	23e1      	movs	r3, #225	; 0xe1
 8016758:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 801675c:	23e9      	movs	r3, #233	; 0xe9
 801675e:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8016762:	2202      	movs	r2, #2
 8016764:	a901      	add	r1, sp, #4
 8016766:	2098      	movs	r0, #152	; 0x98
 8016768:	f7ff fefa 	bl	8016560 <SUBGRF_WriteCommand>
}
 801676c:	b003      	add	sp, #12
 801676e:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8016772:	4b15      	ldr	r3, [pc, #84]	; (80167c8 <SUBGRF_CalibrateImage+0x7c>)
 8016774:	4298      	cmp	r0, r3
 8016776:	d906      	bls.n	8016786 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8016778:	23d7      	movs	r3, #215	; 0xd7
 801677a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 801677e:	23db      	movs	r3, #219	; 0xdb
 8016780:	f88d 3005 	strb.w	r3, [sp, #5]
 8016784:	e7ed      	b.n	8016762 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8016786:	4b11      	ldr	r3, [pc, #68]	; (80167cc <SUBGRF_CalibrateImage+0x80>)
 8016788:	4298      	cmp	r0, r3
 801678a:	d906      	bls.n	801679a <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 801678c:	23c1      	movs	r3, #193	; 0xc1
 801678e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8016792:	23c5      	movs	r3, #197	; 0xc5
 8016794:	f88d 3005 	strb.w	r3, [sp, #5]
 8016798:	e7e3      	b.n	8016762 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 801679a:	4b0d      	ldr	r3, [pc, #52]	; (80167d0 <SUBGRF_CalibrateImage+0x84>)
 801679c:	4298      	cmp	r0, r3
 801679e:	d906      	bls.n	80167ae <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 80167a0:	2375      	movs	r3, #117	; 0x75
 80167a2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 80167a6:	2381      	movs	r3, #129	; 0x81
 80167a8:	f88d 3005 	strb.w	r3, [sp, #5]
 80167ac:	e7d9      	b.n	8016762 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 80167ae:	4b09      	ldr	r3, [pc, #36]	; (80167d4 <SUBGRF_CalibrateImage+0x88>)
 80167b0:	4298      	cmp	r0, r3
 80167b2:	d9d6      	bls.n	8016762 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 80167b4:	236b      	movs	r3, #107	; 0x6b
 80167b6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 80167ba:	236f      	movs	r3, #111	; 0x6f
 80167bc:	f88d 3005 	strb.w	r3, [sp, #5]
 80167c0:	e7cf      	b.n	8016762 <SUBGRF_CalibrateImage+0x16>
 80167c2:	bf00      	nop
 80167c4:	35a4e900 	.word	0x35a4e900
 80167c8:	32a9f880 	.word	0x32a9f880
 80167cc:	2de54480 	.word	0x2de54480
 80167d0:	1b6b0b00 	.word	0x1b6b0b00
 80167d4:	1954fc40 	.word	0x1954fc40

080167d8 <SUBGRF_SetPaConfig>:
{
 80167d8:	b500      	push	{lr}
 80167da:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 80167dc:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 80167e0:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 80167e4:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 80167e8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80167ec:	2204      	movs	r2, #4
 80167ee:	eb0d 0102 	add.w	r1, sp, r2
 80167f2:	2095      	movs	r0, #149	; 0x95
 80167f4:	f7ff feb4 	bl	8016560 <SUBGRF_WriteCommand>
}
 80167f8:	b003      	add	sp, #12
 80167fa:	f85d fb04 	ldr.w	pc, [sp], #4

080167fe <SUBGRF_SetDioIrqParams>:
{
 80167fe:	b500      	push	{lr}
 8016800:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8016802:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8016806:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801680a:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801680e:	0a08      	lsrs	r0, r1, #8
 8016810:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8016814:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8016818:	0a11      	lsrs	r1, r2, #8
 801681a:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801681e:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8016822:	0a1a      	lsrs	r2, r3, #8
 8016824:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8016828:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801682c:	2208      	movs	r2, #8
 801682e:	4669      	mov	r1, sp
 8016830:	4610      	mov	r0, r2
 8016832:	f7ff fe95 	bl	8016560 <SUBGRF_WriteCommand>
}
 8016836:	b003      	add	sp, #12
 8016838:	f85d fb04 	ldr.w	pc, [sp], #4

0801683c <SUBGRF_SetTcxoMode>:
{
 801683c:	b500      	push	{lr}
 801683e:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8016840:	f000 0007 	and.w	r0, r0, #7
 8016844:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8016848:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801684c:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8016850:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8016854:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8016858:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801685c:	2204      	movs	r2, #4
 801685e:	eb0d 0102 	add.w	r1, sp, r2
 8016862:	2097      	movs	r0, #151	; 0x97
 8016864:	f7ff fe7c 	bl	8016560 <SUBGRF_WriteCommand>
}
 8016868:	b003      	add	sp, #12
 801686a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016870 <SUBGRF_SetRfFrequency>:
{
 8016870:	b510      	push	{r4, lr}
 8016872:	b082      	sub	sp, #8
 8016874:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8016876:	4b12      	ldr	r3, [pc, #72]	; (80168c0 <SUBGRF_SetRfFrequency+0x50>)
 8016878:	781b      	ldrb	r3, [r3, #0]
 801687a:	b1d3      	cbz	r3, 80168b2 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801687c:	4a11      	ldr	r2, [pc, #68]	; (80168c4 <SUBGRF_SetRfFrequency+0x54>)
 801687e:	2300      	movs	r3, #0
 8016880:	0660      	lsls	r0, r4, #25
 8016882:	09e1      	lsrs	r1, r4, #7
 8016884:	f7ea fbe6 	bl	8001054 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8016888:	0e03      	lsrs	r3, r0, #24
 801688a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801688e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8016892:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8016896:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801689a:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801689e:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80168a2:	2204      	movs	r2, #4
 80168a4:	eb0d 0102 	add.w	r1, sp, r2
 80168a8:	2086      	movs	r0, #134	; 0x86
 80168aa:	f7ff fe59 	bl	8016560 <SUBGRF_WriteCommand>
}
 80168ae:	b002      	add	sp, #8
 80168b0:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 80168b2:	f7ff ff4b 	bl	801674c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80168b6:	4b02      	ldr	r3, [pc, #8]	; (80168c0 <SUBGRF_SetRfFrequency+0x50>)
 80168b8:	2201      	movs	r2, #1
 80168ba:	701a      	strb	r2, [r3, #0]
 80168bc:	e7de      	b.n	801687c <SUBGRF_SetRfFrequency+0xc>
 80168be:	bf00      	nop
 80168c0:	20001348 	.word	0x20001348
 80168c4:	01e84800 	.word	0x01e84800

080168c8 <SUBGRF_GetPacketType>:
}
 80168c8:	4b01      	ldr	r3, [pc, #4]	; (80168d0 <SUBGRF_GetPacketType+0x8>)
 80168ca:	7818      	ldrb	r0, [r3, #0]
 80168cc:	4770      	bx	lr
 80168ce:	bf00      	nop
 80168d0:	2000134b 	.word	0x2000134b

080168d4 <SUBGRF_SetBufferBaseAddress>:
{
 80168d4:	b500      	push	{lr}
 80168d6:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 80168d8:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 80168dc:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80168e0:	2202      	movs	r2, #2
 80168e2:	a901      	add	r1, sp, #4
 80168e4:	208f      	movs	r0, #143	; 0x8f
 80168e6:	f7ff fe3b 	bl	8016560 <SUBGRF_WriteCommand>
}
 80168ea:	b003      	add	sp, #12
 80168ec:	f85d fb04 	ldr.w	pc, [sp], #4

080168f0 <SUBGRF_GetRssiInst>:
{
 80168f0:	b500      	push	{lr}
 80168f2:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80168f4:	2201      	movs	r2, #1
 80168f6:	a901      	add	r1, sp, #4
 80168f8:	2015      	movs	r0, #21
 80168fa:	f7ff fe41 	bl	8016580 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80168fe:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8016902:	4240      	negs	r0, r0
}
 8016904:	1040      	asrs	r0, r0, #1
 8016906:	b003      	add	sp, #12
 8016908:	f85d fb04 	ldr.w	pc, [sp], #4

0801690c <SUBGRF_GetPacketStatus>:
{
 801690c:	b510      	push	{r4, lr}
 801690e:	b082      	sub	sp, #8
 8016910:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8016912:	2203      	movs	r2, #3
 8016914:	a901      	add	r1, sp, #4
 8016916:	2014      	movs	r0, #20
 8016918:	f7ff fe32 	bl	8016580 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 801691c:	f7ff ffd4 	bl	80168c8 <SUBGRF_GetPacketType>
 8016920:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8016922:	b148      	cbz	r0, 8016938 <SUBGRF_GetPacketStatus+0x2c>
 8016924:	2801      	cmp	r0, #1
 8016926:	d018      	beq.n	801695a <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8016928:	2214      	movs	r2, #20
 801692a:	2100      	movs	r1, #0
 801692c:	4620      	mov	r0, r4
 801692e:	f000 fe8e 	bl	801764e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8016932:	230f      	movs	r3, #15
 8016934:	7023      	strb	r3, [r4, #0]
}
 8016936:	e00e      	b.n	8016956 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8016938:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801693c:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801693e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8016942:	425b      	negs	r3, r3
 8016944:	105b      	asrs	r3, r3, #1
 8016946:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8016948:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801694c:	425b      	negs	r3, r3
 801694e:	105b      	asrs	r3, r3, #1
 8016950:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8016952:	2300      	movs	r3, #0
 8016954:	60a3      	str	r3, [r4, #8]
}
 8016956:	b002      	add	sp, #8
 8016958:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801695a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801695e:	425b      	negs	r3, r3
 8016960:	105b      	asrs	r3, r3, #1
 8016962:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8016964:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8016968:	3302      	adds	r3, #2
 801696a:	109b      	asrs	r3, r3, #2
 801696c:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801696e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8016972:	425b      	negs	r3, r3
 8016974:	105b      	asrs	r3, r3, #1
 8016976:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8016978:	4b01      	ldr	r3, [pc, #4]	; (8016980 <SUBGRF_GetPacketStatus+0x74>)
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	6123      	str	r3, [r4, #16]
            break;
 801697e:	e7ea      	b.n	8016956 <SUBGRF_GetPacketStatus+0x4a>
 8016980:	20001344 	.word	0x20001344

08016984 <SUBGRF_WriteRegister>:
{
 8016984:	b500      	push	{lr}
 8016986:	b083      	sub	sp, #12
 8016988:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801698c:	2301      	movs	r3, #1
 801698e:	f10d 0207 	add.w	r2, sp, #7
 8016992:	4601      	mov	r1, r0
 8016994:	4802      	ldr	r0, [pc, #8]	; (80169a0 <SUBGRF_WriteRegister+0x1c>)
 8016996:	f7f4 fff1 	bl	800b97c <HAL_SUBGHZ_WriteRegisters>
}
 801699a:	b003      	add	sp, #12
 801699c:	f85d fb04 	ldr.w	pc, [sp], #4
 80169a0:	200003b0 	.word	0x200003b0

080169a4 <SUBGRF_SetRxBoosted>:
{
 80169a4:	b510      	push	{r4, lr}
 80169a6:	b082      	sub	sp, #8
 80169a8:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 80169aa:	4b0c      	ldr	r3, [pc, #48]	; (80169dc <SUBGRF_SetRxBoosted+0x38>)
 80169ac:	2205      	movs	r2, #5
 80169ae:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80169b0:	2197      	movs	r1, #151	; 0x97
 80169b2:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80169b6:	f7ff ffe5 	bl	8016984 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80169ba:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80169be:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80169c2:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80169c6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80169ca:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80169ce:	2203      	movs	r2, #3
 80169d0:	a901      	add	r1, sp, #4
 80169d2:	2082      	movs	r0, #130	; 0x82
 80169d4:	f7ff fdc4 	bl	8016560 <SUBGRF_WriteCommand>
}
 80169d8:	b002      	add	sp, #8
 80169da:	bd10      	pop	{r4, pc}
 80169dc:	2000134a 	.word	0x2000134a

080169e0 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 80169e0:	b500      	push	{lr}
 80169e2:	b083      	sub	sp, #12
 80169e4:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80169e8:	2201      	movs	r2, #1
 80169ea:	f10d 0107 	add.w	r1, sp, #7
 80169ee:	20a0      	movs	r0, #160	; 0xa0
 80169f0:	f7ff fdb6 	bl	8016560 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 80169f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80169f8:	2b3f      	cmp	r3, #63	; 0x3f
 80169fa:	d90f      	bls.n	8016a1c <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 80169fc:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 80169fe:	2200      	movs	r2, #0
        while( mant > 31 )
 8016a00:	e002      	b.n	8016a08 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8016a02:	089b      	lsrs	r3, r3, #2
            exp++;
 8016a04:	1c51      	adds	r1, r2, #1
 8016a06:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 8016a08:	2b1f      	cmp	r3, #31
 8016a0a:	d8fa      	bhi.n	8016a02 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8016a0c:	00d9      	lsls	r1, r3, #3
 8016a0e:	b2c9      	uxtb	r1, r1
 8016a10:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8016a12:	b2c9      	uxtb	r1, r1
 8016a14:	f240 7006 	movw	r0, #1798	; 0x706
 8016a18:	f7ff ffb4 	bl	8016984 <SUBGRF_WriteRegister>
}
 8016a1c:	b003      	add	sp, #12
 8016a1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016a24 <SUBGRF_SetPacketType>:
{
 8016a24:	b500      	push	{lr}
 8016a26:	b083      	sub	sp, #12
 8016a28:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8016a2c:	b2c3      	uxtb	r3, r0
 8016a2e:	4a09      	ldr	r2, [pc, #36]	; (8016a54 <SUBGRF_SetPacketType+0x30>)
 8016a30:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8016a32:	b143      	cbz	r3, 8016a46 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8016a34:	2201      	movs	r2, #1
 8016a36:	f10d 0107 	add.w	r1, sp, #7
 8016a3a:	208a      	movs	r0, #138	; 0x8a
 8016a3c:	f7ff fd90 	bl	8016560 <SUBGRF_WriteCommand>
}
 8016a40:	b003      	add	sp, #12
 8016a42:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8016a46:	2100      	movs	r1, #0
 8016a48:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016a4c:	f7ff ff9a 	bl	8016984 <SUBGRF_WriteRegister>
 8016a50:	e7f0      	b.n	8016a34 <SUBGRF_SetPacketType+0x10>
 8016a52:	bf00      	nop
 8016a54:	2000134b 	.word	0x2000134b

08016a58 <SUBGRF_SetModulationParams>:
{
 8016a58:	b510      	push	{r4, lr}
 8016a5a:	b082      	sub	sp, #8
 8016a5c:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8016a5e:	4b3e      	ldr	r3, [pc, #248]	; (8016b58 <SUBGRF_SetModulationParams+0x100>)
 8016a60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016a64:	ab02      	add	r3, sp, #8
 8016a66:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8016a6a:	7820      	ldrb	r0, [r4, #0]
 8016a6c:	4b3b      	ldr	r3, [pc, #236]	; (8016b5c <SUBGRF_SetModulationParams+0x104>)
 8016a6e:	781b      	ldrb	r3, [r3, #0]
 8016a70:	4298      	cmp	r0, r3
 8016a72:	d106      	bne.n	8016a82 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8016a74:	7823      	ldrb	r3, [r4, #0]
 8016a76:	2b03      	cmp	r3, #3
 8016a78:	d82c      	bhi.n	8016ad4 <SUBGRF_SetModulationParams+0x7c>
 8016a7a:	e8df f003 	tbb	[pc, r3]
 8016a7e:	4205      	.short	0x4205
 8016a80:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8016a82:	f7ff ffcf 	bl	8016a24 <SUBGRF_SetPacketType>
 8016a86:	e7f5      	b.n	8016a74 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8016a88:	6862      	ldr	r2, [r4, #4]
 8016a8a:	4b35      	ldr	r3, [pc, #212]	; (8016b60 <SUBGRF_SetModulationParams+0x108>)
 8016a8c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8016a90:	0c1a      	lsrs	r2, r3, #16
 8016a92:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8016a96:	0a1a      	lsrs	r2, r3, #8
 8016a98:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8016a9c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8016aa0:	7b23      	ldrb	r3, [r4, #12]
 8016aa2:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8016aa6:	7b63      	ldrb	r3, [r4, #13]
 8016aa8:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8016aac:	68a1      	ldr	r1, [r4, #8]
 8016aae:	4a2d      	ldr	r2, [pc, #180]	; (8016b64 <SUBGRF_SetModulationParams+0x10c>)
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	0648      	lsls	r0, r1, #25
 8016ab4:	09c9      	lsrs	r1, r1, #7
 8016ab6:	f7ea facd 	bl	8001054 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8016aba:	0c03      	lsrs	r3, r0, #16
 8016abc:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8016ac0:	0a03      	lsrs	r3, r0, #8
 8016ac2:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8016ac6:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8016aca:	2208      	movs	r2, #8
 8016acc:	4669      	mov	r1, sp
 8016ace:	208b      	movs	r0, #139	; 0x8b
 8016ad0:	f7ff fd46 	bl	8016560 <SUBGRF_WriteCommand>
}
 8016ad4:	b002      	add	sp, #8
 8016ad6:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8016ad8:	6922      	ldr	r2, [r4, #16]
 8016ada:	4b21      	ldr	r3, [pc, #132]	; (8016b60 <SUBGRF_SetModulationParams+0x108>)
 8016adc:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8016ae0:	0c1a      	lsrs	r2, r3, #16
 8016ae2:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8016ae6:	0a1a      	lsrs	r2, r3, #8
 8016ae8:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8016aec:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8016af0:	7d23      	ldrb	r3, [r4, #20]
 8016af2:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8016af6:	2204      	movs	r2, #4
 8016af8:	4669      	mov	r1, sp
 8016afa:	208b      	movs	r0, #139	; 0x8b
 8016afc:	f7ff fd30 	bl	8016560 <SUBGRF_WriteCommand>
        break;
 8016b00:	e7e8      	b.n	8016ad4 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8016b02:	7e23      	ldrb	r3, [r4, #24]
 8016b04:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8016b08:	7e63      	ldrb	r3, [r4, #25]
 8016b0a:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8016b0e:	7ea3      	ldrb	r3, [r4, #26]
 8016b10:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8016b14:	7ee3      	ldrb	r3, [r4, #27]
 8016b16:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8016b1a:	2204      	movs	r2, #4
 8016b1c:	4669      	mov	r1, sp
 8016b1e:	208b      	movs	r0, #139	; 0x8b
 8016b20:	f7ff fd1e 	bl	8016560 <SUBGRF_WriteCommand>
        break;
 8016b24:	e7d6      	b.n	8016ad4 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8016b26:	6862      	ldr	r2, [r4, #4]
 8016b28:	4b0d      	ldr	r3, [pc, #52]	; (8016b60 <SUBGRF_SetModulationParams+0x108>)
 8016b2a:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8016b2e:	0c1a      	lsrs	r2, r3, #16
 8016b30:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8016b34:	0a1a      	lsrs	r2, r3, #8
 8016b36:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8016b3a:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8016b3e:	7b23      	ldrb	r3, [r4, #12]
 8016b40:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8016b44:	7b63      	ldrb	r3, [r4, #13]
 8016b46:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8016b4a:	2205      	movs	r2, #5
 8016b4c:	4669      	mov	r1, sp
 8016b4e:	208b      	movs	r0, #139	; 0x8b
 8016b50:	f7ff fd06 	bl	8016560 <SUBGRF_WriteCommand>
}
 8016b54:	e7be      	b.n	8016ad4 <SUBGRF_SetModulationParams+0x7c>
 8016b56:	bf00      	nop
 8016b58:	0801b288 	.word	0x0801b288
 8016b5c:	2000134b 	.word	0x2000134b
 8016b60:	3d090000 	.word	0x3d090000
 8016b64:	01e84800 	.word	0x01e84800

08016b68 <SUBGRF_ReadRegister>:
{
 8016b68:	b500      	push	{lr}
 8016b6a:	b083      	sub	sp, #12
 8016b6c:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8016b6e:	2301      	movs	r3, #1
 8016b70:	f10d 0207 	add.w	r2, sp, #7
 8016b74:	4803      	ldr	r0, [pc, #12]	; (8016b84 <SUBGRF_ReadRegister+0x1c>)
 8016b76:	f7f4 ff51 	bl	800ba1c <HAL_SUBGHZ_ReadRegisters>
}
 8016b7a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8016b7e:	b003      	add	sp, #12
 8016b80:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b84:	200003b0 	.word	0x200003b0

08016b88 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8016b88:	b510      	push	{r4, lr}
 8016b8a:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8016b8c:	f7ec fa4e 	bl	800302c <RBI_IsDCDC>
 8016b90:	2801      	cmp	r0, #1
 8016b92:	d000      	beq.n	8016b96 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8016b94:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8016b96:	f640 1023 	movw	r0, #2339	; 0x923
 8016b9a:	f7ff ffe5 	bl	8016b68 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8016b9e:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8016ba2:	4321      	orrs	r1, r4
 8016ba4:	f640 1023 	movw	r0, #2339	; 0x923
 8016ba8:	f7ff feec 	bl	8016984 <SUBGRF_WriteRegister>
}
 8016bac:	e7f2      	b.n	8016b94 <Radio_SMPS_Set+0xc>
	...

08016bb0 <SUBGRF_Init>:
{
 8016bb0:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8016bb2:	b108      	cbz	r0, 8016bb8 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8016bb4:	4a16      	ldr	r2, [pc, #88]	; (8016c10 <SUBGRF_Init+0x60>)
 8016bb6:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8016bb8:	f7eb f800 	bl	8001bbc <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8016bbc:	2002      	movs	r0, #2
 8016bbe:	f7ff ffe3 	bl	8016b88 <Radio_SMPS_Set>
    ImageCalibrated = false;
 8016bc2:	2000      	movs	r0, #0
 8016bc4:	4b13      	ldr	r3, [pc, #76]	; (8016c14 <SUBGRF_Init+0x64>)
 8016bc6:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8016bc8:	f7ff fcf0 	bl	80165ac <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8016bcc:	f7ec fa2a 	bl	8003024 <RBI_IsTCXO>
 8016bd0:	2801      	cmp	r0, #1
 8016bd2:	d00f      	beq.n	8016bf4 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8016bd4:	2120      	movs	r1, #32
 8016bd6:	f640 1011 	movw	r0, #2321	; 0x911
 8016bda:	f7ff fed3 	bl	8016984 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8016bde:	2120      	movs	r1, #32
 8016be0:	f640 1012 	movw	r0, #2322	; 0x912
 8016be4:	f7ff fece 	bl	8016984 <SUBGRF_WriteRegister>
    RBI_Init();
 8016be8:	f7ec fa10 	bl	800300c <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8016bec:	4b0a      	ldr	r3, [pc, #40]	; (8016c18 <SUBGRF_Init+0x68>)
 8016bee:	2201      	movs	r2, #1
 8016bf0:	701a      	strb	r2, [r3, #0]
}
 8016bf2:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8016bf4:	2140      	movs	r1, #64	; 0x40
 8016bf6:	f7ff fe21 	bl	801683c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8016bfa:	2100      	movs	r1, #0
 8016bfc:	f640 1011 	movw	r0, #2321	; 0x911
 8016c00:	f7ff fec0 	bl	8016984 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8016c04:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8016c08:	f7ff fd7f 	bl	801670a <SUBGRF_Calibrate>
 8016c0c:	e7ec      	b.n	8016be8 <SUBGRF_Init+0x38>
 8016c0e:	bf00      	nop
 8016c10:	2000134c 	.word	0x2000134c
 8016c14:	20001348 	.word	0x20001348
 8016c18:	2000134a 	.word	0x2000134a

08016c1c <SUBGRF_SetSleep>:
{
 8016c1c:	b510      	push	{r4, lr}
 8016c1e:	b082      	sub	sp, #8
 8016c20:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8016c22:	2000      	movs	r0, #0
 8016c24:	f7ec f9f6 	bl	8003014 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8016c28:	2002      	movs	r0, #2
 8016c2a:	f7ff ffad 	bl	8016b88 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8016c2e:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8016c32:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8016c36:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8016c38:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8016c3c:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8016c3e:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8016c42:	2201      	movs	r2, #1
 8016c44:	f10d 0107 	add.w	r1, sp, #7
 8016c48:	2084      	movs	r0, #132	; 0x84
 8016c4a:	f7ff fc89 	bl	8016560 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8016c4e:	4b02      	ldr	r3, [pc, #8]	; (8016c58 <SUBGRF_SetSleep+0x3c>)
 8016c50:	2200      	movs	r2, #0
 8016c52:	701a      	strb	r2, [r3, #0]
}
 8016c54:	b002      	add	sp, #8
 8016c56:	bd10      	pop	{r4, pc}
 8016c58:	2000134a 	.word	0x2000134a

08016c5c <SUBGRF_SetWhiteningSeed>:
{
 8016c5c:	b510      	push	{r4, lr}
 8016c5e:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8016c60:	f7ff fe32 	bl	80168c8 <SUBGRF_GetPacketType>
 8016c64:	b100      	cbz	r0, 8016c68 <SUBGRF_SetWhiteningSeed+0xc>
}
 8016c66:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8016c68:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8016c6c:	f7ff ff7c 	bl	8016b68 <SUBGRF_ReadRegister>
 8016c70:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8016c74:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8016c78:	4301      	orrs	r1, r0
 8016c7a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8016c7e:	f7ff fe81 	bl	8016984 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8016c82:	b2e1      	uxtb	r1, r4
 8016c84:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8016c88:	f7ff fe7c 	bl	8016984 <SUBGRF_WriteRegister>
}
 8016c8c:	e7eb      	b.n	8016c66 <SUBGRF_SetWhiteningSeed+0xa>

08016c8e <SUBGRF_SetTxParams>:
{
 8016c8e:	b570      	push	{r4, r5, r6, lr}
 8016c90:	b082      	sub	sp, #8
 8016c92:	460c      	mov	r4, r1
 8016c94:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8016c96:	2801      	cmp	r0, #1
 8016c98:	d035      	beq.n	8016d06 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8016c9a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8016c9e:	f7ff ff63 	bl	8016b68 <SUBGRF_ReadRegister>
 8016ca2:	f040 011e 	orr.w	r1, r0, #30
 8016ca6:	b2c9      	uxtb	r1, r1
 8016ca8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8016cac:	f7ff fe6a 	bl	8016984 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8016cb0:	2001      	movs	r0, #1
 8016cb2:	f7ec f9bf 	bl	8003034 <RBI_GetRFOMaxPowerConfig>
 8016cb6:	4605      	mov	r5, r0
        if (power > max_power)
 8016cb8:	4284      	cmp	r4, r0
 8016cba:	dd00      	ble.n	8016cbe <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8016cbc:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8016cbe:	2d14      	cmp	r5, #20
 8016cc0:	d054      	beq.n	8016d6c <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8016cc2:	2d11      	cmp	r5, #17
 8016cc4:	d05c      	beq.n	8016d80 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8016cc6:	2d0e      	cmp	r5, #14
 8016cc8:	d064      	beq.n	8016d94 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8016cca:	2301      	movs	r3, #1
 8016ccc:	2200      	movs	r2, #0
 8016cce:	2107      	movs	r1, #7
 8016cd0:	2004      	movs	r0, #4
 8016cd2:	f7ff fd81 	bl	80167d8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8016cd6:	1b64      	subs	r4, r4, r5
 8016cd8:	3416      	adds	r4, #22
 8016cda:	b264      	sxtb	r4, r4
        if (power < -9)
 8016cdc:	f114 0f09 	cmn.w	r4, #9
 8016ce0:	da01      	bge.n	8016ce6 <SUBGRF_SetTxParams+0x58>
            power = -9;
 8016ce2:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8016ce6:	2138      	movs	r1, #56	; 0x38
 8016ce8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8016cec:	f7ff fe4a 	bl	8016984 <SUBGRF_WriteRegister>
    buf[0] = power;
 8016cf0:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8016cf4:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8016cf8:	2202      	movs	r2, #2
 8016cfa:	a901      	add	r1, sp, #4
 8016cfc:	208e      	movs	r0, #142	; 0x8e
 8016cfe:	f7ff fc2f 	bl	8016560 <SUBGRF_WriteCommand>
}
 8016d02:	b002      	add	sp, #8
 8016d04:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8016d06:	2000      	movs	r0, #0
 8016d08:	f7ec f994 	bl	8003034 <RBI_GetRFOMaxPowerConfig>
 8016d0c:	4605      	mov	r5, r0
        if (power >  max_power)
 8016d0e:	4284      	cmp	r4, r0
 8016d10:	dd00      	ble.n	8016d14 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8016d12:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8016d14:	2d0e      	cmp	r5, #14
 8016d16:	d015      	beq.n	8016d44 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8016d18:	2d0a      	cmp	r5, #10
 8016d1a:	d01d      	beq.n	8016d58 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8016d1c:	2301      	movs	r3, #1
 8016d1e:	461a      	mov	r2, r3
 8016d20:	2100      	movs	r1, #0
 8016d22:	2006      	movs	r0, #6
 8016d24:	f7ff fd58 	bl	80167d8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8016d28:	1b64      	subs	r4, r4, r5
 8016d2a:	340e      	adds	r4, #14
 8016d2c:	b264      	sxtb	r4, r4
        if (power < -17)
 8016d2e:	f114 0f11 	cmn.w	r4, #17
 8016d32:	da01      	bge.n	8016d38 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8016d34:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8016d38:	2118      	movs	r1, #24
 8016d3a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8016d3e:	f7ff fe21 	bl	8016984 <SUBGRF_WriteRegister>
 8016d42:	e7d5      	b.n	8016cf0 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8016d44:	2301      	movs	r3, #1
 8016d46:	461a      	mov	r2, r3
 8016d48:	2100      	movs	r1, #0
 8016d4a:	2004      	movs	r0, #4
 8016d4c:	f7ff fd44 	bl	80167d8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8016d50:	1b64      	subs	r4, r4, r5
 8016d52:	340e      	adds	r4, #14
 8016d54:	b264      	sxtb	r4, r4
 8016d56:	e7ea      	b.n	8016d2e <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8016d58:	2301      	movs	r3, #1
 8016d5a:	461a      	mov	r2, r3
 8016d5c:	2100      	movs	r1, #0
 8016d5e:	4618      	mov	r0, r3
 8016d60:	f7ff fd3a 	bl	80167d8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8016d64:	1b64      	subs	r4, r4, r5
 8016d66:	340d      	adds	r4, #13
 8016d68:	b264      	sxtb	r4, r4
 8016d6a:	e7e0      	b.n	8016d2e <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8016d6c:	2301      	movs	r3, #1
 8016d6e:	2200      	movs	r2, #0
 8016d70:	2105      	movs	r1, #5
 8016d72:	2003      	movs	r0, #3
 8016d74:	f7ff fd30 	bl	80167d8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8016d78:	1b64      	subs	r4, r4, r5
 8016d7a:	3416      	adds	r4, #22
 8016d7c:	b264      	sxtb	r4, r4
 8016d7e:	e7ad      	b.n	8016cdc <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8016d80:	2301      	movs	r3, #1
 8016d82:	2200      	movs	r2, #0
 8016d84:	2103      	movs	r1, #3
 8016d86:	2002      	movs	r0, #2
 8016d88:	f7ff fd26 	bl	80167d8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8016d8c:	1b64      	subs	r4, r4, r5
 8016d8e:	3416      	adds	r4, #22
 8016d90:	b264      	sxtb	r4, r4
 8016d92:	e7a3      	b.n	8016cdc <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8016d94:	2301      	movs	r3, #1
 8016d96:	2200      	movs	r2, #0
 8016d98:	2102      	movs	r1, #2
 8016d9a:	4608      	mov	r0, r1
 8016d9c:	f7ff fd1c 	bl	80167d8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8016da0:	1b64      	subs	r4, r4, r5
 8016da2:	340e      	adds	r4, #14
 8016da4:	b264      	sxtb	r4, r4
 8016da6:	e799      	b.n	8016cdc <SUBGRF_SetTxParams+0x4e>

08016da8 <SUBGRF_GetRxBufferStatus>:
{
 8016da8:	b530      	push	{r4, r5, lr}
 8016daa:	b083      	sub	sp, #12
 8016dac:	4605      	mov	r5, r0
 8016dae:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8016db0:	2202      	movs	r2, #2
 8016db2:	a901      	add	r1, sp, #4
 8016db4:	2013      	movs	r0, #19
 8016db6:	f7ff fbe3 	bl	8016580 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8016dba:	f7ff fd85 	bl	80168c8 <SUBGRF_GetPacketType>
 8016dbe:	2801      	cmp	r0, #1
 8016dc0:	d007      	beq.n	8016dd2 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8016dc2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8016dc6:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8016dc8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8016dcc:	7023      	strb	r3, [r4, #0]
}
 8016dce:	b003      	add	sp, #12
 8016dd0:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8016dd2:	4b05      	ldr	r3, [pc, #20]	; (8016de8 <SUBGRF_GetRxBufferStatus+0x40>)
 8016dd4:	781b      	ldrb	r3, [r3, #0]
 8016dd6:	b2db      	uxtb	r3, r3
 8016dd8:	2b01      	cmp	r3, #1
 8016dda:	d1f2      	bne.n	8016dc2 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8016ddc:	f240 7002 	movw	r0, #1794	; 0x702
 8016de0:	f7ff fec2 	bl	8016b68 <SUBGRF_ReadRegister>
 8016de4:	7028      	strb	r0, [r5, #0]
 8016de6:	e7ef      	b.n	8016dc8 <SUBGRF_GetRxBufferStatus+0x20>
 8016de8:	20001349 	.word	0x20001349

08016dec <SUBGRF_WriteRegisters>:
{
 8016dec:	b510      	push	{r4, lr}
 8016dee:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016df0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016df4:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8016df6:	460a      	mov	r2, r1
 8016df8:	4601      	mov	r1, r0
 8016dfa:	4803      	ldr	r0, [pc, #12]	; (8016e08 <SUBGRF_WriteRegisters+0x1c>)
 8016dfc:	f7f4 fdbe 	bl	800b97c <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e00:	f384 8810 	msr	PRIMASK, r4
}
 8016e04:	bd10      	pop	{r4, pc}
 8016e06:	bf00      	nop
 8016e08:	200003b0 	.word	0x200003b0

08016e0c <SUBGRF_SetSyncWord>:
{
 8016e0c:	b508      	push	{r3, lr}
 8016e0e:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8016e10:	2208      	movs	r2, #8
 8016e12:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8016e16:	f7ff ffe9 	bl	8016dec <SUBGRF_WriteRegisters>
}
 8016e1a:	2000      	movs	r0, #0
 8016e1c:	bd08      	pop	{r3, pc}

08016e1e <SUBGRF_SetCrcSeed>:
{
 8016e1e:	b500      	push	{lr}
 8016e20:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8016e22:	0a03      	lsrs	r3, r0, #8
 8016e24:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8016e28:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8016e2c:	f7ff fd4c 	bl	80168c8 <SUBGRF_GetPacketType>
 8016e30:	b110      	cbz	r0, 8016e38 <SUBGRF_SetCrcSeed+0x1a>
}
 8016e32:	b003      	add	sp, #12
 8016e34:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8016e38:	2202      	movs	r2, #2
 8016e3a:	a901      	add	r1, sp, #4
 8016e3c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8016e40:	f7ff ffd4 	bl	8016dec <SUBGRF_WriteRegisters>
}
 8016e44:	e7f5      	b.n	8016e32 <SUBGRF_SetCrcSeed+0x14>

08016e46 <SUBGRF_SetCrcPolynomial>:
{
 8016e46:	b500      	push	{lr}
 8016e48:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8016e4a:	0a03      	lsrs	r3, r0, #8
 8016e4c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8016e50:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8016e54:	f7ff fd38 	bl	80168c8 <SUBGRF_GetPacketType>
 8016e58:	b110      	cbz	r0, 8016e60 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8016e5a:	b003      	add	sp, #12
 8016e5c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8016e60:	2202      	movs	r2, #2
 8016e62:	a901      	add	r1, sp, #4
 8016e64:	f240 60be 	movw	r0, #1726	; 0x6be
 8016e68:	f7ff ffc0 	bl	8016dec <SUBGRF_WriteRegisters>
}
 8016e6c:	e7f5      	b.n	8016e5a <SUBGRF_SetCrcPolynomial+0x14>
	...

08016e70 <SUBGRF_SetPacketParams>:
{
 8016e70:	b510      	push	{r4, lr}
 8016e72:	b084      	sub	sp, #16
 8016e74:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8016e76:	ab01      	add	r3, sp, #4
 8016e78:	4a33      	ldr	r2, [pc, #204]	; (8016f48 <SUBGRF_SetPacketParams+0xd8>)
 8016e7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8016e7c:	c303      	stmia	r3!, {r0, r1}
 8016e7e:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8016e80:	7820      	ldrb	r0, [r4, #0]
 8016e82:	4b32      	ldr	r3, [pc, #200]	; (8016f4c <SUBGRF_SetPacketParams+0xdc>)
 8016e84:	781b      	ldrb	r3, [r3, #0]
 8016e86:	4298      	cmp	r0, r3
 8016e88:	d106      	bne.n	8016e98 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8016e8a:	7823      	ldrb	r3, [r4, #0]
 8016e8c:	2b03      	cmp	r3, #3
 8016e8e:	d82a      	bhi.n	8016ee6 <SUBGRF_SetPacketParams+0x76>
 8016e90:	e8df f003 	tbb	[pc, r3]
 8016e94:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8016e98:	f7ff fdc4 	bl	8016a24 <SUBGRF_SetPacketType>
 8016e9c:	e7f5      	b.n	8016e8a <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8016e9e:	7a63      	ldrb	r3, [r4, #9]
 8016ea0:	2bf1      	cmp	r3, #241	; 0xf1
 8016ea2:	d022      	beq.n	8016eea <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8016ea4:	2bf2      	cmp	r3, #242	; 0xf2
 8016ea6:	d02a      	beq.n	8016efe <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8016ea8:	8862      	ldrh	r2, [r4, #2]
 8016eaa:	0a11      	lsrs	r1, r2, #8
 8016eac:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8016eb0:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8016eb4:	7922      	ldrb	r2, [r4, #4]
 8016eb6:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8016eba:	7962      	ldrb	r2, [r4, #5]
 8016ebc:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8016ec0:	79a2      	ldrb	r2, [r4, #6]
 8016ec2:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8016ec6:	79e2      	ldrb	r2, [r4, #7]
 8016ec8:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8016ecc:	7a22      	ldrb	r2, [r4, #8]
 8016ece:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8016ed2:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8016ed6:	7aa3      	ldrb	r3, [r4, #10]
 8016ed8:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8016edc:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8016ede:	a901      	add	r1, sp, #4
 8016ee0:	208c      	movs	r0, #140	; 0x8c
 8016ee2:	f7ff fb3d 	bl	8016560 <SUBGRF_WriteCommand>
}
 8016ee6:	b004      	add	sp, #16
 8016ee8:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8016eea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016eee:	f7ff ff96 	bl	8016e1e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8016ef2:	f248 0005 	movw	r0, #32773	; 0x8005
 8016ef6:	f7ff ffa6 	bl	8016e46 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8016efa:	2302      	movs	r3, #2
 8016efc:	e7d4      	b.n	8016ea8 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8016efe:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8016f02:	f7ff ff8c 	bl	8016e1e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8016f06:	f241 0021 	movw	r0, #4129	; 0x1021
 8016f0a:	f7ff ff9c 	bl	8016e46 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8016f0e:	2306      	movs	r3, #6
 8016f10:	e7ca      	b.n	8016ea8 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8016f12:	7b23      	ldrb	r3, [r4, #12]
 8016f14:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8016f18:	2201      	movs	r2, #1
        break;
 8016f1a:	e7e0      	b.n	8016ede <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8016f1c:	89e3      	ldrh	r3, [r4, #14]
 8016f1e:	0a1a      	lsrs	r2, r3, #8
 8016f20:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8016f24:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8016f28:	7c23      	ldrb	r3, [r4, #16]
 8016f2a:	4a09      	ldr	r2, [pc, #36]	; (8016f50 <SUBGRF_SetPacketParams+0xe0>)
 8016f2c:	7013      	strb	r3, [r2, #0]
 8016f2e:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8016f32:	7c63      	ldrb	r3, [r4, #17]
 8016f34:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8016f38:	7ca3      	ldrb	r3, [r4, #18]
 8016f3a:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8016f3e:	7ce3      	ldrb	r3, [r4, #19]
 8016f40:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8016f44:	2206      	movs	r2, #6
        break;
 8016f46:	e7ca      	b.n	8016ede <SUBGRF_SetPacketParams+0x6e>
 8016f48:	0801b290 	.word	0x0801b290
 8016f4c:	2000134b 	.word	0x2000134b
 8016f50:	20001349 	.word	0x20001349

08016f54 <SUBGRF_ReadRegisters>:
{
 8016f54:	b510      	push	{r4, lr}
 8016f56:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f58:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016f5c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8016f5e:	460a      	mov	r2, r1
 8016f60:	4601      	mov	r1, r0
 8016f62:	4803      	ldr	r0, [pc, #12]	; (8016f70 <SUBGRF_ReadRegisters+0x1c>)
 8016f64:	f7f4 fd5a 	bl	800ba1c <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f68:	f384 8810 	msr	PRIMASK, r4
}
 8016f6c:	bd10      	pop	{r4, pc}
 8016f6e:	bf00      	nop
 8016f70:	200003b0 	.word	0x200003b0

08016f74 <SUBGRF_GetRandom>:
{
 8016f74:	b570      	push	{r4, r5, r6, lr}
 8016f76:	b082      	sub	sp, #8
    uint32_t number = 0;
 8016f78:	2600      	movs	r6, #0
 8016f7a:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8016f7c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8016f80:	f7ff fdf2 	bl	8016b68 <SUBGRF_ReadRegister>
 8016f84:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8016f86:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8016f8a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8016f8e:	f7ff fcf9 	bl	8016984 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8016f92:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8016f96:	f7ff fde7 	bl	8016b68 <SUBGRF_ReadRegister>
 8016f9a:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8016f9c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8016fa0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8016fa4:	f7ff fcee 	bl	8016984 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8016fa8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8016fac:	f7ff fb32 	bl	8016614 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8016fb0:	2204      	movs	r2, #4
 8016fb2:	eb0d 0102 	add.w	r1, sp, r2
 8016fb6:	f640 0019 	movw	r0, #2073	; 0x819
 8016fba:	f7ff ffcb 	bl	8016f54 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8016fbe:	4630      	mov	r0, r6
 8016fc0:	f7ff faf4 	bl	80165ac <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8016fc4:	4629      	mov	r1, r5
 8016fc6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8016fca:	f7ff fcdb 	bl	8016984 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8016fce:	4621      	mov	r1, r4
 8016fd0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8016fd4:	f7ff fcd6 	bl	8016984 <SUBGRF_WriteRegister>
}
 8016fd8:	9801      	ldr	r0, [sp, #4]
 8016fda:	b002      	add	sp, #8
 8016fdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08016fe0 <SUBGRF_WriteBuffer>:
{
 8016fe0:	b510      	push	{r4, lr}
 8016fe2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016fe4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016fe8:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8016fea:	460a      	mov	r2, r1
 8016fec:	4601      	mov	r1, r0
 8016fee:	4803      	ldr	r0, [pc, #12]	; (8016ffc <SUBGRF_WriteBuffer+0x1c>)
 8016ff0:	f7f4 fe6a 	bl	800bcc8 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ff4:	f384 8810 	msr	PRIMASK, r4
}
 8016ff8:	bd10      	pop	{r4, pc}
 8016ffa:	bf00      	nop
 8016ffc:	200003b0 	.word	0x200003b0

08017000 <SUBGRF_SetPayload>:
{
 8017000:	b508      	push	{r3, lr}
 8017002:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8017004:	4601      	mov	r1, r0
 8017006:	2000      	movs	r0, #0
 8017008:	f7ff ffea 	bl	8016fe0 <SUBGRF_WriteBuffer>
}
 801700c:	bd08      	pop	{r3, pc}

0801700e <SUBGRF_SendPayload>:
{
 801700e:	b510      	push	{r4, lr}
 8017010:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8017012:	f7ff fff5 	bl	8017000 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8017016:	4620      	mov	r0, r4
 8017018:	f7ff fae2 	bl	80165e0 <SUBGRF_SetTx>
}
 801701c:	bd10      	pop	{r4, pc}
	...

08017020 <SUBGRF_ReadBuffer>:
{
 8017020:	b510      	push	{r4, lr}
 8017022:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017024:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8017028:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801702a:	460a      	mov	r2, r1
 801702c:	4601      	mov	r1, r0
 801702e:	4803      	ldr	r0, [pc, #12]	; (801703c <SUBGRF_ReadBuffer+0x1c>)
 8017030:	f7f4 fe94 	bl	800bd5c <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017034:	f384 8810 	msr	PRIMASK, r4
}
 8017038:	bd10      	pop	{r4, pc}
 801703a:	bf00      	nop
 801703c:	200003b0 	.word	0x200003b0

08017040 <SUBGRF_GetPayload>:
{
 8017040:	b570      	push	{r4, r5, r6, lr}
 8017042:	b082      	sub	sp, #8
 8017044:	4606      	mov	r6, r0
 8017046:	460c      	mov	r4, r1
 8017048:	4615      	mov	r5, r2
    uint8_t offset = 0;
 801704a:	2300      	movs	r3, #0
 801704c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8017050:	f10d 0107 	add.w	r1, sp, #7
 8017054:	4620      	mov	r0, r4
 8017056:	f7ff fea7 	bl	8016da8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801705a:	7822      	ldrb	r2, [r4, #0]
 801705c:	42aa      	cmp	r2, r5
 801705e:	d902      	bls.n	8017066 <SUBGRF_GetPayload+0x26>
        return 1;
 8017060:	2001      	movs	r0, #1
}
 8017062:	b002      	add	sp, #8
 8017064:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8017066:	4631      	mov	r1, r6
 8017068:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801706c:	f7ff ffd8 	bl	8017020 <SUBGRF_ReadBuffer>
    return 0;
 8017070:	2000      	movs	r0, #0
 8017072:	e7f6      	b.n	8017062 <SUBGRF_GetPayload+0x22>

08017074 <SUBGRF_SetSwitch>:
{
 8017074:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8017076:	2901      	cmp	r1, #1
 8017078:	d003      	beq.n	8017082 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801707a:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 801707c:	f7eb ffca 	bl	8003014 <RBI_ConfigRFSwitch>
}
 8017080:	bd10      	pop	{r4, pc}
 8017082:	4604      	mov	r4, r0
 8017084:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8017086:	2c01      	cmp	r4, #1
 8017088:	d003      	beq.n	8017092 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 801708a:	2c02      	cmp	r4, #2
 801708c:	d1f6      	bne.n	801707c <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 801708e:	2003      	movs	r0, #3
 8017090:	e7f4      	b.n	801707c <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8017092:	2004      	movs	r0, #4
 8017094:	f7ff fd78 	bl	8016b88 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8017098:	2002      	movs	r0, #2
 801709a:	e7f6      	b.n	801708a <SUBGRF_SetSwitch+0x16>

0801709c <SUBGRF_SetRfTxPower>:
{
 801709c:	b538      	push	{r3, r4, r5, lr}
 801709e:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 80170a0:	f7eb ffbc 	bl	800301c <RBI_GetTxConfig>
    switch (TxConfig)
 80170a4:	b148      	cbz	r0, 80170ba <SUBGRF_SetRfTxPower+0x1e>
 80170a6:	2802      	cmp	r0, #2
 80170a8:	d10d      	bne.n	80170c6 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 80170aa:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80170ac:	2202      	movs	r2, #2
 80170ae:	4621      	mov	r1, r4
 80170b0:	4628      	mov	r0, r5
 80170b2:	f7ff fdec 	bl	8016c8e <SUBGRF_SetTxParams>
}
 80170b6:	4628      	mov	r0, r5
 80170b8:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 80170ba:	2c0f      	cmp	r4, #15
 80170bc:	dc01      	bgt.n	80170c2 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 80170be:	2501      	movs	r5, #1
 80170c0:	e7f4      	b.n	80170ac <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 80170c2:	2502      	movs	r5, #2
 80170c4:	e7f2      	b.n	80170ac <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 80170c6:	2501      	movs	r5, #1
 80170c8:	e7f0      	b.n	80170ac <SUBGRF_SetRfTxPower+0x10>

080170ca <SUBGRF_GetRadioWakeUpTime>:
}
 80170ca:	2001      	movs	r0, #1
 80170cc:	4770      	bx	lr
	...

080170d0 <HAL_SUBGHZ_TxCpltCallback>:
{
 80170d0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80170d2:	4b02      	ldr	r3, [pc, #8]	; (80170dc <HAL_SUBGHZ_TxCpltCallback+0xc>)
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	2001      	movs	r0, #1
 80170d8:	4798      	blx	r3
}
 80170da:	bd08      	pop	{r3, pc}
 80170dc:	2000134c 	.word	0x2000134c

080170e0 <HAL_SUBGHZ_RxCpltCallback>:
{
 80170e0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80170e2:	4b02      	ldr	r3, [pc, #8]	; (80170ec <HAL_SUBGHZ_RxCpltCallback+0xc>)
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	2002      	movs	r0, #2
 80170e8:	4798      	blx	r3
}
 80170ea:	bd08      	pop	{r3, pc}
 80170ec:	2000134c 	.word	0x2000134c

080170f0 <HAL_SUBGHZ_CRCErrorCallback>:
{
 80170f0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80170f2:	4b02      	ldr	r3, [pc, #8]	; (80170fc <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	2040      	movs	r0, #64	; 0x40
 80170f8:	4798      	blx	r3
}
 80170fa:	bd08      	pop	{r3, pc}
 80170fc:	2000134c 	.word	0x2000134c

08017100 <HAL_SUBGHZ_CADStatusCallback>:
{
 8017100:	b508      	push	{r3, lr}
    switch (cadstatus)
 8017102:	b111      	cbz	r1, 801710a <HAL_SUBGHZ_CADStatusCallback+0xa>
 8017104:	2901      	cmp	r1, #1
 8017106:	d005      	beq.n	8017114 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8017108:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801710a:	4b05      	ldr	r3, [pc, #20]	; (8017120 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	2080      	movs	r0, #128	; 0x80
 8017110:	4798      	blx	r3
            break;
 8017112:	e7f9      	b.n	8017108 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8017114:	4b02      	ldr	r3, [pc, #8]	; (8017120 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	f44f 7080 	mov.w	r0, #256	; 0x100
 801711c:	4798      	blx	r3
}
 801711e:	e7f3      	b.n	8017108 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8017120:	2000134c 	.word	0x2000134c

08017124 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8017124:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8017126:	4b03      	ldr	r3, [pc, #12]	; (8017134 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	f44f 7000 	mov.w	r0, #512	; 0x200
 801712e:	4798      	blx	r3
}
 8017130:	bd08      	pop	{r3, pc}
 8017132:	bf00      	nop
 8017134:	2000134c 	.word	0x2000134c

08017138 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8017138:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801713a:	4b02      	ldr	r3, [pc, #8]	; (8017144 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	2020      	movs	r0, #32
 8017140:	4798      	blx	r3
}
 8017142:	bd08      	pop	{r3, pc}
 8017144:	2000134c 	.word	0x2000134c

08017148 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8017148:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801714a:	4b02      	ldr	r3, [pc, #8]	; (8017154 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	2004      	movs	r0, #4
 8017150:	4798      	blx	r3
}
 8017152:	bd08      	pop	{r3, pc}
 8017154:	2000134c 	.word	0x2000134c

08017158 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8017158:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801715a:	4b02      	ldr	r3, [pc, #8]	; (8017164 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	2008      	movs	r0, #8
 8017160:	4798      	blx	r3
}
 8017162:	bd08      	pop	{r3, pc}
 8017164:	2000134c 	.word	0x2000134c

08017168 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8017168:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801716a:	4b02      	ldr	r3, [pc, #8]	; (8017174 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	2010      	movs	r0, #16
 8017170:	4798      	blx	r3
}
 8017172:	bd08      	pop	{r3, pc}
 8017174:	2000134c 	.word	0x2000134c

08017178 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8017178:	4601      	mov	r1, r0
 801717a:	b188      	cbz	r0, 80171a0 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801717c:	2300      	movs	r3, #0
 801717e:	2b15      	cmp	r3, #21
 8017180:	d80d      	bhi.n	801719e <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8017182:	4618      	mov	r0, r3
 8017184:	4a07      	ldr	r2, [pc, #28]	; (80171a4 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8017186:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801718a:	428a      	cmp	r2, r1
 801718c:	d802      	bhi.n	8017194 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801718e:	3301      	adds	r3, #1
 8017190:	b2db      	uxtb	r3, r3
 8017192:	e7f4      	b.n	801717e <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8017194:	4b03      	ldr	r3, [pc, #12]	; (80171a4 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8017196:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801719a:	7900      	ldrb	r0, [r0, #4]
 801719c:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801719e:	e7fe      	b.n	801719e <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 80171a0:	201f      	movs	r0, #31
}
 80171a2:	4770      	bx	lr
 80171a4:	0801c424 	.word	0x0801c424

080171a8 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80171a8:	b570      	push	{r4, r5, r6, lr}
 80171aa:	b082      	sub	sp, #8
 80171ac:	4606      	mov	r6, r0
 80171ae:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 80171b0:	4b1d      	ldr	r3, [pc, #116]	; (8017228 <SUBGRF_GetCFO+0x80>)
 80171b2:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80171b4:	f640 0007 	movw	r0, #2055	; 0x807
 80171b8:	f7ff fcd6 	bl	8016b68 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80171bc:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 80171c0:	3308      	adds	r3, #8
 80171c2:	446b      	add	r3, sp
 80171c4:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 80171c8:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80171cc:	3b01      	subs	r3, #1
 80171ce:	fa05 f303 	lsl.w	r3, r5, r3
 80171d2:	4d16      	ldr	r5, [pc, #88]	; (801722c <SUBGRF_GetCFO+0x84>)
 80171d4:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 80171d8:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80171dc:	2a07      	cmp	r2, #7
 80171de:	d921      	bls.n	8017224 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 80171e0:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 80171e2:	fb00 f202 	mul.w	r2, r0, r2
 80171e6:	2a03      	cmp	r2, #3
 80171e8:	d800      	bhi.n	80171ec <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 80171ea:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80171ec:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 80171f0:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80171f4:	f7ff fcb8 	bl	8016b68 <SUBGRF_ReadRegister>
 80171f8:	0200      	lsls	r0, r0, #8
 80171fa:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 80171fe:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8017202:	f7ff fcb1 	bl	8016b68 <SUBGRF_ReadRegister>
 8017206:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8017208:	f410 6f00 	tst.w	r0, #2048	; 0x800
 801720c:	d003      	beq.n	8017216 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 801720e:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8017212:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8017216:	096d      	lsrs	r5, r5, #5
 8017218:	fb05 f000 	mul.w	r0, r5, r0
 801721c:	11c0      	asrs	r0, r0, #7
 801721e:	6020      	str	r0, [r4, #0]
}
 8017220:	b002      	add	sp, #8
 8017222:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8017224:	2002      	movs	r0, #2
 8017226:	e7dc      	b.n	80171e2 <SUBGRF_GetCFO+0x3a>
 8017228:	0c0a0804 	.word	0x0c0a0804
 801722c:	01e84800 	.word	0x01e84800

08017230 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8017230:	f04f 30ff 	mov.w	r0, #4294967295
 8017234:	4770      	bx	lr

08017236 <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8017236:	f04f 30ff 	mov.w	r0, #4294967295
 801723a:	4770      	bx	lr

0801723c <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801723c:	4770      	bx	lr

0801723e <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 801723e:	2000      	movs	r0, #0
 8017240:	4770      	bx	lr

08017242 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 8017242:	2000      	movs	r0, #0
 8017244:	4770      	bx	lr

08017246 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8017246:	4770      	bx	lr

08017248 <RFW_TransmitInit>:

    status= 0;
  }
#endif
  return status;
}
 8017248:	f04f 30ff 	mov.w	r0, #4294967295
 801724c:	4770      	bx	lr

0801724e <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 801724e:	f04f 30ff 	mov.w	r0, #4294967295
 8017252:	4770      	bx	lr

08017254 <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8017254:	4770      	bx	lr

08017256 <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8017256:	4770      	bx	lr

08017258 <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8017258:	4770      	bx	lr
	...

0801725c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801725c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801725e:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8017262:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8017264:	4b1e      	ldr	r3, [pc, #120]	; (80172e0 <TRACE_AllocateBufer+0x84>)
 8017266:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 801726a:	8a1a      	ldrh	r2, [r3, #16]
 801726c:	4594      	cmp	ip, r2
 801726e:	d011      	beq.n	8017294 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8017270:	4594      	cmp	ip, r2
 8017272:	d921      	bls.n	80172b8 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8017274:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8017278:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801727a:	4283      	cmp	r3, r0
 801727c:	d81f      	bhi.n	80172be <TRACE_AllocateBufer+0x62>
 801727e:	4282      	cmp	r2, r0
 8017280:	d91d      	bls.n	80172be <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8017282:	4b17      	ldr	r3, [pc, #92]	; (80172e0 <TRACE_AllocateBufer+0x84>)
 8017284:	2401      	movs	r4, #1
 8017286:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8017288:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801728c:	2400      	movs	r4, #0
 801728e:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8017290:	4613      	mov	r3, r2
 8017292:	e014      	b.n	80172be <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8017294:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8017298:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801729a:	4298      	cmp	r0, r3
 801729c:	d30f      	bcc.n	80172be <TRACE_AllocateBufer+0x62>
 801729e:	4282      	cmp	r2, r0
 80172a0:	d90d      	bls.n	80172be <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80172a2:	4b0f      	ldr	r3, [pc, #60]	; (80172e0 <TRACE_AllocateBufer+0x84>)
 80172a4:	2401      	movs	r4, #1
 80172a6:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80172a8:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80172ac:	f04f 0c00 	mov.w	ip, #0
 80172b0:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80172b4:	4613      	mov	r3, r2
 80172b6:	e002      	b.n	80172be <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80172b8:	eba2 030c 	sub.w	r3, r2, ip
 80172bc:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80172be:	4283      	cmp	r3, r0
 80172c0:	d90a      	bls.n	80172d8 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80172c2:	4a07      	ldr	r2, [pc, #28]	; (80172e0 <TRACE_AllocateBufer+0x84>)
 80172c4:	8a53      	ldrh	r3, [r2, #18]
 80172c6:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80172c8:	4403      	add	r3, r0
 80172ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80172ce:	8253      	strh	r3, [r2, #18]
    ret = 0;
 80172d0:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172d2:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 80172d6:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 80172d8:	f04f 30ff 	mov.w	r0, #4294967295
 80172dc:	e7f9      	b.n	80172d2 <TRACE_AllocateBufer+0x76>
 80172de:	bf00      	nop
 80172e0:	20001750 	.word	0x20001750

080172e4 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80172e4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80172e8:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80172ea:	4a03      	ldr	r2, [pc, #12]	; (80172f8 <TRACE_Lock+0x14>)
 80172ec:	8ad3      	ldrh	r3, [r2, #22]
 80172ee:	3301      	adds	r3, #1
 80172f0:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172f2:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80172f6:	4770      	bx	lr
 80172f8:	20001750 	.word	0x20001750

080172fc <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80172fc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8017300:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8017302:	4a03      	ldr	r2, [pc, #12]	; (8017310 <TRACE_UnLock+0x14>)
 8017304:	8ad3      	ldrh	r3, [r2, #22]
 8017306:	3b01      	subs	r3, #1
 8017308:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801730a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801730e:	4770      	bx	lr
 8017310:	20001750 	.word	0x20001750

08017314 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8017314:	4b02      	ldr	r3, [pc, #8]	; (8017320 <TRACE_IsLocked+0xc>)
 8017316:	8ad8      	ldrh	r0, [r3, #22]
}
 8017318:	3800      	subs	r0, #0
 801731a:	bf18      	it	ne
 801731c:	2001      	movne	r0, #1
 801731e:	4770      	bx	lr
 8017320:	20001750 	.word	0x20001750

08017324 <UTIL_ADV_TRACE_Init>:
{
 8017324:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8017326:	2218      	movs	r2, #24
 8017328:	2100      	movs	r1, #0
 801732a:	4807      	ldr	r0, [pc, #28]	; (8017348 <UTIL_ADV_TRACE_Init+0x24>)
 801732c:	f000 f98f 	bl	801764e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8017330:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017334:	2100      	movs	r1, #0
 8017336:	4805      	ldr	r0, [pc, #20]	; (801734c <UTIL_ADV_TRACE_Init+0x28>)
 8017338:	f000 f989 	bl	801764e <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801733c:	4b04      	ldr	r3, [pc, #16]	; (8017350 <UTIL_ADV_TRACE_Init+0x2c>)
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	4804      	ldr	r0, [pc, #16]	; (8017354 <UTIL_ADV_TRACE_Init+0x30>)
 8017342:	4798      	blx	r3
}
 8017344:	bd08      	pop	{r3, pc}
 8017346:	bf00      	nop
 8017348:	20001750 	.word	0x20001750
 801734c:	20001350 	.word	0x20001350
 8017350:	0801b300 	.word	0x0801b300
 8017354:	080174d9 	.word	0x080174d9

08017358 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8017358:	4b01      	ldr	r3, [pc, #4]	; (8017360 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 801735a:	6058      	str	r0, [r3, #4]
}
 801735c:	4770      	bx	lr
 801735e:	bf00      	nop
 8017360:	20001750 	.word	0x20001750

08017364 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8017364:	4b01      	ldr	r3, [pc, #4]	; (801736c <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8017366:	7218      	strb	r0, [r3, #8]
}
 8017368:	4770      	bx	lr
 801736a:	bf00      	nop
 801736c:	20001750 	.word	0x20001750

08017370 <TRACE_Send>:
{
 8017370:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017372:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8017376:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8017378:	f7ff ffcc 	bl	8017314 <TRACE_IsLocked>
 801737c:	b118      	cbz	r0, 8017386 <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801737e:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8017382:	2000      	movs	r0, #0
}
 8017384:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8017386:	f7ff ffad 	bl	80172e4 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801738a:	4b1d      	ldr	r3, [pc, #116]	; (8017400 <TRACE_Send+0x90>)
 801738c:	8a1a      	ldrh	r2, [r3, #16]
 801738e:	8a5b      	ldrh	r3, [r3, #18]
 8017390:	429a      	cmp	r2, r3
 8017392:	d02e      	beq.n	80173f2 <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8017394:	491a      	ldr	r1, [pc, #104]	; (8017400 <TRACE_Send+0x90>)
 8017396:	7889      	ldrb	r1, [r1, #2]
 8017398:	2901      	cmp	r1, #1
 801739a:	d017      	beq.n	80173cc <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801739c:	4a18      	ldr	r2, [pc, #96]	; (8017400 <TRACE_Send+0x90>)
 801739e:	7892      	ldrb	r2, [r2, #2]
 80173a0:	b932      	cbnz	r2, 80173b0 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80173a2:	4a17      	ldr	r2, [pc, #92]	; (8017400 <TRACE_Send+0x90>)
 80173a4:	8a12      	ldrh	r2, [r2, #16]
 80173a6:	4293      	cmp	r3, r2
 80173a8:	d91e      	bls.n	80173e8 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80173aa:	1a9b      	subs	r3, r3, r2
 80173ac:	4a14      	ldr	r2, [pc, #80]	; (8017400 <TRACE_Send+0x90>)
 80173ae:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80173b0:	4e13      	ldr	r6, [pc, #76]	; (8017400 <TRACE_Send+0x90>)
 80173b2:	8a33      	ldrh	r3, [r6, #16]
 80173b4:	4d13      	ldr	r5, [pc, #76]	; (8017404 <TRACE_Send+0x94>)
 80173b6:	441d      	add	r5, r3
 80173b8:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80173bc:	f7ea fcec 	bl	8001d98 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80173c0:	4b11      	ldr	r3, [pc, #68]	; (8017408 <TRACE_Send+0x98>)
 80173c2:	68db      	ldr	r3, [r3, #12]
 80173c4:	8ab1      	ldrh	r1, [r6, #20]
 80173c6:	4628      	mov	r0, r5
 80173c8:	4798      	blx	r3
 80173ca:	e7db      	b.n	8017384 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80173cc:	480c      	ldr	r0, [pc, #48]	; (8017400 <TRACE_Send+0x90>)
 80173ce:	8801      	ldrh	r1, [r0, #0]
 80173d0:	1a8a      	subs	r2, r1, r2
 80173d2:	b292      	uxth	r2, r2
 80173d4:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80173d6:	2102      	movs	r1, #2
 80173d8:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 80173da:	2100      	movs	r1, #0
 80173dc:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80173de:	2a00      	cmp	r2, #0
 80173e0:	d1dc      	bne.n	801739c <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80173e2:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80173e4:	8201      	strh	r1, [r0, #16]
 80173e6:	e7d9      	b.n	801739c <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80173e8:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 80173ec:	4a04      	ldr	r2, [pc, #16]	; (8017400 <TRACE_Send+0x90>)
 80173ee:	8293      	strh	r3, [r2, #20]
 80173f0:	e7de      	b.n	80173b0 <TRACE_Send+0x40>
      TRACE_UnLock();
 80173f2:	f7ff ff83 	bl	80172fc <TRACE_UnLock>
 80173f6:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80173fa:	2000      	movs	r0, #0
}
 80173fc:	e7c2      	b.n	8017384 <TRACE_Send+0x14>
 80173fe:	bf00      	nop
 8017400:	20001750 	.word	0x20001750
 8017404:	20001350 	.word	0x20001350
 8017408:	0801b300 	.word	0x0801b300

0801740c <UTIL_ADV_TRACE_COND_FSend>:
{
 801740c:	b408      	push	{r3}
 801740e:	b530      	push	{r4, r5, lr}
 8017410:	b086      	sub	sp, #24
 8017412:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8017414:	2300      	movs	r3, #0
 8017416:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801741a:	4b2c      	ldr	r3, [pc, #176]	; (80174cc <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 801741c:	7a1b      	ldrb	r3, [r3, #8]
 801741e:	4283      	cmp	r3, r0
 8017420:	d34d      	bcc.n	80174be <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8017422:	4b2a      	ldr	r3, [pc, #168]	; (80174cc <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8017424:	68db      	ldr	r3, [r3, #12]
 8017426:	ea31 0303 	bics.w	r3, r1, r3
 801742a:	d14b      	bne.n	80174c4 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801742c:	4b27      	ldr	r3, [pc, #156]	; (80174cc <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 801742e:	685b      	ldr	r3, [r3, #4]
 8017430:	b123      	cbz	r3, 801743c <UTIL_ADV_TRACE_COND_FSend+0x30>
 8017432:	b11a      	cbz	r2, 801743c <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8017434:	f10d 0102 	add.w	r1, sp, #2
 8017438:	a801      	add	r0, sp, #4
 801743a:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 801743c:	ab0a      	add	r3, sp, #40	; 0x28
 801743e:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8017440:	4622      	mov	r2, r4
 8017442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017446:	4822      	ldr	r0, [pc, #136]	; (80174d0 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8017448:	f000 fcd0 	bl	8017dec <tiny_vsnprintf_like>
 801744c:	b285      	uxth	r5, r0
  TRACE_Lock();
 801744e:	f7ff ff49 	bl	80172e4 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8017452:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8017456:	4428      	add	r0, r5
 8017458:	4669      	mov	r1, sp
 801745a:	b280      	uxth	r0, r0
 801745c:	f7ff fefe 	bl	801725c <TRACE_AllocateBufer>
 8017460:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017464:	d026      	beq.n	80174b4 <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 8017466:	2300      	movs	r3, #0
 8017468:	e00d      	b.n	8017486 <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801746a:	f8bd 2000 	ldrh.w	r2, [sp]
 801746e:	f103 0118 	add.w	r1, r3, #24
 8017472:	4469      	add	r1, sp
 8017474:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8017478:	4916      	ldr	r1, [pc, #88]	; (80174d4 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 801747a:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 801747c:	3201      	adds	r2, #1
 801747e:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8017482:	3301      	adds	r3, #1
 8017484:	b29b      	uxth	r3, r3
 8017486:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801748a:	429a      	cmp	r2, r3
 801748c:	d8ed      	bhi.n	801746a <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801748e:	f8bd 0000 	ldrh.w	r0, [sp]
 8017492:	9b05      	ldr	r3, [sp, #20]
 8017494:	4622      	mov	r2, r4
 8017496:	f44f 7100 	mov.w	r1, #512	; 0x200
 801749a:	4c0e      	ldr	r4, [pc, #56]	; (80174d4 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 801749c:	4420      	add	r0, r4
 801749e:	f000 fca5 	bl	8017dec <tiny_vsnprintf_like>
    TRACE_UnLock();
 80174a2:	f7ff ff2b 	bl	80172fc <TRACE_UnLock>
    return TRACE_Send();
 80174a6:	f7ff ff63 	bl	8017370 <TRACE_Send>
}
 80174aa:	b006      	add	sp, #24
 80174ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80174b0:	b001      	add	sp, #4
 80174b2:	4770      	bx	lr
  TRACE_UnLock();
 80174b4:	f7ff ff22 	bl	80172fc <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80174b8:	f06f 0002 	mvn.w	r0, #2
 80174bc:	e7f5      	b.n	80174aa <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 80174be:	f06f 0004 	mvn.w	r0, #4
 80174c2:	e7f2      	b.n	80174aa <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 80174c4:	f06f 0005 	mvn.w	r0, #5
 80174c8:	e7ef      	b.n	80174aa <UTIL_ADV_TRACE_COND_FSend+0x9e>
 80174ca:	bf00      	nop
 80174cc:	20001750 	.word	0x20001750
 80174d0:	20001768 	.word	0x20001768
 80174d4:	20001350 	.word	0x20001350

080174d8 <TRACE_TxCpltCallback>:
{
 80174d8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80174da:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80174de:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 80174e0:	4b25      	ldr	r3, [pc, #148]	; (8017578 <TRACE_TxCpltCallback+0xa0>)
 80174e2:	789b      	ldrb	r3, [r3, #2]
 80174e4:	2b02      	cmp	r3, #2
 80174e6:	d016      	beq.n	8017516 <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 80174e8:	4a23      	ldr	r2, [pc, #140]	; (8017578 <TRACE_TxCpltCallback+0xa0>)
 80174ea:	8a13      	ldrh	r3, [r2, #16]
 80174ec:	8a90      	ldrh	r0, [r2, #20]
 80174ee:	4403      	add	r3, r0
 80174f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80174f4:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80174f6:	4b20      	ldr	r3, [pc, #128]	; (8017578 <TRACE_TxCpltCallback+0xa0>)
 80174f8:	8a1a      	ldrh	r2, [r3, #16]
 80174fa:	8a5b      	ldrh	r3, [r3, #18]
 80174fc:	429a      	cmp	r2, r3
 80174fe:	d003      	beq.n	8017508 <TRACE_TxCpltCallback+0x30>
 8017500:	481d      	ldr	r0, [pc, #116]	; (8017578 <TRACE_TxCpltCallback+0xa0>)
 8017502:	8ac0      	ldrh	r0, [r0, #22]
 8017504:	2801      	cmp	r0, #1
 8017506:	d00b      	beq.n	8017520 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017508:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 801750c:	f7ea fc4a 	bl	8001da4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8017510:	f7ff fef4 	bl	80172fc <TRACE_UnLock>
}
 8017514:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8017516:	4b18      	ldr	r3, [pc, #96]	; (8017578 <TRACE_TxCpltCallback+0xa0>)
 8017518:	2200      	movs	r2, #0
 801751a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801751c:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 801751e:	e7ea      	b.n	80174f6 <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8017520:	4815      	ldr	r0, [pc, #84]	; (8017578 <TRACE_TxCpltCallback+0xa0>)
 8017522:	7880      	ldrb	r0, [r0, #2]
 8017524:	2801      	cmp	r0, #1
 8017526:	d014      	beq.n	8017552 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8017528:	4a13      	ldr	r2, [pc, #76]	; (8017578 <TRACE_TxCpltCallback+0xa0>)
 801752a:	7892      	ldrb	r2, [r2, #2]
 801752c:	b932      	cbnz	r2, 801753c <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801752e:	4a12      	ldr	r2, [pc, #72]	; (8017578 <TRACE_TxCpltCallback+0xa0>)
 8017530:	8a12      	ldrh	r2, [r2, #16]
 8017532:	4293      	cmp	r3, r2
 8017534:	d91b      	bls.n	801756e <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8017536:	1a9b      	subs	r3, r3, r2
 8017538:	4a0f      	ldr	r2, [pc, #60]	; (8017578 <TRACE_TxCpltCallback+0xa0>)
 801753a:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801753c:	4b0e      	ldr	r3, [pc, #56]	; (8017578 <TRACE_TxCpltCallback+0xa0>)
 801753e:	8a1a      	ldrh	r2, [r3, #16]
 8017540:	480e      	ldr	r0, [pc, #56]	; (801757c <TRACE_TxCpltCallback+0xa4>)
 8017542:	4410      	add	r0, r2
 8017544:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8017548:	4a0d      	ldr	r2, [pc, #52]	; (8017580 <TRACE_TxCpltCallback+0xa8>)
 801754a:	68d2      	ldr	r2, [r2, #12]
 801754c:	8a99      	ldrh	r1, [r3, #20]
 801754e:	4790      	blx	r2
 8017550:	e7e0      	b.n	8017514 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8017552:	4c09      	ldr	r4, [pc, #36]	; (8017578 <TRACE_TxCpltCallback+0xa0>)
 8017554:	8820      	ldrh	r0, [r4, #0]
 8017556:	1a82      	subs	r2, r0, r2
 8017558:	b292      	uxth	r2, r2
 801755a:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801755c:	2002      	movs	r0, #2
 801755e:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8017560:	2000      	movs	r0, #0
 8017562:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8017564:	2a00      	cmp	r2, #0
 8017566:	d1df      	bne.n	8017528 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8017568:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801756a:	8220      	strh	r0, [r4, #16]
 801756c:	e7dc      	b.n	8017528 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801756e:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8017572:	4a01      	ldr	r2, [pc, #4]	; (8017578 <TRACE_TxCpltCallback+0xa0>)
 8017574:	8293      	strh	r3, [r2, #20]
 8017576:	e7e1      	b.n	801753c <TRACE_TxCpltCallback+0x64>
 8017578:	20001750 	.word	0x20001750
 801757c:	20001350 	.word	0x20001350
 8017580:	0801b300 	.word	0x0801b300

08017584 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8017584:	2300      	movs	r3, #0
 8017586:	4a02      	ldr	r2, [pc, #8]	; (8017590 <UTIL_LPM_Init+0xc>)
 8017588:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801758a:	4a02      	ldr	r2, [pc, #8]	; (8017594 <UTIL_LPM_Init+0x10>)
 801758c:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801758e:	4770      	bx	lr
 8017590:	2000196c 	.word	0x2000196c
 8017594:	20001968 	.word	0x20001968

08017598 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017598:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801759c:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 801759e:	b141      	cbz	r1, 80175b2 <UTIL_LPM_SetStopMode+0x1a>
 80175a0:	2901      	cmp	r1, #1
 80175a2:	d103      	bne.n	80175ac <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80175a4:	4906      	ldr	r1, [pc, #24]	; (80175c0 <UTIL_LPM_SetStopMode+0x28>)
 80175a6:	680a      	ldr	r2, [r1, #0]
 80175a8:	4310      	orrs	r0, r2
 80175aa:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80175ac:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80175b0:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 80175b2:	4903      	ldr	r1, [pc, #12]	; (80175c0 <UTIL_LPM_SetStopMode+0x28>)
 80175b4:	680a      	ldr	r2, [r1, #0]
 80175b6:	ea22 0000 	bic.w	r0, r2, r0
 80175ba:	6008      	str	r0, [r1, #0]
      break;
 80175bc:	e7f6      	b.n	80175ac <UTIL_LPM_SetStopMode+0x14>
 80175be:	bf00      	nop
 80175c0:	2000196c 	.word	0x2000196c

080175c4 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80175c4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80175c8:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80175ca:	b141      	cbz	r1, 80175de <UTIL_LPM_SetOffMode+0x1a>
 80175cc:	2901      	cmp	r1, #1
 80175ce:	d103      	bne.n	80175d8 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80175d0:	4906      	ldr	r1, [pc, #24]	; (80175ec <UTIL_LPM_SetOffMode+0x28>)
 80175d2:	680a      	ldr	r2, [r1, #0]
 80175d4:	4310      	orrs	r0, r2
 80175d6:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80175d8:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80175dc:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 80175de:	4903      	ldr	r1, [pc, #12]	; (80175ec <UTIL_LPM_SetOffMode+0x28>)
 80175e0:	680a      	ldr	r2, [r1, #0]
 80175e2:	ea22 0000 	bic.w	r0, r2, r0
 80175e6:	6008      	str	r0, [r1, #0]
      break;
 80175e8:	e7f6      	b.n	80175d8 <UTIL_LPM_SetOffMode+0x14>
 80175ea:	bf00      	nop
 80175ec:	20001968 	.word	0x20001968

080175f0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80175f0:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80175f2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80175f6:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80175f8:	4b0c      	ldr	r3, [pc, #48]	; (801762c <UTIL_LPM_EnterLowPower+0x3c>)
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	b13b      	cbz	r3, 801760e <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80175fe:	4d0c      	ldr	r5, [pc, #48]	; (8017630 <UTIL_LPM_EnterLowPower+0x40>)
 8017600:	682b      	ldr	r3, [r5, #0]
 8017602:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8017604:	686b      	ldr	r3, [r5, #4]
 8017606:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017608:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801760c:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801760e:	4b09      	ldr	r3, [pc, #36]	; (8017634 <UTIL_LPM_EnterLowPower+0x44>)
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	b12b      	cbz	r3, 8017620 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8017614:	4d06      	ldr	r5, [pc, #24]	; (8017630 <UTIL_LPM_EnterLowPower+0x40>)
 8017616:	68ab      	ldr	r3, [r5, #8]
 8017618:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801761a:	68eb      	ldr	r3, [r5, #12]
 801761c:	4798      	blx	r3
 801761e:	e7f3      	b.n	8017608 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8017620:	4d03      	ldr	r5, [pc, #12]	; (8017630 <UTIL_LPM_EnterLowPower+0x40>)
 8017622:	692b      	ldr	r3, [r5, #16]
 8017624:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8017626:	696b      	ldr	r3, [r5, #20]
 8017628:	4798      	blx	r3
 801762a:	e7ed      	b.n	8017608 <UTIL_LPM_EnterLowPower+0x18>
 801762c:	2000196c 	.word	0x2000196c
 8017630:	0801b29c 	.word	0x0801b29c
 8017634:	20001968 	.word	0x20001968

08017638 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8017638:	e004      	b.n	8017644 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 801763a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801763e:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8017642:	461a      	mov	r2, r3
 8017644:	1e53      	subs	r3, r2, #1
 8017646:	b29b      	uxth	r3, r3
 8017648:	2a00      	cmp	r2, #0
 801764a:	d1f6      	bne.n	801763a <UTIL_MEM_cpy_8+0x2>
    }
}
 801764c:	4770      	bx	lr

0801764e <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 801764e:	e002      	b.n	8017656 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8017650:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8017654:	461a      	mov	r2, r3
 8017656:	1e53      	subs	r3, r2, #1
 8017658:	b29b      	uxth	r3, r3
 801765a:	2a00      	cmp	r2, #0
 801765c:	d1f8      	bne.n	8017650 <UTIL_MEM_set_8+0x2>
  }
}
 801765e:	4770      	bx	lr

08017660 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017660:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8017664:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8017666:	4a06      	ldr	r2, [pc, #24]	; (8017680 <UTIL_SEQ_SetTask+0x20>)
 8017668:	6813      	ldr	r3, [r2, #0]
 801766a:	4303      	orrs	r3, r0
 801766c:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801766e:	4a05      	ldr	r2, [pc, #20]	; (8017684 <UTIL_SEQ_SetTask+0x24>)
 8017670:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8017674:	4318      	orrs	r0, r3
 8017676:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801767a:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 801767e:	4770      	bx	lr
 8017680:	20001994 	.word	0x20001994
 8017684:	2000198c 	.word	0x2000198c

08017688 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8017688:	4770      	bx	lr

0801768a <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 801768a:	4770      	bx	lr

0801768c <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801768c:	0c03      	lsrs	r3, r0, #16
 801768e:	041b      	lsls	r3, r3, #16
 8017690:	b9b3      	cbnz	r3, 80176c0 <SEQ_BitPosition+0x34>
 8017692:	0400      	lsls	r0, r0, #16
 8017694:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8017696:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801769a:	d102      	bne.n	80176a2 <SEQ_BitPosition+0x16>
 801769c:	3308      	adds	r3, #8
 801769e:	b2db      	uxtb	r3, r3
 80176a0:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80176a2:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80176a6:	d102      	bne.n	80176ae <SEQ_BitPosition+0x22>
 80176a8:	3304      	adds	r3, #4
 80176aa:	b2db      	uxtb	r3, r3
 80176ac:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80176ae:	0f00      	lsrs	r0, r0, #28
 80176b0:	4a04      	ldr	r2, [pc, #16]	; (80176c4 <SEQ_BitPosition+0x38>)
 80176b2:	5c10      	ldrb	r0, [r2, r0]
 80176b4:	4418      	add	r0, r3
 80176b6:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 80176b8:	f1c0 001f 	rsb	r0, r0, #31
}
 80176bc:	b2c0      	uxtb	r0, r0
 80176be:	4770      	bx	lr
uint8_t n = 0U;
 80176c0:	2300      	movs	r3, #0
 80176c2:	e7e8      	b.n	8017696 <SEQ_BitPosition+0xa>
 80176c4:	0801c4d4 	.word	0x0801c4d4

080176c8 <UTIL_SEQ_Run>:
{
 80176c8:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 80176ca:	4b43      	ldr	r3, [pc, #268]	; (80177d8 <UTIL_SEQ_Run+0x110>)
 80176cc:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 80176ce:	4020      	ands	r0, r4
 80176d0:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 80176d2:	4b42      	ldr	r3, [pc, #264]	; (80177dc <UTIL_SEQ_Run+0x114>)
 80176d4:	6819      	ldr	r1, [r3, #0]
  local_evtset = EvtSet;
 80176d6:	4b42      	ldr	r3, [pc, #264]	; (80177e0 <UTIL_SEQ_Run+0x118>)
 80176d8:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 80176da:	4a42      	ldr	r2, [pc, #264]	; (80177e4 <UTIL_SEQ_Run+0x11c>)
 80176dc:	6810      	ldr	r0, [r2, #0]
  local_evtwaited =  EvtWaited;
 80176de:	4a42      	ldr	r2, [pc, #264]	; (80177e8 <UTIL_SEQ_Run+0x120>)
 80176e0:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80176e2:	e030      	b.n	8017746 <UTIL_SEQ_Run+0x7e>
      counter++;
 80176e4:	3301      	adds	r3, #1
 80176e6:	e035      	b.n	8017754 <UTIL_SEQ_Run+0x8c>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80176e8:	4d40      	ldr	r5, [pc, #256]	; (80177ec <UTIL_SEQ_Run+0x124>)
 80176ea:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80176ee:	6868      	ldr	r0, [r5, #4]
 80176f0:	4010      	ands	r0, r2
 80176f2:	f7ff ffcb 	bl	801768c <SEQ_BitPosition>
 80176f6:	493e      	ldr	r1, [pc, #248]	; (80177f0 <UTIL_SEQ_Run+0x128>)
 80176f8:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80176fa:	686a      	ldr	r2, [r5, #4]
 80176fc:	2301      	movs	r3, #1
 80176fe:	fa03 f000 	lsl.w	r0, r3, r0
 8017702:	ea22 0000 	bic.w	r0, r2, r0
 8017706:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017708:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801770c:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 801770e:	680a      	ldr	r2, [r1, #0]
 8017710:	fa03 f202 	lsl.w	r2, r3, r2
 8017714:	ea6f 0c02 	mvn.w	ip, r2
 8017718:	4830      	ldr	r0, [pc, #192]	; (80177dc <UTIL_SEQ_Run+0x114>)
 801771a:	6801      	ldr	r1, [r0, #0]
 801771c:	ea21 0202 	bic.w	r2, r1, r2
 8017720:	6002      	str	r2, [r0, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8017722:	2b00      	cmp	r3, #0
 8017724:	d12d      	bne.n	8017782 <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017726:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 801772a:	4b31      	ldr	r3, [pc, #196]	; (80177f0 <UTIL_SEQ_Run+0x128>)
 801772c:	681a      	ldr	r2, [r3, #0]
 801772e:	4b31      	ldr	r3, [pc, #196]	; (80177f4 <UTIL_SEQ_Run+0x12c>)
 8017730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017734:	4798      	blx	r3
    local_taskset = TaskSet;
 8017736:	4b29      	ldr	r3, [pc, #164]	; (80177dc <UTIL_SEQ_Run+0x114>)
 8017738:	6819      	ldr	r1, [r3, #0]
    local_evtset = EvtSet;
 801773a:	4b29      	ldr	r3, [pc, #164]	; (80177e0 <UTIL_SEQ_Run+0x118>)
 801773c:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 801773e:	4a29      	ldr	r2, [pc, #164]	; (80177e4 <UTIL_SEQ_Run+0x11c>)
 8017740:	6810      	ldr	r0, [r2, #0]
    local_evtwaited = EvtWaited;
 8017742:	4a29      	ldr	r2, [pc, #164]	; (80177e8 <UTIL_SEQ_Run+0x120>)
 8017744:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8017746:	4001      	ands	r1, r0
 8017748:	4d23      	ldr	r5, [pc, #140]	; (80177d8 <UTIL_SEQ_Run+0x110>)
 801774a:	682d      	ldr	r5, [r5, #0]
 801774c:	4229      	tst	r1, r5
 801774e:	d021      	beq.n	8017794 <UTIL_SEQ_Run+0xcc>
 8017750:	4013      	ands	r3, r2
 8017752:	d11f      	bne.n	8017794 <UTIL_SEQ_Run+0xcc>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8017754:	4a25      	ldr	r2, [pc, #148]	; (80177ec <UTIL_SEQ_Run+0x124>)
 8017756:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801775a:	4002      	ands	r2, r0
 801775c:	422a      	tst	r2, r5
 801775e:	d0c1      	beq.n	80176e4 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8017760:	4922      	ldr	r1, [pc, #136]	; (80177ec <UTIL_SEQ_Run+0x124>)
 8017762:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8017766:	4002      	ands	r2, r0
 8017768:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801776a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801776e:	6849      	ldr	r1, [r1, #4]
 8017770:	4211      	tst	r1, r2
 8017772:	d1b9      	bne.n	80176e8 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8017774:	491d      	ldr	r1, [pc, #116]	; (80177ec <UTIL_SEQ_Run+0x124>)
 8017776:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801777a:	f04f 30ff 	mov.w	r0, #4294967295
 801777e:	6048      	str	r0, [r1, #4]
 8017780:	e7b2      	b.n	80176e8 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8017782:	3b01      	subs	r3, #1
 8017784:	4919      	ldr	r1, [pc, #100]	; (80177ec <UTIL_SEQ_Run+0x124>)
 8017786:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 801778a:	ea0c 0202 	and.w	r2, ip, r2
 801778e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8017792:	e7c6      	b.n	8017722 <UTIL_SEQ_Run+0x5a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8017794:	4b16      	ldr	r3, [pc, #88]	; (80177f0 <UTIL_SEQ_Run+0x128>)
 8017796:	f04f 32ff 	mov.w	r2, #4294967295
 801779a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801779c:	f7ff ff74 	bl	8017688 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80177a0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80177a4:	b672      	cpsid	i
  local_taskset = TaskSet;
 80177a6:	4b0d      	ldr	r3, [pc, #52]	; (80177dc <UTIL_SEQ_Run+0x114>)
 80177a8:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 80177aa:	4a0d      	ldr	r2, [pc, #52]	; (80177e0 <UTIL_SEQ_Run+0x118>)
 80177ac:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 80177ae:	4a0d      	ldr	r2, [pc, #52]	; (80177e4 <UTIL_SEQ_Run+0x11c>)
 80177b0:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80177b2:	4013      	ands	r3, r2
 80177b4:	4a08      	ldr	r2, [pc, #32]	; (80177d8 <UTIL_SEQ_Run+0x110>)
 80177b6:	6812      	ldr	r2, [r2, #0]
 80177b8:	4213      	tst	r3, r2
 80177ba:	d103      	bne.n	80177c4 <UTIL_SEQ_Run+0xfc>
    if ((local_evtset & EvtWaited)== 0U)
 80177bc:	4b0a      	ldr	r3, [pc, #40]	; (80177e8 <UTIL_SEQ_Run+0x120>)
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	420b      	tst	r3, r1
 80177c2:	d006      	beq.n	80177d2 <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177c4:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 80177c8:	f7ff ff5f 	bl	801768a <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 80177cc:	4b02      	ldr	r3, [pc, #8]	; (80177d8 <UTIL_SEQ_Run+0x110>)
 80177ce:	601c      	str	r4, [r3, #0]
}
 80177d0:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 80177d2:	f7ea fa6b 	bl	8001cac <UTIL_SEQ_Idle>
 80177d6:	e7f5      	b.n	80177c4 <UTIL_SEQ_Run+0xfc>
 80177d8:	20000118 	.word	0x20000118
 80177dc:	20001994 	.word	0x20001994
 80177e0:	20001974 	.word	0x20001974
 80177e4:	2000011c 	.word	0x2000011c
 80177e8:	20001978 	.word	0x20001978
 80177ec:	2000198c 	.word	0x2000198c
 80177f0:	20001970 	.word	0x20001970
 80177f4:	2000197c 	.word	0x2000197c

080177f8 <UTIL_SEQ_RegTask>:
{
 80177f8:	b538      	push	{r3, r4, r5, lr}
 80177fa:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80177fc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8017800:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8017802:	f7ff ff43 	bl	801768c <SEQ_BitPosition>
 8017806:	4b03      	ldr	r3, [pc, #12]	; (8017814 <UTIL_SEQ_RegTask+0x1c>)
 8017808:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801780c:	f385 8810 	msr	PRIMASK, r5
}
 8017810:	bd38      	pop	{r3, r4, r5, pc}
 8017812:	bf00      	nop
 8017814:	2000197c 	.word	0x2000197c

08017818 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8017818:	b082      	sub	sp, #8
 801781a:	b082      	sub	sp, #8
 801781c:	f10d 0c08 	add.w	ip, sp, #8
 8017820:	e90c 0006 	stmdb	ip, {r1, r2}
 8017824:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8017826:	2200      	movs	r2, #0
 8017828:	6002      	str	r2, [r0, #0]
 801782a:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 801782c:	440b      	add	r3, r1
 801782e:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8017830:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8017834:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8017838:	440a      	add	r2, r1
 801783a:	b291      	uxth	r1, r2
 801783c:	b212      	sxth	r2, r2
 801783e:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8017840:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8017844:	db04      	blt.n	8017850 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8017846:	3301      	adds	r3, #1
 8017848:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 801784a:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 801784e:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8017850:	b002      	add	sp, #8
 8017852:	b002      	add	sp, #8
 8017854:	4770      	bx	lr

08017856 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8017856:	b082      	sub	sp, #8
 8017858:	b082      	sub	sp, #8
 801785a:	f10d 0c08 	add.w	ip, sp, #8
 801785e:	e90c 0006 	stmdb	ip, {r1, r2}
 8017862:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8017864:	2200      	movs	r2, #0
 8017866:	6002      	str	r2, [r0, #0]
 8017868:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801786a:	1acb      	subs	r3, r1, r3
 801786c:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801786e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8017872:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8017876:	1a52      	subs	r2, r2, r1
 8017878:	b291      	uxth	r1, r2
 801787a:	b212      	sxth	r2, r2
 801787c:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 801787e:	2a00      	cmp	r2, #0
 8017880:	db02      	blt.n	8017888 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8017882:	b002      	add	sp, #8
 8017884:	b002      	add	sp, #8
 8017886:	4770      	bx	lr
    c.Seconds--;
 8017888:	3b01      	subs	r3, #1
 801788a:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 801788c:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8017890:	8081      	strh	r1, [r0, #4]
  return c;
 8017892:	e7f6      	b.n	8017882 <SysTimeSub+0x2c>

08017894 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8017894:	b530      	push	{r4, r5, lr}
 8017896:	b089      	sub	sp, #36	; 0x24
 8017898:	ac02      	add	r4, sp, #8
 801789a:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801789e:	2300      	movs	r3, #0
 80178a0:	9304      	str	r3, [sp, #16]
 80178a2:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80178a6:	4d0b      	ldr	r5, [pc, #44]	; (80178d4 <SysTimeSet+0x40>)
 80178a8:	692b      	ldr	r3, [r5, #16]
 80178aa:	a805      	add	r0, sp, #20
 80178ac:	4798      	blx	r3
 80178ae:	4603      	mov	r3, r0
 80178b0:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 80178b2:	9a05      	ldr	r2, [sp, #20]
 80178b4:	9200      	str	r2, [sp, #0]
 80178b6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80178ba:	a806      	add	r0, sp, #24
 80178bc:	f7ff ffcb 	bl	8017856 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 80178c0:	682b      	ldr	r3, [r5, #0]
 80178c2:	9806      	ldr	r0, [sp, #24]
 80178c4:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 80178c6:	68ab      	ldr	r3, [r5, #8]
 80178c8:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80178cc:	4798      	blx	r3
}
 80178ce:	b009      	add	sp, #36	; 0x24
 80178d0:	bd30      	pop	{r4, r5, pc}
 80178d2:	bf00      	nop
 80178d4:	0801b2c0 	.word	0x0801b2c0

080178d8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 80178d8:	b530      	push	{r4, r5, lr}
 80178da:	b087      	sub	sp, #28
 80178dc:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80178de:	2300      	movs	r3, #0
 80178e0:	9304      	str	r3, [sp, #16]
 80178e2:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 80178e6:	6003      	str	r3, [r0, #0]
 80178e8:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80178ea:	4d0b      	ldr	r5, [pc, #44]	; (8017918 <SysTimeGet+0x40>)
 80178ec:	692b      	ldr	r3, [r5, #16]
 80178ee:	a805      	add	r0, sp, #20
 80178f0:	4798      	blx	r3
 80178f2:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80178f4:	68eb      	ldr	r3, [r5, #12]
 80178f6:	4798      	blx	r3
 80178f8:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80178fc:	686b      	ldr	r3, [r5, #4]
 80178fe:	4798      	blx	r3
 8017900:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8017902:	9b05      	ldr	r3, [sp, #20]
 8017904:	9300      	str	r3, [sp, #0]
 8017906:	9b04      	ldr	r3, [sp, #16]
 8017908:	aa02      	add	r2, sp, #8
 801790a:	ca06      	ldmia	r2, {r1, r2}
 801790c:	4620      	mov	r0, r4
 801790e:	f7ff ff83 	bl	8017818 <SysTimeAdd>

  return sysTime;
}
 8017912:	4620      	mov	r0, r4
 8017914:	b007      	add	sp, #28
 8017916:	bd30      	pop	{r4, r5, pc}
 8017918:	0801b2c0 	.word	0x0801b2c0

0801791c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801791c:	b530      	push	{r4, r5, lr}
 801791e:	b083      	sub	sp, #12
 8017920:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8017922:	2300      	movs	r3, #0
 8017924:	9300      	str	r3, [sp, #0]
 8017926:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801792a:	4b06      	ldr	r3, [pc, #24]	; (8017944 <SysTimeGetMcuTime+0x28>)
 801792c:	691b      	ldr	r3, [r3, #16]
 801792e:	466d      	mov	r5, sp
 8017930:	a801      	add	r0, sp, #4
 8017932:	4798      	blx	r3
 8017934:	9000      	str	r0, [sp, #0]

  return calendarTime;
 8017936:	e895 0003 	ldmia.w	r5, {r0, r1}
 801793a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 801793e:	4620      	mov	r0, r4
 8017940:	b003      	add	sp, #12
 8017942:	bd30      	pop	{r4, r5, pc}
 8017944:	0801b2c0 	.word	0x0801b2c0

08017948 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8017948:	b530      	push	{r4, r5, lr}
 801794a:	b089      	sub	sp, #36	; 0x24
 801794c:	ac02      	add	r4, sp, #8
 801794e:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8017952:	4d0c      	ldr	r5, [pc, #48]	; (8017984 <SysTimeToMs+0x3c>)
 8017954:	68eb      	ldr	r3, [r5, #12]
 8017956:	4798      	blx	r3
 8017958:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801795c:	686b      	ldr	r3, [r5, #4]
 801795e:	4798      	blx	r3
 8017960:	4603      	mov	r3, r0
 8017962:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8017964:	9a07      	ldr	r2, [sp, #28]
 8017966:	9200      	str	r2, [sp, #0]
 8017968:	e894 0006 	ldmia.w	r4, {r1, r2}
 801796c:	a804      	add	r0, sp, #16
 801796e:	f7ff ff72 	bl	8017856 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8017972:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8017976:	9a04      	ldr	r2, [sp, #16]
 8017978:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801797c:	fb00 3002 	mla	r0, r0, r2, r3
 8017980:	b009      	add	sp, #36	; 0x24
 8017982:	bd30      	pop	{r4, r5, pc}
 8017984:	0801b2c0 	.word	0x0801b2c0

08017988 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8017988:	b530      	push	{r4, r5, lr}
 801798a:	b087      	sub	sp, #28
 801798c:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 801798e:	4b12      	ldr	r3, [pc, #72]	; (80179d8 <SysTimeFromMs+0x50>)
 8017990:	fba3 2301 	umull	r2, r3, r3, r1
 8017994:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8017996:	9304      	str	r3, [sp, #16]
 8017998:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 801799c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80179a0:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 80179a4:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 80179a8:	2300      	movs	r3, #0
 80179aa:	9302      	str	r3, [sp, #8]
 80179ac:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80179ae:	4d0b      	ldr	r5, [pc, #44]	; (80179dc <SysTimeFromMs+0x54>)
 80179b0:	68eb      	ldr	r3, [r5, #12]
 80179b2:	4798      	blx	r3
 80179b4:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80179b8:	686b      	ldr	r3, [r5, #4]
 80179ba:	4798      	blx	r3
 80179bc:	4603      	mov	r3, r0
 80179be:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 80179c0:	9a03      	ldr	r2, [sp, #12]
 80179c2:	9200      	str	r2, [sp, #0]
 80179c4:	aa06      	add	r2, sp, #24
 80179c6:	e912 0006 	ldmdb	r2, {r1, r2}
 80179ca:	4620      	mov	r0, r4
 80179cc:	f7ff ff24 	bl	8017818 <SysTimeAdd>
}
 80179d0:	4620      	mov	r0, r4
 80179d2:	b007      	add	sp, #28
 80179d4:	bd30      	pop	{r4, r5, pc}
 80179d6:	bf00      	nop
 80179d8:	10624dd3 	.word	0x10624dd3
 80179dc:	0801b2c0 	.word	0x0801b2c0

080179e0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80179e0:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80179e2:	4b03      	ldr	r3, [pc, #12]	; (80179f0 <UTIL_TIMER_Init+0x10>)
 80179e4:	2200      	movs	r2, #0
 80179e6:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80179e8:	4b02      	ldr	r3, [pc, #8]	; (80179f4 <UTIL_TIMER_Init+0x14>)
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	4798      	blx	r3
}
 80179ee:	bd08      	pop	{r3, pc}
 80179f0:	20001998 	.word	0x20001998
 80179f4:	0801b2d4 	.word	0x0801b2d4

080179f8 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 80179f8:	b1a8      	cbz	r0, 8017a26 <UTIL_TIMER_Create+0x2e>
{
 80179fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179fc:	4617      	mov	r7, r2
 80179fe:	461e      	mov	r6, r3
 8017a00:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8017a02:	b193      	cbz	r3, 8017a2a <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8017a04:	2500      	movs	r5, #0
 8017a06:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8017a08:	4b09      	ldr	r3, [pc, #36]	; (8017a30 <UTIL_TIMER_Create+0x38>)
 8017a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a0c:	4608      	mov	r0, r1
 8017a0e:	4798      	blx	r3
 8017a10:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8017a12:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8017a14:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8017a16:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8017a18:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8017a1a:	9b06      	ldr	r3, [sp, #24]
 8017a1c:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8017a1e:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8017a20:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8017a22:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8017a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8017a26:	2001      	movs	r0, #1
}
 8017a28:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8017a2a:	2001      	movs	r0, #1
 8017a2c:	e7fa      	b.n	8017a24 <UTIL_TIMER_Create+0x2c>
 8017a2e:	bf00      	nop
 8017a30:	0801b2d4 	.word	0x0801b2d4

08017a34 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8017a34:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8017a36:	4c03      	ldr	r4, [pc, #12]	; (8017a44 <UTIL_TIMER_GetCurrentTime+0x10>)
 8017a38:	69e3      	ldr	r3, [r4, #28]
 8017a3a:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8017a3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017a3e:	4798      	blx	r3
}
 8017a40:	bd10      	pop	{r4, pc}
 8017a42:	bf00      	nop
 8017a44:	0801b2d4 	.word	0x0801b2d4

08017a48 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8017a48:	b570      	push	{r4, r5, r6, lr}
 8017a4a:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8017a4c:	4d05      	ldr	r5, [pc, #20]	; (8017a64 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8017a4e:	69eb      	ldr	r3, [r5, #28]
 8017a50:	4798      	blx	r3
 8017a52:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8017a54:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017a56:	4630      	mov	r0, r6
 8017a58:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8017a5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8017a5c:	1a20      	subs	r0, r4, r0
 8017a5e:	4798      	blx	r3
}
 8017a60:	bd70      	pop	{r4, r5, r6, pc}
 8017a62:	bf00      	nop
 8017a64:	0801b2d4 	.word	0x0801b2d4

08017a68 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8017a68:	4b05      	ldr	r3, [pc, #20]	; (8017a80 <TimerExists+0x18>)
 8017a6a:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8017a6c:	e000      	b.n	8017a70 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8017a6e:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8017a70:	b11b      	cbz	r3, 8017a7a <TimerExists+0x12>
    if( cur == TimerObject )
 8017a72:	4283      	cmp	r3, r0
 8017a74:	d1fb      	bne.n	8017a6e <TimerExists+0x6>
      return true;
 8017a76:	2001      	movs	r0, #1
  }
  return false;
}
 8017a78:	4770      	bx	lr
  return false;
 8017a7a:	2000      	movs	r0, #0
 8017a7c:	4770      	bx	lr
 8017a7e:	bf00      	nop
 8017a80:	20001998 	.word	0x20001998

08017a84 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8017a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a86:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8017a88:	4e09      	ldr	r6, [pc, #36]	; (8017ab0 <TimerSetTimeout+0x2c>)
 8017a8a:	6a33      	ldr	r3, [r6, #32]
 8017a8c:	4798      	blx	r3
 8017a8e:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8017a90:	2301      	movs	r3, #1
 8017a92:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8017a94:	6827      	ldr	r7, [r4, #0]
 8017a96:	69b6      	ldr	r6, [r6, #24]
 8017a98:	47b0      	blx	r6
 8017a9a:	4428      	add	r0, r5
 8017a9c:	4287      	cmp	r7, r0
 8017a9e:	d202      	bcs.n	8017aa6 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8017aa0:	47b0      	blx	r6
 8017aa2:	4405      	add	r5, r0
 8017aa4:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8017aa6:	4b02      	ldr	r3, [pc, #8]	; (8017ab0 <TimerSetTimeout+0x2c>)
 8017aa8:	689b      	ldr	r3, [r3, #8]
 8017aaa:	6820      	ldr	r0, [r4, #0]
 8017aac:	4798      	blx	r3
}
 8017aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ab0:	0801b2d4 	.word	0x0801b2d4

08017ab4 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8017ab4:	b368      	cbz	r0, 8017b12 <UTIL_TIMER_Stop+0x5e>
{
 8017ab6:	b510      	push	{r4, lr}
 8017ab8:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017aba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8017abe:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8017ac0:	4b15      	ldr	r3, [pc, #84]	; (8017b18 <UTIL_TIMER_Stop+0x64>)
 8017ac2:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8017ac4:	2301      	movs	r3, #1
 8017ac6:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8017ac8:	b1e1      	cbz	r1, 8017b04 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8017aca:	2300      	movs	r3, #0
 8017acc:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8017ace:	4288      	cmp	r0, r1
 8017ad0:	d006      	beq.n	8017ae0 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8017ad2:	460b      	mov	r3, r1
        while( cur != NULL )
 8017ad4:	b1b3      	cbz	r3, 8017b04 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8017ad6:	4293      	cmp	r3, r2
 8017ad8:	d011      	beq.n	8017afe <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8017ada:	4619      	mov	r1, r3
            cur = cur->Next;
 8017adc:	695b      	ldr	r3, [r3, #20]
 8017ade:	e7f9      	b.n	8017ad4 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8017ae0:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8017ae2:	6948      	ldr	r0, [r1, #20]
 8017ae4:	b120      	cbz	r0, 8017af0 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8017ae6:	4b0c      	ldr	r3, [pc, #48]	; (8017b18 <UTIL_TIMER_Stop+0x64>)
 8017ae8:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8017aea:	f7ff ffcb 	bl	8017a84 <TimerSetTimeout>
 8017aee:	e009      	b.n	8017b04 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8017af0:	4b0a      	ldr	r3, [pc, #40]	; (8017b1c <UTIL_TIMER_Stop+0x68>)
 8017af2:	68db      	ldr	r3, [r3, #12]
 8017af4:	4798      	blx	r3
            TimerListHead = NULL;
 8017af6:	4b08      	ldr	r3, [pc, #32]	; (8017b18 <UTIL_TIMER_Stop+0x64>)
 8017af8:	2200      	movs	r2, #0
 8017afa:	601a      	str	r2, [r3, #0]
 8017afc:	e002      	b.n	8017b04 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8017afe:	695b      	ldr	r3, [r3, #20]
 8017b00:	b123      	cbz	r3, 8017b0c <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8017b02:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b04:	f384 8810 	msr	PRIMASK, r4
}
 8017b08:	2000      	movs	r0, #0
}
 8017b0a:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	614b      	str	r3, [r1, #20]
 8017b10:	e7f8      	b.n	8017b04 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8017b12:	2001      	movs	r0, #1
}
 8017b14:	4770      	bx	lr
 8017b16:	bf00      	nop
 8017b18:	20001998 	.word	0x20001998
 8017b1c:	0801b2d4 	.word	0x0801b2d4

08017b20 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8017b20:	4b09      	ldr	r3, [pc, #36]	; (8017b48 <TimerInsertTimer+0x28>)
 8017b22:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8017b24:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8017b26:	e001      	b.n	8017b2c <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8017b28:	461a      	mov	r2, r3
        next = next->Next;
 8017b2a:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8017b2c:	6951      	ldr	r1, [r2, #20]
 8017b2e:	b139      	cbz	r1, 8017b40 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8017b30:	6819      	ldr	r1, [r3, #0]
 8017b32:	f8d0 c000 	ldr.w	ip, [r0]
 8017b36:	458c      	cmp	ip, r1
 8017b38:	d8f6      	bhi.n	8017b28 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8017b3a:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8017b3c:	6143      	str	r3, [r0, #20]
        return;
 8017b3e:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8017b40:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8017b42:	2300      	movs	r3, #0
 8017b44:	6143      	str	r3, [r0, #20]
}
 8017b46:	4770      	bx	lr
 8017b48:	20001998 	.word	0x20001998

08017b4c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8017b4c:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8017b4e:	4b05      	ldr	r3, [pc, #20]	; (8017b64 <TimerInsertNewHeadTimer+0x18>)
 8017b50:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8017b52:	b10b      	cbz	r3, 8017b58 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8017b54:	2200      	movs	r2, #0
 8017b56:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8017b58:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8017b5a:	4b02      	ldr	r3, [pc, #8]	; (8017b64 <TimerInsertNewHeadTimer+0x18>)
 8017b5c:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8017b5e:	f7ff ff91 	bl	8017a84 <TimerSetTimeout>
}
 8017b62:	bd08      	pop	{r3, pc}
 8017b64:	20001998 	.word	0x20001998

08017b68 <UTIL_TIMER_Start>:
{
 8017b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8017b6a:	2800      	cmp	r0, #0
 8017b6c:	d036      	beq.n	8017bdc <UTIL_TIMER_Start+0x74>
 8017b6e:	4604      	mov	r4, r0
 8017b70:	f7ff ff7a 	bl	8017a68 <TimerExists>
 8017b74:	2800      	cmp	r0, #0
 8017b76:	d134      	bne.n	8017be2 <UTIL_TIMER_Start+0x7a>
 8017b78:	7a65      	ldrb	r5, [r4, #9]
 8017b7a:	2d00      	cmp	r5, #0
 8017b7c:	d133      	bne.n	8017be6 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b7e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8017b82:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8017b84:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8017b86:	4b19      	ldr	r3, [pc, #100]	; (8017bec <UTIL_TIMER_Start+0x84>)
 8017b88:	6a1b      	ldr	r3, [r3, #32]
 8017b8a:	4798      	blx	r3
    if( ticks < minValue )
 8017b8c:	4287      	cmp	r7, r0
 8017b8e:	d300      	bcc.n	8017b92 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8017b90:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8017b92:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8017b94:	2300      	movs	r3, #0
 8017b96:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8017b98:	2201      	movs	r2, #1
 8017b9a:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8017b9c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8017b9e:	4b14      	ldr	r3, [pc, #80]	; (8017bf0 <UTIL_TIMER_Start+0x88>)
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	b183      	cbz	r3, 8017bc6 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8017ba4:	4b11      	ldr	r3, [pc, #68]	; (8017bec <UTIL_TIMER_Start+0x84>)
 8017ba6:	699b      	ldr	r3, [r3, #24]
 8017ba8:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8017baa:	6823      	ldr	r3, [r4, #0]
 8017bac:	4418      	add	r0, r3
 8017bae:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8017bb0:	4b0f      	ldr	r3, [pc, #60]	; (8017bf0 <UTIL_TIMER_Start+0x88>)
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	4298      	cmp	r0, r3
 8017bb8:	d20c      	bcs.n	8017bd4 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8017bba:	4620      	mov	r0, r4
 8017bbc:	f7ff ffc6 	bl	8017b4c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bc0:	f386 8810 	msr	PRIMASK, r6
}
 8017bc4:	e00b      	b.n	8017bde <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8017bc6:	4b09      	ldr	r3, [pc, #36]	; (8017bec <UTIL_TIMER_Start+0x84>)
 8017bc8:	691b      	ldr	r3, [r3, #16]
 8017bca:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8017bcc:	4620      	mov	r0, r4
 8017bce:	f7ff ffbd 	bl	8017b4c <TimerInsertNewHeadTimer>
 8017bd2:	e7f5      	b.n	8017bc0 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8017bd4:	4620      	mov	r0, r4
 8017bd6:	f7ff ffa3 	bl	8017b20 <TimerInsertTimer>
 8017bda:	e7f1      	b.n	8017bc0 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8017bdc:	2501      	movs	r5, #1
}
 8017bde:	4628      	mov	r0, r5
 8017be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8017be2:	2501      	movs	r5, #1
 8017be4:	e7fb      	b.n	8017bde <UTIL_TIMER_Start+0x76>
 8017be6:	2501      	movs	r5, #1
 8017be8:	e7f9      	b.n	8017bde <UTIL_TIMER_Start+0x76>
 8017bea:	bf00      	nop
 8017bec:	0801b2d4 	.word	0x0801b2d4
 8017bf0:	20001998 	.word	0x20001998

08017bf4 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8017bf4:	b198      	cbz	r0, 8017c1e <UTIL_TIMER_SetPeriod+0x2a>
{
 8017bf6:	b510      	push	{r4, lr}
 8017bf8:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8017bfa:	4b0a      	ldr	r3, [pc, #40]	; (8017c24 <UTIL_TIMER_SetPeriod+0x30>)
 8017bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bfe:	4608      	mov	r0, r1
 8017c00:	4798      	blx	r3
 8017c02:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8017c04:	4620      	mov	r0, r4
 8017c06:	f7ff ff2f 	bl	8017a68 <TimerExists>
 8017c0a:	b908      	cbnz	r0, 8017c10 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8017c0c:	2000      	movs	r0, #0
}
 8017c0e:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8017c10:	4620      	mov	r0, r4
 8017c12:	f7ff ff4f 	bl	8017ab4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8017c16:	4620      	mov	r0, r4
 8017c18:	f7ff ffa6 	bl	8017b68 <UTIL_TIMER_Start>
 8017c1c:	e7f7      	b.n	8017c0e <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8017c1e:	2001      	movs	r0, #1
}
 8017c20:	4770      	bx	lr
 8017c22:	bf00      	nop
 8017c24:	0801b2d4 	.word	0x0801b2d4

08017c28 <UTIL_TIMER_IRQ_Handler>:
{
 8017c28:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017c2a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8017c2e:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8017c30:	4c1e      	ldr	r4, [pc, #120]	; (8017cac <UTIL_TIMER_IRQ_Handler+0x84>)
 8017c32:	6963      	ldr	r3, [r4, #20]
 8017c34:	4798      	blx	r3
 8017c36:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8017c38:	6923      	ldr	r3, [r4, #16]
 8017c3a:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8017c3c:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8017c3e:	4b1c      	ldr	r3, [pc, #112]	; (8017cb0 <UTIL_TIMER_IRQ_Handler+0x88>)
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	b923      	cbnz	r3, 8017c4e <UTIL_TIMER_IRQ_Handler+0x26>
 8017c44:	e018      	b.n	8017c78 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8017c46:	2200      	movs	r2, #0
 8017c48:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8017c4a:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8017c4c:	b1a3      	cbz	r3, 8017c78 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8017c4e:	681a      	ldr	r2, [r3, #0]
 8017c50:	42a2      	cmp	r2, r4
 8017c52:	d9f8      	bls.n	8017c46 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8017c54:	1a31      	subs	r1, r6, r0
 8017c56:	440a      	add	r2, r1
 8017c58:	601a      	str	r2, [r3, #0]
 8017c5a:	e7f6      	b.n	8017c4a <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8017c5c:	4b14      	ldr	r3, [pc, #80]	; (8017cb0 <UTIL_TIMER_IRQ_Handler+0x88>)
 8017c5e:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8017c60:	6962      	ldr	r2, [r4, #20]
 8017c62:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8017c64:	2300      	movs	r3, #0
 8017c66:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8017c68:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8017c6a:	68e3      	ldr	r3, [r4, #12]
 8017c6c:	6920      	ldr	r0, [r4, #16]
 8017c6e:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8017c70:	8963      	ldrh	r3, [r4, #10]
 8017c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017c76:	d012      	beq.n	8017c9e <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8017c78:	4b0d      	ldr	r3, [pc, #52]	; (8017cb0 <UTIL_TIMER_IRQ_Handler+0x88>)
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	b13b      	cbz	r3, 8017c8e <UTIL_TIMER_IRQ_Handler+0x66>
 8017c7e:	681c      	ldr	r4, [r3, #0]
 8017c80:	2c00      	cmp	r4, #0
 8017c82:	d0eb      	beq.n	8017c5c <UTIL_TIMER_IRQ_Handler+0x34>
 8017c84:	4b09      	ldr	r3, [pc, #36]	; (8017cac <UTIL_TIMER_IRQ_Handler+0x84>)
 8017c86:	699b      	ldr	r3, [r3, #24]
 8017c88:	4798      	blx	r3
 8017c8a:	4284      	cmp	r4, r0
 8017c8c:	d3e6      	bcc.n	8017c5c <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8017c8e:	4b08      	ldr	r3, [pc, #32]	; (8017cb0 <UTIL_TIMER_IRQ_Handler+0x88>)
 8017c90:	6818      	ldr	r0, [r3, #0]
 8017c92:	b108      	cbz	r0, 8017c98 <UTIL_TIMER_IRQ_Handler+0x70>
 8017c94:	7a03      	ldrb	r3, [r0, #8]
 8017c96:	b133      	cbz	r3, 8017ca6 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c98:	f385 8810 	msr	PRIMASK, r5
}
 8017c9c:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8017c9e:	4620      	mov	r0, r4
 8017ca0:	f7ff ff62 	bl	8017b68 <UTIL_TIMER_Start>
 8017ca4:	e7e8      	b.n	8017c78 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8017ca6:	f7ff feed 	bl	8017a84 <TimerSetTimeout>
 8017caa:	e7f5      	b.n	8017c98 <UTIL_TIMER_IRQ_Handler+0x70>
 8017cac:	0801b2d4 	.word	0x0801b2d4
 8017cb0:	20001998 	.word	0x20001998

08017cb4 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8017cb4:	4601      	mov	r1, r0
  int i = 0;
 8017cb6:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8017cb8:	e007      	b.n	8017cca <ee_skip_atoi+0x16>
 8017cba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017cbe:	1c53      	adds	r3, r2, #1
 8017cc0:	600b      	str	r3, [r1, #0]
 8017cc2:	7813      	ldrb	r3, [r2, #0]
 8017cc4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8017cc8:	3830      	subs	r0, #48	; 0x30
 8017cca:	680a      	ldr	r2, [r1, #0]
 8017ccc:	7813      	ldrb	r3, [r2, #0]
 8017cce:	3b30      	subs	r3, #48	; 0x30
 8017cd0:	b2db      	uxtb	r3, r3
 8017cd2:	2b09      	cmp	r3, #9
 8017cd4:	d9f1      	bls.n	8017cba <ee_skip_atoi+0x6>
  return i;
}
 8017cd6:	4770      	bx	lr

08017cd8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8017cd8:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8017cdc:	b093      	sub	sp, #76	; 0x4c
 8017cde:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8017ce0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8017ce2:	f016 0f40 	tst.w	r6, #64	; 0x40
 8017ce6:	d110      	bne.n	8017d0a <ee_number+0x32>
  char *dig = lower_digits;
 8017ce8:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8017de4 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8017cec:	1e9f      	subs	r7, r3, #2
 8017cee:	2f22      	cmp	r7, #34	; 0x22
 8017cf0:	d875      	bhi.n	8017dde <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8017cf2:	f016 0401 	ands.w	r4, r6, #1
 8017cf6:	d00b      	beq.n	8017d10 <ee_number+0x38>
 8017cf8:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8017cfc:	f016 0f02 	tst.w	r6, #2
 8017d00:	d00f      	beq.n	8017d22 <ee_number+0x4a>
  {
    if (num < 0)
 8017d02:	2a00      	cmp	r2, #0
 8017d04:	db07      	blt.n	8017d16 <ee_number+0x3e>
  sign = 0;
 8017d06:	2700      	movs	r7, #0
 8017d08:	e00c      	b.n	8017d24 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8017d0a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8017de8 <ee_number+0x110>
 8017d0e:	e7ed      	b.n	8017cec <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8017d10:	f04f 0e20 	mov.w	lr, #32
 8017d14:	e7f2      	b.n	8017cfc <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8017d16:	4252      	negs	r2, r2
      size--;
 8017d18:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8017d1a:	3e01      	subs	r6, #1
 8017d1c:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8017d1e:	272d      	movs	r7, #45	; 0x2d
 8017d20:	e000      	b.n	8017d24 <ee_number+0x4c>
  sign = 0;
 8017d22:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8017d24:	bb5a      	cbnz	r2, 8017d7e <ee_number+0xa6>
    tmp[i++] = '0';
 8017d26:	2330      	movs	r3, #48	; 0x30
 8017d28:	f88d 3004 	strb.w	r3, [sp, #4]
 8017d2c:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8017d30:	45ac      	cmp	ip, r5
 8017d32:	dd00      	ble.n	8017d36 <ee_number+0x5e>
 8017d34:	4665      	mov	r5, ip
  size -= precision;
 8017d36:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017d38:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8017d3a:	b31c      	cbz	r4, 8017d84 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8017d3c:	b11f      	cbz	r7, 8017d46 <ee_number+0x6e>
 8017d3e:	f800 7b01 	strb.w	r7, [r0], #1
 8017d42:	3901      	subs	r1, #1
 8017d44:	d007      	beq.n	8017d56 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	f103 33ff 	add.w	r3, r3, #4294967295
 8017d4c:	dd24      	ble.n	8017d98 <ee_number+0xc0>
 8017d4e:	f800 eb01 	strb.w	lr, [r0], #1
 8017d52:	3901      	subs	r1, #1
 8017d54:	d1f7      	bne.n	8017d46 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8017d56:	b013      	add	sp, #76	; 0x4c
 8017d58:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8017d5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8017d60:	fb03 2216 	mls	r2, r3, r6, r2
 8017d64:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8017d68:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8017d6c:	446a      	add	r2, sp
 8017d6e:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8017d72:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8017d74:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8017d78:	2a00      	cmp	r2, #0
 8017d7a:	d1ef      	bne.n	8017d5c <ee_number+0x84>
 8017d7c:	e7d8      	b.n	8017d30 <ee_number+0x58>
  i = 0;
 8017d7e:	f04f 0c00 	mov.w	ip, #0
 8017d82:	e7f9      	b.n	8017d78 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	f103 33ff 	add.w	r3, r3, #4294967295
 8017d8a:	ddd7      	ble.n	8017d3c <ee_number+0x64>
 8017d8c:	2220      	movs	r2, #32
 8017d8e:	f800 2b01 	strb.w	r2, [r0], #1
 8017d92:	3901      	subs	r1, #1
 8017d94:	d1f6      	bne.n	8017d84 <ee_number+0xac>
 8017d96:	e7de      	b.n	8017d56 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8017d98:	4565      	cmp	r5, ip
 8017d9a:	f105 35ff 	add.w	r5, r5, #4294967295
 8017d9e:	dd05      	ble.n	8017dac <ee_number+0xd4>
 8017da0:	2230      	movs	r2, #48	; 0x30
 8017da2:	f800 2b01 	strb.w	r2, [r0], #1
 8017da6:	3901      	subs	r1, #1
 8017da8:	d1f6      	bne.n	8017d98 <ee_number+0xc0>
 8017daa:	e7d4      	b.n	8017d56 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8017dac:	4662      	mov	r2, ip
 8017dae:	2a00      	cmp	r2, #0
 8017db0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017db4:	dd09      	ble.n	8017dca <ee_number+0xf2>
 8017db6:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8017dba:	446a      	add	r2, sp
 8017dbc:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8017dc0:	f800 2b01 	strb.w	r2, [r0], #1
 8017dc4:	3901      	subs	r1, #1
 8017dc6:	d1f1      	bne.n	8017dac <ee_number+0xd4>
 8017dc8:	e7c5      	b.n	8017d56 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	f103 33ff 	add.w	r3, r3, #4294967295
 8017dd0:	ddc1      	ble.n	8017d56 <ee_number+0x7e>
 8017dd2:	2220      	movs	r2, #32
 8017dd4:	f800 2b01 	strb.w	r2, [r0], #1
 8017dd8:	3901      	subs	r1, #1
 8017dda:	d1f6      	bne.n	8017dca <ee_number+0xf2>
 8017ddc:	e7bb      	b.n	8017d56 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8017dde:	2000      	movs	r0, #0
 8017de0:	e7b9      	b.n	8017d56 <ee_number+0x7e>
 8017de2:	bf00      	nop
 8017de4:	0801c50c 	.word	0x0801c50c
 8017de8:	0801c4e4 	.word	0x0801c4e4

08017dec <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8017dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017df0:	b087      	sub	sp, #28
 8017df2:	9205      	str	r2, [sp, #20]
 8017df4:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8017df6:	1e0f      	subs	r7, r1, #0
 8017df8:	f340 80b8 	ble.w	8017f6c <tiny_vsnprintf_like+0x180>
 8017dfc:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8017dfe:	4604      	mov	r4, r0
 8017e00:	e004      	b.n	8017e0c <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8017e02:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8017e06:	9b05      	ldr	r3, [sp, #20]
 8017e08:	3301      	adds	r3, #1
 8017e0a:	9305      	str	r3, [sp, #20]
 8017e0c:	9905      	ldr	r1, [sp, #20]
 8017e0e:	780a      	ldrb	r2, [r1, #0]
 8017e10:	b922      	cbnz	r2, 8017e1c <tiny_vsnprintf_like+0x30>
 8017e12:	1ba3      	subs	r3, r4, r6
 8017e14:	1e78      	subs	r0, r7, #1
 8017e16:	4283      	cmp	r3, r0
 8017e18:	f2c0 80a2 	blt.w	8017f60 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8017e1c:	1ba3      	subs	r3, r4, r6
 8017e1e:	f107 38ff 	add.w	r8, r7, #4294967295
 8017e22:	4543      	cmp	r3, r8
 8017e24:	f280 809c 	bge.w	8017f60 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8017e28:	2a25      	cmp	r2, #37	; 0x25
 8017e2a:	d1ea      	bne.n	8017e02 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8017e2c:	1c4b      	adds	r3, r1, #1
 8017e2e:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8017e30:	784b      	ldrb	r3, [r1, #1]
 8017e32:	2b30      	cmp	r3, #48	; 0x30
 8017e34:	d020      	beq.n	8017e78 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8017e36:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8017e3a:	3b30      	subs	r3, #48	; 0x30
 8017e3c:	b2db      	uxtb	r3, r3
 8017e3e:	2b09      	cmp	r3, #9
 8017e40:	d91d      	bls.n	8017e7e <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8017e42:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8017e46:	9b05      	ldr	r3, [sp, #20]
 8017e48:	781a      	ldrb	r2, [r3, #0]
 8017e4a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8017e4e:	2b20      	cmp	r3, #32
 8017e50:	d867      	bhi.n	8017f22 <tiny_vsnprintf_like+0x136>
 8017e52:	e8df f003 	tbb	[pc, r3]
 8017e56:	664a      	.short	0x664a
 8017e58:	66666666 	.word	0x66666666
 8017e5c:	66666666 	.word	0x66666666
 8017e60:	66621e66 	.word	0x66621e66
 8017e64:	62666666 	.word	0x62666666
 8017e68:	66666666 	.word	0x66666666
 8017e6c:	66666666 	.word	0x66666666
 8017e70:	19662866 	.word	0x19662866
 8017e74:	6666      	.short	0x6666
 8017e76:	7c          	.byte	0x7c
 8017e77:	00          	.byte	0x00
      flags |= ZEROPAD;
 8017e78:	f04f 0901 	mov.w	r9, #1
 8017e7c:	e7dd      	b.n	8017e3a <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8017e7e:	a805      	add	r0, sp, #20
 8017e80:	f7ff ff18 	bl	8017cb4 <ee_skip_atoi>
 8017e84:	4605      	mov	r5, r0
 8017e86:	e7de      	b.n	8017e46 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8017e88:	230a      	movs	r3, #10
 8017e8a:	e031      	b.n	8017ef0 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8017e8c:	2320      	movs	r3, #32
 8017e8e:	f804 3b01 	strb.w	r3, [r4], #1
 8017e92:	3d01      	subs	r5, #1
 8017e94:	2d00      	cmp	r5, #0
 8017e96:	dcf9      	bgt.n	8017e8c <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8017e98:	9b04      	ldr	r3, [sp, #16]
 8017e9a:	1d1a      	adds	r2, r3, #4
 8017e9c:	9204      	str	r2, [sp, #16]
 8017e9e:	781b      	ldrb	r3, [r3, #0]
 8017ea0:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8017ea4:	e7af      	b.n	8017e06 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8017ea6:	9b04      	ldr	r3, [sp, #16]
 8017ea8:	1d1a      	adds	r2, r3, #4
 8017eaa:	9204      	str	r2, [sp, #16]
 8017eac:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8017eb0:	f1b8 0f00 	cmp.w	r8, #0
 8017eb4:	d003      	beq.n	8017ebe <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8017eb6:	4640      	mov	r0, r8
 8017eb8:	f7e8 f9b2 	bl	8000220 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8017ebc:	e006      	b.n	8017ecc <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8017ebe:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8017f70 <tiny_vsnprintf_like+0x184>
 8017ec2:	e7f8      	b.n	8017eb6 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8017ec4:	2220      	movs	r2, #32
 8017ec6:	f804 2b01 	strb.w	r2, [r4], #1
 8017eca:	461d      	mov	r5, r3
 8017ecc:	1e6b      	subs	r3, r5, #1
 8017ece:	4285      	cmp	r5, r0
 8017ed0:	dcf8      	bgt.n	8017ec4 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	e006      	b.n	8017ee4 <tiny_vsnprintf_like+0xf8>
 8017ed6:	4643      	mov	r3, r8
 8017ed8:	f813 1b01 	ldrb.w	r1, [r3], #1
 8017edc:	f804 1b01 	strb.w	r1, [r4], #1
 8017ee0:	3201      	adds	r2, #1
 8017ee2:	4698      	mov	r8, r3
 8017ee4:	4282      	cmp	r2, r0
 8017ee6:	dbf6      	blt.n	8017ed6 <tiny_vsnprintf_like+0xea>
 8017ee8:	e78d      	b.n	8017e06 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8017eea:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8017eee:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8017ef0:	f019 0f02 	tst.w	r9, #2
 8017ef4:	d02f      	beq.n	8017f56 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8017ef6:	9a04      	ldr	r2, [sp, #16]
 8017ef8:	1d11      	adds	r1, r2, #4
 8017efa:	9104      	str	r1, [sp, #16]
 8017efc:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8017efe:	1ba1      	subs	r1, r4, r6
 8017f00:	f8cd 9008 	str.w	r9, [sp, #8]
 8017f04:	f04f 30ff 	mov.w	r0, #4294967295
 8017f08:	9001      	str	r0, [sp, #4]
 8017f0a:	9500      	str	r5, [sp, #0]
 8017f0c:	eba8 0101 	sub.w	r1, r8, r1
 8017f10:	4620      	mov	r0, r4
 8017f12:	f7ff fee1 	bl	8017cd8 <ee_number>
 8017f16:	4604      	mov	r4, r0
 8017f18:	e775      	b.n	8017e06 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8017f1a:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8017f1e:	230a      	movs	r3, #10
 8017f20:	e7e6      	b.n	8017ef0 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8017f22:	2a25      	cmp	r2, #37	; 0x25
 8017f24:	d002      	beq.n	8017f2c <tiny_vsnprintf_like+0x140>
 8017f26:	2325      	movs	r3, #37	; 0x25
 8017f28:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8017f2c:	1ba3      	subs	r3, r4, r6
 8017f2e:	4598      	cmp	r8, r3
 8017f30:	dd0f      	ble.n	8017f52 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8017f32:	9b05      	ldr	r3, [sp, #20]
 8017f34:	781a      	ldrb	r2, [r3, #0]
 8017f36:	b13a      	cbz	r2, 8017f48 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8017f38:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8017f3c:	1ba3      	subs	r3, r4, r6
 8017f3e:	4598      	cmp	r8, r3
 8017f40:	f73f af61 	bgt.w	8017e06 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8017f44:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8017f46:	e7d3      	b.n	8017ef0 <tiny_vsnprintf_like+0x104>
          --fmt;
 8017f48:	3b01      	subs	r3, #1
 8017f4a:	9305      	str	r3, [sp, #20]
 8017f4c:	e7f6      	b.n	8017f3c <tiny_vsnprintf_like+0x150>
        base = 16;
 8017f4e:	2310      	movs	r3, #16
 8017f50:	e7ce      	b.n	8017ef0 <tiny_vsnprintf_like+0x104>
    base = 10;
 8017f52:	230a      	movs	r3, #10
 8017f54:	e7cc      	b.n	8017ef0 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8017f56:	9a04      	ldr	r2, [sp, #16]
 8017f58:	1d11      	adds	r1, r2, #4
 8017f5a:	9104      	str	r1, [sp, #16]
 8017f5c:	6812      	ldr	r2, [r2, #0]
 8017f5e:	e7ce      	b.n	8017efe <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8017f60:	2300      	movs	r3, #0
 8017f62:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8017f64:	1ba0      	subs	r0, r4, r6
}
 8017f66:	b007      	add	sp, #28
 8017f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8017f6c:	2000      	movs	r0, #0
 8017f6e:	e7fa      	b.n	8017f66 <tiny_vsnprintf_like+0x17a>
 8017f70:	0801c534 	.word	0x0801c534

08017f74 <__errno>:
 8017f74:	4b01      	ldr	r3, [pc, #4]	; (8017f7c <__errno+0x8>)
 8017f76:	6818      	ldr	r0, [r3, #0]
 8017f78:	4770      	bx	lr
 8017f7a:	bf00      	nop
 8017f7c:	20000120 	.word	0x20000120

08017f80 <fiprintf>:
 8017f80:	b40e      	push	{r1, r2, r3}
 8017f82:	b503      	push	{r0, r1, lr}
 8017f84:	4601      	mov	r1, r0
 8017f86:	ab03      	add	r3, sp, #12
 8017f88:	4805      	ldr	r0, [pc, #20]	; (8017fa0 <fiprintf+0x20>)
 8017f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f8e:	6800      	ldr	r0, [r0, #0]
 8017f90:	9301      	str	r3, [sp, #4]
 8017f92:	f000 fa23 	bl	80183dc <_vfiprintf_r>
 8017f96:	b002      	add	sp, #8
 8017f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f9c:	b003      	add	sp, #12
 8017f9e:	4770      	bx	lr
 8017fa0:	20000120 	.word	0x20000120

08017fa4 <_fputc_r>:
 8017fa4:	b570      	push	{r4, r5, r6, lr}
 8017fa6:	460e      	mov	r6, r1
 8017fa8:	4614      	mov	r4, r2
 8017faa:	4605      	mov	r5, r0
 8017fac:	b118      	cbz	r0, 8017fb6 <_fputc_r+0x12>
 8017fae:	6983      	ldr	r3, [r0, #24]
 8017fb0:	b90b      	cbnz	r3, 8017fb6 <_fputc_r+0x12>
 8017fb2:	f001 fe0f 	bl	8019bd4 <__sinit>
 8017fb6:	4b14      	ldr	r3, [pc, #80]	; (8018008 <_fputc_r+0x64>)
 8017fb8:	429c      	cmp	r4, r3
 8017fba:	d11a      	bne.n	8017ff2 <_fputc_r+0x4e>
 8017fbc:	686c      	ldr	r4, [r5, #4]
 8017fbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017fc0:	07d8      	lsls	r0, r3, #31
 8017fc2:	d405      	bmi.n	8017fd0 <_fputc_r+0x2c>
 8017fc4:	89a3      	ldrh	r3, [r4, #12]
 8017fc6:	0599      	lsls	r1, r3, #22
 8017fc8:	d402      	bmi.n	8017fd0 <_fputc_r+0x2c>
 8017fca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017fcc:	f000 f8bd 	bl	801814a <__retarget_lock_acquire_recursive>
 8017fd0:	4622      	mov	r2, r4
 8017fd2:	4628      	mov	r0, r5
 8017fd4:	4631      	mov	r1, r6
 8017fd6:	f000 fcc5 	bl	8018964 <_putc_r>
 8017fda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017fdc:	07da      	lsls	r2, r3, #31
 8017fde:	4605      	mov	r5, r0
 8017fe0:	d405      	bmi.n	8017fee <_fputc_r+0x4a>
 8017fe2:	89a3      	ldrh	r3, [r4, #12]
 8017fe4:	059b      	lsls	r3, r3, #22
 8017fe6:	d402      	bmi.n	8017fee <_fputc_r+0x4a>
 8017fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017fea:	f000 f8af 	bl	801814c <__retarget_lock_release_recursive>
 8017fee:	4628      	mov	r0, r5
 8017ff0:	bd70      	pop	{r4, r5, r6, pc}
 8017ff2:	4b06      	ldr	r3, [pc, #24]	; (801800c <_fputc_r+0x68>)
 8017ff4:	429c      	cmp	r4, r3
 8017ff6:	d101      	bne.n	8017ffc <_fputc_r+0x58>
 8017ff8:	68ac      	ldr	r4, [r5, #8]
 8017ffa:	e7e0      	b.n	8017fbe <_fputc_r+0x1a>
 8017ffc:	4b04      	ldr	r3, [pc, #16]	; (8018010 <_fputc_r+0x6c>)
 8017ffe:	429c      	cmp	r4, r3
 8018000:	bf08      	it	eq
 8018002:	68ec      	ldreq	r4, [r5, #12]
 8018004:	e7db      	b.n	8017fbe <_fputc_r+0x1a>
 8018006:	bf00      	nop
 8018008:	0801c7a4 	.word	0x0801c7a4
 801800c:	0801c7c4 	.word	0x0801c7c4
 8018010:	0801c784 	.word	0x0801c784

08018014 <fputc>:
 8018014:	4b02      	ldr	r3, [pc, #8]	; (8018020 <fputc+0xc>)
 8018016:	460a      	mov	r2, r1
 8018018:	4601      	mov	r1, r0
 801801a:	6818      	ldr	r0, [r3, #0]
 801801c:	f7ff bfc2 	b.w	8017fa4 <_fputc_r>
 8018020:	20000120 	.word	0x20000120

08018024 <_fwrite_r>:
 8018024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018028:	9c08      	ldr	r4, [sp, #32]
 801802a:	468a      	mov	sl, r1
 801802c:	4690      	mov	r8, r2
 801802e:	fb02 f903 	mul.w	r9, r2, r3
 8018032:	4605      	mov	r5, r0
 8018034:	b118      	cbz	r0, 801803e <_fwrite_r+0x1a>
 8018036:	6983      	ldr	r3, [r0, #24]
 8018038:	b90b      	cbnz	r3, 801803e <_fwrite_r+0x1a>
 801803a:	f001 fdcb 	bl	8019bd4 <__sinit>
 801803e:	4b26      	ldr	r3, [pc, #152]	; (80180d8 <_fwrite_r+0xb4>)
 8018040:	429c      	cmp	r4, r3
 8018042:	d123      	bne.n	801808c <_fwrite_r+0x68>
 8018044:	686c      	ldr	r4, [r5, #4]
 8018046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018048:	07de      	lsls	r6, r3, #31
 801804a:	d405      	bmi.n	8018058 <_fwrite_r+0x34>
 801804c:	89a3      	ldrh	r3, [r4, #12]
 801804e:	0598      	lsls	r0, r3, #22
 8018050:	d402      	bmi.n	8018058 <_fwrite_r+0x34>
 8018052:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018054:	f000 f879 	bl	801814a <__retarget_lock_acquire_recursive>
 8018058:	89a3      	ldrh	r3, [r4, #12]
 801805a:	0719      	lsls	r1, r3, #28
 801805c:	d520      	bpl.n	80180a0 <_fwrite_r+0x7c>
 801805e:	6923      	ldr	r3, [r4, #16]
 8018060:	b1f3      	cbz	r3, 80180a0 <_fwrite_r+0x7c>
 8018062:	2600      	movs	r6, #0
 8018064:	454e      	cmp	r6, r9
 8018066:	d029      	beq.n	80180bc <_fwrite_r+0x98>
 8018068:	68a7      	ldr	r7, [r4, #8]
 801806a:	f81a 1006 	ldrb.w	r1, [sl, r6]
 801806e:	3f01      	subs	r7, #1
 8018070:	2f00      	cmp	r7, #0
 8018072:	60a7      	str	r7, [r4, #8]
 8018074:	da04      	bge.n	8018080 <_fwrite_r+0x5c>
 8018076:	69a3      	ldr	r3, [r4, #24]
 8018078:	429f      	cmp	r7, r3
 801807a:	db19      	blt.n	80180b0 <_fwrite_r+0x8c>
 801807c:	290a      	cmp	r1, #10
 801807e:	d017      	beq.n	80180b0 <_fwrite_r+0x8c>
 8018080:	6823      	ldr	r3, [r4, #0]
 8018082:	1c5a      	adds	r2, r3, #1
 8018084:	6022      	str	r2, [r4, #0]
 8018086:	7019      	strb	r1, [r3, #0]
 8018088:	3601      	adds	r6, #1
 801808a:	e7eb      	b.n	8018064 <_fwrite_r+0x40>
 801808c:	4b13      	ldr	r3, [pc, #76]	; (80180dc <_fwrite_r+0xb8>)
 801808e:	429c      	cmp	r4, r3
 8018090:	d101      	bne.n	8018096 <_fwrite_r+0x72>
 8018092:	68ac      	ldr	r4, [r5, #8]
 8018094:	e7d7      	b.n	8018046 <_fwrite_r+0x22>
 8018096:	4b12      	ldr	r3, [pc, #72]	; (80180e0 <_fwrite_r+0xbc>)
 8018098:	429c      	cmp	r4, r3
 801809a:	bf08      	it	eq
 801809c:	68ec      	ldreq	r4, [r5, #12]
 801809e:	e7d2      	b.n	8018046 <_fwrite_r+0x22>
 80180a0:	4621      	mov	r1, r4
 80180a2:	4628      	mov	r0, r5
 80180a4:	f001 fbf4 	bl	8019890 <__swsetup_r>
 80180a8:	2800      	cmp	r0, #0
 80180aa:	d0da      	beq.n	8018062 <_fwrite_r+0x3e>
 80180ac:	2600      	movs	r6, #0
 80180ae:	e005      	b.n	80180bc <_fwrite_r+0x98>
 80180b0:	4622      	mov	r2, r4
 80180b2:	4628      	mov	r0, r5
 80180b4:	f001 fb9a 	bl	80197ec <__swbuf_r>
 80180b8:	3001      	adds	r0, #1
 80180ba:	d1e5      	bne.n	8018088 <_fwrite_r+0x64>
 80180bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80180be:	07da      	lsls	r2, r3, #31
 80180c0:	d405      	bmi.n	80180ce <_fwrite_r+0xaa>
 80180c2:	89a3      	ldrh	r3, [r4, #12]
 80180c4:	059b      	lsls	r3, r3, #22
 80180c6:	d402      	bmi.n	80180ce <_fwrite_r+0xaa>
 80180c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80180ca:	f000 f83f 	bl	801814c <__retarget_lock_release_recursive>
 80180ce:	fbb6 f0f8 	udiv	r0, r6, r8
 80180d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180d6:	bf00      	nop
 80180d8:	0801c7a4 	.word	0x0801c7a4
 80180dc:	0801c7c4 	.word	0x0801c7c4
 80180e0:	0801c784 	.word	0x0801c784

080180e4 <fwrite>:
 80180e4:	b507      	push	{r0, r1, r2, lr}
 80180e6:	9300      	str	r3, [sp, #0]
 80180e8:	4613      	mov	r3, r2
 80180ea:	460a      	mov	r2, r1
 80180ec:	4601      	mov	r1, r0
 80180ee:	4803      	ldr	r0, [pc, #12]	; (80180fc <fwrite+0x18>)
 80180f0:	6800      	ldr	r0, [r0, #0]
 80180f2:	f7ff ff97 	bl	8018024 <_fwrite_r>
 80180f6:	b003      	add	sp, #12
 80180f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80180fc:	20000120 	.word	0x20000120

08018100 <__libc_init_array>:
 8018100:	b570      	push	{r4, r5, r6, lr}
 8018102:	4d0d      	ldr	r5, [pc, #52]	; (8018138 <__libc_init_array+0x38>)
 8018104:	4c0d      	ldr	r4, [pc, #52]	; (801813c <__libc_init_array+0x3c>)
 8018106:	1b64      	subs	r4, r4, r5
 8018108:	10a4      	asrs	r4, r4, #2
 801810a:	2600      	movs	r6, #0
 801810c:	42a6      	cmp	r6, r4
 801810e:	d109      	bne.n	8018124 <__libc_init_array+0x24>
 8018110:	4d0b      	ldr	r5, [pc, #44]	; (8018140 <__libc_init_array+0x40>)
 8018112:	4c0c      	ldr	r4, [pc, #48]	; (8018144 <__libc_init_array+0x44>)
 8018114:	f003 f850 	bl	801b1b8 <_init>
 8018118:	1b64      	subs	r4, r4, r5
 801811a:	10a4      	asrs	r4, r4, #2
 801811c:	2600      	movs	r6, #0
 801811e:	42a6      	cmp	r6, r4
 8018120:	d105      	bne.n	801812e <__libc_init_array+0x2e>
 8018122:	bd70      	pop	{r4, r5, r6, pc}
 8018124:	f855 3b04 	ldr.w	r3, [r5], #4
 8018128:	4798      	blx	r3
 801812a:	3601      	adds	r6, #1
 801812c:	e7ee      	b.n	801810c <__libc_init_array+0xc>
 801812e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018132:	4798      	blx	r3
 8018134:	3601      	adds	r6, #1
 8018136:	e7f2      	b.n	801811e <__libc_init_array+0x1e>
 8018138:	0801c9d8 	.word	0x0801c9d8
 801813c:	0801c9d8 	.word	0x0801c9d8
 8018140:	0801c9d8 	.word	0x0801c9d8
 8018144:	0801c9dc 	.word	0x0801c9dc

08018148 <__retarget_lock_init_recursive>:
 8018148:	4770      	bx	lr

0801814a <__retarget_lock_acquire_recursive>:
 801814a:	4770      	bx	lr

0801814c <__retarget_lock_release_recursive>:
 801814c:	4770      	bx	lr
	...

08018150 <malloc>:
 8018150:	4b02      	ldr	r3, [pc, #8]	; (801815c <malloc+0xc>)
 8018152:	4601      	mov	r1, r0
 8018154:	6818      	ldr	r0, [r3, #0]
 8018156:	f000 b8a5 	b.w	80182a4 <_malloc_r>
 801815a:	bf00      	nop
 801815c:	20000120 	.word	0x20000120

08018160 <free>:
 8018160:	4b02      	ldr	r3, [pc, #8]	; (801816c <free+0xc>)
 8018162:	4601      	mov	r1, r0
 8018164:	6818      	ldr	r0, [r3, #0]
 8018166:	f000 b833 	b.w	80181d0 <_free_r>
 801816a:	bf00      	nop
 801816c:	20000120 	.word	0x20000120

08018170 <memcpy>:
 8018170:	440a      	add	r2, r1
 8018172:	4291      	cmp	r1, r2
 8018174:	f100 33ff 	add.w	r3, r0, #4294967295
 8018178:	d100      	bne.n	801817c <memcpy+0xc>
 801817a:	4770      	bx	lr
 801817c:	b510      	push	{r4, lr}
 801817e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018182:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018186:	4291      	cmp	r1, r2
 8018188:	d1f9      	bne.n	801817e <memcpy+0xe>
 801818a:	bd10      	pop	{r4, pc}

0801818c <memmove>:
 801818c:	4288      	cmp	r0, r1
 801818e:	b510      	push	{r4, lr}
 8018190:	eb01 0402 	add.w	r4, r1, r2
 8018194:	d902      	bls.n	801819c <memmove+0x10>
 8018196:	4284      	cmp	r4, r0
 8018198:	4623      	mov	r3, r4
 801819a:	d807      	bhi.n	80181ac <memmove+0x20>
 801819c:	1e43      	subs	r3, r0, #1
 801819e:	42a1      	cmp	r1, r4
 80181a0:	d008      	beq.n	80181b4 <memmove+0x28>
 80181a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80181a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80181aa:	e7f8      	b.n	801819e <memmove+0x12>
 80181ac:	4402      	add	r2, r0
 80181ae:	4601      	mov	r1, r0
 80181b0:	428a      	cmp	r2, r1
 80181b2:	d100      	bne.n	80181b6 <memmove+0x2a>
 80181b4:	bd10      	pop	{r4, pc}
 80181b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80181ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80181be:	e7f7      	b.n	80181b0 <memmove+0x24>

080181c0 <memset>:
 80181c0:	4402      	add	r2, r0
 80181c2:	4603      	mov	r3, r0
 80181c4:	4293      	cmp	r3, r2
 80181c6:	d100      	bne.n	80181ca <memset+0xa>
 80181c8:	4770      	bx	lr
 80181ca:	f803 1b01 	strb.w	r1, [r3], #1
 80181ce:	e7f9      	b.n	80181c4 <memset+0x4>

080181d0 <_free_r>:
 80181d0:	b538      	push	{r3, r4, r5, lr}
 80181d2:	4605      	mov	r5, r0
 80181d4:	2900      	cmp	r1, #0
 80181d6:	d041      	beq.n	801825c <_free_r+0x8c>
 80181d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80181dc:	1f0c      	subs	r4, r1, #4
 80181de:	2b00      	cmp	r3, #0
 80181e0:	bfb8      	it	lt
 80181e2:	18e4      	addlt	r4, r4, r3
 80181e4:	f002 f982 	bl	801a4ec <__malloc_lock>
 80181e8:	4a1d      	ldr	r2, [pc, #116]	; (8018260 <_free_r+0x90>)
 80181ea:	6813      	ldr	r3, [r2, #0]
 80181ec:	b933      	cbnz	r3, 80181fc <_free_r+0x2c>
 80181ee:	6063      	str	r3, [r4, #4]
 80181f0:	6014      	str	r4, [r2, #0]
 80181f2:	4628      	mov	r0, r5
 80181f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80181f8:	f002 b97e 	b.w	801a4f8 <__malloc_unlock>
 80181fc:	42a3      	cmp	r3, r4
 80181fe:	d908      	bls.n	8018212 <_free_r+0x42>
 8018200:	6820      	ldr	r0, [r4, #0]
 8018202:	1821      	adds	r1, r4, r0
 8018204:	428b      	cmp	r3, r1
 8018206:	bf01      	itttt	eq
 8018208:	6819      	ldreq	r1, [r3, #0]
 801820a:	685b      	ldreq	r3, [r3, #4]
 801820c:	1809      	addeq	r1, r1, r0
 801820e:	6021      	streq	r1, [r4, #0]
 8018210:	e7ed      	b.n	80181ee <_free_r+0x1e>
 8018212:	461a      	mov	r2, r3
 8018214:	685b      	ldr	r3, [r3, #4]
 8018216:	b10b      	cbz	r3, 801821c <_free_r+0x4c>
 8018218:	42a3      	cmp	r3, r4
 801821a:	d9fa      	bls.n	8018212 <_free_r+0x42>
 801821c:	6811      	ldr	r1, [r2, #0]
 801821e:	1850      	adds	r0, r2, r1
 8018220:	42a0      	cmp	r0, r4
 8018222:	d10b      	bne.n	801823c <_free_r+0x6c>
 8018224:	6820      	ldr	r0, [r4, #0]
 8018226:	4401      	add	r1, r0
 8018228:	1850      	adds	r0, r2, r1
 801822a:	4283      	cmp	r3, r0
 801822c:	6011      	str	r1, [r2, #0]
 801822e:	d1e0      	bne.n	80181f2 <_free_r+0x22>
 8018230:	6818      	ldr	r0, [r3, #0]
 8018232:	685b      	ldr	r3, [r3, #4]
 8018234:	6053      	str	r3, [r2, #4]
 8018236:	4401      	add	r1, r0
 8018238:	6011      	str	r1, [r2, #0]
 801823a:	e7da      	b.n	80181f2 <_free_r+0x22>
 801823c:	d902      	bls.n	8018244 <_free_r+0x74>
 801823e:	230c      	movs	r3, #12
 8018240:	602b      	str	r3, [r5, #0]
 8018242:	e7d6      	b.n	80181f2 <_free_r+0x22>
 8018244:	6820      	ldr	r0, [r4, #0]
 8018246:	1821      	adds	r1, r4, r0
 8018248:	428b      	cmp	r3, r1
 801824a:	bf04      	itt	eq
 801824c:	6819      	ldreq	r1, [r3, #0]
 801824e:	685b      	ldreq	r3, [r3, #4]
 8018250:	6063      	str	r3, [r4, #4]
 8018252:	bf04      	itt	eq
 8018254:	1809      	addeq	r1, r1, r0
 8018256:	6021      	streq	r1, [r4, #0]
 8018258:	6054      	str	r4, [r2, #4]
 801825a:	e7ca      	b.n	80181f2 <_free_r+0x22>
 801825c:	bd38      	pop	{r3, r4, r5, pc}
 801825e:	bf00      	nop
 8018260:	200019a0 	.word	0x200019a0

08018264 <sbrk_aligned>:
 8018264:	b570      	push	{r4, r5, r6, lr}
 8018266:	4e0e      	ldr	r6, [pc, #56]	; (80182a0 <sbrk_aligned+0x3c>)
 8018268:	460c      	mov	r4, r1
 801826a:	6831      	ldr	r1, [r6, #0]
 801826c:	4605      	mov	r5, r0
 801826e:	b911      	cbnz	r1, 8018276 <sbrk_aligned+0x12>
 8018270:	f000 fc2c 	bl	8018acc <_sbrk_r>
 8018274:	6030      	str	r0, [r6, #0]
 8018276:	4621      	mov	r1, r4
 8018278:	4628      	mov	r0, r5
 801827a:	f000 fc27 	bl	8018acc <_sbrk_r>
 801827e:	1c43      	adds	r3, r0, #1
 8018280:	d00a      	beq.n	8018298 <sbrk_aligned+0x34>
 8018282:	1cc4      	adds	r4, r0, #3
 8018284:	f024 0403 	bic.w	r4, r4, #3
 8018288:	42a0      	cmp	r0, r4
 801828a:	d007      	beq.n	801829c <sbrk_aligned+0x38>
 801828c:	1a21      	subs	r1, r4, r0
 801828e:	4628      	mov	r0, r5
 8018290:	f000 fc1c 	bl	8018acc <_sbrk_r>
 8018294:	3001      	adds	r0, #1
 8018296:	d101      	bne.n	801829c <sbrk_aligned+0x38>
 8018298:	f04f 34ff 	mov.w	r4, #4294967295
 801829c:	4620      	mov	r0, r4
 801829e:	bd70      	pop	{r4, r5, r6, pc}
 80182a0:	200019a4 	.word	0x200019a4

080182a4 <_malloc_r>:
 80182a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182a8:	1ccd      	adds	r5, r1, #3
 80182aa:	f025 0503 	bic.w	r5, r5, #3
 80182ae:	3508      	adds	r5, #8
 80182b0:	2d0c      	cmp	r5, #12
 80182b2:	bf38      	it	cc
 80182b4:	250c      	movcc	r5, #12
 80182b6:	2d00      	cmp	r5, #0
 80182b8:	4607      	mov	r7, r0
 80182ba:	db01      	blt.n	80182c0 <_malloc_r+0x1c>
 80182bc:	42a9      	cmp	r1, r5
 80182be:	d905      	bls.n	80182cc <_malloc_r+0x28>
 80182c0:	230c      	movs	r3, #12
 80182c2:	603b      	str	r3, [r7, #0]
 80182c4:	2600      	movs	r6, #0
 80182c6:	4630      	mov	r0, r6
 80182c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182cc:	4e2e      	ldr	r6, [pc, #184]	; (8018388 <_malloc_r+0xe4>)
 80182ce:	f002 f90d 	bl	801a4ec <__malloc_lock>
 80182d2:	6833      	ldr	r3, [r6, #0]
 80182d4:	461c      	mov	r4, r3
 80182d6:	bb34      	cbnz	r4, 8018326 <_malloc_r+0x82>
 80182d8:	4629      	mov	r1, r5
 80182da:	4638      	mov	r0, r7
 80182dc:	f7ff ffc2 	bl	8018264 <sbrk_aligned>
 80182e0:	1c43      	adds	r3, r0, #1
 80182e2:	4604      	mov	r4, r0
 80182e4:	d14d      	bne.n	8018382 <_malloc_r+0xde>
 80182e6:	6834      	ldr	r4, [r6, #0]
 80182e8:	4626      	mov	r6, r4
 80182ea:	2e00      	cmp	r6, #0
 80182ec:	d140      	bne.n	8018370 <_malloc_r+0xcc>
 80182ee:	6823      	ldr	r3, [r4, #0]
 80182f0:	4631      	mov	r1, r6
 80182f2:	4638      	mov	r0, r7
 80182f4:	eb04 0803 	add.w	r8, r4, r3
 80182f8:	f000 fbe8 	bl	8018acc <_sbrk_r>
 80182fc:	4580      	cmp	r8, r0
 80182fe:	d13a      	bne.n	8018376 <_malloc_r+0xd2>
 8018300:	6821      	ldr	r1, [r4, #0]
 8018302:	3503      	adds	r5, #3
 8018304:	1a6d      	subs	r5, r5, r1
 8018306:	f025 0503 	bic.w	r5, r5, #3
 801830a:	3508      	adds	r5, #8
 801830c:	2d0c      	cmp	r5, #12
 801830e:	bf38      	it	cc
 8018310:	250c      	movcc	r5, #12
 8018312:	4629      	mov	r1, r5
 8018314:	4638      	mov	r0, r7
 8018316:	f7ff ffa5 	bl	8018264 <sbrk_aligned>
 801831a:	3001      	adds	r0, #1
 801831c:	d02b      	beq.n	8018376 <_malloc_r+0xd2>
 801831e:	6823      	ldr	r3, [r4, #0]
 8018320:	442b      	add	r3, r5
 8018322:	6023      	str	r3, [r4, #0]
 8018324:	e00e      	b.n	8018344 <_malloc_r+0xa0>
 8018326:	6822      	ldr	r2, [r4, #0]
 8018328:	1b52      	subs	r2, r2, r5
 801832a:	d41e      	bmi.n	801836a <_malloc_r+0xc6>
 801832c:	2a0b      	cmp	r2, #11
 801832e:	d916      	bls.n	801835e <_malloc_r+0xba>
 8018330:	1961      	adds	r1, r4, r5
 8018332:	42a3      	cmp	r3, r4
 8018334:	6025      	str	r5, [r4, #0]
 8018336:	bf18      	it	ne
 8018338:	6059      	strne	r1, [r3, #4]
 801833a:	6863      	ldr	r3, [r4, #4]
 801833c:	bf08      	it	eq
 801833e:	6031      	streq	r1, [r6, #0]
 8018340:	5162      	str	r2, [r4, r5]
 8018342:	604b      	str	r3, [r1, #4]
 8018344:	4638      	mov	r0, r7
 8018346:	f104 060b 	add.w	r6, r4, #11
 801834a:	f002 f8d5 	bl	801a4f8 <__malloc_unlock>
 801834e:	f026 0607 	bic.w	r6, r6, #7
 8018352:	1d23      	adds	r3, r4, #4
 8018354:	1af2      	subs	r2, r6, r3
 8018356:	d0b6      	beq.n	80182c6 <_malloc_r+0x22>
 8018358:	1b9b      	subs	r3, r3, r6
 801835a:	50a3      	str	r3, [r4, r2]
 801835c:	e7b3      	b.n	80182c6 <_malloc_r+0x22>
 801835e:	6862      	ldr	r2, [r4, #4]
 8018360:	42a3      	cmp	r3, r4
 8018362:	bf0c      	ite	eq
 8018364:	6032      	streq	r2, [r6, #0]
 8018366:	605a      	strne	r2, [r3, #4]
 8018368:	e7ec      	b.n	8018344 <_malloc_r+0xa0>
 801836a:	4623      	mov	r3, r4
 801836c:	6864      	ldr	r4, [r4, #4]
 801836e:	e7b2      	b.n	80182d6 <_malloc_r+0x32>
 8018370:	4634      	mov	r4, r6
 8018372:	6876      	ldr	r6, [r6, #4]
 8018374:	e7b9      	b.n	80182ea <_malloc_r+0x46>
 8018376:	230c      	movs	r3, #12
 8018378:	603b      	str	r3, [r7, #0]
 801837a:	4638      	mov	r0, r7
 801837c:	f002 f8bc 	bl	801a4f8 <__malloc_unlock>
 8018380:	e7a1      	b.n	80182c6 <_malloc_r+0x22>
 8018382:	6025      	str	r5, [r4, #0]
 8018384:	e7de      	b.n	8018344 <_malloc_r+0xa0>
 8018386:	bf00      	nop
 8018388:	200019a0 	.word	0x200019a0

0801838c <__sfputc_r>:
 801838c:	6893      	ldr	r3, [r2, #8]
 801838e:	3b01      	subs	r3, #1
 8018390:	2b00      	cmp	r3, #0
 8018392:	b410      	push	{r4}
 8018394:	6093      	str	r3, [r2, #8]
 8018396:	da07      	bge.n	80183a8 <__sfputc_r+0x1c>
 8018398:	6994      	ldr	r4, [r2, #24]
 801839a:	42a3      	cmp	r3, r4
 801839c:	db01      	blt.n	80183a2 <__sfputc_r+0x16>
 801839e:	290a      	cmp	r1, #10
 80183a0:	d102      	bne.n	80183a8 <__sfputc_r+0x1c>
 80183a2:	bc10      	pop	{r4}
 80183a4:	f001 ba22 	b.w	80197ec <__swbuf_r>
 80183a8:	6813      	ldr	r3, [r2, #0]
 80183aa:	1c58      	adds	r0, r3, #1
 80183ac:	6010      	str	r0, [r2, #0]
 80183ae:	7019      	strb	r1, [r3, #0]
 80183b0:	4608      	mov	r0, r1
 80183b2:	bc10      	pop	{r4}
 80183b4:	4770      	bx	lr

080183b6 <__sfputs_r>:
 80183b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183b8:	4606      	mov	r6, r0
 80183ba:	460f      	mov	r7, r1
 80183bc:	4614      	mov	r4, r2
 80183be:	18d5      	adds	r5, r2, r3
 80183c0:	42ac      	cmp	r4, r5
 80183c2:	d101      	bne.n	80183c8 <__sfputs_r+0x12>
 80183c4:	2000      	movs	r0, #0
 80183c6:	e007      	b.n	80183d8 <__sfputs_r+0x22>
 80183c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80183cc:	463a      	mov	r2, r7
 80183ce:	4630      	mov	r0, r6
 80183d0:	f7ff ffdc 	bl	801838c <__sfputc_r>
 80183d4:	1c43      	adds	r3, r0, #1
 80183d6:	d1f3      	bne.n	80183c0 <__sfputs_r+0xa>
 80183d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080183dc <_vfiprintf_r>:
 80183dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183e0:	460d      	mov	r5, r1
 80183e2:	b09d      	sub	sp, #116	; 0x74
 80183e4:	4614      	mov	r4, r2
 80183e6:	4698      	mov	r8, r3
 80183e8:	4606      	mov	r6, r0
 80183ea:	b118      	cbz	r0, 80183f4 <_vfiprintf_r+0x18>
 80183ec:	6983      	ldr	r3, [r0, #24]
 80183ee:	b90b      	cbnz	r3, 80183f4 <_vfiprintf_r+0x18>
 80183f0:	f001 fbf0 	bl	8019bd4 <__sinit>
 80183f4:	4b89      	ldr	r3, [pc, #548]	; (801861c <_vfiprintf_r+0x240>)
 80183f6:	429d      	cmp	r5, r3
 80183f8:	d11b      	bne.n	8018432 <_vfiprintf_r+0x56>
 80183fa:	6875      	ldr	r5, [r6, #4]
 80183fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80183fe:	07d9      	lsls	r1, r3, #31
 8018400:	d405      	bmi.n	801840e <_vfiprintf_r+0x32>
 8018402:	89ab      	ldrh	r3, [r5, #12]
 8018404:	059a      	lsls	r2, r3, #22
 8018406:	d402      	bmi.n	801840e <_vfiprintf_r+0x32>
 8018408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801840a:	f7ff fe9e 	bl	801814a <__retarget_lock_acquire_recursive>
 801840e:	89ab      	ldrh	r3, [r5, #12]
 8018410:	071b      	lsls	r3, r3, #28
 8018412:	d501      	bpl.n	8018418 <_vfiprintf_r+0x3c>
 8018414:	692b      	ldr	r3, [r5, #16]
 8018416:	b9eb      	cbnz	r3, 8018454 <_vfiprintf_r+0x78>
 8018418:	4629      	mov	r1, r5
 801841a:	4630      	mov	r0, r6
 801841c:	f001 fa38 	bl	8019890 <__swsetup_r>
 8018420:	b1c0      	cbz	r0, 8018454 <_vfiprintf_r+0x78>
 8018422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018424:	07dc      	lsls	r4, r3, #31
 8018426:	d50e      	bpl.n	8018446 <_vfiprintf_r+0x6a>
 8018428:	f04f 30ff 	mov.w	r0, #4294967295
 801842c:	b01d      	add	sp, #116	; 0x74
 801842e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018432:	4b7b      	ldr	r3, [pc, #492]	; (8018620 <_vfiprintf_r+0x244>)
 8018434:	429d      	cmp	r5, r3
 8018436:	d101      	bne.n	801843c <_vfiprintf_r+0x60>
 8018438:	68b5      	ldr	r5, [r6, #8]
 801843a:	e7df      	b.n	80183fc <_vfiprintf_r+0x20>
 801843c:	4b79      	ldr	r3, [pc, #484]	; (8018624 <_vfiprintf_r+0x248>)
 801843e:	429d      	cmp	r5, r3
 8018440:	bf08      	it	eq
 8018442:	68f5      	ldreq	r5, [r6, #12]
 8018444:	e7da      	b.n	80183fc <_vfiprintf_r+0x20>
 8018446:	89ab      	ldrh	r3, [r5, #12]
 8018448:	0598      	lsls	r0, r3, #22
 801844a:	d4ed      	bmi.n	8018428 <_vfiprintf_r+0x4c>
 801844c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801844e:	f7ff fe7d 	bl	801814c <__retarget_lock_release_recursive>
 8018452:	e7e9      	b.n	8018428 <_vfiprintf_r+0x4c>
 8018454:	2300      	movs	r3, #0
 8018456:	9309      	str	r3, [sp, #36]	; 0x24
 8018458:	2320      	movs	r3, #32
 801845a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801845e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018462:	2330      	movs	r3, #48	; 0x30
 8018464:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018628 <_vfiprintf_r+0x24c>
 8018468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801846c:	f04f 0901 	mov.w	r9, #1
 8018470:	4623      	mov	r3, r4
 8018472:	469a      	mov	sl, r3
 8018474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018478:	b10a      	cbz	r2, 801847e <_vfiprintf_r+0xa2>
 801847a:	2a25      	cmp	r2, #37	; 0x25
 801847c:	d1f9      	bne.n	8018472 <_vfiprintf_r+0x96>
 801847e:	ebba 0b04 	subs.w	fp, sl, r4
 8018482:	d00b      	beq.n	801849c <_vfiprintf_r+0xc0>
 8018484:	465b      	mov	r3, fp
 8018486:	4622      	mov	r2, r4
 8018488:	4629      	mov	r1, r5
 801848a:	4630      	mov	r0, r6
 801848c:	f7ff ff93 	bl	80183b6 <__sfputs_r>
 8018490:	3001      	adds	r0, #1
 8018492:	f000 80aa 	beq.w	80185ea <_vfiprintf_r+0x20e>
 8018496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018498:	445a      	add	r2, fp
 801849a:	9209      	str	r2, [sp, #36]	; 0x24
 801849c:	f89a 3000 	ldrb.w	r3, [sl]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	f000 80a2 	beq.w	80185ea <_vfiprintf_r+0x20e>
 80184a6:	2300      	movs	r3, #0
 80184a8:	f04f 32ff 	mov.w	r2, #4294967295
 80184ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80184b0:	f10a 0a01 	add.w	sl, sl, #1
 80184b4:	9304      	str	r3, [sp, #16]
 80184b6:	9307      	str	r3, [sp, #28]
 80184b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80184bc:	931a      	str	r3, [sp, #104]	; 0x68
 80184be:	4654      	mov	r4, sl
 80184c0:	2205      	movs	r2, #5
 80184c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184c6:	4858      	ldr	r0, [pc, #352]	; (8018628 <_vfiprintf_r+0x24c>)
 80184c8:	f7e7 fe5a 	bl	8000180 <memchr>
 80184cc:	9a04      	ldr	r2, [sp, #16]
 80184ce:	b9d8      	cbnz	r0, 8018508 <_vfiprintf_r+0x12c>
 80184d0:	06d1      	lsls	r1, r2, #27
 80184d2:	bf44      	itt	mi
 80184d4:	2320      	movmi	r3, #32
 80184d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80184da:	0713      	lsls	r3, r2, #28
 80184dc:	bf44      	itt	mi
 80184de:	232b      	movmi	r3, #43	; 0x2b
 80184e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80184e4:	f89a 3000 	ldrb.w	r3, [sl]
 80184e8:	2b2a      	cmp	r3, #42	; 0x2a
 80184ea:	d015      	beq.n	8018518 <_vfiprintf_r+0x13c>
 80184ec:	9a07      	ldr	r2, [sp, #28]
 80184ee:	4654      	mov	r4, sl
 80184f0:	2000      	movs	r0, #0
 80184f2:	f04f 0c0a 	mov.w	ip, #10
 80184f6:	4621      	mov	r1, r4
 80184f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80184fc:	3b30      	subs	r3, #48	; 0x30
 80184fe:	2b09      	cmp	r3, #9
 8018500:	d94e      	bls.n	80185a0 <_vfiprintf_r+0x1c4>
 8018502:	b1b0      	cbz	r0, 8018532 <_vfiprintf_r+0x156>
 8018504:	9207      	str	r2, [sp, #28]
 8018506:	e014      	b.n	8018532 <_vfiprintf_r+0x156>
 8018508:	eba0 0308 	sub.w	r3, r0, r8
 801850c:	fa09 f303 	lsl.w	r3, r9, r3
 8018510:	4313      	orrs	r3, r2
 8018512:	9304      	str	r3, [sp, #16]
 8018514:	46a2      	mov	sl, r4
 8018516:	e7d2      	b.n	80184be <_vfiprintf_r+0xe2>
 8018518:	9b03      	ldr	r3, [sp, #12]
 801851a:	1d19      	adds	r1, r3, #4
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	9103      	str	r1, [sp, #12]
 8018520:	2b00      	cmp	r3, #0
 8018522:	bfbb      	ittet	lt
 8018524:	425b      	neglt	r3, r3
 8018526:	f042 0202 	orrlt.w	r2, r2, #2
 801852a:	9307      	strge	r3, [sp, #28]
 801852c:	9307      	strlt	r3, [sp, #28]
 801852e:	bfb8      	it	lt
 8018530:	9204      	strlt	r2, [sp, #16]
 8018532:	7823      	ldrb	r3, [r4, #0]
 8018534:	2b2e      	cmp	r3, #46	; 0x2e
 8018536:	d10c      	bne.n	8018552 <_vfiprintf_r+0x176>
 8018538:	7863      	ldrb	r3, [r4, #1]
 801853a:	2b2a      	cmp	r3, #42	; 0x2a
 801853c:	d135      	bne.n	80185aa <_vfiprintf_r+0x1ce>
 801853e:	9b03      	ldr	r3, [sp, #12]
 8018540:	1d1a      	adds	r2, r3, #4
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	9203      	str	r2, [sp, #12]
 8018546:	2b00      	cmp	r3, #0
 8018548:	bfb8      	it	lt
 801854a:	f04f 33ff 	movlt.w	r3, #4294967295
 801854e:	3402      	adds	r4, #2
 8018550:	9305      	str	r3, [sp, #20]
 8018552:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801862c <_vfiprintf_r+0x250>
 8018556:	7821      	ldrb	r1, [r4, #0]
 8018558:	2203      	movs	r2, #3
 801855a:	4650      	mov	r0, sl
 801855c:	f7e7 fe10 	bl	8000180 <memchr>
 8018560:	b140      	cbz	r0, 8018574 <_vfiprintf_r+0x198>
 8018562:	2340      	movs	r3, #64	; 0x40
 8018564:	eba0 000a 	sub.w	r0, r0, sl
 8018568:	fa03 f000 	lsl.w	r0, r3, r0
 801856c:	9b04      	ldr	r3, [sp, #16]
 801856e:	4303      	orrs	r3, r0
 8018570:	3401      	adds	r4, #1
 8018572:	9304      	str	r3, [sp, #16]
 8018574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018578:	482d      	ldr	r0, [pc, #180]	; (8018630 <_vfiprintf_r+0x254>)
 801857a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801857e:	2206      	movs	r2, #6
 8018580:	f7e7 fdfe 	bl	8000180 <memchr>
 8018584:	2800      	cmp	r0, #0
 8018586:	d03f      	beq.n	8018608 <_vfiprintf_r+0x22c>
 8018588:	4b2a      	ldr	r3, [pc, #168]	; (8018634 <_vfiprintf_r+0x258>)
 801858a:	bb1b      	cbnz	r3, 80185d4 <_vfiprintf_r+0x1f8>
 801858c:	9b03      	ldr	r3, [sp, #12]
 801858e:	3307      	adds	r3, #7
 8018590:	f023 0307 	bic.w	r3, r3, #7
 8018594:	3308      	adds	r3, #8
 8018596:	9303      	str	r3, [sp, #12]
 8018598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801859a:	443b      	add	r3, r7
 801859c:	9309      	str	r3, [sp, #36]	; 0x24
 801859e:	e767      	b.n	8018470 <_vfiprintf_r+0x94>
 80185a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80185a4:	460c      	mov	r4, r1
 80185a6:	2001      	movs	r0, #1
 80185a8:	e7a5      	b.n	80184f6 <_vfiprintf_r+0x11a>
 80185aa:	2300      	movs	r3, #0
 80185ac:	3401      	adds	r4, #1
 80185ae:	9305      	str	r3, [sp, #20]
 80185b0:	4619      	mov	r1, r3
 80185b2:	f04f 0c0a 	mov.w	ip, #10
 80185b6:	4620      	mov	r0, r4
 80185b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185bc:	3a30      	subs	r2, #48	; 0x30
 80185be:	2a09      	cmp	r2, #9
 80185c0:	d903      	bls.n	80185ca <_vfiprintf_r+0x1ee>
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d0c5      	beq.n	8018552 <_vfiprintf_r+0x176>
 80185c6:	9105      	str	r1, [sp, #20]
 80185c8:	e7c3      	b.n	8018552 <_vfiprintf_r+0x176>
 80185ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80185ce:	4604      	mov	r4, r0
 80185d0:	2301      	movs	r3, #1
 80185d2:	e7f0      	b.n	80185b6 <_vfiprintf_r+0x1da>
 80185d4:	ab03      	add	r3, sp, #12
 80185d6:	9300      	str	r3, [sp, #0]
 80185d8:	462a      	mov	r2, r5
 80185da:	4b17      	ldr	r3, [pc, #92]	; (8018638 <_vfiprintf_r+0x25c>)
 80185dc:	a904      	add	r1, sp, #16
 80185de:	4630      	mov	r0, r6
 80185e0:	f3af 8000 	nop.w
 80185e4:	4607      	mov	r7, r0
 80185e6:	1c78      	adds	r0, r7, #1
 80185e8:	d1d6      	bne.n	8018598 <_vfiprintf_r+0x1bc>
 80185ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80185ec:	07d9      	lsls	r1, r3, #31
 80185ee:	d405      	bmi.n	80185fc <_vfiprintf_r+0x220>
 80185f0:	89ab      	ldrh	r3, [r5, #12]
 80185f2:	059a      	lsls	r2, r3, #22
 80185f4:	d402      	bmi.n	80185fc <_vfiprintf_r+0x220>
 80185f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80185f8:	f7ff fda8 	bl	801814c <__retarget_lock_release_recursive>
 80185fc:	89ab      	ldrh	r3, [r5, #12]
 80185fe:	065b      	lsls	r3, r3, #25
 8018600:	f53f af12 	bmi.w	8018428 <_vfiprintf_r+0x4c>
 8018604:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018606:	e711      	b.n	801842c <_vfiprintf_r+0x50>
 8018608:	ab03      	add	r3, sp, #12
 801860a:	9300      	str	r3, [sp, #0]
 801860c:	462a      	mov	r2, r5
 801860e:	4b0a      	ldr	r3, [pc, #40]	; (8018638 <_vfiprintf_r+0x25c>)
 8018610:	a904      	add	r1, sp, #16
 8018612:	4630      	mov	r0, r6
 8018614:	f000 f880 	bl	8018718 <_printf_i>
 8018618:	e7e4      	b.n	80185e4 <_vfiprintf_r+0x208>
 801861a:	bf00      	nop
 801861c:	0801c7a4 	.word	0x0801c7a4
 8018620:	0801c7c4 	.word	0x0801c7c4
 8018624:	0801c784 	.word	0x0801c784
 8018628:	0801c640 	.word	0x0801c640
 801862c:	0801c646 	.word	0x0801c646
 8018630:	0801c64a 	.word	0x0801c64a
 8018634:	00000000 	.word	0x00000000
 8018638:	080183b7 	.word	0x080183b7

0801863c <_printf_common>:
 801863c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018640:	4616      	mov	r6, r2
 8018642:	4699      	mov	r9, r3
 8018644:	688a      	ldr	r2, [r1, #8]
 8018646:	690b      	ldr	r3, [r1, #16]
 8018648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801864c:	4293      	cmp	r3, r2
 801864e:	bfb8      	it	lt
 8018650:	4613      	movlt	r3, r2
 8018652:	6033      	str	r3, [r6, #0]
 8018654:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018658:	4607      	mov	r7, r0
 801865a:	460c      	mov	r4, r1
 801865c:	b10a      	cbz	r2, 8018662 <_printf_common+0x26>
 801865e:	3301      	adds	r3, #1
 8018660:	6033      	str	r3, [r6, #0]
 8018662:	6823      	ldr	r3, [r4, #0]
 8018664:	0699      	lsls	r1, r3, #26
 8018666:	bf42      	ittt	mi
 8018668:	6833      	ldrmi	r3, [r6, #0]
 801866a:	3302      	addmi	r3, #2
 801866c:	6033      	strmi	r3, [r6, #0]
 801866e:	6825      	ldr	r5, [r4, #0]
 8018670:	f015 0506 	ands.w	r5, r5, #6
 8018674:	d106      	bne.n	8018684 <_printf_common+0x48>
 8018676:	f104 0a19 	add.w	sl, r4, #25
 801867a:	68e3      	ldr	r3, [r4, #12]
 801867c:	6832      	ldr	r2, [r6, #0]
 801867e:	1a9b      	subs	r3, r3, r2
 8018680:	42ab      	cmp	r3, r5
 8018682:	dc26      	bgt.n	80186d2 <_printf_common+0x96>
 8018684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018688:	1e13      	subs	r3, r2, #0
 801868a:	6822      	ldr	r2, [r4, #0]
 801868c:	bf18      	it	ne
 801868e:	2301      	movne	r3, #1
 8018690:	0692      	lsls	r2, r2, #26
 8018692:	d42b      	bmi.n	80186ec <_printf_common+0xb0>
 8018694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018698:	4649      	mov	r1, r9
 801869a:	4638      	mov	r0, r7
 801869c:	47c0      	blx	r8
 801869e:	3001      	adds	r0, #1
 80186a0:	d01e      	beq.n	80186e0 <_printf_common+0xa4>
 80186a2:	6823      	ldr	r3, [r4, #0]
 80186a4:	68e5      	ldr	r5, [r4, #12]
 80186a6:	6832      	ldr	r2, [r6, #0]
 80186a8:	f003 0306 	and.w	r3, r3, #6
 80186ac:	2b04      	cmp	r3, #4
 80186ae:	bf08      	it	eq
 80186b0:	1aad      	subeq	r5, r5, r2
 80186b2:	68a3      	ldr	r3, [r4, #8]
 80186b4:	6922      	ldr	r2, [r4, #16]
 80186b6:	bf0c      	ite	eq
 80186b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80186bc:	2500      	movne	r5, #0
 80186be:	4293      	cmp	r3, r2
 80186c0:	bfc4      	itt	gt
 80186c2:	1a9b      	subgt	r3, r3, r2
 80186c4:	18ed      	addgt	r5, r5, r3
 80186c6:	2600      	movs	r6, #0
 80186c8:	341a      	adds	r4, #26
 80186ca:	42b5      	cmp	r5, r6
 80186cc:	d11a      	bne.n	8018704 <_printf_common+0xc8>
 80186ce:	2000      	movs	r0, #0
 80186d0:	e008      	b.n	80186e4 <_printf_common+0xa8>
 80186d2:	2301      	movs	r3, #1
 80186d4:	4652      	mov	r2, sl
 80186d6:	4649      	mov	r1, r9
 80186d8:	4638      	mov	r0, r7
 80186da:	47c0      	blx	r8
 80186dc:	3001      	adds	r0, #1
 80186de:	d103      	bne.n	80186e8 <_printf_common+0xac>
 80186e0:	f04f 30ff 	mov.w	r0, #4294967295
 80186e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186e8:	3501      	adds	r5, #1
 80186ea:	e7c6      	b.n	801867a <_printf_common+0x3e>
 80186ec:	18e1      	adds	r1, r4, r3
 80186ee:	1c5a      	adds	r2, r3, #1
 80186f0:	2030      	movs	r0, #48	; 0x30
 80186f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80186f6:	4422      	add	r2, r4
 80186f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80186fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018700:	3302      	adds	r3, #2
 8018702:	e7c7      	b.n	8018694 <_printf_common+0x58>
 8018704:	2301      	movs	r3, #1
 8018706:	4622      	mov	r2, r4
 8018708:	4649      	mov	r1, r9
 801870a:	4638      	mov	r0, r7
 801870c:	47c0      	blx	r8
 801870e:	3001      	adds	r0, #1
 8018710:	d0e6      	beq.n	80186e0 <_printf_common+0xa4>
 8018712:	3601      	adds	r6, #1
 8018714:	e7d9      	b.n	80186ca <_printf_common+0x8e>
	...

08018718 <_printf_i>:
 8018718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801871c:	7e0f      	ldrb	r7, [r1, #24]
 801871e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018720:	2f78      	cmp	r7, #120	; 0x78
 8018722:	4691      	mov	r9, r2
 8018724:	4680      	mov	r8, r0
 8018726:	460c      	mov	r4, r1
 8018728:	469a      	mov	sl, r3
 801872a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801872e:	d807      	bhi.n	8018740 <_printf_i+0x28>
 8018730:	2f62      	cmp	r7, #98	; 0x62
 8018732:	d80a      	bhi.n	801874a <_printf_i+0x32>
 8018734:	2f00      	cmp	r7, #0
 8018736:	f000 80d8 	beq.w	80188ea <_printf_i+0x1d2>
 801873a:	2f58      	cmp	r7, #88	; 0x58
 801873c:	f000 80a3 	beq.w	8018886 <_printf_i+0x16e>
 8018740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018744:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018748:	e03a      	b.n	80187c0 <_printf_i+0xa8>
 801874a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801874e:	2b15      	cmp	r3, #21
 8018750:	d8f6      	bhi.n	8018740 <_printf_i+0x28>
 8018752:	a101      	add	r1, pc, #4	; (adr r1, 8018758 <_printf_i+0x40>)
 8018754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018758:	080187b1 	.word	0x080187b1
 801875c:	080187c5 	.word	0x080187c5
 8018760:	08018741 	.word	0x08018741
 8018764:	08018741 	.word	0x08018741
 8018768:	08018741 	.word	0x08018741
 801876c:	08018741 	.word	0x08018741
 8018770:	080187c5 	.word	0x080187c5
 8018774:	08018741 	.word	0x08018741
 8018778:	08018741 	.word	0x08018741
 801877c:	08018741 	.word	0x08018741
 8018780:	08018741 	.word	0x08018741
 8018784:	080188d1 	.word	0x080188d1
 8018788:	080187f5 	.word	0x080187f5
 801878c:	080188b3 	.word	0x080188b3
 8018790:	08018741 	.word	0x08018741
 8018794:	08018741 	.word	0x08018741
 8018798:	080188f3 	.word	0x080188f3
 801879c:	08018741 	.word	0x08018741
 80187a0:	080187f5 	.word	0x080187f5
 80187a4:	08018741 	.word	0x08018741
 80187a8:	08018741 	.word	0x08018741
 80187ac:	080188bb 	.word	0x080188bb
 80187b0:	682b      	ldr	r3, [r5, #0]
 80187b2:	1d1a      	adds	r2, r3, #4
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	602a      	str	r2, [r5, #0]
 80187b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80187bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80187c0:	2301      	movs	r3, #1
 80187c2:	e0a3      	b.n	801890c <_printf_i+0x1f4>
 80187c4:	6820      	ldr	r0, [r4, #0]
 80187c6:	6829      	ldr	r1, [r5, #0]
 80187c8:	0606      	lsls	r6, r0, #24
 80187ca:	f101 0304 	add.w	r3, r1, #4
 80187ce:	d50a      	bpl.n	80187e6 <_printf_i+0xce>
 80187d0:	680e      	ldr	r6, [r1, #0]
 80187d2:	602b      	str	r3, [r5, #0]
 80187d4:	2e00      	cmp	r6, #0
 80187d6:	da03      	bge.n	80187e0 <_printf_i+0xc8>
 80187d8:	232d      	movs	r3, #45	; 0x2d
 80187da:	4276      	negs	r6, r6
 80187dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80187e0:	485e      	ldr	r0, [pc, #376]	; (801895c <_printf_i+0x244>)
 80187e2:	230a      	movs	r3, #10
 80187e4:	e019      	b.n	801881a <_printf_i+0x102>
 80187e6:	680e      	ldr	r6, [r1, #0]
 80187e8:	602b      	str	r3, [r5, #0]
 80187ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80187ee:	bf18      	it	ne
 80187f0:	b236      	sxthne	r6, r6
 80187f2:	e7ef      	b.n	80187d4 <_printf_i+0xbc>
 80187f4:	682b      	ldr	r3, [r5, #0]
 80187f6:	6820      	ldr	r0, [r4, #0]
 80187f8:	1d19      	adds	r1, r3, #4
 80187fa:	6029      	str	r1, [r5, #0]
 80187fc:	0601      	lsls	r1, r0, #24
 80187fe:	d501      	bpl.n	8018804 <_printf_i+0xec>
 8018800:	681e      	ldr	r6, [r3, #0]
 8018802:	e002      	b.n	801880a <_printf_i+0xf2>
 8018804:	0646      	lsls	r6, r0, #25
 8018806:	d5fb      	bpl.n	8018800 <_printf_i+0xe8>
 8018808:	881e      	ldrh	r6, [r3, #0]
 801880a:	4854      	ldr	r0, [pc, #336]	; (801895c <_printf_i+0x244>)
 801880c:	2f6f      	cmp	r7, #111	; 0x6f
 801880e:	bf0c      	ite	eq
 8018810:	2308      	moveq	r3, #8
 8018812:	230a      	movne	r3, #10
 8018814:	2100      	movs	r1, #0
 8018816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801881a:	6865      	ldr	r5, [r4, #4]
 801881c:	60a5      	str	r5, [r4, #8]
 801881e:	2d00      	cmp	r5, #0
 8018820:	bfa2      	ittt	ge
 8018822:	6821      	ldrge	r1, [r4, #0]
 8018824:	f021 0104 	bicge.w	r1, r1, #4
 8018828:	6021      	strge	r1, [r4, #0]
 801882a:	b90e      	cbnz	r6, 8018830 <_printf_i+0x118>
 801882c:	2d00      	cmp	r5, #0
 801882e:	d04d      	beq.n	80188cc <_printf_i+0x1b4>
 8018830:	4615      	mov	r5, r2
 8018832:	fbb6 f1f3 	udiv	r1, r6, r3
 8018836:	fb03 6711 	mls	r7, r3, r1, r6
 801883a:	5dc7      	ldrb	r7, [r0, r7]
 801883c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018840:	4637      	mov	r7, r6
 8018842:	42bb      	cmp	r3, r7
 8018844:	460e      	mov	r6, r1
 8018846:	d9f4      	bls.n	8018832 <_printf_i+0x11a>
 8018848:	2b08      	cmp	r3, #8
 801884a:	d10b      	bne.n	8018864 <_printf_i+0x14c>
 801884c:	6823      	ldr	r3, [r4, #0]
 801884e:	07de      	lsls	r6, r3, #31
 8018850:	d508      	bpl.n	8018864 <_printf_i+0x14c>
 8018852:	6923      	ldr	r3, [r4, #16]
 8018854:	6861      	ldr	r1, [r4, #4]
 8018856:	4299      	cmp	r1, r3
 8018858:	bfde      	ittt	le
 801885a:	2330      	movle	r3, #48	; 0x30
 801885c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018860:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018864:	1b52      	subs	r2, r2, r5
 8018866:	6122      	str	r2, [r4, #16]
 8018868:	f8cd a000 	str.w	sl, [sp]
 801886c:	464b      	mov	r3, r9
 801886e:	aa03      	add	r2, sp, #12
 8018870:	4621      	mov	r1, r4
 8018872:	4640      	mov	r0, r8
 8018874:	f7ff fee2 	bl	801863c <_printf_common>
 8018878:	3001      	adds	r0, #1
 801887a:	d14c      	bne.n	8018916 <_printf_i+0x1fe>
 801887c:	f04f 30ff 	mov.w	r0, #4294967295
 8018880:	b004      	add	sp, #16
 8018882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018886:	4835      	ldr	r0, [pc, #212]	; (801895c <_printf_i+0x244>)
 8018888:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801888c:	6829      	ldr	r1, [r5, #0]
 801888e:	6823      	ldr	r3, [r4, #0]
 8018890:	f851 6b04 	ldr.w	r6, [r1], #4
 8018894:	6029      	str	r1, [r5, #0]
 8018896:	061d      	lsls	r5, r3, #24
 8018898:	d514      	bpl.n	80188c4 <_printf_i+0x1ac>
 801889a:	07df      	lsls	r7, r3, #31
 801889c:	bf44      	itt	mi
 801889e:	f043 0320 	orrmi.w	r3, r3, #32
 80188a2:	6023      	strmi	r3, [r4, #0]
 80188a4:	b91e      	cbnz	r6, 80188ae <_printf_i+0x196>
 80188a6:	6823      	ldr	r3, [r4, #0]
 80188a8:	f023 0320 	bic.w	r3, r3, #32
 80188ac:	6023      	str	r3, [r4, #0]
 80188ae:	2310      	movs	r3, #16
 80188b0:	e7b0      	b.n	8018814 <_printf_i+0xfc>
 80188b2:	6823      	ldr	r3, [r4, #0]
 80188b4:	f043 0320 	orr.w	r3, r3, #32
 80188b8:	6023      	str	r3, [r4, #0]
 80188ba:	2378      	movs	r3, #120	; 0x78
 80188bc:	4828      	ldr	r0, [pc, #160]	; (8018960 <_printf_i+0x248>)
 80188be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80188c2:	e7e3      	b.n	801888c <_printf_i+0x174>
 80188c4:	0659      	lsls	r1, r3, #25
 80188c6:	bf48      	it	mi
 80188c8:	b2b6      	uxthmi	r6, r6
 80188ca:	e7e6      	b.n	801889a <_printf_i+0x182>
 80188cc:	4615      	mov	r5, r2
 80188ce:	e7bb      	b.n	8018848 <_printf_i+0x130>
 80188d0:	682b      	ldr	r3, [r5, #0]
 80188d2:	6826      	ldr	r6, [r4, #0]
 80188d4:	6961      	ldr	r1, [r4, #20]
 80188d6:	1d18      	adds	r0, r3, #4
 80188d8:	6028      	str	r0, [r5, #0]
 80188da:	0635      	lsls	r5, r6, #24
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	d501      	bpl.n	80188e4 <_printf_i+0x1cc>
 80188e0:	6019      	str	r1, [r3, #0]
 80188e2:	e002      	b.n	80188ea <_printf_i+0x1d2>
 80188e4:	0670      	lsls	r0, r6, #25
 80188e6:	d5fb      	bpl.n	80188e0 <_printf_i+0x1c8>
 80188e8:	8019      	strh	r1, [r3, #0]
 80188ea:	2300      	movs	r3, #0
 80188ec:	6123      	str	r3, [r4, #16]
 80188ee:	4615      	mov	r5, r2
 80188f0:	e7ba      	b.n	8018868 <_printf_i+0x150>
 80188f2:	682b      	ldr	r3, [r5, #0]
 80188f4:	1d1a      	adds	r2, r3, #4
 80188f6:	602a      	str	r2, [r5, #0]
 80188f8:	681d      	ldr	r5, [r3, #0]
 80188fa:	6862      	ldr	r2, [r4, #4]
 80188fc:	2100      	movs	r1, #0
 80188fe:	4628      	mov	r0, r5
 8018900:	f7e7 fc3e 	bl	8000180 <memchr>
 8018904:	b108      	cbz	r0, 801890a <_printf_i+0x1f2>
 8018906:	1b40      	subs	r0, r0, r5
 8018908:	6060      	str	r0, [r4, #4]
 801890a:	6863      	ldr	r3, [r4, #4]
 801890c:	6123      	str	r3, [r4, #16]
 801890e:	2300      	movs	r3, #0
 8018910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018914:	e7a8      	b.n	8018868 <_printf_i+0x150>
 8018916:	6923      	ldr	r3, [r4, #16]
 8018918:	462a      	mov	r2, r5
 801891a:	4649      	mov	r1, r9
 801891c:	4640      	mov	r0, r8
 801891e:	47d0      	blx	sl
 8018920:	3001      	adds	r0, #1
 8018922:	d0ab      	beq.n	801887c <_printf_i+0x164>
 8018924:	6823      	ldr	r3, [r4, #0]
 8018926:	079b      	lsls	r3, r3, #30
 8018928:	d413      	bmi.n	8018952 <_printf_i+0x23a>
 801892a:	68e0      	ldr	r0, [r4, #12]
 801892c:	9b03      	ldr	r3, [sp, #12]
 801892e:	4298      	cmp	r0, r3
 8018930:	bfb8      	it	lt
 8018932:	4618      	movlt	r0, r3
 8018934:	e7a4      	b.n	8018880 <_printf_i+0x168>
 8018936:	2301      	movs	r3, #1
 8018938:	4632      	mov	r2, r6
 801893a:	4649      	mov	r1, r9
 801893c:	4640      	mov	r0, r8
 801893e:	47d0      	blx	sl
 8018940:	3001      	adds	r0, #1
 8018942:	d09b      	beq.n	801887c <_printf_i+0x164>
 8018944:	3501      	adds	r5, #1
 8018946:	68e3      	ldr	r3, [r4, #12]
 8018948:	9903      	ldr	r1, [sp, #12]
 801894a:	1a5b      	subs	r3, r3, r1
 801894c:	42ab      	cmp	r3, r5
 801894e:	dcf2      	bgt.n	8018936 <_printf_i+0x21e>
 8018950:	e7eb      	b.n	801892a <_printf_i+0x212>
 8018952:	2500      	movs	r5, #0
 8018954:	f104 0619 	add.w	r6, r4, #25
 8018958:	e7f5      	b.n	8018946 <_printf_i+0x22e>
 801895a:	bf00      	nop
 801895c:	0801c651 	.word	0x0801c651
 8018960:	0801c662 	.word	0x0801c662

08018964 <_putc_r>:
 8018964:	b570      	push	{r4, r5, r6, lr}
 8018966:	460d      	mov	r5, r1
 8018968:	4614      	mov	r4, r2
 801896a:	4606      	mov	r6, r0
 801896c:	b118      	cbz	r0, 8018976 <_putc_r+0x12>
 801896e:	6983      	ldr	r3, [r0, #24]
 8018970:	b90b      	cbnz	r3, 8018976 <_putc_r+0x12>
 8018972:	f001 f92f 	bl	8019bd4 <__sinit>
 8018976:	4b1c      	ldr	r3, [pc, #112]	; (80189e8 <_putc_r+0x84>)
 8018978:	429c      	cmp	r4, r3
 801897a:	d124      	bne.n	80189c6 <_putc_r+0x62>
 801897c:	6874      	ldr	r4, [r6, #4]
 801897e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018980:	07d8      	lsls	r0, r3, #31
 8018982:	d405      	bmi.n	8018990 <_putc_r+0x2c>
 8018984:	89a3      	ldrh	r3, [r4, #12]
 8018986:	0599      	lsls	r1, r3, #22
 8018988:	d402      	bmi.n	8018990 <_putc_r+0x2c>
 801898a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801898c:	f7ff fbdd 	bl	801814a <__retarget_lock_acquire_recursive>
 8018990:	68a3      	ldr	r3, [r4, #8]
 8018992:	3b01      	subs	r3, #1
 8018994:	2b00      	cmp	r3, #0
 8018996:	60a3      	str	r3, [r4, #8]
 8018998:	da05      	bge.n	80189a6 <_putc_r+0x42>
 801899a:	69a2      	ldr	r2, [r4, #24]
 801899c:	4293      	cmp	r3, r2
 801899e:	db1c      	blt.n	80189da <_putc_r+0x76>
 80189a0:	b2eb      	uxtb	r3, r5
 80189a2:	2b0a      	cmp	r3, #10
 80189a4:	d019      	beq.n	80189da <_putc_r+0x76>
 80189a6:	6823      	ldr	r3, [r4, #0]
 80189a8:	1c5a      	adds	r2, r3, #1
 80189aa:	6022      	str	r2, [r4, #0]
 80189ac:	701d      	strb	r5, [r3, #0]
 80189ae:	b2ed      	uxtb	r5, r5
 80189b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80189b2:	07da      	lsls	r2, r3, #31
 80189b4:	d405      	bmi.n	80189c2 <_putc_r+0x5e>
 80189b6:	89a3      	ldrh	r3, [r4, #12]
 80189b8:	059b      	lsls	r3, r3, #22
 80189ba:	d402      	bmi.n	80189c2 <_putc_r+0x5e>
 80189bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80189be:	f7ff fbc5 	bl	801814c <__retarget_lock_release_recursive>
 80189c2:	4628      	mov	r0, r5
 80189c4:	bd70      	pop	{r4, r5, r6, pc}
 80189c6:	4b09      	ldr	r3, [pc, #36]	; (80189ec <_putc_r+0x88>)
 80189c8:	429c      	cmp	r4, r3
 80189ca:	d101      	bne.n	80189d0 <_putc_r+0x6c>
 80189cc:	68b4      	ldr	r4, [r6, #8]
 80189ce:	e7d6      	b.n	801897e <_putc_r+0x1a>
 80189d0:	4b07      	ldr	r3, [pc, #28]	; (80189f0 <_putc_r+0x8c>)
 80189d2:	429c      	cmp	r4, r3
 80189d4:	bf08      	it	eq
 80189d6:	68f4      	ldreq	r4, [r6, #12]
 80189d8:	e7d1      	b.n	801897e <_putc_r+0x1a>
 80189da:	4629      	mov	r1, r5
 80189dc:	4622      	mov	r2, r4
 80189de:	4630      	mov	r0, r6
 80189e0:	f000 ff04 	bl	80197ec <__swbuf_r>
 80189e4:	4605      	mov	r5, r0
 80189e6:	e7e3      	b.n	80189b0 <_putc_r+0x4c>
 80189e8:	0801c7a4 	.word	0x0801c7a4
 80189ec:	0801c7c4 	.word	0x0801c7c4
 80189f0:	0801c784 	.word	0x0801c784

080189f4 <srand>:
 80189f4:	b538      	push	{r3, r4, r5, lr}
 80189f6:	4b10      	ldr	r3, [pc, #64]	; (8018a38 <srand+0x44>)
 80189f8:	681d      	ldr	r5, [r3, #0]
 80189fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80189fc:	4604      	mov	r4, r0
 80189fe:	b9b3      	cbnz	r3, 8018a2e <srand+0x3a>
 8018a00:	2018      	movs	r0, #24
 8018a02:	f7ff fba5 	bl	8018150 <malloc>
 8018a06:	4602      	mov	r2, r0
 8018a08:	63a8      	str	r0, [r5, #56]	; 0x38
 8018a0a:	b920      	cbnz	r0, 8018a16 <srand+0x22>
 8018a0c:	4b0b      	ldr	r3, [pc, #44]	; (8018a3c <srand+0x48>)
 8018a0e:	480c      	ldr	r0, [pc, #48]	; (8018a40 <srand+0x4c>)
 8018a10:	2142      	movs	r1, #66	; 0x42
 8018a12:	f000 ffab 	bl	801996c <__assert_func>
 8018a16:	490b      	ldr	r1, [pc, #44]	; (8018a44 <srand+0x50>)
 8018a18:	4b0b      	ldr	r3, [pc, #44]	; (8018a48 <srand+0x54>)
 8018a1a:	e9c0 1300 	strd	r1, r3, [r0]
 8018a1e:	4b0b      	ldr	r3, [pc, #44]	; (8018a4c <srand+0x58>)
 8018a20:	6083      	str	r3, [r0, #8]
 8018a22:	230b      	movs	r3, #11
 8018a24:	8183      	strh	r3, [r0, #12]
 8018a26:	2100      	movs	r1, #0
 8018a28:	2001      	movs	r0, #1
 8018a2a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018a2e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8018a30:	2200      	movs	r2, #0
 8018a32:	611c      	str	r4, [r3, #16]
 8018a34:	615a      	str	r2, [r3, #20]
 8018a36:	bd38      	pop	{r3, r4, r5, pc}
 8018a38:	20000120 	.word	0x20000120
 8018a3c:	0801c673 	.word	0x0801c673
 8018a40:	0801c68a 	.word	0x0801c68a
 8018a44:	abcd330e 	.word	0xabcd330e
 8018a48:	e66d1234 	.word	0xe66d1234
 8018a4c:	0005deec 	.word	0x0005deec

08018a50 <rand>:
 8018a50:	4b16      	ldr	r3, [pc, #88]	; (8018aac <rand+0x5c>)
 8018a52:	b510      	push	{r4, lr}
 8018a54:	681c      	ldr	r4, [r3, #0]
 8018a56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018a58:	b9b3      	cbnz	r3, 8018a88 <rand+0x38>
 8018a5a:	2018      	movs	r0, #24
 8018a5c:	f7ff fb78 	bl	8018150 <malloc>
 8018a60:	4602      	mov	r2, r0
 8018a62:	63a0      	str	r0, [r4, #56]	; 0x38
 8018a64:	b920      	cbnz	r0, 8018a70 <rand+0x20>
 8018a66:	4b12      	ldr	r3, [pc, #72]	; (8018ab0 <rand+0x60>)
 8018a68:	4812      	ldr	r0, [pc, #72]	; (8018ab4 <rand+0x64>)
 8018a6a:	214e      	movs	r1, #78	; 0x4e
 8018a6c:	f000 ff7e 	bl	801996c <__assert_func>
 8018a70:	4911      	ldr	r1, [pc, #68]	; (8018ab8 <rand+0x68>)
 8018a72:	4b12      	ldr	r3, [pc, #72]	; (8018abc <rand+0x6c>)
 8018a74:	e9c0 1300 	strd	r1, r3, [r0]
 8018a78:	4b11      	ldr	r3, [pc, #68]	; (8018ac0 <rand+0x70>)
 8018a7a:	6083      	str	r3, [r0, #8]
 8018a7c:	230b      	movs	r3, #11
 8018a7e:	8183      	strh	r3, [r0, #12]
 8018a80:	2100      	movs	r1, #0
 8018a82:	2001      	movs	r0, #1
 8018a84:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018a88:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8018a8a:	4a0e      	ldr	r2, [pc, #56]	; (8018ac4 <rand+0x74>)
 8018a8c:	6920      	ldr	r0, [r4, #16]
 8018a8e:	6963      	ldr	r3, [r4, #20]
 8018a90:	490d      	ldr	r1, [pc, #52]	; (8018ac8 <rand+0x78>)
 8018a92:	4342      	muls	r2, r0
 8018a94:	fb01 2203 	mla	r2, r1, r3, r2
 8018a98:	fba0 0101 	umull	r0, r1, r0, r1
 8018a9c:	1c43      	adds	r3, r0, #1
 8018a9e:	eb42 0001 	adc.w	r0, r2, r1
 8018aa2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8018aa6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018aaa:	bd10      	pop	{r4, pc}
 8018aac:	20000120 	.word	0x20000120
 8018ab0:	0801c673 	.word	0x0801c673
 8018ab4:	0801c68a 	.word	0x0801c68a
 8018ab8:	abcd330e 	.word	0xabcd330e
 8018abc:	e66d1234 	.word	0xe66d1234
 8018ac0:	0005deec 	.word	0x0005deec
 8018ac4:	5851f42d 	.word	0x5851f42d
 8018ac8:	4c957f2d 	.word	0x4c957f2d

08018acc <_sbrk_r>:
 8018acc:	b538      	push	{r3, r4, r5, lr}
 8018ace:	4d06      	ldr	r5, [pc, #24]	; (8018ae8 <_sbrk_r+0x1c>)
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	4604      	mov	r4, r0
 8018ad4:	4608      	mov	r0, r1
 8018ad6:	602b      	str	r3, [r5, #0]
 8018ad8:	f7e9 fa1e 	bl	8001f18 <_sbrk>
 8018adc:	1c43      	adds	r3, r0, #1
 8018ade:	d102      	bne.n	8018ae6 <_sbrk_r+0x1a>
 8018ae0:	682b      	ldr	r3, [r5, #0]
 8018ae2:	b103      	cbz	r3, 8018ae6 <_sbrk_r+0x1a>
 8018ae4:	6023      	str	r3, [r4, #0]
 8018ae6:	bd38      	pop	{r3, r4, r5, pc}
 8018ae8:	200019a8 	.word	0x200019a8

08018aec <strchr>:
 8018aec:	b2c9      	uxtb	r1, r1
 8018aee:	4603      	mov	r3, r0
 8018af0:	4618      	mov	r0, r3
 8018af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018af6:	b112      	cbz	r2, 8018afe <strchr+0x12>
 8018af8:	428a      	cmp	r2, r1
 8018afa:	d1f9      	bne.n	8018af0 <strchr+0x4>
 8018afc:	4770      	bx	lr
 8018afe:	2900      	cmp	r1, #0
 8018b00:	bf18      	it	ne
 8018b02:	2000      	movne	r0, #0
 8018b04:	4770      	bx	lr
	...

08018b08 <strdup>:
 8018b08:	4b02      	ldr	r3, [pc, #8]	; (8018b14 <strdup+0xc>)
 8018b0a:	4601      	mov	r1, r0
 8018b0c:	6818      	ldr	r0, [r3, #0]
 8018b0e:	f000 b803 	b.w	8018b18 <_strdup_r>
 8018b12:	bf00      	nop
 8018b14:	20000120 	.word	0x20000120

08018b18 <_strdup_r>:
 8018b18:	b570      	push	{r4, r5, r6, lr}
 8018b1a:	4604      	mov	r4, r0
 8018b1c:	4608      	mov	r0, r1
 8018b1e:	460d      	mov	r5, r1
 8018b20:	f7e7 fb7e 	bl	8000220 <strlen>
 8018b24:	1c46      	adds	r6, r0, #1
 8018b26:	4631      	mov	r1, r6
 8018b28:	4620      	mov	r0, r4
 8018b2a:	f7ff fbbb 	bl	80182a4 <_malloc_r>
 8018b2e:	4604      	mov	r4, r0
 8018b30:	b118      	cbz	r0, 8018b3a <_strdup_r+0x22>
 8018b32:	4632      	mov	r2, r6
 8018b34:	4629      	mov	r1, r5
 8018b36:	f7ff fb1b 	bl	8018170 <memcpy>
 8018b3a:	4620      	mov	r0, r4
 8018b3c:	bd70      	pop	{r4, r5, r6, pc}

08018b3e <strncmp>:
 8018b3e:	b510      	push	{r4, lr}
 8018b40:	4603      	mov	r3, r0
 8018b42:	b172      	cbz	r2, 8018b62 <strncmp+0x24>
 8018b44:	3901      	subs	r1, #1
 8018b46:	1884      	adds	r4, r0, r2
 8018b48:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018b4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018b50:	4290      	cmp	r0, r2
 8018b52:	d101      	bne.n	8018b58 <strncmp+0x1a>
 8018b54:	42a3      	cmp	r3, r4
 8018b56:	d101      	bne.n	8018b5c <strncmp+0x1e>
 8018b58:	1a80      	subs	r0, r0, r2
 8018b5a:	bd10      	pop	{r4, pc}
 8018b5c:	2800      	cmp	r0, #0
 8018b5e:	d1f3      	bne.n	8018b48 <strncmp+0xa>
 8018b60:	e7fa      	b.n	8018b58 <strncmp+0x1a>
 8018b62:	4610      	mov	r0, r2
 8018b64:	e7f9      	b.n	8018b5a <strncmp+0x1c>

08018b66 <strncpy>:
 8018b66:	b510      	push	{r4, lr}
 8018b68:	3901      	subs	r1, #1
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	b132      	cbz	r2, 8018b7c <strncpy+0x16>
 8018b6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018b72:	f803 4b01 	strb.w	r4, [r3], #1
 8018b76:	3a01      	subs	r2, #1
 8018b78:	2c00      	cmp	r4, #0
 8018b7a:	d1f7      	bne.n	8018b6c <strncpy+0x6>
 8018b7c:	441a      	add	r2, r3
 8018b7e:	2100      	movs	r1, #0
 8018b80:	4293      	cmp	r3, r2
 8018b82:	d100      	bne.n	8018b86 <strncpy+0x20>
 8018b84:	bd10      	pop	{r4, pc}
 8018b86:	f803 1b01 	strb.w	r1, [r3], #1
 8018b8a:	e7f9      	b.n	8018b80 <strncpy+0x1a>

08018b8c <sulp>:
 8018b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b90:	460f      	mov	r7, r1
 8018b92:	4690      	mov	r8, r2
 8018b94:	f002 f822 	bl	801abdc <__ulp>
 8018b98:	4604      	mov	r4, r0
 8018b9a:	460d      	mov	r5, r1
 8018b9c:	f1b8 0f00 	cmp.w	r8, #0
 8018ba0:	d011      	beq.n	8018bc6 <sulp+0x3a>
 8018ba2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8018ba6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	dd0b      	ble.n	8018bc6 <sulp+0x3a>
 8018bae:	051b      	lsls	r3, r3, #20
 8018bb0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8018bb4:	2400      	movs	r4, #0
 8018bb6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8018bba:	4622      	mov	r2, r4
 8018bbc:	462b      	mov	r3, r5
 8018bbe:	f7e7 fda7 	bl	8000710 <__aeabi_dmul>
 8018bc2:	4604      	mov	r4, r0
 8018bc4:	460d      	mov	r5, r1
 8018bc6:	4620      	mov	r0, r4
 8018bc8:	4629      	mov	r1, r5
 8018bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08018bd0 <_strtod_l>:
 8018bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bd4:	b09f      	sub	sp, #124	; 0x7c
 8018bd6:	469b      	mov	fp, r3
 8018bd8:	2300      	movs	r3, #0
 8018bda:	931a      	str	r3, [sp, #104]	; 0x68
 8018bdc:	4b9e      	ldr	r3, [pc, #632]	; (8018e58 <_strtod_l+0x288>)
 8018bde:	9215      	str	r2, [sp, #84]	; 0x54
 8018be0:	681f      	ldr	r7, [r3, #0]
 8018be2:	4682      	mov	sl, r0
 8018be4:	4638      	mov	r0, r7
 8018be6:	460e      	mov	r6, r1
 8018be8:	f7e7 fb1a 	bl	8000220 <strlen>
 8018bec:	f04f 0800 	mov.w	r8, #0
 8018bf0:	4604      	mov	r4, r0
 8018bf2:	f04f 0900 	mov.w	r9, #0
 8018bf6:	9619      	str	r6, [sp, #100]	; 0x64
 8018bf8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018bfa:	781a      	ldrb	r2, [r3, #0]
 8018bfc:	2a2b      	cmp	r2, #43	; 0x2b
 8018bfe:	d04c      	beq.n	8018c9a <_strtod_l+0xca>
 8018c00:	d83a      	bhi.n	8018c78 <_strtod_l+0xa8>
 8018c02:	2a0d      	cmp	r2, #13
 8018c04:	d833      	bhi.n	8018c6e <_strtod_l+0x9e>
 8018c06:	2a08      	cmp	r2, #8
 8018c08:	d833      	bhi.n	8018c72 <_strtod_l+0xa2>
 8018c0a:	2a00      	cmp	r2, #0
 8018c0c:	d03d      	beq.n	8018c8a <_strtod_l+0xba>
 8018c0e:	2300      	movs	r3, #0
 8018c10:	930a      	str	r3, [sp, #40]	; 0x28
 8018c12:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8018c14:	782b      	ldrb	r3, [r5, #0]
 8018c16:	2b30      	cmp	r3, #48	; 0x30
 8018c18:	f040 80aa 	bne.w	8018d70 <_strtod_l+0x1a0>
 8018c1c:	786b      	ldrb	r3, [r5, #1]
 8018c1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018c22:	2b58      	cmp	r3, #88	; 0x58
 8018c24:	d166      	bne.n	8018cf4 <_strtod_l+0x124>
 8018c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018c28:	9301      	str	r3, [sp, #4]
 8018c2a:	ab1a      	add	r3, sp, #104	; 0x68
 8018c2c:	9300      	str	r3, [sp, #0]
 8018c2e:	4a8b      	ldr	r2, [pc, #556]	; (8018e5c <_strtod_l+0x28c>)
 8018c30:	f8cd b008 	str.w	fp, [sp, #8]
 8018c34:	ab1b      	add	r3, sp, #108	; 0x6c
 8018c36:	a919      	add	r1, sp, #100	; 0x64
 8018c38:	4650      	mov	r0, sl
 8018c3a:	f001 f8cf 	bl	8019ddc <__gethex>
 8018c3e:	f010 0607 	ands.w	r6, r0, #7
 8018c42:	4604      	mov	r4, r0
 8018c44:	d005      	beq.n	8018c52 <_strtod_l+0x82>
 8018c46:	2e06      	cmp	r6, #6
 8018c48:	d129      	bne.n	8018c9e <_strtod_l+0xce>
 8018c4a:	3501      	adds	r5, #1
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	9519      	str	r5, [sp, #100]	; 0x64
 8018c50:	930a      	str	r3, [sp, #40]	; 0x28
 8018c52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	f040 858a 	bne.w	801976e <_strtod_l+0xb9e>
 8018c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018c5c:	b1d3      	cbz	r3, 8018c94 <_strtod_l+0xc4>
 8018c5e:	4642      	mov	r2, r8
 8018c60:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018c64:	4610      	mov	r0, r2
 8018c66:	4619      	mov	r1, r3
 8018c68:	b01f      	add	sp, #124	; 0x7c
 8018c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c6e:	2a20      	cmp	r2, #32
 8018c70:	d1cd      	bne.n	8018c0e <_strtod_l+0x3e>
 8018c72:	3301      	adds	r3, #1
 8018c74:	9319      	str	r3, [sp, #100]	; 0x64
 8018c76:	e7bf      	b.n	8018bf8 <_strtod_l+0x28>
 8018c78:	2a2d      	cmp	r2, #45	; 0x2d
 8018c7a:	d1c8      	bne.n	8018c0e <_strtod_l+0x3e>
 8018c7c:	2201      	movs	r2, #1
 8018c7e:	920a      	str	r2, [sp, #40]	; 0x28
 8018c80:	1c5a      	adds	r2, r3, #1
 8018c82:	9219      	str	r2, [sp, #100]	; 0x64
 8018c84:	785b      	ldrb	r3, [r3, #1]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d1c3      	bne.n	8018c12 <_strtod_l+0x42>
 8018c8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c8c:	9619      	str	r6, [sp, #100]	; 0x64
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	f040 856b 	bne.w	801976a <_strtod_l+0xb9a>
 8018c94:	4642      	mov	r2, r8
 8018c96:	464b      	mov	r3, r9
 8018c98:	e7e4      	b.n	8018c64 <_strtod_l+0x94>
 8018c9a:	2200      	movs	r2, #0
 8018c9c:	e7ef      	b.n	8018c7e <_strtod_l+0xae>
 8018c9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018ca0:	b13a      	cbz	r2, 8018cb2 <_strtod_l+0xe2>
 8018ca2:	2135      	movs	r1, #53	; 0x35
 8018ca4:	a81c      	add	r0, sp, #112	; 0x70
 8018ca6:	f002 f89d 	bl	801ade4 <__copybits>
 8018caa:	991a      	ldr	r1, [sp, #104]	; 0x68
 8018cac:	4650      	mov	r0, sl
 8018cae:	f001 fc69 	bl	801a584 <_Bfree>
 8018cb2:	3e01      	subs	r6, #1
 8018cb4:	2e04      	cmp	r6, #4
 8018cb6:	d806      	bhi.n	8018cc6 <_strtod_l+0xf6>
 8018cb8:	e8df f006 	tbb	[pc, r6]
 8018cbc:	1714030a 	.word	0x1714030a
 8018cc0:	0a          	.byte	0x0a
 8018cc1:	00          	.byte	0x00
 8018cc2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8018cc6:	0721      	lsls	r1, r4, #28
 8018cc8:	d5c3      	bpl.n	8018c52 <_strtod_l+0x82>
 8018cca:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8018cce:	e7c0      	b.n	8018c52 <_strtod_l+0x82>
 8018cd0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8018cd4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018cd6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018cda:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018cde:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8018ce2:	e7f0      	b.n	8018cc6 <_strtod_l+0xf6>
 8018ce4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8018e60 <_strtod_l+0x290>
 8018ce8:	e7ed      	b.n	8018cc6 <_strtod_l+0xf6>
 8018cea:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8018cee:	f04f 38ff 	mov.w	r8, #4294967295
 8018cf2:	e7e8      	b.n	8018cc6 <_strtod_l+0xf6>
 8018cf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018cf6:	1c5a      	adds	r2, r3, #1
 8018cf8:	9219      	str	r2, [sp, #100]	; 0x64
 8018cfa:	785b      	ldrb	r3, [r3, #1]
 8018cfc:	2b30      	cmp	r3, #48	; 0x30
 8018cfe:	d0f9      	beq.n	8018cf4 <_strtod_l+0x124>
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d0a6      	beq.n	8018c52 <_strtod_l+0x82>
 8018d04:	2301      	movs	r3, #1
 8018d06:	9307      	str	r3, [sp, #28]
 8018d08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018d0a:	9308      	str	r3, [sp, #32]
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018d12:	469b      	mov	fp, r3
 8018d14:	220a      	movs	r2, #10
 8018d16:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018d18:	7805      	ldrb	r5, [r0, #0]
 8018d1a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8018d1e:	b2d9      	uxtb	r1, r3
 8018d20:	2909      	cmp	r1, #9
 8018d22:	d927      	bls.n	8018d74 <_strtod_l+0x1a4>
 8018d24:	4622      	mov	r2, r4
 8018d26:	4639      	mov	r1, r7
 8018d28:	f7ff ff09 	bl	8018b3e <strncmp>
 8018d2c:	2800      	cmp	r0, #0
 8018d2e:	d033      	beq.n	8018d98 <_strtod_l+0x1c8>
 8018d30:	2000      	movs	r0, #0
 8018d32:	462a      	mov	r2, r5
 8018d34:	465c      	mov	r4, fp
 8018d36:	9004      	str	r0, [sp, #16]
 8018d38:	4603      	mov	r3, r0
 8018d3a:	2a65      	cmp	r2, #101	; 0x65
 8018d3c:	d001      	beq.n	8018d42 <_strtod_l+0x172>
 8018d3e:	2a45      	cmp	r2, #69	; 0x45
 8018d40:	d114      	bne.n	8018d6c <_strtod_l+0x19c>
 8018d42:	b91c      	cbnz	r4, 8018d4c <_strtod_l+0x17c>
 8018d44:	9a07      	ldr	r2, [sp, #28]
 8018d46:	4302      	orrs	r2, r0
 8018d48:	d09f      	beq.n	8018c8a <_strtod_l+0xba>
 8018d4a:	2400      	movs	r4, #0
 8018d4c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8018d4e:	1c72      	adds	r2, r6, #1
 8018d50:	9219      	str	r2, [sp, #100]	; 0x64
 8018d52:	7872      	ldrb	r2, [r6, #1]
 8018d54:	2a2b      	cmp	r2, #43	; 0x2b
 8018d56:	d079      	beq.n	8018e4c <_strtod_l+0x27c>
 8018d58:	2a2d      	cmp	r2, #45	; 0x2d
 8018d5a:	f000 8083 	beq.w	8018e64 <_strtod_l+0x294>
 8018d5e:	2700      	movs	r7, #0
 8018d60:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8018d64:	2909      	cmp	r1, #9
 8018d66:	f240 8083 	bls.w	8018e70 <_strtod_l+0x2a0>
 8018d6a:	9619      	str	r6, [sp, #100]	; 0x64
 8018d6c:	2500      	movs	r5, #0
 8018d6e:	e09f      	b.n	8018eb0 <_strtod_l+0x2e0>
 8018d70:	2300      	movs	r3, #0
 8018d72:	e7c8      	b.n	8018d06 <_strtod_l+0x136>
 8018d74:	f1bb 0f08 	cmp.w	fp, #8
 8018d78:	bfd5      	itete	le
 8018d7a:	9906      	ldrle	r1, [sp, #24]
 8018d7c:	9905      	ldrgt	r1, [sp, #20]
 8018d7e:	fb02 3301 	mlale	r3, r2, r1, r3
 8018d82:	fb02 3301 	mlagt	r3, r2, r1, r3
 8018d86:	f100 0001 	add.w	r0, r0, #1
 8018d8a:	bfd4      	ite	le
 8018d8c:	9306      	strle	r3, [sp, #24]
 8018d8e:	9305      	strgt	r3, [sp, #20]
 8018d90:	f10b 0b01 	add.w	fp, fp, #1
 8018d94:	9019      	str	r0, [sp, #100]	; 0x64
 8018d96:	e7be      	b.n	8018d16 <_strtod_l+0x146>
 8018d98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018d9a:	191a      	adds	r2, r3, r4
 8018d9c:	9219      	str	r2, [sp, #100]	; 0x64
 8018d9e:	5d1a      	ldrb	r2, [r3, r4]
 8018da0:	f1bb 0f00 	cmp.w	fp, #0
 8018da4:	d036      	beq.n	8018e14 <_strtod_l+0x244>
 8018da6:	9004      	str	r0, [sp, #16]
 8018da8:	465c      	mov	r4, fp
 8018daa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8018dae:	2b09      	cmp	r3, #9
 8018db0:	d912      	bls.n	8018dd8 <_strtod_l+0x208>
 8018db2:	2301      	movs	r3, #1
 8018db4:	e7c1      	b.n	8018d3a <_strtod_l+0x16a>
 8018db6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018db8:	1c5a      	adds	r2, r3, #1
 8018dba:	9219      	str	r2, [sp, #100]	; 0x64
 8018dbc:	785a      	ldrb	r2, [r3, #1]
 8018dbe:	3001      	adds	r0, #1
 8018dc0:	2a30      	cmp	r2, #48	; 0x30
 8018dc2:	d0f8      	beq.n	8018db6 <_strtod_l+0x1e6>
 8018dc4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8018dc8:	2b08      	cmp	r3, #8
 8018dca:	f200 84d5 	bhi.w	8019778 <_strtod_l+0xba8>
 8018dce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018dd0:	9004      	str	r0, [sp, #16]
 8018dd2:	2000      	movs	r0, #0
 8018dd4:	9308      	str	r3, [sp, #32]
 8018dd6:	4604      	mov	r4, r0
 8018dd8:	3a30      	subs	r2, #48	; 0x30
 8018dda:	f100 0301 	add.w	r3, r0, #1
 8018dde:	d013      	beq.n	8018e08 <_strtod_l+0x238>
 8018de0:	9904      	ldr	r1, [sp, #16]
 8018de2:	4419      	add	r1, r3
 8018de4:	9104      	str	r1, [sp, #16]
 8018de6:	4623      	mov	r3, r4
 8018de8:	1905      	adds	r5, r0, r4
 8018dea:	210a      	movs	r1, #10
 8018dec:	42ab      	cmp	r3, r5
 8018dee:	d113      	bne.n	8018e18 <_strtod_l+0x248>
 8018df0:	1823      	adds	r3, r4, r0
 8018df2:	2b08      	cmp	r3, #8
 8018df4:	f104 0401 	add.w	r4, r4, #1
 8018df8:	4404      	add	r4, r0
 8018dfa:	dc1b      	bgt.n	8018e34 <_strtod_l+0x264>
 8018dfc:	9906      	ldr	r1, [sp, #24]
 8018dfe:	230a      	movs	r3, #10
 8018e00:	fb03 2301 	mla	r3, r3, r1, r2
 8018e04:	9306      	str	r3, [sp, #24]
 8018e06:	2300      	movs	r3, #0
 8018e08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018e0a:	1c51      	adds	r1, r2, #1
 8018e0c:	9119      	str	r1, [sp, #100]	; 0x64
 8018e0e:	7852      	ldrb	r2, [r2, #1]
 8018e10:	4618      	mov	r0, r3
 8018e12:	e7ca      	b.n	8018daa <_strtod_l+0x1da>
 8018e14:	4658      	mov	r0, fp
 8018e16:	e7d3      	b.n	8018dc0 <_strtod_l+0x1f0>
 8018e18:	2b08      	cmp	r3, #8
 8018e1a:	dc04      	bgt.n	8018e26 <_strtod_l+0x256>
 8018e1c:	9f06      	ldr	r7, [sp, #24]
 8018e1e:	434f      	muls	r7, r1
 8018e20:	9706      	str	r7, [sp, #24]
 8018e22:	3301      	adds	r3, #1
 8018e24:	e7e2      	b.n	8018dec <_strtod_l+0x21c>
 8018e26:	1c5f      	adds	r7, r3, #1
 8018e28:	2f10      	cmp	r7, #16
 8018e2a:	bfde      	ittt	le
 8018e2c:	9f05      	ldrle	r7, [sp, #20]
 8018e2e:	434f      	mulle	r7, r1
 8018e30:	9705      	strle	r7, [sp, #20]
 8018e32:	e7f6      	b.n	8018e22 <_strtod_l+0x252>
 8018e34:	2c10      	cmp	r4, #16
 8018e36:	bfdf      	itttt	le
 8018e38:	9905      	ldrle	r1, [sp, #20]
 8018e3a:	230a      	movle	r3, #10
 8018e3c:	fb03 2301 	mlale	r3, r3, r1, r2
 8018e40:	9305      	strle	r3, [sp, #20]
 8018e42:	e7e0      	b.n	8018e06 <_strtod_l+0x236>
 8018e44:	2300      	movs	r3, #0
 8018e46:	9304      	str	r3, [sp, #16]
 8018e48:	2301      	movs	r3, #1
 8018e4a:	e77b      	b.n	8018d44 <_strtod_l+0x174>
 8018e4c:	2700      	movs	r7, #0
 8018e4e:	1cb2      	adds	r2, r6, #2
 8018e50:	9219      	str	r2, [sp, #100]	; 0x64
 8018e52:	78b2      	ldrb	r2, [r6, #2]
 8018e54:	e784      	b.n	8018d60 <_strtod_l+0x190>
 8018e56:	bf00      	nop
 8018e58:	0801c85c 	.word	0x0801c85c
 8018e5c:	0801c6f4 	.word	0x0801c6f4
 8018e60:	7ff00000 	.word	0x7ff00000
 8018e64:	2701      	movs	r7, #1
 8018e66:	e7f2      	b.n	8018e4e <_strtod_l+0x27e>
 8018e68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018e6a:	1c51      	adds	r1, r2, #1
 8018e6c:	9119      	str	r1, [sp, #100]	; 0x64
 8018e6e:	7852      	ldrb	r2, [r2, #1]
 8018e70:	2a30      	cmp	r2, #48	; 0x30
 8018e72:	d0f9      	beq.n	8018e68 <_strtod_l+0x298>
 8018e74:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8018e78:	2908      	cmp	r1, #8
 8018e7a:	f63f af77 	bhi.w	8018d6c <_strtod_l+0x19c>
 8018e7e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8018e82:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018e84:	9209      	str	r2, [sp, #36]	; 0x24
 8018e86:	f04f 0e0a 	mov.w	lr, #10
 8018e8a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018e8c:	1c51      	adds	r1, r2, #1
 8018e8e:	9119      	str	r1, [sp, #100]	; 0x64
 8018e90:	7852      	ldrb	r2, [r2, #1]
 8018e92:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8018e96:	2d09      	cmp	r5, #9
 8018e98:	d935      	bls.n	8018f06 <_strtod_l+0x336>
 8018e9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8018e9c:	1b49      	subs	r1, r1, r5
 8018e9e:	2908      	cmp	r1, #8
 8018ea0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8018ea4:	dc02      	bgt.n	8018eac <_strtod_l+0x2dc>
 8018ea6:	4565      	cmp	r5, ip
 8018ea8:	bfa8      	it	ge
 8018eaa:	4665      	movge	r5, ip
 8018eac:	b107      	cbz	r7, 8018eb0 <_strtod_l+0x2e0>
 8018eae:	426d      	negs	r5, r5
 8018eb0:	2c00      	cmp	r4, #0
 8018eb2:	d14c      	bne.n	8018f4e <_strtod_l+0x37e>
 8018eb4:	9907      	ldr	r1, [sp, #28]
 8018eb6:	4301      	orrs	r1, r0
 8018eb8:	f47f aecb 	bne.w	8018c52 <_strtod_l+0x82>
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	f47f aee4 	bne.w	8018c8a <_strtod_l+0xba>
 8018ec2:	2a69      	cmp	r2, #105	; 0x69
 8018ec4:	d026      	beq.n	8018f14 <_strtod_l+0x344>
 8018ec6:	dc23      	bgt.n	8018f10 <_strtod_l+0x340>
 8018ec8:	2a49      	cmp	r2, #73	; 0x49
 8018eca:	d023      	beq.n	8018f14 <_strtod_l+0x344>
 8018ecc:	2a4e      	cmp	r2, #78	; 0x4e
 8018ece:	f47f aedc 	bne.w	8018c8a <_strtod_l+0xba>
 8018ed2:	499d      	ldr	r1, [pc, #628]	; (8019148 <_strtod_l+0x578>)
 8018ed4:	a819      	add	r0, sp, #100	; 0x64
 8018ed6:	f001 f9cf 	bl	801a278 <__match>
 8018eda:	2800      	cmp	r0, #0
 8018edc:	f43f aed5 	beq.w	8018c8a <_strtod_l+0xba>
 8018ee0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018ee2:	781b      	ldrb	r3, [r3, #0]
 8018ee4:	2b28      	cmp	r3, #40	; 0x28
 8018ee6:	d12c      	bne.n	8018f42 <_strtod_l+0x372>
 8018ee8:	4998      	ldr	r1, [pc, #608]	; (801914c <_strtod_l+0x57c>)
 8018eea:	aa1c      	add	r2, sp, #112	; 0x70
 8018eec:	a819      	add	r0, sp, #100	; 0x64
 8018eee:	f001 f9d7 	bl	801a2a0 <__hexnan>
 8018ef2:	2805      	cmp	r0, #5
 8018ef4:	d125      	bne.n	8018f42 <_strtod_l+0x372>
 8018ef6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018ef8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8018efc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8018f00:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8018f04:	e6a5      	b.n	8018c52 <_strtod_l+0x82>
 8018f06:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8018f0a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8018f0e:	e7bc      	b.n	8018e8a <_strtod_l+0x2ba>
 8018f10:	2a6e      	cmp	r2, #110	; 0x6e
 8018f12:	e7dc      	b.n	8018ece <_strtod_l+0x2fe>
 8018f14:	498e      	ldr	r1, [pc, #568]	; (8019150 <_strtod_l+0x580>)
 8018f16:	a819      	add	r0, sp, #100	; 0x64
 8018f18:	f001 f9ae 	bl	801a278 <__match>
 8018f1c:	2800      	cmp	r0, #0
 8018f1e:	f43f aeb4 	beq.w	8018c8a <_strtod_l+0xba>
 8018f22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018f24:	498b      	ldr	r1, [pc, #556]	; (8019154 <_strtod_l+0x584>)
 8018f26:	3b01      	subs	r3, #1
 8018f28:	a819      	add	r0, sp, #100	; 0x64
 8018f2a:	9319      	str	r3, [sp, #100]	; 0x64
 8018f2c:	f001 f9a4 	bl	801a278 <__match>
 8018f30:	b910      	cbnz	r0, 8018f38 <_strtod_l+0x368>
 8018f32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018f34:	3301      	adds	r3, #1
 8018f36:	9319      	str	r3, [sp, #100]	; 0x64
 8018f38:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8019158 <_strtod_l+0x588>
 8018f3c:	f04f 0800 	mov.w	r8, #0
 8018f40:	e687      	b.n	8018c52 <_strtod_l+0x82>
 8018f42:	4886      	ldr	r0, [pc, #536]	; (801915c <_strtod_l+0x58c>)
 8018f44:	f001 ffa6 	bl	801ae94 <nan>
 8018f48:	4680      	mov	r8, r0
 8018f4a:	4689      	mov	r9, r1
 8018f4c:	e681      	b.n	8018c52 <_strtod_l+0x82>
 8018f4e:	9b04      	ldr	r3, [sp, #16]
 8018f50:	9806      	ldr	r0, [sp, #24]
 8018f52:	1aeb      	subs	r3, r5, r3
 8018f54:	f1bb 0f00 	cmp.w	fp, #0
 8018f58:	bf08      	it	eq
 8018f5a:	46a3      	moveq	fp, r4
 8018f5c:	2c10      	cmp	r4, #16
 8018f5e:	9307      	str	r3, [sp, #28]
 8018f60:	4626      	mov	r6, r4
 8018f62:	bfa8      	it	ge
 8018f64:	2610      	movge	r6, #16
 8018f66:	f7e7 fb59 	bl	800061c <__aeabi_ui2d>
 8018f6a:	2c09      	cmp	r4, #9
 8018f6c:	4680      	mov	r8, r0
 8018f6e:	4689      	mov	r9, r1
 8018f70:	dd13      	ble.n	8018f9a <_strtod_l+0x3ca>
 8018f72:	4b7b      	ldr	r3, [pc, #492]	; (8019160 <_strtod_l+0x590>)
 8018f74:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8018f78:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8018f7c:	f7e7 fbc8 	bl	8000710 <__aeabi_dmul>
 8018f80:	4680      	mov	r8, r0
 8018f82:	9805      	ldr	r0, [sp, #20]
 8018f84:	4689      	mov	r9, r1
 8018f86:	f7e7 fb49 	bl	800061c <__aeabi_ui2d>
 8018f8a:	4602      	mov	r2, r0
 8018f8c:	460b      	mov	r3, r1
 8018f8e:	4640      	mov	r0, r8
 8018f90:	4649      	mov	r1, r9
 8018f92:	f7e7 fa07 	bl	80003a4 <__adddf3>
 8018f96:	4680      	mov	r8, r0
 8018f98:	4689      	mov	r9, r1
 8018f9a:	2c0f      	cmp	r4, #15
 8018f9c:	dc36      	bgt.n	801900c <_strtod_l+0x43c>
 8018f9e:	9b07      	ldr	r3, [sp, #28]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	f43f ae56 	beq.w	8018c52 <_strtod_l+0x82>
 8018fa6:	dd22      	ble.n	8018fee <_strtod_l+0x41e>
 8018fa8:	2b16      	cmp	r3, #22
 8018faa:	dc09      	bgt.n	8018fc0 <_strtod_l+0x3f0>
 8018fac:	496c      	ldr	r1, [pc, #432]	; (8019160 <_strtod_l+0x590>)
 8018fae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018fb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018fb6:	4642      	mov	r2, r8
 8018fb8:	464b      	mov	r3, r9
 8018fba:	f7e7 fba9 	bl	8000710 <__aeabi_dmul>
 8018fbe:	e7c3      	b.n	8018f48 <_strtod_l+0x378>
 8018fc0:	9a07      	ldr	r2, [sp, #28]
 8018fc2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8018fc6:	4293      	cmp	r3, r2
 8018fc8:	db20      	blt.n	801900c <_strtod_l+0x43c>
 8018fca:	4d65      	ldr	r5, [pc, #404]	; (8019160 <_strtod_l+0x590>)
 8018fcc:	f1c4 040f 	rsb	r4, r4, #15
 8018fd0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8018fd4:	4642      	mov	r2, r8
 8018fd6:	464b      	mov	r3, r9
 8018fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018fdc:	f7e7 fb98 	bl	8000710 <__aeabi_dmul>
 8018fe0:	9b07      	ldr	r3, [sp, #28]
 8018fe2:	1b1c      	subs	r4, r3, r4
 8018fe4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8018fe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018fec:	e7e5      	b.n	8018fba <_strtod_l+0x3ea>
 8018fee:	9b07      	ldr	r3, [sp, #28]
 8018ff0:	3316      	adds	r3, #22
 8018ff2:	db0b      	blt.n	801900c <_strtod_l+0x43c>
 8018ff4:	9b04      	ldr	r3, [sp, #16]
 8018ff6:	1b5d      	subs	r5, r3, r5
 8018ff8:	4b59      	ldr	r3, [pc, #356]	; (8019160 <_strtod_l+0x590>)
 8018ffa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8018ffe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019002:	4640      	mov	r0, r8
 8019004:	4649      	mov	r1, r9
 8019006:	f7e7 fcad 	bl	8000964 <__aeabi_ddiv>
 801900a:	e79d      	b.n	8018f48 <_strtod_l+0x378>
 801900c:	9b07      	ldr	r3, [sp, #28]
 801900e:	1ba6      	subs	r6, r4, r6
 8019010:	441e      	add	r6, r3
 8019012:	2e00      	cmp	r6, #0
 8019014:	dd74      	ble.n	8019100 <_strtod_l+0x530>
 8019016:	f016 030f 	ands.w	r3, r6, #15
 801901a:	d00a      	beq.n	8019032 <_strtod_l+0x462>
 801901c:	4950      	ldr	r1, [pc, #320]	; (8019160 <_strtod_l+0x590>)
 801901e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019022:	4642      	mov	r2, r8
 8019024:	464b      	mov	r3, r9
 8019026:	e9d1 0100 	ldrd	r0, r1, [r1]
 801902a:	f7e7 fb71 	bl	8000710 <__aeabi_dmul>
 801902e:	4680      	mov	r8, r0
 8019030:	4689      	mov	r9, r1
 8019032:	f036 060f 	bics.w	r6, r6, #15
 8019036:	d052      	beq.n	80190de <_strtod_l+0x50e>
 8019038:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 801903c:	dd27      	ble.n	801908e <_strtod_l+0x4be>
 801903e:	f04f 0b00 	mov.w	fp, #0
 8019042:	f8cd b010 	str.w	fp, [sp, #16]
 8019046:	f8cd b020 	str.w	fp, [sp, #32]
 801904a:	f8cd b018 	str.w	fp, [sp, #24]
 801904e:	2322      	movs	r3, #34	; 0x22
 8019050:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8019158 <_strtod_l+0x588>
 8019054:	f8ca 3000 	str.w	r3, [sl]
 8019058:	f04f 0800 	mov.w	r8, #0
 801905c:	9b08      	ldr	r3, [sp, #32]
 801905e:	2b00      	cmp	r3, #0
 8019060:	f43f adf7 	beq.w	8018c52 <_strtod_l+0x82>
 8019064:	991a      	ldr	r1, [sp, #104]	; 0x68
 8019066:	4650      	mov	r0, sl
 8019068:	f001 fa8c 	bl	801a584 <_Bfree>
 801906c:	9906      	ldr	r1, [sp, #24]
 801906e:	4650      	mov	r0, sl
 8019070:	f001 fa88 	bl	801a584 <_Bfree>
 8019074:	9904      	ldr	r1, [sp, #16]
 8019076:	4650      	mov	r0, sl
 8019078:	f001 fa84 	bl	801a584 <_Bfree>
 801907c:	9908      	ldr	r1, [sp, #32]
 801907e:	4650      	mov	r0, sl
 8019080:	f001 fa80 	bl	801a584 <_Bfree>
 8019084:	4659      	mov	r1, fp
 8019086:	4650      	mov	r0, sl
 8019088:	f001 fa7c 	bl	801a584 <_Bfree>
 801908c:	e5e1      	b.n	8018c52 <_strtod_l+0x82>
 801908e:	4b35      	ldr	r3, [pc, #212]	; (8019164 <_strtod_l+0x594>)
 8019090:	9305      	str	r3, [sp, #20]
 8019092:	2300      	movs	r3, #0
 8019094:	1136      	asrs	r6, r6, #4
 8019096:	4640      	mov	r0, r8
 8019098:	4649      	mov	r1, r9
 801909a:	461f      	mov	r7, r3
 801909c:	2e01      	cmp	r6, #1
 801909e:	dc21      	bgt.n	80190e4 <_strtod_l+0x514>
 80190a0:	b10b      	cbz	r3, 80190a6 <_strtod_l+0x4d6>
 80190a2:	4680      	mov	r8, r0
 80190a4:	4689      	mov	r9, r1
 80190a6:	4b2f      	ldr	r3, [pc, #188]	; (8019164 <_strtod_l+0x594>)
 80190a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80190ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80190b0:	4642      	mov	r2, r8
 80190b2:	464b      	mov	r3, r9
 80190b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80190b8:	f7e7 fb2a 	bl	8000710 <__aeabi_dmul>
 80190bc:	4b26      	ldr	r3, [pc, #152]	; (8019158 <_strtod_l+0x588>)
 80190be:	460a      	mov	r2, r1
 80190c0:	400b      	ands	r3, r1
 80190c2:	4929      	ldr	r1, [pc, #164]	; (8019168 <_strtod_l+0x598>)
 80190c4:	428b      	cmp	r3, r1
 80190c6:	4680      	mov	r8, r0
 80190c8:	d8b9      	bhi.n	801903e <_strtod_l+0x46e>
 80190ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80190ce:	428b      	cmp	r3, r1
 80190d0:	bf86      	itte	hi
 80190d2:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 801916c <_strtod_l+0x59c>
 80190d6:	f04f 38ff 	movhi.w	r8, #4294967295
 80190da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80190de:	2300      	movs	r3, #0
 80190e0:	9305      	str	r3, [sp, #20]
 80190e2:	e07f      	b.n	80191e4 <_strtod_l+0x614>
 80190e4:	07f2      	lsls	r2, r6, #31
 80190e6:	d505      	bpl.n	80190f4 <_strtod_l+0x524>
 80190e8:	9b05      	ldr	r3, [sp, #20]
 80190ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190ee:	f7e7 fb0f 	bl	8000710 <__aeabi_dmul>
 80190f2:	2301      	movs	r3, #1
 80190f4:	9a05      	ldr	r2, [sp, #20]
 80190f6:	3208      	adds	r2, #8
 80190f8:	3701      	adds	r7, #1
 80190fa:	1076      	asrs	r6, r6, #1
 80190fc:	9205      	str	r2, [sp, #20]
 80190fe:	e7cd      	b.n	801909c <_strtod_l+0x4cc>
 8019100:	d0ed      	beq.n	80190de <_strtod_l+0x50e>
 8019102:	4276      	negs	r6, r6
 8019104:	f016 020f 	ands.w	r2, r6, #15
 8019108:	d00a      	beq.n	8019120 <_strtod_l+0x550>
 801910a:	4b15      	ldr	r3, [pc, #84]	; (8019160 <_strtod_l+0x590>)
 801910c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019110:	4640      	mov	r0, r8
 8019112:	4649      	mov	r1, r9
 8019114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019118:	f7e7 fc24 	bl	8000964 <__aeabi_ddiv>
 801911c:	4680      	mov	r8, r0
 801911e:	4689      	mov	r9, r1
 8019120:	1136      	asrs	r6, r6, #4
 8019122:	d0dc      	beq.n	80190de <_strtod_l+0x50e>
 8019124:	2e1f      	cmp	r6, #31
 8019126:	dd23      	ble.n	8019170 <_strtod_l+0x5a0>
 8019128:	f04f 0b00 	mov.w	fp, #0
 801912c:	f8cd b010 	str.w	fp, [sp, #16]
 8019130:	f8cd b020 	str.w	fp, [sp, #32]
 8019134:	f8cd b018 	str.w	fp, [sp, #24]
 8019138:	2322      	movs	r3, #34	; 0x22
 801913a:	f04f 0800 	mov.w	r8, #0
 801913e:	f04f 0900 	mov.w	r9, #0
 8019142:	f8ca 3000 	str.w	r3, [sl]
 8019146:	e789      	b.n	801905c <_strtod_l+0x48c>
 8019148:	0801c6ee 	.word	0x0801c6ee
 801914c:	0801c708 	.word	0x0801c708
 8019150:	0801c6e5 	.word	0x0801c6e5
 8019154:	0801c6e8 	.word	0x0801c6e8
 8019158:	7ff00000 	.word	0x7ff00000
 801915c:	0801c783 	.word	0x0801c783
 8019160:	0801c8f8 	.word	0x0801c8f8
 8019164:	0801c8d0 	.word	0x0801c8d0
 8019168:	7ca00000 	.word	0x7ca00000
 801916c:	7fefffff 	.word	0x7fefffff
 8019170:	f016 0310 	ands.w	r3, r6, #16
 8019174:	bf18      	it	ne
 8019176:	236a      	movne	r3, #106	; 0x6a
 8019178:	4fb1      	ldr	r7, [pc, #708]	; (8019440 <_strtod_l+0x870>)
 801917a:	9305      	str	r3, [sp, #20]
 801917c:	4640      	mov	r0, r8
 801917e:	4649      	mov	r1, r9
 8019180:	2300      	movs	r3, #0
 8019182:	07f2      	lsls	r2, r6, #31
 8019184:	d504      	bpl.n	8019190 <_strtod_l+0x5c0>
 8019186:	e9d7 2300 	ldrd	r2, r3, [r7]
 801918a:	f7e7 fac1 	bl	8000710 <__aeabi_dmul>
 801918e:	2301      	movs	r3, #1
 8019190:	1076      	asrs	r6, r6, #1
 8019192:	f107 0708 	add.w	r7, r7, #8
 8019196:	d1f4      	bne.n	8019182 <_strtod_l+0x5b2>
 8019198:	b10b      	cbz	r3, 801919e <_strtod_l+0x5ce>
 801919a:	4680      	mov	r8, r0
 801919c:	4689      	mov	r9, r1
 801919e:	9b05      	ldr	r3, [sp, #20]
 80191a0:	b1c3      	cbz	r3, 80191d4 <_strtod_l+0x604>
 80191a2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80191a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	4649      	mov	r1, r9
 80191ae:	dd11      	ble.n	80191d4 <_strtod_l+0x604>
 80191b0:	2b1f      	cmp	r3, #31
 80191b2:	f340 8124 	ble.w	80193fe <_strtod_l+0x82e>
 80191b6:	2b34      	cmp	r3, #52	; 0x34
 80191b8:	bfde      	ittt	le
 80191ba:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80191be:	f04f 33ff 	movle.w	r3, #4294967295
 80191c2:	fa03 f202 	lslle.w	r2, r3, r2
 80191c6:	f04f 0800 	mov.w	r8, #0
 80191ca:	bfcc      	ite	gt
 80191cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80191d0:	ea02 0901 	andle.w	r9, r2, r1
 80191d4:	2200      	movs	r2, #0
 80191d6:	2300      	movs	r3, #0
 80191d8:	4640      	mov	r0, r8
 80191da:	4649      	mov	r1, r9
 80191dc:	f7e7 fd00 	bl	8000be0 <__aeabi_dcmpeq>
 80191e0:	2800      	cmp	r0, #0
 80191e2:	d1a1      	bne.n	8019128 <_strtod_l+0x558>
 80191e4:	9b06      	ldr	r3, [sp, #24]
 80191e6:	9300      	str	r3, [sp, #0]
 80191e8:	9908      	ldr	r1, [sp, #32]
 80191ea:	4623      	mov	r3, r4
 80191ec:	465a      	mov	r2, fp
 80191ee:	4650      	mov	r0, sl
 80191f0:	f001 fa30 	bl	801a654 <__s2b>
 80191f4:	9008      	str	r0, [sp, #32]
 80191f6:	2800      	cmp	r0, #0
 80191f8:	f43f af21 	beq.w	801903e <_strtod_l+0x46e>
 80191fc:	9b04      	ldr	r3, [sp, #16]
 80191fe:	1b5d      	subs	r5, r3, r5
 8019200:	9b07      	ldr	r3, [sp, #28]
 8019202:	2b00      	cmp	r3, #0
 8019204:	bfb4      	ite	lt
 8019206:	462b      	movlt	r3, r5
 8019208:	2300      	movge	r3, #0
 801920a:	930e      	str	r3, [sp, #56]	; 0x38
 801920c:	9b07      	ldr	r3, [sp, #28]
 801920e:	f04f 0b00 	mov.w	fp, #0
 8019212:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019216:	9314      	str	r3, [sp, #80]	; 0x50
 8019218:	f8cd b010 	str.w	fp, [sp, #16]
 801921c:	9b08      	ldr	r3, [sp, #32]
 801921e:	4650      	mov	r0, sl
 8019220:	6859      	ldr	r1, [r3, #4]
 8019222:	f001 f96f 	bl	801a504 <_Balloc>
 8019226:	9006      	str	r0, [sp, #24]
 8019228:	2800      	cmp	r0, #0
 801922a:	f43f af10 	beq.w	801904e <_strtod_l+0x47e>
 801922e:	9b08      	ldr	r3, [sp, #32]
 8019230:	691a      	ldr	r2, [r3, #16]
 8019232:	3202      	adds	r2, #2
 8019234:	f103 010c 	add.w	r1, r3, #12
 8019238:	0092      	lsls	r2, r2, #2
 801923a:	300c      	adds	r0, #12
 801923c:	f7fe ff98 	bl	8018170 <memcpy>
 8019240:	ab1c      	add	r3, sp, #112	; 0x70
 8019242:	9301      	str	r3, [sp, #4]
 8019244:	ab1b      	add	r3, sp, #108	; 0x6c
 8019246:	9300      	str	r3, [sp, #0]
 8019248:	4642      	mov	r2, r8
 801924a:	464b      	mov	r3, r9
 801924c:	4650      	mov	r0, sl
 801924e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8019252:	f001 fd3d 	bl	801acd0 <__d2b>
 8019256:	901a      	str	r0, [sp, #104]	; 0x68
 8019258:	2800      	cmp	r0, #0
 801925a:	f43f aef8 	beq.w	801904e <_strtod_l+0x47e>
 801925e:	2101      	movs	r1, #1
 8019260:	4650      	mov	r0, sl
 8019262:	f001 fa8f 	bl	801a784 <__i2b>
 8019266:	9004      	str	r0, [sp, #16]
 8019268:	4603      	mov	r3, r0
 801926a:	2800      	cmp	r0, #0
 801926c:	f43f aeef 	beq.w	801904e <_strtod_l+0x47e>
 8019270:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8019272:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019274:	2d00      	cmp	r5, #0
 8019276:	bfab      	itete	ge
 8019278:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801927a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 801927c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 801927e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8019280:	bfac      	ite	ge
 8019282:	18ee      	addge	r6, r5, r3
 8019284:	1b5c      	sublt	r4, r3, r5
 8019286:	9b05      	ldr	r3, [sp, #20]
 8019288:	1aed      	subs	r5, r5, r3
 801928a:	4415      	add	r5, r2
 801928c:	4b6d      	ldr	r3, [pc, #436]	; (8019444 <_strtod_l+0x874>)
 801928e:	3d01      	subs	r5, #1
 8019290:	429d      	cmp	r5, r3
 8019292:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8019296:	f280 80c4 	bge.w	8019422 <_strtod_l+0x852>
 801929a:	1b5b      	subs	r3, r3, r5
 801929c:	2b1f      	cmp	r3, #31
 801929e:	eba2 0203 	sub.w	r2, r2, r3
 80192a2:	f04f 0701 	mov.w	r7, #1
 80192a6:	f300 80b1 	bgt.w	801940c <_strtod_l+0x83c>
 80192aa:	fa07 f303 	lsl.w	r3, r7, r3
 80192ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80192b0:	2500      	movs	r5, #0
 80192b2:	18b7      	adds	r7, r6, r2
 80192b4:	9b05      	ldr	r3, [sp, #20]
 80192b6:	42be      	cmp	r6, r7
 80192b8:	4414      	add	r4, r2
 80192ba:	441c      	add	r4, r3
 80192bc:	4633      	mov	r3, r6
 80192be:	bfa8      	it	ge
 80192c0:	463b      	movge	r3, r7
 80192c2:	42a3      	cmp	r3, r4
 80192c4:	bfa8      	it	ge
 80192c6:	4623      	movge	r3, r4
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	bfc2      	ittt	gt
 80192cc:	1aff      	subgt	r7, r7, r3
 80192ce:	1ae4      	subgt	r4, r4, r3
 80192d0:	1af6      	subgt	r6, r6, r3
 80192d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	dd17      	ble.n	8019308 <_strtod_l+0x738>
 80192d8:	9904      	ldr	r1, [sp, #16]
 80192da:	461a      	mov	r2, r3
 80192dc:	4650      	mov	r0, sl
 80192de:	f001 fb0f 	bl	801a900 <__pow5mult>
 80192e2:	9004      	str	r0, [sp, #16]
 80192e4:	2800      	cmp	r0, #0
 80192e6:	f43f aeb2 	beq.w	801904e <_strtod_l+0x47e>
 80192ea:	4601      	mov	r1, r0
 80192ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80192ee:	4650      	mov	r0, sl
 80192f0:	f001 fa5e 	bl	801a7b0 <__multiply>
 80192f4:	9009      	str	r0, [sp, #36]	; 0x24
 80192f6:	2800      	cmp	r0, #0
 80192f8:	f43f aea9 	beq.w	801904e <_strtod_l+0x47e>
 80192fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80192fe:	4650      	mov	r0, sl
 8019300:	f001 f940 	bl	801a584 <_Bfree>
 8019304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019306:	931a      	str	r3, [sp, #104]	; 0x68
 8019308:	2f00      	cmp	r7, #0
 801930a:	f300 808e 	bgt.w	801942a <_strtod_l+0x85a>
 801930e:	9b07      	ldr	r3, [sp, #28]
 8019310:	2b00      	cmp	r3, #0
 8019312:	dd08      	ble.n	8019326 <_strtod_l+0x756>
 8019314:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019316:	9906      	ldr	r1, [sp, #24]
 8019318:	4650      	mov	r0, sl
 801931a:	f001 faf1 	bl	801a900 <__pow5mult>
 801931e:	9006      	str	r0, [sp, #24]
 8019320:	2800      	cmp	r0, #0
 8019322:	f43f ae94 	beq.w	801904e <_strtod_l+0x47e>
 8019326:	2c00      	cmp	r4, #0
 8019328:	dd08      	ble.n	801933c <_strtod_l+0x76c>
 801932a:	9906      	ldr	r1, [sp, #24]
 801932c:	4622      	mov	r2, r4
 801932e:	4650      	mov	r0, sl
 8019330:	f001 fb40 	bl	801a9b4 <__lshift>
 8019334:	9006      	str	r0, [sp, #24]
 8019336:	2800      	cmp	r0, #0
 8019338:	f43f ae89 	beq.w	801904e <_strtod_l+0x47e>
 801933c:	2e00      	cmp	r6, #0
 801933e:	dd08      	ble.n	8019352 <_strtod_l+0x782>
 8019340:	9904      	ldr	r1, [sp, #16]
 8019342:	4632      	mov	r2, r6
 8019344:	4650      	mov	r0, sl
 8019346:	f001 fb35 	bl	801a9b4 <__lshift>
 801934a:	9004      	str	r0, [sp, #16]
 801934c:	2800      	cmp	r0, #0
 801934e:	f43f ae7e 	beq.w	801904e <_strtod_l+0x47e>
 8019352:	9a06      	ldr	r2, [sp, #24]
 8019354:	991a      	ldr	r1, [sp, #104]	; 0x68
 8019356:	4650      	mov	r0, sl
 8019358:	f001 fbb8 	bl	801aacc <__mdiff>
 801935c:	4683      	mov	fp, r0
 801935e:	2800      	cmp	r0, #0
 8019360:	f43f ae75 	beq.w	801904e <_strtod_l+0x47e>
 8019364:	2400      	movs	r4, #0
 8019366:	68c3      	ldr	r3, [r0, #12]
 8019368:	9904      	ldr	r1, [sp, #16]
 801936a:	60c4      	str	r4, [r0, #12]
 801936c:	930b      	str	r3, [sp, #44]	; 0x2c
 801936e:	f001 fb91 	bl	801aa94 <__mcmp>
 8019372:	42a0      	cmp	r0, r4
 8019374:	da6c      	bge.n	8019450 <_strtod_l+0x880>
 8019376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019378:	ea53 0308 	orrs.w	r3, r3, r8
 801937c:	f040 8092 	bne.w	80194a4 <_strtod_l+0x8d4>
 8019380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019384:	2b00      	cmp	r3, #0
 8019386:	f040 808d 	bne.w	80194a4 <_strtod_l+0x8d4>
 801938a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801938e:	0d1b      	lsrs	r3, r3, #20
 8019390:	051b      	lsls	r3, r3, #20
 8019392:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8019396:	f240 8085 	bls.w	80194a4 <_strtod_l+0x8d4>
 801939a:	f8db 3014 	ldr.w	r3, [fp, #20]
 801939e:	b91b      	cbnz	r3, 80193a8 <_strtod_l+0x7d8>
 80193a0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80193a4:	2b01      	cmp	r3, #1
 80193a6:	dd7d      	ble.n	80194a4 <_strtod_l+0x8d4>
 80193a8:	4659      	mov	r1, fp
 80193aa:	2201      	movs	r2, #1
 80193ac:	4650      	mov	r0, sl
 80193ae:	f001 fb01 	bl	801a9b4 <__lshift>
 80193b2:	9904      	ldr	r1, [sp, #16]
 80193b4:	4683      	mov	fp, r0
 80193b6:	f001 fb6d 	bl	801aa94 <__mcmp>
 80193ba:	2800      	cmp	r0, #0
 80193bc:	dd72      	ble.n	80194a4 <_strtod_l+0x8d4>
 80193be:	9905      	ldr	r1, [sp, #20]
 80193c0:	4a21      	ldr	r2, [pc, #132]	; (8019448 <_strtod_l+0x878>)
 80193c2:	464b      	mov	r3, r9
 80193c4:	2900      	cmp	r1, #0
 80193c6:	f000 808d 	beq.w	80194e4 <_strtod_l+0x914>
 80193ca:	ea02 0109 	and.w	r1, r2, r9
 80193ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80193d2:	f300 8087 	bgt.w	80194e4 <_strtod_l+0x914>
 80193d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80193da:	f77f aead 	ble.w	8019138 <_strtod_l+0x568>
 80193de:	4b1b      	ldr	r3, [pc, #108]	; (801944c <_strtod_l+0x87c>)
 80193e0:	4640      	mov	r0, r8
 80193e2:	4649      	mov	r1, r9
 80193e4:	2200      	movs	r2, #0
 80193e6:	f7e7 f993 	bl	8000710 <__aeabi_dmul>
 80193ea:	460b      	mov	r3, r1
 80193ec:	4303      	orrs	r3, r0
 80193ee:	bf08      	it	eq
 80193f0:	2322      	moveq	r3, #34	; 0x22
 80193f2:	4680      	mov	r8, r0
 80193f4:	4689      	mov	r9, r1
 80193f6:	bf08      	it	eq
 80193f8:	f8ca 3000 	streq.w	r3, [sl]
 80193fc:	e632      	b.n	8019064 <_strtod_l+0x494>
 80193fe:	f04f 32ff 	mov.w	r2, #4294967295
 8019402:	fa02 f303 	lsl.w	r3, r2, r3
 8019406:	ea03 0808 	and.w	r8, r3, r8
 801940a:	e6e3      	b.n	80191d4 <_strtod_l+0x604>
 801940c:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8019410:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8019414:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8019418:	35e2      	adds	r5, #226	; 0xe2
 801941a:	fa07 f505 	lsl.w	r5, r7, r5
 801941e:	970f      	str	r7, [sp, #60]	; 0x3c
 8019420:	e747      	b.n	80192b2 <_strtod_l+0x6e2>
 8019422:	2301      	movs	r3, #1
 8019424:	2500      	movs	r5, #0
 8019426:	930f      	str	r3, [sp, #60]	; 0x3c
 8019428:	e743      	b.n	80192b2 <_strtod_l+0x6e2>
 801942a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801942c:	463a      	mov	r2, r7
 801942e:	4650      	mov	r0, sl
 8019430:	f001 fac0 	bl	801a9b4 <__lshift>
 8019434:	901a      	str	r0, [sp, #104]	; 0x68
 8019436:	2800      	cmp	r0, #0
 8019438:	f47f af69 	bne.w	801930e <_strtod_l+0x73e>
 801943c:	e607      	b.n	801904e <_strtod_l+0x47e>
 801943e:	bf00      	nop
 8019440:	0801c720 	.word	0x0801c720
 8019444:	fffffc02 	.word	0xfffffc02
 8019448:	7ff00000 	.word	0x7ff00000
 801944c:	39500000 	.word	0x39500000
 8019450:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8019454:	d165      	bne.n	8019522 <_strtod_l+0x952>
 8019456:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019458:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801945c:	b35a      	cbz	r2, 80194b6 <_strtod_l+0x8e6>
 801945e:	4a9a      	ldr	r2, [pc, #616]	; (80196c8 <_strtod_l+0xaf8>)
 8019460:	4293      	cmp	r3, r2
 8019462:	d12b      	bne.n	80194bc <_strtod_l+0x8ec>
 8019464:	9b05      	ldr	r3, [sp, #20]
 8019466:	4641      	mov	r1, r8
 8019468:	b303      	cbz	r3, 80194ac <_strtod_l+0x8dc>
 801946a:	4b98      	ldr	r3, [pc, #608]	; (80196cc <_strtod_l+0xafc>)
 801946c:	464a      	mov	r2, r9
 801946e:	4013      	ands	r3, r2
 8019470:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019474:	f04f 32ff 	mov.w	r2, #4294967295
 8019478:	d81b      	bhi.n	80194b2 <_strtod_l+0x8e2>
 801947a:	0d1b      	lsrs	r3, r3, #20
 801947c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019480:	fa02 f303 	lsl.w	r3, r2, r3
 8019484:	4299      	cmp	r1, r3
 8019486:	d119      	bne.n	80194bc <_strtod_l+0x8ec>
 8019488:	4b91      	ldr	r3, [pc, #580]	; (80196d0 <_strtod_l+0xb00>)
 801948a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801948c:	429a      	cmp	r2, r3
 801948e:	d102      	bne.n	8019496 <_strtod_l+0x8c6>
 8019490:	3101      	adds	r1, #1
 8019492:	f43f addc 	beq.w	801904e <_strtod_l+0x47e>
 8019496:	4b8d      	ldr	r3, [pc, #564]	; (80196cc <_strtod_l+0xafc>)
 8019498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801949a:	401a      	ands	r2, r3
 801949c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80194a0:	f04f 0800 	mov.w	r8, #0
 80194a4:	9b05      	ldr	r3, [sp, #20]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d199      	bne.n	80193de <_strtod_l+0x80e>
 80194aa:	e5db      	b.n	8019064 <_strtod_l+0x494>
 80194ac:	f04f 33ff 	mov.w	r3, #4294967295
 80194b0:	e7e8      	b.n	8019484 <_strtod_l+0x8b4>
 80194b2:	4613      	mov	r3, r2
 80194b4:	e7e6      	b.n	8019484 <_strtod_l+0x8b4>
 80194b6:	ea53 0308 	orrs.w	r3, r3, r8
 80194ba:	d080      	beq.n	80193be <_strtod_l+0x7ee>
 80194bc:	b1e5      	cbz	r5, 80194f8 <_strtod_l+0x928>
 80194be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194c0:	421d      	tst	r5, r3
 80194c2:	d0ef      	beq.n	80194a4 <_strtod_l+0x8d4>
 80194c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80194c6:	9a05      	ldr	r2, [sp, #20]
 80194c8:	4640      	mov	r0, r8
 80194ca:	4649      	mov	r1, r9
 80194cc:	b1c3      	cbz	r3, 8019500 <_strtod_l+0x930>
 80194ce:	f7ff fb5d 	bl	8018b8c <sulp>
 80194d2:	4602      	mov	r2, r0
 80194d4:	460b      	mov	r3, r1
 80194d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80194da:	f7e6 ff63 	bl	80003a4 <__adddf3>
 80194de:	4680      	mov	r8, r0
 80194e0:	4689      	mov	r9, r1
 80194e2:	e7df      	b.n	80194a4 <_strtod_l+0x8d4>
 80194e4:	4013      	ands	r3, r2
 80194e6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80194ea:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80194ee:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80194f2:	f04f 38ff 	mov.w	r8, #4294967295
 80194f6:	e7d5      	b.n	80194a4 <_strtod_l+0x8d4>
 80194f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80194fa:	ea13 0f08 	tst.w	r3, r8
 80194fe:	e7e0      	b.n	80194c2 <_strtod_l+0x8f2>
 8019500:	f7ff fb44 	bl	8018b8c <sulp>
 8019504:	4602      	mov	r2, r0
 8019506:	460b      	mov	r3, r1
 8019508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801950c:	f7e6 ff48 	bl	80003a0 <__aeabi_dsub>
 8019510:	2200      	movs	r2, #0
 8019512:	2300      	movs	r3, #0
 8019514:	4680      	mov	r8, r0
 8019516:	4689      	mov	r9, r1
 8019518:	f7e7 fb62 	bl	8000be0 <__aeabi_dcmpeq>
 801951c:	2800      	cmp	r0, #0
 801951e:	d0c1      	beq.n	80194a4 <_strtod_l+0x8d4>
 8019520:	e60a      	b.n	8019138 <_strtod_l+0x568>
 8019522:	9904      	ldr	r1, [sp, #16]
 8019524:	4658      	mov	r0, fp
 8019526:	f001 fc2f 	bl	801ad88 <__ratio>
 801952a:	2200      	movs	r2, #0
 801952c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019530:	4606      	mov	r6, r0
 8019532:	460f      	mov	r7, r1
 8019534:	f7e7 fb68 	bl	8000c08 <__aeabi_dcmple>
 8019538:	2800      	cmp	r0, #0
 801953a:	d070      	beq.n	801961e <_strtod_l+0xa4e>
 801953c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801953e:	2b00      	cmp	r3, #0
 8019540:	d042      	beq.n	80195c8 <_strtod_l+0x9f8>
 8019542:	4f64      	ldr	r7, [pc, #400]	; (80196d4 <_strtod_l+0xb04>)
 8019544:	2600      	movs	r6, #0
 8019546:	4d63      	ldr	r5, [pc, #396]	; (80196d4 <_strtod_l+0xb04>)
 8019548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801954a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801954e:	0d1b      	lsrs	r3, r3, #20
 8019550:	051b      	lsls	r3, r3, #20
 8019552:	930f      	str	r3, [sp, #60]	; 0x3c
 8019554:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019556:	4b60      	ldr	r3, [pc, #384]	; (80196d8 <_strtod_l+0xb08>)
 8019558:	429a      	cmp	r2, r3
 801955a:	f040 80c5 	bne.w	80196e8 <_strtod_l+0xb18>
 801955e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019560:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8019564:	4640      	mov	r0, r8
 8019566:	4649      	mov	r1, r9
 8019568:	f001 fb38 	bl	801abdc <__ulp>
 801956c:	4602      	mov	r2, r0
 801956e:	460b      	mov	r3, r1
 8019570:	4630      	mov	r0, r6
 8019572:	4639      	mov	r1, r7
 8019574:	f7e7 f8cc 	bl	8000710 <__aeabi_dmul>
 8019578:	4642      	mov	r2, r8
 801957a:	464b      	mov	r3, r9
 801957c:	f7e6 ff12 	bl	80003a4 <__adddf3>
 8019580:	460b      	mov	r3, r1
 8019582:	4952      	ldr	r1, [pc, #328]	; (80196cc <_strtod_l+0xafc>)
 8019584:	4a55      	ldr	r2, [pc, #340]	; (80196dc <_strtod_l+0xb0c>)
 8019586:	4019      	ands	r1, r3
 8019588:	4291      	cmp	r1, r2
 801958a:	4680      	mov	r8, r0
 801958c:	d95d      	bls.n	801964a <_strtod_l+0xa7a>
 801958e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019590:	4b4f      	ldr	r3, [pc, #316]	; (80196d0 <_strtod_l+0xb00>)
 8019592:	429a      	cmp	r2, r3
 8019594:	d103      	bne.n	801959e <_strtod_l+0x9ce>
 8019596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019598:	3301      	adds	r3, #1
 801959a:	f43f ad58 	beq.w	801904e <_strtod_l+0x47e>
 801959e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80196d0 <_strtod_l+0xb00>
 80195a2:	f04f 38ff 	mov.w	r8, #4294967295
 80195a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80195a8:	4650      	mov	r0, sl
 80195aa:	f000 ffeb 	bl	801a584 <_Bfree>
 80195ae:	9906      	ldr	r1, [sp, #24]
 80195b0:	4650      	mov	r0, sl
 80195b2:	f000 ffe7 	bl	801a584 <_Bfree>
 80195b6:	9904      	ldr	r1, [sp, #16]
 80195b8:	4650      	mov	r0, sl
 80195ba:	f000 ffe3 	bl	801a584 <_Bfree>
 80195be:	4659      	mov	r1, fp
 80195c0:	4650      	mov	r0, sl
 80195c2:	f000 ffdf 	bl	801a584 <_Bfree>
 80195c6:	e629      	b.n	801921c <_strtod_l+0x64c>
 80195c8:	f1b8 0f00 	cmp.w	r8, #0
 80195cc:	d119      	bne.n	8019602 <_strtod_l+0xa32>
 80195ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80195d4:	b9e3      	cbnz	r3, 8019610 <_strtod_l+0xa40>
 80195d6:	4b3f      	ldr	r3, [pc, #252]	; (80196d4 <_strtod_l+0xb04>)
 80195d8:	2200      	movs	r2, #0
 80195da:	4630      	mov	r0, r6
 80195dc:	4639      	mov	r1, r7
 80195de:	f7e7 fb09 	bl	8000bf4 <__aeabi_dcmplt>
 80195e2:	b9c8      	cbnz	r0, 8019618 <_strtod_l+0xa48>
 80195e4:	4b3e      	ldr	r3, [pc, #248]	; (80196e0 <_strtod_l+0xb10>)
 80195e6:	2200      	movs	r2, #0
 80195e8:	4630      	mov	r0, r6
 80195ea:	4639      	mov	r1, r7
 80195ec:	f7e7 f890 	bl	8000710 <__aeabi_dmul>
 80195f0:	4604      	mov	r4, r0
 80195f2:	460d      	mov	r5, r1
 80195f4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80195f8:	9416      	str	r4, [sp, #88]	; 0x58
 80195fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80195fc:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8019600:	e7a2      	b.n	8019548 <_strtod_l+0x978>
 8019602:	f1b8 0f01 	cmp.w	r8, #1
 8019606:	d103      	bne.n	8019610 <_strtod_l+0xa40>
 8019608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801960a:	2b00      	cmp	r3, #0
 801960c:	f43f ad94 	beq.w	8019138 <_strtod_l+0x568>
 8019610:	4f34      	ldr	r7, [pc, #208]	; (80196e4 <_strtod_l+0xb14>)
 8019612:	2600      	movs	r6, #0
 8019614:	2400      	movs	r4, #0
 8019616:	e796      	b.n	8019546 <_strtod_l+0x976>
 8019618:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801961a:	4d31      	ldr	r5, [pc, #196]	; (80196e0 <_strtod_l+0xb10>)
 801961c:	e7ea      	b.n	80195f4 <_strtod_l+0xa24>
 801961e:	4b30      	ldr	r3, [pc, #192]	; (80196e0 <_strtod_l+0xb10>)
 8019620:	2200      	movs	r2, #0
 8019622:	4630      	mov	r0, r6
 8019624:	4639      	mov	r1, r7
 8019626:	f7e7 f873 	bl	8000710 <__aeabi_dmul>
 801962a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801962c:	4604      	mov	r4, r0
 801962e:	460d      	mov	r5, r1
 8019630:	b933      	cbnz	r3, 8019640 <_strtod_l+0xa70>
 8019632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019636:	9010      	str	r0, [sp, #64]	; 0x40
 8019638:	9311      	str	r3, [sp, #68]	; 0x44
 801963a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801963e:	e783      	b.n	8019548 <_strtod_l+0x978>
 8019640:	4602      	mov	r2, r0
 8019642:	460b      	mov	r3, r1
 8019644:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8019648:	e7f7      	b.n	801963a <_strtod_l+0xa6a>
 801964a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801964e:	9b05      	ldr	r3, [sp, #20]
 8019650:	2b00      	cmp	r3, #0
 8019652:	d1a8      	bne.n	80195a6 <_strtod_l+0x9d6>
 8019654:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019658:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801965a:	0d1b      	lsrs	r3, r3, #20
 801965c:	051b      	lsls	r3, r3, #20
 801965e:	429a      	cmp	r2, r3
 8019660:	d1a1      	bne.n	80195a6 <_strtod_l+0x9d6>
 8019662:	4620      	mov	r0, r4
 8019664:	4629      	mov	r1, r5
 8019666:	f7e7 fd0d 	bl	8001084 <__aeabi_d2lz>
 801966a:	f7e7 f823 	bl	80006b4 <__aeabi_l2d>
 801966e:	4602      	mov	r2, r0
 8019670:	460b      	mov	r3, r1
 8019672:	4620      	mov	r0, r4
 8019674:	4629      	mov	r1, r5
 8019676:	f7e6 fe93 	bl	80003a0 <__aeabi_dsub>
 801967a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801967c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019680:	ea43 0308 	orr.w	r3, r3, r8
 8019684:	4313      	orrs	r3, r2
 8019686:	4604      	mov	r4, r0
 8019688:	460d      	mov	r5, r1
 801968a:	d068      	beq.n	801975e <_strtod_l+0xb8e>
 801968c:	a30a      	add	r3, pc, #40	; (adr r3, 80196b8 <_strtod_l+0xae8>)
 801968e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019692:	f7e7 faaf 	bl	8000bf4 <__aeabi_dcmplt>
 8019696:	2800      	cmp	r0, #0
 8019698:	f47f ace4 	bne.w	8019064 <_strtod_l+0x494>
 801969c:	a308      	add	r3, pc, #32	; (adr r3, 80196c0 <_strtod_l+0xaf0>)
 801969e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196a2:	4620      	mov	r0, r4
 80196a4:	4629      	mov	r1, r5
 80196a6:	f7e7 fac3 	bl	8000c30 <__aeabi_dcmpgt>
 80196aa:	2800      	cmp	r0, #0
 80196ac:	f43f af7b 	beq.w	80195a6 <_strtod_l+0x9d6>
 80196b0:	e4d8      	b.n	8019064 <_strtod_l+0x494>
 80196b2:	bf00      	nop
 80196b4:	f3af 8000 	nop.w
 80196b8:	94a03595 	.word	0x94a03595
 80196bc:	3fdfffff 	.word	0x3fdfffff
 80196c0:	35afe535 	.word	0x35afe535
 80196c4:	3fe00000 	.word	0x3fe00000
 80196c8:	000fffff 	.word	0x000fffff
 80196cc:	7ff00000 	.word	0x7ff00000
 80196d0:	7fefffff 	.word	0x7fefffff
 80196d4:	3ff00000 	.word	0x3ff00000
 80196d8:	7fe00000 	.word	0x7fe00000
 80196dc:	7c9fffff 	.word	0x7c9fffff
 80196e0:	3fe00000 	.word	0x3fe00000
 80196e4:	bff00000 	.word	0xbff00000
 80196e8:	9b05      	ldr	r3, [sp, #20]
 80196ea:	b313      	cbz	r3, 8019732 <_strtod_l+0xb62>
 80196ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80196ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80196f2:	d81e      	bhi.n	8019732 <_strtod_l+0xb62>
 80196f4:	a326      	add	r3, pc, #152	; (adr r3, 8019790 <_strtod_l+0xbc0>)
 80196f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196fa:	4620      	mov	r0, r4
 80196fc:	4629      	mov	r1, r5
 80196fe:	f7e7 fa83 	bl	8000c08 <__aeabi_dcmple>
 8019702:	b190      	cbz	r0, 801972a <_strtod_l+0xb5a>
 8019704:	4629      	mov	r1, r5
 8019706:	4620      	mov	r0, r4
 8019708:	f7e7 fada 	bl	8000cc0 <__aeabi_d2uiz>
 801970c:	2801      	cmp	r0, #1
 801970e:	bf38      	it	cc
 8019710:	2001      	movcc	r0, #1
 8019712:	f7e6 ff83 	bl	800061c <__aeabi_ui2d>
 8019716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019718:	4604      	mov	r4, r0
 801971a:	460d      	mov	r5, r1
 801971c:	b9d3      	cbnz	r3, 8019754 <_strtod_l+0xb84>
 801971e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019722:	9012      	str	r0, [sp, #72]	; 0x48
 8019724:	9313      	str	r3, [sp, #76]	; 0x4c
 8019726:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801972a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801972c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8019730:	1a9f      	subs	r7, r3, r2
 8019732:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8019736:	f001 fa51 	bl	801abdc <__ulp>
 801973a:	4602      	mov	r2, r0
 801973c:	460b      	mov	r3, r1
 801973e:	4630      	mov	r0, r6
 8019740:	4639      	mov	r1, r7
 8019742:	f7e6 ffe5 	bl	8000710 <__aeabi_dmul>
 8019746:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801974a:	f7e6 fe2b 	bl	80003a4 <__adddf3>
 801974e:	4680      	mov	r8, r0
 8019750:	4689      	mov	r9, r1
 8019752:	e77c      	b.n	801964e <_strtod_l+0xa7e>
 8019754:	4602      	mov	r2, r0
 8019756:	460b      	mov	r3, r1
 8019758:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 801975c:	e7e3      	b.n	8019726 <_strtod_l+0xb56>
 801975e:	a30e      	add	r3, pc, #56	; (adr r3, 8019798 <_strtod_l+0xbc8>)
 8019760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019764:	f7e7 fa46 	bl	8000bf4 <__aeabi_dcmplt>
 8019768:	e79f      	b.n	80196aa <_strtod_l+0xada>
 801976a:	2300      	movs	r3, #0
 801976c:	930a      	str	r3, [sp, #40]	; 0x28
 801976e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019770:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019772:	6013      	str	r3, [r2, #0]
 8019774:	f7ff ba71 	b.w	8018c5a <_strtod_l+0x8a>
 8019778:	2a65      	cmp	r2, #101	; 0x65
 801977a:	f43f ab63 	beq.w	8018e44 <_strtod_l+0x274>
 801977e:	2a45      	cmp	r2, #69	; 0x45
 8019780:	f43f ab60 	beq.w	8018e44 <_strtod_l+0x274>
 8019784:	2301      	movs	r3, #1
 8019786:	f7ff bb95 	b.w	8018eb4 <_strtod_l+0x2e4>
 801978a:	bf00      	nop
 801978c:	f3af 8000 	nop.w
 8019790:	ffc00000 	.word	0xffc00000
 8019794:	41dfffff 	.word	0x41dfffff
 8019798:	94a03595 	.word	0x94a03595
 801979c:	3fcfffff 	.word	0x3fcfffff

080197a0 <strtod>:
 80197a0:	460a      	mov	r2, r1
 80197a2:	4601      	mov	r1, r0
 80197a4:	4802      	ldr	r0, [pc, #8]	; (80197b0 <strtod+0x10>)
 80197a6:	4b03      	ldr	r3, [pc, #12]	; (80197b4 <strtod+0x14>)
 80197a8:	6800      	ldr	r0, [r0, #0]
 80197aa:	f7ff ba11 	b.w	8018bd0 <_strtod_l>
 80197ae:	bf00      	nop
 80197b0:	20000120 	.word	0x20000120
 80197b4:	20000188 	.word	0x20000188

080197b8 <time>:
 80197b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80197ba:	4b0b      	ldr	r3, [pc, #44]	; (80197e8 <time+0x30>)
 80197bc:	4604      	mov	r4, r0
 80197be:	2200      	movs	r2, #0
 80197c0:	6818      	ldr	r0, [r3, #0]
 80197c2:	4669      	mov	r1, sp
 80197c4:	f000 fe08 	bl	801a3d8 <_gettimeofday_r>
 80197c8:	2800      	cmp	r0, #0
 80197ca:	da05      	bge.n	80197d8 <time+0x20>
 80197cc:	f04f 32ff 	mov.w	r2, #4294967295
 80197d0:	f04f 33ff 	mov.w	r3, #4294967295
 80197d4:	e9cd 2300 	strd	r2, r3, [sp]
 80197d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80197dc:	b10c      	cbz	r4, 80197e2 <time+0x2a>
 80197de:	e9c4 0100 	strd	r0, r1, [r4]
 80197e2:	b004      	add	sp, #16
 80197e4:	bd10      	pop	{r4, pc}
 80197e6:	bf00      	nop
 80197e8:	20000120 	.word	0x20000120

080197ec <__swbuf_r>:
 80197ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197ee:	460e      	mov	r6, r1
 80197f0:	4614      	mov	r4, r2
 80197f2:	4605      	mov	r5, r0
 80197f4:	b118      	cbz	r0, 80197fe <__swbuf_r+0x12>
 80197f6:	6983      	ldr	r3, [r0, #24]
 80197f8:	b90b      	cbnz	r3, 80197fe <__swbuf_r+0x12>
 80197fa:	f000 f9eb 	bl	8019bd4 <__sinit>
 80197fe:	4b21      	ldr	r3, [pc, #132]	; (8019884 <__swbuf_r+0x98>)
 8019800:	429c      	cmp	r4, r3
 8019802:	d12b      	bne.n	801985c <__swbuf_r+0x70>
 8019804:	686c      	ldr	r4, [r5, #4]
 8019806:	69a3      	ldr	r3, [r4, #24]
 8019808:	60a3      	str	r3, [r4, #8]
 801980a:	89a3      	ldrh	r3, [r4, #12]
 801980c:	071a      	lsls	r2, r3, #28
 801980e:	d52f      	bpl.n	8019870 <__swbuf_r+0x84>
 8019810:	6923      	ldr	r3, [r4, #16]
 8019812:	b36b      	cbz	r3, 8019870 <__swbuf_r+0x84>
 8019814:	6923      	ldr	r3, [r4, #16]
 8019816:	6820      	ldr	r0, [r4, #0]
 8019818:	1ac0      	subs	r0, r0, r3
 801981a:	6963      	ldr	r3, [r4, #20]
 801981c:	b2f6      	uxtb	r6, r6
 801981e:	4283      	cmp	r3, r0
 8019820:	4637      	mov	r7, r6
 8019822:	dc04      	bgt.n	801982e <__swbuf_r+0x42>
 8019824:	4621      	mov	r1, r4
 8019826:	4628      	mov	r0, r5
 8019828:	f000 f940 	bl	8019aac <_fflush_r>
 801982c:	bb30      	cbnz	r0, 801987c <__swbuf_r+0x90>
 801982e:	68a3      	ldr	r3, [r4, #8]
 8019830:	3b01      	subs	r3, #1
 8019832:	60a3      	str	r3, [r4, #8]
 8019834:	6823      	ldr	r3, [r4, #0]
 8019836:	1c5a      	adds	r2, r3, #1
 8019838:	6022      	str	r2, [r4, #0]
 801983a:	701e      	strb	r6, [r3, #0]
 801983c:	6963      	ldr	r3, [r4, #20]
 801983e:	3001      	adds	r0, #1
 8019840:	4283      	cmp	r3, r0
 8019842:	d004      	beq.n	801984e <__swbuf_r+0x62>
 8019844:	89a3      	ldrh	r3, [r4, #12]
 8019846:	07db      	lsls	r3, r3, #31
 8019848:	d506      	bpl.n	8019858 <__swbuf_r+0x6c>
 801984a:	2e0a      	cmp	r6, #10
 801984c:	d104      	bne.n	8019858 <__swbuf_r+0x6c>
 801984e:	4621      	mov	r1, r4
 8019850:	4628      	mov	r0, r5
 8019852:	f000 f92b 	bl	8019aac <_fflush_r>
 8019856:	b988      	cbnz	r0, 801987c <__swbuf_r+0x90>
 8019858:	4638      	mov	r0, r7
 801985a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801985c:	4b0a      	ldr	r3, [pc, #40]	; (8019888 <__swbuf_r+0x9c>)
 801985e:	429c      	cmp	r4, r3
 8019860:	d101      	bne.n	8019866 <__swbuf_r+0x7a>
 8019862:	68ac      	ldr	r4, [r5, #8]
 8019864:	e7cf      	b.n	8019806 <__swbuf_r+0x1a>
 8019866:	4b09      	ldr	r3, [pc, #36]	; (801988c <__swbuf_r+0xa0>)
 8019868:	429c      	cmp	r4, r3
 801986a:	bf08      	it	eq
 801986c:	68ec      	ldreq	r4, [r5, #12]
 801986e:	e7ca      	b.n	8019806 <__swbuf_r+0x1a>
 8019870:	4621      	mov	r1, r4
 8019872:	4628      	mov	r0, r5
 8019874:	f000 f80c 	bl	8019890 <__swsetup_r>
 8019878:	2800      	cmp	r0, #0
 801987a:	d0cb      	beq.n	8019814 <__swbuf_r+0x28>
 801987c:	f04f 37ff 	mov.w	r7, #4294967295
 8019880:	e7ea      	b.n	8019858 <__swbuf_r+0x6c>
 8019882:	bf00      	nop
 8019884:	0801c7a4 	.word	0x0801c7a4
 8019888:	0801c7c4 	.word	0x0801c7c4
 801988c:	0801c784 	.word	0x0801c784

08019890 <__swsetup_r>:
 8019890:	4b32      	ldr	r3, [pc, #200]	; (801995c <__swsetup_r+0xcc>)
 8019892:	b570      	push	{r4, r5, r6, lr}
 8019894:	681d      	ldr	r5, [r3, #0]
 8019896:	4606      	mov	r6, r0
 8019898:	460c      	mov	r4, r1
 801989a:	b125      	cbz	r5, 80198a6 <__swsetup_r+0x16>
 801989c:	69ab      	ldr	r3, [r5, #24]
 801989e:	b913      	cbnz	r3, 80198a6 <__swsetup_r+0x16>
 80198a0:	4628      	mov	r0, r5
 80198a2:	f000 f997 	bl	8019bd4 <__sinit>
 80198a6:	4b2e      	ldr	r3, [pc, #184]	; (8019960 <__swsetup_r+0xd0>)
 80198a8:	429c      	cmp	r4, r3
 80198aa:	d10f      	bne.n	80198cc <__swsetup_r+0x3c>
 80198ac:	686c      	ldr	r4, [r5, #4]
 80198ae:	89a3      	ldrh	r3, [r4, #12]
 80198b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80198b4:	0719      	lsls	r1, r3, #28
 80198b6:	d42c      	bmi.n	8019912 <__swsetup_r+0x82>
 80198b8:	06dd      	lsls	r5, r3, #27
 80198ba:	d411      	bmi.n	80198e0 <__swsetup_r+0x50>
 80198bc:	2309      	movs	r3, #9
 80198be:	6033      	str	r3, [r6, #0]
 80198c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80198c4:	81a3      	strh	r3, [r4, #12]
 80198c6:	f04f 30ff 	mov.w	r0, #4294967295
 80198ca:	e03e      	b.n	801994a <__swsetup_r+0xba>
 80198cc:	4b25      	ldr	r3, [pc, #148]	; (8019964 <__swsetup_r+0xd4>)
 80198ce:	429c      	cmp	r4, r3
 80198d0:	d101      	bne.n	80198d6 <__swsetup_r+0x46>
 80198d2:	68ac      	ldr	r4, [r5, #8]
 80198d4:	e7eb      	b.n	80198ae <__swsetup_r+0x1e>
 80198d6:	4b24      	ldr	r3, [pc, #144]	; (8019968 <__swsetup_r+0xd8>)
 80198d8:	429c      	cmp	r4, r3
 80198da:	bf08      	it	eq
 80198dc:	68ec      	ldreq	r4, [r5, #12]
 80198de:	e7e6      	b.n	80198ae <__swsetup_r+0x1e>
 80198e0:	0758      	lsls	r0, r3, #29
 80198e2:	d512      	bpl.n	801990a <__swsetup_r+0x7a>
 80198e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80198e6:	b141      	cbz	r1, 80198fa <__swsetup_r+0x6a>
 80198e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80198ec:	4299      	cmp	r1, r3
 80198ee:	d002      	beq.n	80198f6 <__swsetup_r+0x66>
 80198f0:	4630      	mov	r0, r6
 80198f2:	f7fe fc6d 	bl	80181d0 <_free_r>
 80198f6:	2300      	movs	r3, #0
 80198f8:	6363      	str	r3, [r4, #52]	; 0x34
 80198fa:	89a3      	ldrh	r3, [r4, #12]
 80198fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019900:	81a3      	strh	r3, [r4, #12]
 8019902:	2300      	movs	r3, #0
 8019904:	6063      	str	r3, [r4, #4]
 8019906:	6923      	ldr	r3, [r4, #16]
 8019908:	6023      	str	r3, [r4, #0]
 801990a:	89a3      	ldrh	r3, [r4, #12]
 801990c:	f043 0308 	orr.w	r3, r3, #8
 8019910:	81a3      	strh	r3, [r4, #12]
 8019912:	6923      	ldr	r3, [r4, #16]
 8019914:	b94b      	cbnz	r3, 801992a <__swsetup_r+0x9a>
 8019916:	89a3      	ldrh	r3, [r4, #12]
 8019918:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801991c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019920:	d003      	beq.n	801992a <__swsetup_r+0x9a>
 8019922:	4621      	mov	r1, r4
 8019924:	4630      	mov	r0, r6
 8019926:	f000 fd8f 	bl	801a448 <__smakebuf_r>
 801992a:	89a0      	ldrh	r0, [r4, #12]
 801992c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019930:	f010 0301 	ands.w	r3, r0, #1
 8019934:	d00a      	beq.n	801994c <__swsetup_r+0xbc>
 8019936:	2300      	movs	r3, #0
 8019938:	60a3      	str	r3, [r4, #8]
 801993a:	6963      	ldr	r3, [r4, #20]
 801993c:	425b      	negs	r3, r3
 801993e:	61a3      	str	r3, [r4, #24]
 8019940:	6923      	ldr	r3, [r4, #16]
 8019942:	b943      	cbnz	r3, 8019956 <__swsetup_r+0xc6>
 8019944:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019948:	d1ba      	bne.n	80198c0 <__swsetup_r+0x30>
 801994a:	bd70      	pop	{r4, r5, r6, pc}
 801994c:	0781      	lsls	r1, r0, #30
 801994e:	bf58      	it	pl
 8019950:	6963      	ldrpl	r3, [r4, #20]
 8019952:	60a3      	str	r3, [r4, #8]
 8019954:	e7f4      	b.n	8019940 <__swsetup_r+0xb0>
 8019956:	2000      	movs	r0, #0
 8019958:	e7f7      	b.n	801994a <__swsetup_r+0xba>
 801995a:	bf00      	nop
 801995c:	20000120 	.word	0x20000120
 8019960:	0801c7a4 	.word	0x0801c7a4
 8019964:	0801c7c4 	.word	0x0801c7c4
 8019968:	0801c784 	.word	0x0801c784

0801996c <__assert_func>:
 801996c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801996e:	4614      	mov	r4, r2
 8019970:	461a      	mov	r2, r3
 8019972:	4b09      	ldr	r3, [pc, #36]	; (8019998 <__assert_func+0x2c>)
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	4605      	mov	r5, r0
 8019978:	68d8      	ldr	r0, [r3, #12]
 801997a:	b14c      	cbz	r4, 8019990 <__assert_func+0x24>
 801997c:	4b07      	ldr	r3, [pc, #28]	; (801999c <__assert_func+0x30>)
 801997e:	9100      	str	r1, [sp, #0]
 8019980:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019984:	4906      	ldr	r1, [pc, #24]	; (80199a0 <__assert_func+0x34>)
 8019986:	462b      	mov	r3, r5
 8019988:	f7fe fafa 	bl	8017f80 <fiprintf>
 801998c:	f001 faea 	bl	801af64 <abort>
 8019990:	4b04      	ldr	r3, [pc, #16]	; (80199a4 <__assert_func+0x38>)
 8019992:	461c      	mov	r4, r3
 8019994:	e7f3      	b.n	801997e <__assert_func+0x12>
 8019996:	bf00      	nop
 8019998:	20000120 	.word	0x20000120
 801999c:	0801c748 	.word	0x0801c748
 80199a0:	0801c755 	.word	0x0801c755
 80199a4:	0801c783 	.word	0x0801c783

080199a8 <__sflush_r>:
 80199a8:	898a      	ldrh	r2, [r1, #12]
 80199aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199ac:	4605      	mov	r5, r0
 80199ae:	0710      	lsls	r0, r2, #28
 80199b0:	460c      	mov	r4, r1
 80199b2:	d457      	bmi.n	8019a64 <__sflush_r+0xbc>
 80199b4:	684b      	ldr	r3, [r1, #4]
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	dc04      	bgt.n	80199c4 <__sflush_r+0x1c>
 80199ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80199bc:	2b00      	cmp	r3, #0
 80199be:	dc01      	bgt.n	80199c4 <__sflush_r+0x1c>
 80199c0:	2000      	movs	r0, #0
 80199c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80199c6:	2e00      	cmp	r6, #0
 80199c8:	d0fa      	beq.n	80199c0 <__sflush_r+0x18>
 80199ca:	2300      	movs	r3, #0
 80199cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80199d0:	682f      	ldr	r7, [r5, #0]
 80199d2:	602b      	str	r3, [r5, #0]
 80199d4:	d032      	beq.n	8019a3c <__sflush_r+0x94>
 80199d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80199d8:	89a3      	ldrh	r3, [r4, #12]
 80199da:	075a      	lsls	r2, r3, #29
 80199dc:	d505      	bpl.n	80199ea <__sflush_r+0x42>
 80199de:	6863      	ldr	r3, [r4, #4]
 80199e0:	1ac0      	subs	r0, r0, r3
 80199e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80199e4:	b10b      	cbz	r3, 80199ea <__sflush_r+0x42>
 80199e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80199e8:	1ac0      	subs	r0, r0, r3
 80199ea:	2300      	movs	r3, #0
 80199ec:	4602      	mov	r2, r0
 80199ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80199f0:	6a21      	ldr	r1, [r4, #32]
 80199f2:	4628      	mov	r0, r5
 80199f4:	47b0      	blx	r6
 80199f6:	1c43      	adds	r3, r0, #1
 80199f8:	89a3      	ldrh	r3, [r4, #12]
 80199fa:	d106      	bne.n	8019a0a <__sflush_r+0x62>
 80199fc:	6829      	ldr	r1, [r5, #0]
 80199fe:	291d      	cmp	r1, #29
 8019a00:	d82c      	bhi.n	8019a5c <__sflush_r+0xb4>
 8019a02:	4a29      	ldr	r2, [pc, #164]	; (8019aa8 <__sflush_r+0x100>)
 8019a04:	40ca      	lsrs	r2, r1
 8019a06:	07d6      	lsls	r6, r2, #31
 8019a08:	d528      	bpl.n	8019a5c <__sflush_r+0xb4>
 8019a0a:	2200      	movs	r2, #0
 8019a0c:	6062      	str	r2, [r4, #4]
 8019a0e:	04d9      	lsls	r1, r3, #19
 8019a10:	6922      	ldr	r2, [r4, #16]
 8019a12:	6022      	str	r2, [r4, #0]
 8019a14:	d504      	bpl.n	8019a20 <__sflush_r+0x78>
 8019a16:	1c42      	adds	r2, r0, #1
 8019a18:	d101      	bne.n	8019a1e <__sflush_r+0x76>
 8019a1a:	682b      	ldr	r3, [r5, #0]
 8019a1c:	b903      	cbnz	r3, 8019a20 <__sflush_r+0x78>
 8019a1e:	6560      	str	r0, [r4, #84]	; 0x54
 8019a20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a22:	602f      	str	r7, [r5, #0]
 8019a24:	2900      	cmp	r1, #0
 8019a26:	d0cb      	beq.n	80199c0 <__sflush_r+0x18>
 8019a28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a2c:	4299      	cmp	r1, r3
 8019a2e:	d002      	beq.n	8019a36 <__sflush_r+0x8e>
 8019a30:	4628      	mov	r0, r5
 8019a32:	f7fe fbcd 	bl	80181d0 <_free_r>
 8019a36:	2000      	movs	r0, #0
 8019a38:	6360      	str	r0, [r4, #52]	; 0x34
 8019a3a:	e7c2      	b.n	80199c2 <__sflush_r+0x1a>
 8019a3c:	6a21      	ldr	r1, [r4, #32]
 8019a3e:	2301      	movs	r3, #1
 8019a40:	4628      	mov	r0, r5
 8019a42:	47b0      	blx	r6
 8019a44:	1c41      	adds	r1, r0, #1
 8019a46:	d1c7      	bne.n	80199d8 <__sflush_r+0x30>
 8019a48:	682b      	ldr	r3, [r5, #0]
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d0c4      	beq.n	80199d8 <__sflush_r+0x30>
 8019a4e:	2b1d      	cmp	r3, #29
 8019a50:	d001      	beq.n	8019a56 <__sflush_r+0xae>
 8019a52:	2b16      	cmp	r3, #22
 8019a54:	d101      	bne.n	8019a5a <__sflush_r+0xb2>
 8019a56:	602f      	str	r7, [r5, #0]
 8019a58:	e7b2      	b.n	80199c0 <__sflush_r+0x18>
 8019a5a:	89a3      	ldrh	r3, [r4, #12]
 8019a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a60:	81a3      	strh	r3, [r4, #12]
 8019a62:	e7ae      	b.n	80199c2 <__sflush_r+0x1a>
 8019a64:	690f      	ldr	r7, [r1, #16]
 8019a66:	2f00      	cmp	r7, #0
 8019a68:	d0aa      	beq.n	80199c0 <__sflush_r+0x18>
 8019a6a:	0793      	lsls	r3, r2, #30
 8019a6c:	680e      	ldr	r6, [r1, #0]
 8019a6e:	bf08      	it	eq
 8019a70:	694b      	ldreq	r3, [r1, #20]
 8019a72:	600f      	str	r7, [r1, #0]
 8019a74:	bf18      	it	ne
 8019a76:	2300      	movne	r3, #0
 8019a78:	1bf6      	subs	r6, r6, r7
 8019a7a:	608b      	str	r3, [r1, #8]
 8019a7c:	2e00      	cmp	r6, #0
 8019a7e:	dd9f      	ble.n	80199c0 <__sflush_r+0x18>
 8019a80:	6a21      	ldr	r1, [r4, #32]
 8019a82:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8019a86:	4633      	mov	r3, r6
 8019a88:	463a      	mov	r2, r7
 8019a8a:	4628      	mov	r0, r5
 8019a8c:	47e0      	blx	ip
 8019a8e:	2800      	cmp	r0, #0
 8019a90:	dc06      	bgt.n	8019aa0 <__sflush_r+0xf8>
 8019a92:	89a3      	ldrh	r3, [r4, #12]
 8019a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a98:	81a3      	strh	r3, [r4, #12]
 8019a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8019a9e:	e790      	b.n	80199c2 <__sflush_r+0x1a>
 8019aa0:	4407      	add	r7, r0
 8019aa2:	1a36      	subs	r6, r6, r0
 8019aa4:	e7ea      	b.n	8019a7c <__sflush_r+0xd4>
 8019aa6:	bf00      	nop
 8019aa8:	20400001 	.word	0x20400001

08019aac <_fflush_r>:
 8019aac:	b538      	push	{r3, r4, r5, lr}
 8019aae:	690b      	ldr	r3, [r1, #16]
 8019ab0:	4605      	mov	r5, r0
 8019ab2:	460c      	mov	r4, r1
 8019ab4:	b913      	cbnz	r3, 8019abc <_fflush_r+0x10>
 8019ab6:	2500      	movs	r5, #0
 8019ab8:	4628      	mov	r0, r5
 8019aba:	bd38      	pop	{r3, r4, r5, pc}
 8019abc:	b118      	cbz	r0, 8019ac6 <_fflush_r+0x1a>
 8019abe:	6983      	ldr	r3, [r0, #24]
 8019ac0:	b90b      	cbnz	r3, 8019ac6 <_fflush_r+0x1a>
 8019ac2:	f000 f887 	bl	8019bd4 <__sinit>
 8019ac6:	4b14      	ldr	r3, [pc, #80]	; (8019b18 <_fflush_r+0x6c>)
 8019ac8:	429c      	cmp	r4, r3
 8019aca:	d11b      	bne.n	8019b04 <_fflush_r+0x58>
 8019acc:	686c      	ldr	r4, [r5, #4]
 8019ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d0ef      	beq.n	8019ab6 <_fflush_r+0xa>
 8019ad6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019ad8:	07d0      	lsls	r0, r2, #31
 8019ada:	d404      	bmi.n	8019ae6 <_fflush_r+0x3a>
 8019adc:	0599      	lsls	r1, r3, #22
 8019ade:	d402      	bmi.n	8019ae6 <_fflush_r+0x3a>
 8019ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019ae2:	f7fe fb32 	bl	801814a <__retarget_lock_acquire_recursive>
 8019ae6:	4628      	mov	r0, r5
 8019ae8:	4621      	mov	r1, r4
 8019aea:	f7ff ff5d 	bl	80199a8 <__sflush_r>
 8019aee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019af0:	07da      	lsls	r2, r3, #31
 8019af2:	4605      	mov	r5, r0
 8019af4:	d4e0      	bmi.n	8019ab8 <_fflush_r+0xc>
 8019af6:	89a3      	ldrh	r3, [r4, #12]
 8019af8:	059b      	lsls	r3, r3, #22
 8019afa:	d4dd      	bmi.n	8019ab8 <_fflush_r+0xc>
 8019afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019afe:	f7fe fb25 	bl	801814c <__retarget_lock_release_recursive>
 8019b02:	e7d9      	b.n	8019ab8 <_fflush_r+0xc>
 8019b04:	4b05      	ldr	r3, [pc, #20]	; (8019b1c <_fflush_r+0x70>)
 8019b06:	429c      	cmp	r4, r3
 8019b08:	d101      	bne.n	8019b0e <_fflush_r+0x62>
 8019b0a:	68ac      	ldr	r4, [r5, #8]
 8019b0c:	e7df      	b.n	8019ace <_fflush_r+0x22>
 8019b0e:	4b04      	ldr	r3, [pc, #16]	; (8019b20 <_fflush_r+0x74>)
 8019b10:	429c      	cmp	r4, r3
 8019b12:	bf08      	it	eq
 8019b14:	68ec      	ldreq	r4, [r5, #12]
 8019b16:	e7da      	b.n	8019ace <_fflush_r+0x22>
 8019b18:	0801c7a4 	.word	0x0801c7a4
 8019b1c:	0801c7c4 	.word	0x0801c7c4
 8019b20:	0801c784 	.word	0x0801c784

08019b24 <std>:
 8019b24:	2300      	movs	r3, #0
 8019b26:	b510      	push	{r4, lr}
 8019b28:	4604      	mov	r4, r0
 8019b2a:	e9c0 3300 	strd	r3, r3, [r0]
 8019b2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019b32:	6083      	str	r3, [r0, #8]
 8019b34:	8181      	strh	r1, [r0, #12]
 8019b36:	6643      	str	r3, [r0, #100]	; 0x64
 8019b38:	81c2      	strh	r2, [r0, #14]
 8019b3a:	6183      	str	r3, [r0, #24]
 8019b3c:	4619      	mov	r1, r3
 8019b3e:	2208      	movs	r2, #8
 8019b40:	305c      	adds	r0, #92	; 0x5c
 8019b42:	f7fe fb3d 	bl	80181c0 <memset>
 8019b46:	4b05      	ldr	r3, [pc, #20]	; (8019b5c <std+0x38>)
 8019b48:	6263      	str	r3, [r4, #36]	; 0x24
 8019b4a:	4b05      	ldr	r3, [pc, #20]	; (8019b60 <std+0x3c>)
 8019b4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8019b4e:	4b05      	ldr	r3, [pc, #20]	; (8019b64 <std+0x40>)
 8019b50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019b52:	4b05      	ldr	r3, [pc, #20]	; (8019b68 <std+0x44>)
 8019b54:	6224      	str	r4, [r4, #32]
 8019b56:	6323      	str	r3, [r4, #48]	; 0x30
 8019b58:	bd10      	pop	{r4, pc}
 8019b5a:	bf00      	nop
 8019b5c:	0801aea1 	.word	0x0801aea1
 8019b60:	0801aec3 	.word	0x0801aec3
 8019b64:	0801aefb 	.word	0x0801aefb
 8019b68:	0801af1f 	.word	0x0801af1f

08019b6c <_cleanup_r>:
 8019b6c:	4901      	ldr	r1, [pc, #4]	; (8019b74 <_cleanup_r+0x8>)
 8019b6e:	f000 b8af 	b.w	8019cd0 <_fwalk_reent>
 8019b72:	bf00      	nop
 8019b74:	08019aad 	.word	0x08019aad

08019b78 <__sfmoreglue>:
 8019b78:	b570      	push	{r4, r5, r6, lr}
 8019b7a:	2268      	movs	r2, #104	; 0x68
 8019b7c:	1e4d      	subs	r5, r1, #1
 8019b7e:	4355      	muls	r5, r2
 8019b80:	460e      	mov	r6, r1
 8019b82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019b86:	f7fe fb8d 	bl	80182a4 <_malloc_r>
 8019b8a:	4604      	mov	r4, r0
 8019b8c:	b140      	cbz	r0, 8019ba0 <__sfmoreglue+0x28>
 8019b8e:	2100      	movs	r1, #0
 8019b90:	e9c0 1600 	strd	r1, r6, [r0]
 8019b94:	300c      	adds	r0, #12
 8019b96:	60a0      	str	r0, [r4, #8]
 8019b98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019b9c:	f7fe fb10 	bl	80181c0 <memset>
 8019ba0:	4620      	mov	r0, r4
 8019ba2:	bd70      	pop	{r4, r5, r6, pc}

08019ba4 <__sfp_lock_acquire>:
 8019ba4:	4801      	ldr	r0, [pc, #4]	; (8019bac <__sfp_lock_acquire+0x8>)
 8019ba6:	f7fe bad0 	b.w	801814a <__retarget_lock_acquire_recursive>
 8019baa:	bf00      	nop
 8019bac:	2000199d 	.word	0x2000199d

08019bb0 <__sfp_lock_release>:
 8019bb0:	4801      	ldr	r0, [pc, #4]	; (8019bb8 <__sfp_lock_release+0x8>)
 8019bb2:	f7fe bacb 	b.w	801814c <__retarget_lock_release_recursive>
 8019bb6:	bf00      	nop
 8019bb8:	2000199d 	.word	0x2000199d

08019bbc <__sinit_lock_acquire>:
 8019bbc:	4801      	ldr	r0, [pc, #4]	; (8019bc4 <__sinit_lock_acquire+0x8>)
 8019bbe:	f7fe bac4 	b.w	801814a <__retarget_lock_acquire_recursive>
 8019bc2:	bf00      	nop
 8019bc4:	2000199e 	.word	0x2000199e

08019bc8 <__sinit_lock_release>:
 8019bc8:	4801      	ldr	r0, [pc, #4]	; (8019bd0 <__sinit_lock_release+0x8>)
 8019bca:	f7fe babf 	b.w	801814c <__retarget_lock_release_recursive>
 8019bce:	bf00      	nop
 8019bd0:	2000199e 	.word	0x2000199e

08019bd4 <__sinit>:
 8019bd4:	b510      	push	{r4, lr}
 8019bd6:	4604      	mov	r4, r0
 8019bd8:	f7ff fff0 	bl	8019bbc <__sinit_lock_acquire>
 8019bdc:	69a3      	ldr	r3, [r4, #24]
 8019bde:	b11b      	cbz	r3, 8019be8 <__sinit+0x14>
 8019be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019be4:	f7ff bff0 	b.w	8019bc8 <__sinit_lock_release>
 8019be8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019bec:	6523      	str	r3, [r4, #80]	; 0x50
 8019bee:	4b13      	ldr	r3, [pc, #76]	; (8019c3c <__sinit+0x68>)
 8019bf0:	4a13      	ldr	r2, [pc, #76]	; (8019c40 <__sinit+0x6c>)
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	62a2      	str	r2, [r4, #40]	; 0x28
 8019bf6:	42a3      	cmp	r3, r4
 8019bf8:	bf04      	itt	eq
 8019bfa:	2301      	moveq	r3, #1
 8019bfc:	61a3      	streq	r3, [r4, #24]
 8019bfe:	4620      	mov	r0, r4
 8019c00:	f000 f820 	bl	8019c44 <__sfp>
 8019c04:	6060      	str	r0, [r4, #4]
 8019c06:	4620      	mov	r0, r4
 8019c08:	f000 f81c 	bl	8019c44 <__sfp>
 8019c0c:	60a0      	str	r0, [r4, #8]
 8019c0e:	4620      	mov	r0, r4
 8019c10:	f000 f818 	bl	8019c44 <__sfp>
 8019c14:	2200      	movs	r2, #0
 8019c16:	60e0      	str	r0, [r4, #12]
 8019c18:	2104      	movs	r1, #4
 8019c1a:	6860      	ldr	r0, [r4, #4]
 8019c1c:	f7ff ff82 	bl	8019b24 <std>
 8019c20:	68a0      	ldr	r0, [r4, #8]
 8019c22:	2201      	movs	r2, #1
 8019c24:	2109      	movs	r1, #9
 8019c26:	f7ff ff7d 	bl	8019b24 <std>
 8019c2a:	68e0      	ldr	r0, [r4, #12]
 8019c2c:	2202      	movs	r2, #2
 8019c2e:	2112      	movs	r1, #18
 8019c30:	f7ff ff78 	bl	8019b24 <std>
 8019c34:	2301      	movs	r3, #1
 8019c36:	61a3      	str	r3, [r4, #24]
 8019c38:	e7d2      	b.n	8019be0 <__sinit+0xc>
 8019c3a:	bf00      	nop
 8019c3c:	0801c63c 	.word	0x0801c63c
 8019c40:	08019b6d 	.word	0x08019b6d

08019c44 <__sfp>:
 8019c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c46:	4607      	mov	r7, r0
 8019c48:	f7ff ffac 	bl	8019ba4 <__sfp_lock_acquire>
 8019c4c:	4b1e      	ldr	r3, [pc, #120]	; (8019cc8 <__sfp+0x84>)
 8019c4e:	681e      	ldr	r6, [r3, #0]
 8019c50:	69b3      	ldr	r3, [r6, #24]
 8019c52:	b913      	cbnz	r3, 8019c5a <__sfp+0x16>
 8019c54:	4630      	mov	r0, r6
 8019c56:	f7ff ffbd 	bl	8019bd4 <__sinit>
 8019c5a:	3648      	adds	r6, #72	; 0x48
 8019c5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019c60:	3b01      	subs	r3, #1
 8019c62:	d503      	bpl.n	8019c6c <__sfp+0x28>
 8019c64:	6833      	ldr	r3, [r6, #0]
 8019c66:	b30b      	cbz	r3, 8019cac <__sfp+0x68>
 8019c68:	6836      	ldr	r6, [r6, #0]
 8019c6a:	e7f7      	b.n	8019c5c <__sfp+0x18>
 8019c6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019c70:	b9d5      	cbnz	r5, 8019ca8 <__sfp+0x64>
 8019c72:	4b16      	ldr	r3, [pc, #88]	; (8019ccc <__sfp+0x88>)
 8019c74:	60e3      	str	r3, [r4, #12]
 8019c76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019c7a:	6665      	str	r5, [r4, #100]	; 0x64
 8019c7c:	f7fe fa64 	bl	8018148 <__retarget_lock_init_recursive>
 8019c80:	f7ff ff96 	bl	8019bb0 <__sfp_lock_release>
 8019c84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019c88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019c8c:	6025      	str	r5, [r4, #0]
 8019c8e:	61a5      	str	r5, [r4, #24]
 8019c90:	2208      	movs	r2, #8
 8019c92:	4629      	mov	r1, r5
 8019c94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019c98:	f7fe fa92 	bl	80181c0 <memset>
 8019c9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019ca0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019ca4:	4620      	mov	r0, r4
 8019ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ca8:	3468      	adds	r4, #104	; 0x68
 8019caa:	e7d9      	b.n	8019c60 <__sfp+0x1c>
 8019cac:	2104      	movs	r1, #4
 8019cae:	4638      	mov	r0, r7
 8019cb0:	f7ff ff62 	bl	8019b78 <__sfmoreglue>
 8019cb4:	4604      	mov	r4, r0
 8019cb6:	6030      	str	r0, [r6, #0]
 8019cb8:	2800      	cmp	r0, #0
 8019cba:	d1d5      	bne.n	8019c68 <__sfp+0x24>
 8019cbc:	f7ff ff78 	bl	8019bb0 <__sfp_lock_release>
 8019cc0:	230c      	movs	r3, #12
 8019cc2:	603b      	str	r3, [r7, #0]
 8019cc4:	e7ee      	b.n	8019ca4 <__sfp+0x60>
 8019cc6:	bf00      	nop
 8019cc8:	0801c63c 	.word	0x0801c63c
 8019ccc:	ffff0001 	.word	0xffff0001

08019cd0 <_fwalk_reent>:
 8019cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019cd4:	4606      	mov	r6, r0
 8019cd6:	4688      	mov	r8, r1
 8019cd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019cdc:	2700      	movs	r7, #0
 8019cde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019ce2:	f1b9 0901 	subs.w	r9, r9, #1
 8019ce6:	d505      	bpl.n	8019cf4 <_fwalk_reent+0x24>
 8019ce8:	6824      	ldr	r4, [r4, #0]
 8019cea:	2c00      	cmp	r4, #0
 8019cec:	d1f7      	bne.n	8019cde <_fwalk_reent+0xe>
 8019cee:	4638      	mov	r0, r7
 8019cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019cf4:	89ab      	ldrh	r3, [r5, #12]
 8019cf6:	2b01      	cmp	r3, #1
 8019cf8:	d907      	bls.n	8019d0a <_fwalk_reent+0x3a>
 8019cfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019cfe:	3301      	adds	r3, #1
 8019d00:	d003      	beq.n	8019d0a <_fwalk_reent+0x3a>
 8019d02:	4629      	mov	r1, r5
 8019d04:	4630      	mov	r0, r6
 8019d06:	47c0      	blx	r8
 8019d08:	4307      	orrs	r7, r0
 8019d0a:	3568      	adds	r5, #104	; 0x68
 8019d0c:	e7e9      	b.n	8019ce2 <_fwalk_reent+0x12>

08019d0e <rshift>:
 8019d0e:	6903      	ldr	r3, [r0, #16]
 8019d10:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d18:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019d1c:	f100 0414 	add.w	r4, r0, #20
 8019d20:	dd45      	ble.n	8019dae <rshift+0xa0>
 8019d22:	f011 011f 	ands.w	r1, r1, #31
 8019d26:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019d2a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019d2e:	d10c      	bne.n	8019d4a <rshift+0x3c>
 8019d30:	f100 0710 	add.w	r7, r0, #16
 8019d34:	4629      	mov	r1, r5
 8019d36:	42b1      	cmp	r1, r6
 8019d38:	d334      	bcc.n	8019da4 <rshift+0x96>
 8019d3a:	1a9b      	subs	r3, r3, r2
 8019d3c:	009b      	lsls	r3, r3, #2
 8019d3e:	1eea      	subs	r2, r5, #3
 8019d40:	4296      	cmp	r6, r2
 8019d42:	bf38      	it	cc
 8019d44:	2300      	movcc	r3, #0
 8019d46:	4423      	add	r3, r4
 8019d48:	e015      	b.n	8019d76 <rshift+0x68>
 8019d4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019d4e:	f1c1 0820 	rsb	r8, r1, #32
 8019d52:	40cf      	lsrs	r7, r1
 8019d54:	f105 0e04 	add.w	lr, r5, #4
 8019d58:	46a1      	mov	r9, r4
 8019d5a:	4576      	cmp	r6, lr
 8019d5c:	46f4      	mov	ip, lr
 8019d5e:	d815      	bhi.n	8019d8c <rshift+0x7e>
 8019d60:	1a9a      	subs	r2, r3, r2
 8019d62:	0092      	lsls	r2, r2, #2
 8019d64:	3a04      	subs	r2, #4
 8019d66:	3501      	adds	r5, #1
 8019d68:	42ae      	cmp	r6, r5
 8019d6a:	bf38      	it	cc
 8019d6c:	2200      	movcc	r2, #0
 8019d6e:	18a3      	adds	r3, r4, r2
 8019d70:	50a7      	str	r7, [r4, r2]
 8019d72:	b107      	cbz	r7, 8019d76 <rshift+0x68>
 8019d74:	3304      	adds	r3, #4
 8019d76:	1b1a      	subs	r2, r3, r4
 8019d78:	42a3      	cmp	r3, r4
 8019d7a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019d7e:	bf08      	it	eq
 8019d80:	2300      	moveq	r3, #0
 8019d82:	6102      	str	r2, [r0, #16]
 8019d84:	bf08      	it	eq
 8019d86:	6143      	streq	r3, [r0, #20]
 8019d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d8c:	f8dc c000 	ldr.w	ip, [ip]
 8019d90:	fa0c fc08 	lsl.w	ip, ip, r8
 8019d94:	ea4c 0707 	orr.w	r7, ip, r7
 8019d98:	f849 7b04 	str.w	r7, [r9], #4
 8019d9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019da0:	40cf      	lsrs	r7, r1
 8019da2:	e7da      	b.n	8019d5a <rshift+0x4c>
 8019da4:	f851 cb04 	ldr.w	ip, [r1], #4
 8019da8:	f847 cf04 	str.w	ip, [r7, #4]!
 8019dac:	e7c3      	b.n	8019d36 <rshift+0x28>
 8019dae:	4623      	mov	r3, r4
 8019db0:	e7e1      	b.n	8019d76 <rshift+0x68>

08019db2 <__hexdig_fun>:
 8019db2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019db6:	2b09      	cmp	r3, #9
 8019db8:	d802      	bhi.n	8019dc0 <__hexdig_fun+0xe>
 8019dba:	3820      	subs	r0, #32
 8019dbc:	b2c0      	uxtb	r0, r0
 8019dbe:	4770      	bx	lr
 8019dc0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019dc4:	2b05      	cmp	r3, #5
 8019dc6:	d801      	bhi.n	8019dcc <__hexdig_fun+0x1a>
 8019dc8:	3847      	subs	r0, #71	; 0x47
 8019dca:	e7f7      	b.n	8019dbc <__hexdig_fun+0xa>
 8019dcc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019dd0:	2b05      	cmp	r3, #5
 8019dd2:	d801      	bhi.n	8019dd8 <__hexdig_fun+0x26>
 8019dd4:	3827      	subs	r0, #39	; 0x27
 8019dd6:	e7f1      	b.n	8019dbc <__hexdig_fun+0xa>
 8019dd8:	2000      	movs	r0, #0
 8019dda:	4770      	bx	lr

08019ddc <__gethex>:
 8019ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019de0:	b08b      	sub	sp, #44	; 0x2c
 8019de2:	468b      	mov	fp, r1
 8019de4:	9305      	str	r3, [sp, #20]
 8019de6:	4bb2      	ldr	r3, [pc, #712]	; (801a0b0 <__gethex+0x2d4>)
 8019de8:	9002      	str	r0, [sp, #8]
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	9303      	str	r3, [sp, #12]
 8019dee:	4618      	mov	r0, r3
 8019df0:	4690      	mov	r8, r2
 8019df2:	f7e6 fa15 	bl	8000220 <strlen>
 8019df6:	9b03      	ldr	r3, [sp, #12]
 8019df8:	f8db 2000 	ldr.w	r2, [fp]
 8019dfc:	4403      	add	r3, r0
 8019dfe:	4682      	mov	sl, r0
 8019e00:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019e04:	9306      	str	r3, [sp, #24]
 8019e06:	1c93      	adds	r3, r2, #2
 8019e08:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8019e0c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019e10:	32fe      	adds	r2, #254	; 0xfe
 8019e12:	18d1      	adds	r1, r2, r3
 8019e14:	461f      	mov	r7, r3
 8019e16:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019e1a:	9101      	str	r1, [sp, #4]
 8019e1c:	2830      	cmp	r0, #48	; 0x30
 8019e1e:	d0f8      	beq.n	8019e12 <__gethex+0x36>
 8019e20:	f7ff ffc7 	bl	8019db2 <__hexdig_fun>
 8019e24:	4604      	mov	r4, r0
 8019e26:	2800      	cmp	r0, #0
 8019e28:	d13a      	bne.n	8019ea0 <__gethex+0xc4>
 8019e2a:	9903      	ldr	r1, [sp, #12]
 8019e2c:	4652      	mov	r2, sl
 8019e2e:	4638      	mov	r0, r7
 8019e30:	f7fe fe85 	bl	8018b3e <strncmp>
 8019e34:	4605      	mov	r5, r0
 8019e36:	2800      	cmp	r0, #0
 8019e38:	d166      	bne.n	8019f08 <__gethex+0x12c>
 8019e3a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8019e3e:	eb07 060a 	add.w	r6, r7, sl
 8019e42:	f7ff ffb6 	bl	8019db2 <__hexdig_fun>
 8019e46:	2800      	cmp	r0, #0
 8019e48:	d060      	beq.n	8019f0c <__gethex+0x130>
 8019e4a:	4633      	mov	r3, r6
 8019e4c:	7818      	ldrb	r0, [r3, #0]
 8019e4e:	2830      	cmp	r0, #48	; 0x30
 8019e50:	461f      	mov	r7, r3
 8019e52:	f103 0301 	add.w	r3, r3, #1
 8019e56:	d0f9      	beq.n	8019e4c <__gethex+0x70>
 8019e58:	f7ff ffab 	bl	8019db2 <__hexdig_fun>
 8019e5c:	2301      	movs	r3, #1
 8019e5e:	fab0 f480 	clz	r4, r0
 8019e62:	0964      	lsrs	r4, r4, #5
 8019e64:	4635      	mov	r5, r6
 8019e66:	9301      	str	r3, [sp, #4]
 8019e68:	463a      	mov	r2, r7
 8019e6a:	4616      	mov	r6, r2
 8019e6c:	3201      	adds	r2, #1
 8019e6e:	7830      	ldrb	r0, [r6, #0]
 8019e70:	f7ff ff9f 	bl	8019db2 <__hexdig_fun>
 8019e74:	2800      	cmp	r0, #0
 8019e76:	d1f8      	bne.n	8019e6a <__gethex+0x8e>
 8019e78:	9903      	ldr	r1, [sp, #12]
 8019e7a:	4652      	mov	r2, sl
 8019e7c:	4630      	mov	r0, r6
 8019e7e:	f7fe fe5e 	bl	8018b3e <strncmp>
 8019e82:	b980      	cbnz	r0, 8019ea6 <__gethex+0xca>
 8019e84:	b94d      	cbnz	r5, 8019e9a <__gethex+0xbe>
 8019e86:	eb06 050a 	add.w	r5, r6, sl
 8019e8a:	462a      	mov	r2, r5
 8019e8c:	4616      	mov	r6, r2
 8019e8e:	3201      	adds	r2, #1
 8019e90:	7830      	ldrb	r0, [r6, #0]
 8019e92:	f7ff ff8e 	bl	8019db2 <__hexdig_fun>
 8019e96:	2800      	cmp	r0, #0
 8019e98:	d1f8      	bne.n	8019e8c <__gethex+0xb0>
 8019e9a:	1bad      	subs	r5, r5, r6
 8019e9c:	00ad      	lsls	r5, r5, #2
 8019e9e:	e004      	b.n	8019eaa <__gethex+0xce>
 8019ea0:	2400      	movs	r4, #0
 8019ea2:	4625      	mov	r5, r4
 8019ea4:	e7e0      	b.n	8019e68 <__gethex+0x8c>
 8019ea6:	2d00      	cmp	r5, #0
 8019ea8:	d1f7      	bne.n	8019e9a <__gethex+0xbe>
 8019eaa:	7833      	ldrb	r3, [r6, #0]
 8019eac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019eb0:	2b50      	cmp	r3, #80	; 0x50
 8019eb2:	d139      	bne.n	8019f28 <__gethex+0x14c>
 8019eb4:	7873      	ldrb	r3, [r6, #1]
 8019eb6:	2b2b      	cmp	r3, #43	; 0x2b
 8019eb8:	d02a      	beq.n	8019f10 <__gethex+0x134>
 8019eba:	2b2d      	cmp	r3, #45	; 0x2d
 8019ebc:	d02c      	beq.n	8019f18 <__gethex+0x13c>
 8019ebe:	1c71      	adds	r1, r6, #1
 8019ec0:	f04f 0900 	mov.w	r9, #0
 8019ec4:	7808      	ldrb	r0, [r1, #0]
 8019ec6:	f7ff ff74 	bl	8019db2 <__hexdig_fun>
 8019eca:	1e43      	subs	r3, r0, #1
 8019ecc:	b2db      	uxtb	r3, r3
 8019ece:	2b18      	cmp	r3, #24
 8019ed0:	d82a      	bhi.n	8019f28 <__gethex+0x14c>
 8019ed2:	f1a0 0210 	sub.w	r2, r0, #16
 8019ed6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019eda:	f7ff ff6a 	bl	8019db2 <__hexdig_fun>
 8019ede:	1e43      	subs	r3, r0, #1
 8019ee0:	b2db      	uxtb	r3, r3
 8019ee2:	2b18      	cmp	r3, #24
 8019ee4:	d91b      	bls.n	8019f1e <__gethex+0x142>
 8019ee6:	f1b9 0f00 	cmp.w	r9, #0
 8019eea:	d000      	beq.n	8019eee <__gethex+0x112>
 8019eec:	4252      	negs	r2, r2
 8019eee:	4415      	add	r5, r2
 8019ef0:	f8cb 1000 	str.w	r1, [fp]
 8019ef4:	b1d4      	cbz	r4, 8019f2c <__gethex+0x150>
 8019ef6:	9b01      	ldr	r3, [sp, #4]
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	bf14      	ite	ne
 8019efc:	2700      	movne	r7, #0
 8019efe:	2706      	moveq	r7, #6
 8019f00:	4638      	mov	r0, r7
 8019f02:	b00b      	add	sp, #44	; 0x2c
 8019f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f08:	463e      	mov	r6, r7
 8019f0a:	4625      	mov	r5, r4
 8019f0c:	2401      	movs	r4, #1
 8019f0e:	e7cc      	b.n	8019eaa <__gethex+0xce>
 8019f10:	f04f 0900 	mov.w	r9, #0
 8019f14:	1cb1      	adds	r1, r6, #2
 8019f16:	e7d5      	b.n	8019ec4 <__gethex+0xe8>
 8019f18:	f04f 0901 	mov.w	r9, #1
 8019f1c:	e7fa      	b.n	8019f14 <__gethex+0x138>
 8019f1e:	230a      	movs	r3, #10
 8019f20:	fb03 0202 	mla	r2, r3, r2, r0
 8019f24:	3a10      	subs	r2, #16
 8019f26:	e7d6      	b.n	8019ed6 <__gethex+0xfa>
 8019f28:	4631      	mov	r1, r6
 8019f2a:	e7e1      	b.n	8019ef0 <__gethex+0x114>
 8019f2c:	1bf3      	subs	r3, r6, r7
 8019f2e:	3b01      	subs	r3, #1
 8019f30:	4621      	mov	r1, r4
 8019f32:	2b07      	cmp	r3, #7
 8019f34:	dc0a      	bgt.n	8019f4c <__gethex+0x170>
 8019f36:	9802      	ldr	r0, [sp, #8]
 8019f38:	f000 fae4 	bl	801a504 <_Balloc>
 8019f3c:	4604      	mov	r4, r0
 8019f3e:	b940      	cbnz	r0, 8019f52 <__gethex+0x176>
 8019f40:	4b5c      	ldr	r3, [pc, #368]	; (801a0b4 <__gethex+0x2d8>)
 8019f42:	4602      	mov	r2, r0
 8019f44:	21de      	movs	r1, #222	; 0xde
 8019f46:	485c      	ldr	r0, [pc, #368]	; (801a0b8 <__gethex+0x2dc>)
 8019f48:	f7ff fd10 	bl	801996c <__assert_func>
 8019f4c:	3101      	adds	r1, #1
 8019f4e:	105b      	asrs	r3, r3, #1
 8019f50:	e7ef      	b.n	8019f32 <__gethex+0x156>
 8019f52:	f100 0914 	add.w	r9, r0, #20
 8019f56:	f04f 0b00 	mov.w	fp, #0
 8019f5a:	f1ca 0301 	rsb	r3, sl, #1
 8019f5e:	f8cd 9010 	str.w	r9, [sp, #16]
 8019f62:	f8cd b004 	str.w	fp, [sp, #4]
 8019f66:	9308      	str	r3, [sp, #32]
 8019f68:	42b7      	cmp	r7, r6
 8019f6a:	d33f      	bcc.n	8019fec <__gethex+0x210>
 8019f6c:	9f04      	ldr	r7, [sp, #16]
 8019f6e:	9b01      	ldr	r3, [sp, #4]
 8019f70:	f847 3b04 	str.w	r3, [r7], #4
 8019f74:	eba7 0709 	sub.w	r7, r7, r9
 8019f78:	10bf      	asrs	r7, r7, #2
 8019f7a:	6127      	str	r7, [r4, #16]
 8019f7c:	4618      	mov	r0, r3
 8019f7e:	f000 fbb3 	bl	801a6e8 <__hi0bits>
 8019f82:	017f      	lsls	r7, r7, #5
 8019f84:	f8d8 6000 	ldr.w	r6, [r8]
 8019f88:	1a3f      	subs	r7, r7, r0
 8019f8a:	42b7      	cmp	r7, r6
 8019f8c:	dd62      	ble.n	801a054 <__gethex+0x278>
 8019f8e:	1bbf      	subs	r7, r7, r6
 8019f90:	4639      	mov	r1, r7
 8019f92:	4620      	mov	r0, r4
 8019f94:	f000 ff49 	bl	801ae2a <__any_on>
 8019f98:	4682      	mov	sl, r0
 8019f9a:	b1a8      	cbz	r0, 8019fc8 <__gethex+0x1ec>
 8019f9c:	1e7b      	subs	r3, r7, #1
 8019f9e:	1159      	asrs	r1, r3, #5
 8019fa0:	f003 021f 	and.w	r2, r3, #31
 8019fa4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019fa8:	f04f 0a01 	mov.w	sl, #1
 8019fac:	fa0a f202 	lsl.w	r2, sl, r2
 8019fb0:	420a      	tst	r2, r1
 8019fb2:	d009      	beq.n	8019fc8 <__gethex+0x1ec>
 8019fb4:	4553      	cmp	r3, sl
 8019fb6:	dd05      	ble.n	8019fc4 <__gethex+0x1e8>
 8019fb8:	1eb9      	subs	r1, r7, #2
 8019fba:	4620      	mov	r0, r4
 8019fbc:	f000 ff35 	bl	801ae2a <__any_on>
 8019fc0:	2800      	cmp	r0, #0
 8019fc2:	d144      	bne.n	801a04e <__gethex+0x272>
 8019fc4:	f04f 0a02 	mov.w	sl, #2
 8019fc8:	4639      	mov	r1, r7
 8019fca:	4620      	mov	r0, r4
 8019fcc:	f7ff fe9f 	bl	8019d0e <rshift>
 8019fd0:	443d      	add	r5, r7
 8019fd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019fd6:	42ab      	cmp	r3, r5
 8019fd8:	da4a      	bge.n	801a070 <__gethex+0x294>
 8019fda:	9802      	ldr	r0, [sp, #8]
 8019fdc:	4621      	mov	r1, r4
 8019fde:	f000 fad1 	bl	801a584 <_Bfree>
 8019fe2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019fe4:	2300      	movs	r3, #0
 8019fe6:	6013      	str	r3, [r2, #0]
 8019fe8:	27a3      	movs	r7, #163	; 0xa3
 8019fea:	e789      	b.n	8019f00 <__gethex+0x124>
 8019fec:	1e73      	subs	r3, r6, #1
 8019fee:	9a06      	ldr	r2, [sp, #24]
 8019ff0:	9307      	str	r3, [sp, #28]
 8019ff2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019ff6:	4293      	cmp	r3, r2
 8019ff8:	d019      	beq.n	801a02e <__gethex+0x252>
 8019ffa:	f1bb 0f20 	cmp.w	fp, #32
 8019ffe:	d107      	bne.n	801a010 <__gethex+0x234>
 801a000:	9b04      	ldr	r3, [sp, #16]
 801a002:	9a01      	ldr	r2, [sp, #4]
 801a004:	f843 2b04 	str.w	r2, [r3], #4
 801a008:	9304      	str	r3, [sp, #16]
 801a00a:	2300      	movs	r3, #0
 801a00c:	9301      	str	r3, [sp, #4]
 801a00e:	469b      	mov	fp, r3
 801a010:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801a014:	f7ff fecd 	bl	8019db2 <__hexdig_fun>
 801a018:	9b01      	ldr	r3, [sp, #4]
 801a01a:	f000 000f 	and.w	r0, r0, #15
 801a01e:	fa00 f00b 	lsl.w	r0, r0, fp
 801a022:	4303      	orrs	r3, r0
 801a024:	9301      	str	r3, [sp, #4]
 801a026:	f10b 0b04 	add.w	fp, fp, #4
 801a02a:	9b07      	ldr	r3, [sp, #28]
 801a02c:	e00d      	b.n	801a04a <__gethex+0x26e>
 801a02e:	9a08      	ldr	r2, [sp, #32]
 801a030:	1e73      	subs	r3, r6, #1
 801a032:	4413      	add	r3, r2
 801a034:	42bb      	cmp	r3, r7
 801a036:	d3e0      	bcc.n	8019ffa <__gethex+0x21e>
 801a038:	4618      	mov	r0, r3
 801a03a:	9903      	ldr	r1, [sp, #12]
 801a03c:	9309      	str	r3, [sp, #36]	; 0x24
 801a03e:	4652      	mov	r2, sl
 801a040:	f7fe fd7d 	bl	8018b3e <strncmp>
 801a044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a046:	2800      	cmp	r0, #0
 801a048:	d1d7      	bne.n	8019ffa <__gethex+0x21e>
 801a04a:	461e      	mov	r6, r3
 801a04c:	e78c      	b.n	8019f68 <__gethex+0x18c>
 801a04e:	f04f 0a03 	mov.w	sl, #3
 801a052:	e7b9      	b.n	8019fc8 <__gethex+0x1ec>
 801a054:	da09      	bge.n	801a06a <__gethex+0x28e>
 801a056:	1bf7      	subs	r7, r6, r7
 801a058:	4621      	mov	r1, r4
 801a05a:	9802      	ldr	r0, [sp, #8]
 801a05c:	463a      	mov	r2, r7
 801a05e:	f000 fca9 	bl	801a9b4 <__lshift>
 801a062:	1bed      	subs	r5, r5, r7
 801a064:	4604      	mov	r4, r0
 801a066:	f100 0914 	add.w	r9, r0, #20
 801a06a:	f04f 0a00 	mov.w	sl, #0
 801a06e:	e7b0      	b.n	8019fd2 <__gethex+0x1f6>
 801a070:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a074:	42a8      	cmp	r0, r5
 801a076:	dd71      	ble.n	801a15c <__gethex+0x380>
 801a078:	1b45      	subs	r5, r0, r5
 801a07a:	42ae      	cmp	r6, r5
 801a07c:	dc35      	bgt.n	801a0ea <__gethex+0x30e>
 801a07e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a082:	2b02      	cmp	r3, #2
 801a084:	d029      	beq.n	801a0da <__gethex+0x2fe>
 801a086:	2b03      	cmp	r3, #3
 801a088:	d02b      	beq.n	801a0e2 <__gethex+0x306>
 801a08a:	2b01      	cmp	r3, #1
 801a08c:	d11c      	bne.n	801a0c8 <__gethex+0x2ec>
 801a08e:	42ae      	cmp	r6, r5
 801a090:	d11a      	bne.n	801a0c8 <__gethex+0x2ec>
 801a092:	2e01      	cmp	r6, #1
 801a094:	d112      	bne.n	801a0bc <__gethex+0x2e0>
 801a096:	9a05      	ldr	r2, [sp, #20]
 801a098:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a09c:	6013      	str	r3, [r2, #0]
 801a09e:	2301      	movs	r3, #1
 801a0a0:	6123      	str	r3, [r4, #16]
 801a0a2:	f8c9 3000 	str.w	r3, [r9]
 801a0a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a0a8:	2762      	movs	r7, #98	; 0x62
 801a0aa:	601c      	str	r4, [r3, #0]
 801a0ac:	e728      	b.n	8019f00 <__gethex+0x124>
 801a0ae:	bf00      	nop
 801a0b0:	0801c85c 	.word	0x0801c85c
 801a0b4:	0801c7e4 	.word	0x0801c7e4
 801a0b8:	0801c7f5 	.word	0x0801c7f5
 801a0bc:	1e71      	subs	r1, r6, #1
 801a0be:	4620      	mov	r0, r4
 801a0c0:	f000 feb3 	bl	801ae2a <__any_on>
 801a0c4:	2800      	cmp	r0, #0
 801a0c6:	d1e6      	bne.n	801a096 <__gethex+0x2ba>
 801a0c8:	9802      	ldr	r0, [sp, #8]
 801a0ca:	4621      	mov	r1, r4
 801a0cc:	f000 fa5a 	bl	801a584 <_Bfree>
 801a0d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	6013      	str	r3, [r2, #0]
 801a0d6:	2750      	movs	r7, #80	; 0x50
 801a0d8:	e712      	b.n	8019f00 <__gethex+0x124>
 801a0da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d1f3      	bne.n	801a0c8 <__gethex+0x2ec>
 801a0e0:	e7d9      	b.n	801a096 <__gethex+0x2ba>
 801a0e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	d1d6      	bne.n	801a096 <__gethex+0x2ba>
 801a0e8:	e7ee      	b.n	801a0c8 <__gethex+0x2ec>
 801a0ea:	1e6f      	subs	r7, r5, #1
 801a0ec:	f1ba 0f00 	cmp.w	sl, #0
 801a0f0:	d131      	bne.n	801a156 <__gethex+0x37a>
 801a0f2:	b127      	cbz	r7, 801a0fe <__gethex+0x322>
 801a0f4:	4639      	mov	r1, r7
 801a0f6:	4620      	mov	r0, r4
 801a0f8:	f000 fe97 	bl	801ae2a <__any_on>
 801a0fc:	4682      	mov	sl, r0
 801a0fe:	117b      	asrs	r3, r7, #5
 801a100:	2101      	movs	r1, #1
 801a102:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801a106:	f007 071f 	and.w	r7, r7, #31
 801a10a:	fa01 f707 	lsl.w	r7, r1, r7
 801a10e:	421f      	tst	r7, r3
 801a110:	4629      	mov	r1, r5
 801a112:	4620      	mov	r0, r4
 801a114:	bf18      	it	ne
 801a116:	f04a 0a02 	orrne.w	sl, sl, #2
 801a11a:	1b76      	subs	r6, r6, r5
 801a11c:	f7ff fdf7 	bl	8019d0e <rshift>
 801a120:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801a124:	2702      	movs	r7, #2
 801a126:	f1ba 0f00 	cmp.w	sl, #0
 801a12a:	d048      	beq.n	801a1be <__gethex+0x3e2>
 801a12c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a130:	2b02      	cmp	r3, #2
 801a132:	d015      	beq.n	801a160 <__gethex+0x384>
 801a134:	2b03      	cmp	r3, #3
 801a136:	d017      	beq.n	801a168 <__gethex+0x38c>
 801a138:	2b01      	cmp	r3, #1
 801a13a:	d109      	bne.n	801a150 <__gethex+0x374>
 801a13c:	f01a 0f02 	tst.w	sl, #2
 801a140:	d006      	beq.n	801a150 <__gethex+0x374>
 801a142:	f8d9 0000 	ldr.w	r0, [r9]
 801a146:	ea4a 0a00 	orr.w	sl, sl, r0
 801a14a:	f01a 0f01 	tst.w	sl, #1
 801a14e:	d10e      	bne.n	801a16e <__gethex+0x392>
 801a150:	f047 0710 	orr.w	r7, r7, #16
 801a154:	e033      	b.n	801a1be <__gethex+0x3e2>
 801a156:	f04f 0a01 	mov.w	sl, #1
 801a15a:	e7d0      	b.n	801a0fe <__gethex+0x322>
 801a15c:	2701      	movs	r7, #1
 801a15e:	e7e2      	b.n	801a126 <__gethex+0x34a>
 801a160:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a162:	f1c3 0301 	rsb	r3, r3, #1
 801a166:	9315      	str	r3, [sp, #84]	; 0x54
 801a168:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d0f0      	beq.n	801a150 <__gethex+0x374>
 801a16e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801a172:	f104 0314 	add.w	r3, r4, #20
 801a176:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801a17a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801a17e:	f04f 0c00 	mov.w	ip, #0
 801a182:	4618      	mov	r0, r3
 801a184:	f853 2b04 	ldr.w	r2, [r3], #4
 801a188:	f1b2 3fff 	cmp.w	r2, #4294967295
 801a18c:	d01c      	beq.n	801a1c8 <__gethex+0x3ec>
 801a18e:	3201      	adds	r2, #1
 801a190:	6002      	str	r2, [r0, #0]
 801a192:	2f02      	cmp	r7, #2
 801a194:	f104 0314 	add.w	r3, r4, #20
 801a198:	d13d      	bne.n	801a216 <__gethex+0x43a>
 801a19a:	f8d8 2000 	ldr.w	r2, [r8]
 801a19e:	3a01      	subs	r2, #1
 801a1a0:	42b2      	cmp	r2, r6
 801a1a2:	d10a      	bne.n	801a1ba <__gethex+0x3de>
 801a1a4:	1171      	asrs	r1, r6, #5
 801a1a6:	2201      	movs	r2, #1
 801a1a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a1ac:	f006 061f 	and.w	r6, r6, #31
 801a1b0:	fa02 f606 	lsl.w	r6, r2, r6
 801a1b4:	421e      	tst	r6, r3
 801a1b6:	bf18      	it	ne
 801a1b8:	4617      	movne	r7, r2
 801a1ba:	f047 0720 	orr.w	r7, r7, #32
 801a1be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a1c0:	601c      	str	r4, [r3, #0]
 801a1c2:	9b05      	ldr	r3, [sp, #20]
 801a1c4:	601d      	str	r5, [r3, #0]
 801a1c6:	e69b      	b.n	8019f00 <__gethex+0x124>
 801a1c8:	4299      	cmp	r1, r3
 801a1ca:	f843 cc04 	str.w	ip, [r3, #-4]
 801a1ce:	d8d8      	bhi.n	801a182 <__gethex+0x3a6>
 801a1d0:	68a3      	ldr	r3, [r4, #8]
 801a1d2:	459b      	cmp	fp, r3
 801a1d4:	db17      	blt.n	801a206 <__gethex+0x42a>
 801a1d6:	6861      	ldr	r1, [r4, #4]
 801a1d8:	9802      	ldr	r0, [sp, #8]
 801a1da:	3101      	adds	r1, #1
 801a1dc:	f000 f992 	bl	801a504 <_Balloc>
 801a1e0:	4681      	mov	r9, r0
 801a1e2:	b918      	cbnz	r0, 801a1ec <__gethex+0x410>
 801a1e4:	4b1a      	ldr	r3, [pc, #104]	; (801a250 <__gethex+0x474>)
 801a1e6:	4602      	mov	r2, r0
 801a1e8:	2184      	movs	r1, #132	; 0x84
 801a1ea:	e6ac      	b.n	8019f46 <__gethex+0x16a>
 801a1ec:	6922      	ldr	r2, [r4, #16]
 801a1ee:	3202      	adds	r2, #2
 801a1f0:	f104 010c 	add.w	r1, r4, #12
 801a1f4:	0092      	lsls	r2, r2, #2
 801a1f6:	300c      	adds	r0, #12
 801a1f8:	f7fd ffba 	bl	8018170 <memcpy>
 801a1fc:	4621      	mov	r1, r4
 801a1fe:	9802      	ldr	r0, [sp, #8]
 801a200:	f000 f9c0 	bl	801a584 <_Bfree>
 801a204:	464c      	mov	r4, r9
 801a206:	6923      	ldr	r3, [r4, #16]
 801a208:	1c5a      	adds	r2, r3, #1
 801a20a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a20e:	6122      	str	r2, [r4, #16]
 801a210:	2201      	movs	r2, #1
 801a212:	615a      	str	r2, [r3, #20]
 801a214:	e7bd      	b.n	801a192 <__gethex+0x3b6>
 801a216:	6922      	ldr	r2, [r4, #16]
 801a218:	455a      	cmp	r2, fp
 801a21a:	dd0b      	ble.n	801a234 <__gethex+0x458>
 801a21c:	2101      	movs	r1, #1
 801a21e:	4620      	mov	r0, r4
 801a220:	f7ff fd75 	bl	8019d0e <rshift>
 801a224:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a228:	3501      	adds	r5, #1
 801a22a:	42ab      	cmp	r3, r5
 801a22c:	f6ff aed5 	blt.w	8019fda <__gethex+0x1fe>
 801a230:	2701      	movs	r7, #1
 801a232:	e7c2      	b.n	801a1ba <__gethex+0x3de>
 801a234:	f016 061f 	ands.w	r6, r6, #31
 801a238:	d0fa      	beq.n	801a230 <__gethex+0x454>
 801a23a:	4453      	add	r3, sl
 801a23c:	f1c6 0620 	rsb	r6, r6, #32
 801a240:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801a244:	f000 fa50 	bl	801a6e8 <__hi0bits>
 801a248:	42b0      	cmp	r0, r6
 801a24a:	dbe7      	blt.n	801a21c <__gethex+0x440>
 801a24c:	e7f0      	b.n	801a230 <__gethex+0x454>
 801a24e:	bf00      	nop
 801a250:	0801c7e4 	.word	0x0801c7e4

0801a254 <L_shift>:
 801a254:	f1c2 0208 	rsb	r2, r2, #8
 801a258:	0092      	lsls	r2, r2, #2
 801a25a:	b570      	push	{r4, r5, r6, lr}
 801a25c:	f1c2 0620 	rsb	r6, r2, #32
 801a260:	6843      	ldr	r3, [r0, #4]
 801a262:	6804      	ldr	r4, [r0, #0]
 801a264:	fa03 f506 	lsl.w	r5, r3, r6
 801a268:	432c      	orrs	r4, r5
 801a26a:	40d3      	lsrs	r3, r2
 801a26c:	6004      	str	r4, [r0, #0]
 801a26e:	f840 3f04 	str.w	r3, [r0, #4]!
 801a272:	4288      	cmp	r0, r1
 801a274:	d3f4      	bcc.n	801a260 <L_shift+0xc>
 801a276:	bd70      	pop	{r4, r5, r6, pc}

0801a278 <__match>:
 801a278:	b530      	push	{r4, r5, lr}
 801a27a:	6803      	ldr	r3, [r0, #0]
 801a27c:	3301      	adds	r3, #1
 801a27e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a282:	b914      	cbnz	r4, 801a28a <__match+0x12>
 801a284:	6003      	str	r3, [r0, #0]
 801a286:	2001      	movs	r0, #1
 801a288:	bd30      	pop	{r4, r5, pc}
 801a28a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a28e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801a292:	2d19      	cmp	r5, #25
 801a294:	bf98      	it	ls
 801a296:	3220      	addls	r2, #32
 801a298:	42a2      	cmp	r2, r4
 801a29a:	d0f0      	beq.n	801a27e <__match+0x6>
 801a29c:	2000      	movs	r0, #0
 801a29e:	e7f3      	b.n	801a288 <__match+0x10>

0801a2a0 <__hexnan>:
 801a2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2a4:	680b      	ldr	r3, [r1, #0]
 801a2a6:	115e      	asrs	r6, r3, #5
 801a2a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a2ac:	f013 031f 	ands.w	r3, r3, #31
 801a2b0:	b087      	sub	sp, #28
 801a2b2:	bf18      	it	ne
 801a2b4:	3604      	addne	r6, #4
 801a2b6:	2500      	movs	r5, #0
 801a2b8:	1f37      	subs	r7, r6, #4
 801a2ba:	4690      	mov	r8, r2
 801a2bc:	6802      	ldr	r2, [r0, #0]
 801a2be:	9301      	str	r3, [sp, #4]
 801a2c0:	4682      	mov	sl, r0
 801a2c2:	f846 5c04 	str.w	r5, [r6, #-4]
 801a2c6:	46b9      	mov	r9, r7
 801a2c8:	463c      	mov	r4, r7
 801a2ca:	9502      	str	r5, [sp, #8]
 801a2cc:	46ab      	mov	fp, r5
 801a2ce:	7851      	ldrb	r1, [r2, #1]
 801a2d0:	1c53      	adds	r3, r2, #1
 801a2d2:	9303      	str	r3, [sp, #12]
 801a2d4:	b341      	cbz	r1, 801a328 <__hexnan+0x88>
 801a2d6:	4608      	mov	r0, r1
 801a2d8:	9205      	str	r2, [sp, #20]
 801a2da:	9104      	str	r1, [sp, #16]
 801a2dc:	f7ff fd69 	bl	8019db2 <__hexdig_fun>
 801a2e0:	2800      	cmp	r0, #0
 801a2e2:	d14f      	bne.n	801a384 <__hexnan+0xe4>
 801a2e4:	9904      	ldr	r1, [sp, #16]
 801a2e6:	9a05      	ldr	r2, [sp, #20]
 801a2e8:	2920      	cmp	r1, #32
 801a2ea:	d818      	bhi.n	801a31e <__hexnan+0x7e>
 801a2ec:	9b02      	ldr	r3, [sp, #8]
 801a2ee:	459b      	cmp	fp, r3
 801a2f0:	dd13      	ble.n	801a31a <__hexnan+0x7a>
 801a2f2:	454c      	cmp	r4, r9
 801a2f4:	d206      	bcs.n	801a304 <__hexnan+0x64>
 801a2f6:	2d07      	cmp	r5, #7
 801a2f8:	dc04      	bgt.n	801a304 <__hexnan+0x64>
 801a2fa:	462a      	mov	r2, r5
 801a2fc:	4649      	mov	r1, r9
 801a2fe:	4620      	mov	r0, r4
 801a300:	f7ff ffa8 	bl	801a254 <L_shift>
 801a304:	4544      	cmp	r4, r8
 801a306:	d950      	bls.n	801a3aa <__hexnan+0x10a>
 801a308:	2300      	movs	r3, #0
 801a30a:	f1a4 0904 	sub.w	r9, r4, #4
 801a30e:	f844 3c04 	str.w	r3, [r4, #-4]
 801a312:	f8cd b008 	str.w	fp, [sp, #8]
 801a316:	464c      	mov	r4, r9
 801a318:	461d      	mov	r5, r3
 801a31a:	9a03      	ldr	r2, [sp, #12]
 801a31c:	e7d7      	b.n	801a2ce <__hexnan+0x2e>
 801a31e:	2929      	cmp	r1, #41	; 0x29
 801a320:	d156      	bne.n	801a3d0 <__hexnan+0x130>
 801a322:	3202      	adds	r2, #2
 801a324:	f8ca 2000 	str.w	r2, [sl]
 801a328:	f1bb 0f00 	cmp.w	fp, #0
 801a32c:	d050      	beq.n	801a3d0 <__hexnan+0x130>
 801a32e:	454c      	cmp	r4, r9
 801a330:	d206      	bcs.n	801a340 <__hexnan+0xa0>
 801a332:	2d07      	cmp	r5, #7
 801a334:	dc04      	bgt.n	801a340 <__hexnan+0xa0>
 801a336:	462a      	mov	r2, r5
 801a338:	4649      	mov	r1, r9
 801a33a:	4620      	mov	r0, r4
 801a33c:	f7ff ff8a 	bl	801a254 <L_shift>
 801a340:	4544      	cmp	r4, r8
 801a342:	d934      	bls.n	801a3ae <__hexnan+0x10e>
 801a344:	f1a8 0204 	sub.w	r2, r8, #4
 801a348:	4623      	mov	r3, r4
 801a34a:	f853 1b04 	ldr.w	r1, [r3], #4
 801a34e:	f842 1f04 	str.w	r1, [r2, #4]!
 801a352:	429f      	cmp	r7, r3
 801a354:	d2f9      	bcs.n	801a34a <__hexnan+0xaa>
 801a356:	1b3b      	subs	r3, r7, r4
 801a358:	f023 0303 	bic.w	r3, r3, #3
 801a35c:	3304      	adds	r3, #4
 801a35e:	3401      	adds	r4, #1
 801a360:	3e03      	subs	r6, #3
 801a362:	42b4      	cmp	r4, r6
 801a364:	bf88      	it	hi
 801a366:	2304      	movhi	r3, #4
 801a368:	4443      	add	r3, r8
 801a36a:	2200      	movs	r2, #0
 801a36c:	f843 2b04 	str.w	r2, [r3], #4
 801a370:	429f      	cmp	r7, r3
 801a372:	d2fb      	bcs.n	801a36c <__hexnan+0xcc>
 801a374:	683b      	ldr	r3, [r7, #0]
 801a376:	b91b      	cbnz	r3, 801a380 <__hexnan+0xe0>
 801a378:	4547      	cmp	r7, r8
 801a37a:	d127      	bne.n	801a3cc <__hexnan+0x12c>
 801a37c:	2301      	movs	r3, #1
 801a37e:	603b      	str	r3, [r7, #0]
 801a380:	2005      	movs	r0, #5
 801a382:	e026      	b.n	801a3d2 <__hexnan+0x132>
 801a384:	3501      	adds	r5, #1
 801a386:	2d08      	cmp	r5, #8
 801a388:	f10b 0b01 	add.w	fp, fp, #1
 801a38c:	dd06      	ble.n	801a39c <__hexnan+0xfc>
 801a38e:	4544      	cmp	r4, r8
 801a390:	d9c3      	bls.n	801a31a <__hexnan+0x7a>
 801a392:	2300      	movs	r3, #0
 801a394:	f844 3c04 	str.w	r3, [r4, #-4]
 801a398:	2501      	movs	r5, #1
 801a39a:	3c04      	subs	r4, #4
 801a39c:	6822      	ldr	r2, [r4, #0]
 801a39e:	f000 000f 	and.w	r0, r0, #15
 801a3a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801a3a6:	6022      	str	r2, [r4, #0]
 801a3a8:	e7b7      	b.n	801a31a <__hexnan+0x7a>
 801a3aa:	2508      	movs	r5, #8
 801a3ac:	e7b5      	b.n	801a31a <__hexnan+0x7a>
 801a3ae:	9b01      	ldr	r3, [sp, #4]
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d0df      	beq.n	801a374 <__hexnan+0xd4>
 801a3b4:	f04f 32ff 	mov.w	r2, #4294967295
 801a3b8:	f1c3 0320 	rsb	r3, r3, #32
 801a3bc:	fa22 f303 	lsr.w	r3, r2, r3
 801a3c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a3c4:	401a      	ands	r2, r3
 801a3c6:	f846 2c04 	str.w	r2, [r6, #-4]
 801a3ca:	e7d3      	b.n	801a374 <__hexnan+0xd4>
 801a3cc:	3f04      	subs	r7, #4
 801a3ce:	e7d1      	b.n	801a374 <__hexnan+0xd4>
 801a3d0:	2004      	movs	r0, #4
 801a3d2:	b007      	add	sp, #28
 801a3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a3d8 <_gettimeofday_r>:
 801a3d8:	b538      	push	{r3, r4, r5, lr}
 801a3da:	4d07      	ldr	r5, [pc, #28]	; (801a3f8 <_gettimeofday_r+0x20>)
 801a3dc:	2300      	movs	r3, #0
 801a3de:	4604      	mov	r4, r0
 801a3e0:	4608      	mov	r0, r1
 801a3e2:	4611      	mov	r1, r2
 801a3e4:	602b      	str	r3, [r5, #0]
 801a3e6:	f000 fedf 	bl	801b1a8 <_gettimeofday>
 801a3ea:	1c43      	adds	r3, r0, #1
 801a3ec:	d102      	bne.n	801a3f4 <_gettimeofday_r+0x1c>
 801a3ee:	682b      	ldr	r3, [r5, #0]
 801a3f0:	b103      	cbz	r3, 801a3f4 <_gettimeofday_r+0x1c>
 801a3f2:	6023      	str	r3, [r4, #0]
 801a3f4:	bd38      	pop	{r3, r4, r5, pc}
 801a3f6:	bf00      	nop
 801a3f8:	200019a8 	.word	0x200019a8

0801a3fc <__swhatbuf_r>:
 801a3fc:	b570      	push	{r4, r5, r6, lr}
 801a3fe:	460e      	mov	r6, r1
 801a400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a404:	2900      	cmp	r1, #0
 801a406:	b096      	sub	sp, #88	; 0x58
 801a408:	4614      	mov	r4, r2
 801a40a:	461d      	mov	r5, r3
 801a40c:	da08      	bge.n	801a420 <__swhatbuf_r+0x24>
 801a40e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a412:	2200      	movs	r2, #0
 801a414:	602a      	str	r2, [r5, #0]
 801a416:	061a      	lsls	r2, r3, #24
 801a418:	d410      	bmi.n	801a43c <__swhatbuf_r+0x40>
 801a41a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a41e:	e00e      	b.n	801a43e <__swhatbuf_r+0x42>
 801a420:	466a      	mov	r2, sp
 801a422:	f000 fdb7 	bl	801af94 <_fstat_r>
 801a426:	2800      	cmp	r0, #0
 801a428:	dbf1      	blt.n	801a40e <__swhatbuf_r+0x12>
 801a42a:	9a01      	ldr	r2, [sp, #4]
 801a42c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a430:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a434:	425a      	negs	r2, r3
 801a436:	415a      	adcs	r2, r3
 801a438:	602a      	str	r2, [r5, #0]
 801a43a:	e7ee      	b.n	801a41a <__swhatbuf_r+0x1e>
 801a43c:	2340      	movs	r3, #64	; 0x40
 801a43e:	2000      	movs	r0, #0
 801a440:	6023      	str	r3, [r4, #0]
 801a442:	b016      	add	sp, #88	; 0x58
 801a444:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a448 <__smakebuf_r>:
 801a448:	898b      	ldrh	r3, [r1, #12]
 801a44a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a44c:	079d      	lsls	r5, r3, #30
 801a44e:	4606      	mov	r6, r0
 801a450:	460c      	mov	r4, r1
 801a452:	d507      	bpl.n	801a464 <__smakebuf_r+0x1c>
 801a454:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a458:	6023      	str	r3, [r4, #0]
 801a45a:	6123      	str	r3, [r4, #16]
 801a45c:	2301      	movs	r3, #1
 801a45e:	6163      	str	r3, [r4, #20]
 801a460:	b002      	add	sp, #8
 801a462:	bd70      	pop	{r4, r5, r6, pc}
 801a464:	ab01      	add	r3, sp, #4
 801a466:	466a      	mov	r2, sp
 801a468:	f7ff ffc8 	bl	801a3fc <__swhatbuf_r>
 801a46c:	9900      	ldr	r1, [sp, #0]
 801a46e:	4605      	mov	r5, r0
 801a470:	4630      	mov	r0, r6
 801a472:	f7fd ff17 	bl	80182a4 <_malloc_r>
 801a476:	b948      	cbnz	r0, 801a48c <__smakebuf_r+0x44>
 801a478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a47c:	059a      	lsls	r2, r3, #22
 801a47e:	d4ef      	bmi.n	801a460 <__smakebuf_r+0x18>
 801a480:	f023 0303 	bic.w	r3, r3, #3
 801a484:	f043 0302 	orr.w	r3, r3, #2
 801a488:	81a3      	strh	r3, [r4, #12]
 801a48a:	e7e3      	b.n	801a454 <__smakebuf_r+0xc>
 801a48c:	4b0d      	ldr	r3, [pc, #52]	; (801a4c4 <__smakebuf_r+0x7c>)
 801a48e:	62b3      	str	r3, [r6, #40]	; 0x28
 801a490:	89a3      	ldrh	r3, [r4, #12]
 801a492:	6020      	str	r0, [r4, #0]
 801a494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a498:	81a3      	strh	r3, [r4, #12]
 801a49a:	9b00      	ldr	r3, [sp, #0]
 801a49c:	6163      	str	r3, [r4, #20]
 801a49e:	9b01      	ldr	r3, [sp, #4]
 801a4a0:	6120      	str	r0, [r4, #16]
 801a4a2:	b15b      	cbz	r3, 801a4bc <__smakebuf_r+0x74>
 801a4a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a4a8:	4630      	mov	r0, r6
 801a4aa:	f000 fd85 	bl	801afb8 <_isatty_r>
 801a4ae:	b128      	cbz	r0, 801a4bc <__smakebuf_r+0x74>
 801a4b0:	89a3      	ldrh	r3, [r4, #12]
 801a4b2:	f023 0303 	bic.w	r3, r3, #3
 801a4b6:	f043 0301 	orr.w	r3, r3, #1
 801a4ba:	81a3      	strh	r3, [r4, #12]
 801a4bc:	89a0      	ldrh	r0, [r4, #12]
 801a4be:	4305      	orrs	r5, r0
 801a4c0:	81a5      	strh	r5, [r4, #12]
 801a4c2:	e7cd      	b.n	801a460 <__smakebuf_r+0x18>
 801a4c4:	08019b6d 	.word	0x08019b6d

0801a4c8 <__ascii_mbtowc>:
 801a4c8:	b082      	sub	sp, #8
 801a4ca:	b901      	cbnz	r1, 801a4ce <__ascii_mbtowc+0x6>
 801a4cc:	a901      	add	r1, sp, #4
 801a4ce:	b142      	cbz	r2, 801a4e2 <__ascii_mbtowc+0x1a>
 801a4d0:	b14b      	cbz	r3, 801a4e6 <__ascii_mbtowc+0x1e>
 801a4d2:	7813      	ldrb	r3, [r2, #0]
 801a4d4:	600b      	str	r3, [r1, #0]
 801a4d6:	7812      	ldrb	r2, [r2, #0]
 801a4d8:	1e10      	subs	r0, r2, #0
 801a4da:	bf18      	it	ne
 801a4dc:	2001      	movne	r0, #1
 801a4de:	b002      	add	sp, #8
 801a4e0:	4770      	bx	lr
 801a4e2:	4610      	mov	r0, r2
 801a4e4:	e7fb      	b.n	801a4de <__ascii_mbtowc+0x16>
 801a4e6:	f06f 0001 	mvn.w	r0, #1
 801a4ea:	e7f8      	b.n	801a4de <__ascii_mbtowc+0x16>

0801a4ec <__malloc_lock>:
 801a4ec:	4801      	ldr	r0, [pc, #4]	; (801a4f4 <__malloc_lock+0x8>)
 801a4ee:	f7fd be2c 	b.w	801814a <__retarget_lock_acquire_recursive>
 801a4f2:	bf00      	nop
 801a4f4:	2000199c 	.word	0x2000199c

0801a4f8 <__malloc_unlock>:
 801a4f8:	4801      	ldr	r0, [pc, #4]	; (801a500 <__malloc_unlock+0x8>)
 801a4fa:	f7fd be27 	b.w	801814c <__retarget_lock_release_recursive>
 801a4fe:	bf00      	nop
 801a500:	2000199c 	.word	0x2000199c

0801a504 <_Balloc>:
 801a504:	b570      	push	{r4, r5, r6, lr}
 801a506:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a508:	4604      	mov	r4, r0
 801a50a:	460d      	mov	r5, r1
 801a50c:	b976      	cbnz	r6, 801a52c <_Balloc+0x28>
 801a50e:	2010      	movs	r0, #16
 801a510:	f7fd fe1e 	bl	8018150 <malloc>
 801a514:	4602      	mov	r2, r0
 801a516:	6260      	str	r0, [r4, #36]	; 0x24
 801a518:	b920      	cbnz	r0, 801a524 <_Balloc+0x20>
 801a51a:	4b18      	ldr	r3, [pc, #96]	; (801a57c <_Balloc+0x78>)
 801a51c:	4818      	ldr	r0, [pc, #96]	; (801a580 <_Balloc+0x7c>)
 801a51e:	2166      	movs	r1, #102	; 0x66
 801a520:	f7ff fa24 	bl	801996c <__assert_func>
 801a524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a528:	6006      	str	r6, [r0, #0]
 801a52a:	60c6      	str	r6, [r0, #12]
 801a52c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801a52e:	68f3      	ldr	r3, [r6, #12]
 801a530:	b183      	cbz	r3, 801a554 <_Balloc+0x50>
 801a532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a534:	68db      	ldr	r3, [r3, #12]
 801a536:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a53a:	b9b8      	cbnz	r0, 801a56c <_Balloc+0x68>
 801a53c:	2101      	movs	r1, #1
 801a53e:	fa01 f605 	lsl.w	r6, r1, r5
 801a542:	1d72      	adds	r2, r6, #5
 801a544:	0092      	lsls	r2, r2, #2
 801a546:	4620      	mov	r0, r4
 801a548:	f000 fc90 	bl	801ae6c <_calloc_r>
 801a54c:	b160      	cbz	r0, 801a568 <_Balloc+0x64>
 801a54e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a552:	e00e      	b.n	801a572 <_Balloc+0x6e>
 801a554:	2221      	movs	r2, #33	; 0x21
 801a556:	2104      	movs	r1, #4
 801a558:	4620      	mov	r0, r4
 801a55a:	f000 fc87 	bl	801ae6c <_calloc_r>
 801a55e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a560:	60f0      	str	r0, [r6, #12]
 801a562:	68db      	ldr	r3, [r3, #12]
 801a564:	2b00      	cmp	r3, #0
 801a566:	d1e4      	bne.n	801a532 <_Balloc+0x2e>
 801a568:	2000      	movs	r0, #0
 801a56a:	bd70      	pop	{r4, r5, r6, pc}
 801a56c:	6802      	ldr	r2, [r0, #0]
 801a56e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a572:	2300      	movs	r3, #0
 801a574:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a578:	e7f7      	b.n	801a56a <_Balloc+0x66>
 801a57a:	bf00      	nop
 801a57c:	0801c673 	.word	0x0801c673
 801a580:	0801c870 	.word	0x0801c870

0801a584 <_Bfree>:
 801a584:	b570      	push	{r4, r5, r6, lr}
 801a586:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a588:	4605      	mov	r5, r0
 801a58a:	460c      	mov	r4, r1
 801a58c:	b976      	cbnz	r6, 801a5ac <_Bfree+0x28>
 801a58e:	2010      	movs	r0, #16
 801a590:	f7fd fdde 	bl	8018150 <malloc>
 801a594:	4602      	mov	r2, r0
 801a596:	6268      	str	r0, [r5, #36]	; 0x24
 801a598:	b920      	cbnz	r0, 801a5a4 <_Bfree+0x20>
 801a59a:	4b09      	ldr	r3, [pc, #36]	; (801a5c0 <_Bfree+0x3c>)
 801a59c:	4809      	ldr	r0, [pc, #36]	; (801a5c4 <_Bfree+0x40>)
 801a59e:	218a      	movs	r1, #138	; 0x8a
 801a5a0:	f7ff f9e4 	bl	801996c <__assert_func>
 801a5a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a5a8:	6006      	str	r6, [r0, #0]
 801a5aa:	60c6      	str	r6, [r0, #12]
 801a5ac:	b13c      	cbz	r4, 801a5be <_Bfree+0x3a>
 801a5ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a5b0:	6862      	ldr	r2, [r4, #4]
 801a5b2:	68db      	ldr	r3, [r3, #12]
 801a5b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a5b8:	6021      	str	r1, [r4, #0]
 801a5ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a5be:	bd70      	pop	{r4, r5, r6, pc}
 801a5c0:	0801c673 	.word	0x0801c673
 801a5c4:	0801c870 	.word	0x0801c870

0801a5c8 <__multadd>:
 801a5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5cc:	690d      	ldr	r5, [r1, #16]
 801a5ce:	4607      	mov	r7, r0
 801a5d0:	460c      	mov	r4, r1
 801a5d2:	461e      	mov	r6, r3
 801a5d4:	f101 0c14 	add.w	ip, r1, #20
 801a5d8:	2000      	movs	r0, #0
 801a5da:	f8dc 3000 	ldr.w	r3, [ip]
 801a5de:	b299      	uxth	r1, r3
 801a5e0:	fb02 6101 	mla	r1, r2, r1, r6
 801a5e4:	0c1e      	lsrs	r6, r3, #16
 801a5e6:	0c0b      	lsrs	r3, r1, #16
 801a5e8:	fb02 3306 	mla	r3, r2, r6, r3
 801a5ec:	b289      	uxth	r1, r1
 801a5ee:	3001      	adds	r0, #1
 801a5f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a5f4:	4285      	cmp	r5, r0
 801a5f6:	f84c 1b04 	str.w	r1, [ip], #4
 801a5fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a5fe:	dcec      	bgt.n	801a5da <__multadd+0x12>
 801a600:	b30e      	cbz	r6, 801a646 <__multadd+0x7e>
 801a602:	68a3      	ldr	r3, [r4, #8]
 801a604:	42ab      	cmp	r3, r5
 801a606:	dc19      	bgt.n	801a63c <__multadd+0x74>
 801a608:	6861      	ldr	r1, [r4, #4]
 801a60a:	4638      	mov	r0, r7
 801a60c:	3101      	adds	r1, #1
 801a60e:	f7ff ff79 	bl	801a504 <_Balloc>
 801a612:	4680      	mov	r8, r0
 801a614:	b928      	cbnz	r0, 801a622 <__multadd+0x5a>
 801a616:	4602      	mov	r2, r0
 801a618:	4b0c      	ldr	r3, [pc, #48]	; (801a64c <__multadd+0x84>)
 801a61a:	480d      	ldr	r0, [pc, #52]	; (801a650 <__multadd+0x88>)
 801a61c:	21b5      	movs	r1, #181	; 0xb5
 801a61e:	f7ff f9a5 	bl	801996c <__assert_func>
 801a622:	6922      	ldr	r2, [r4, #16]
 801a624:	3202      	adds	r2, #2
 801a626:	f104 010c 	add.w	r1, r4, #12
 801a62a:	0092      	lsls	r2, r2, #2
 801a62c:	300c      	adds	r0, #12
 801a62e:	f7fd fd9f 	bl	8018170 <memcpy>
 801a632:	4621      	mov	r1, r4
 801a634:	4638      	mov	r0, r7
 801a636:	f7ff ffa5 	bl	801a584 <_Bfree>
 801a63a:	4644      	mov	r4, r8
 801a63c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a640:	3501      	adds	r5, #1
 801a642:	615e      	str	r6, [r3, #20]
 801a644:	6125      	str	r5, [r4, #16]
 801a646:	4620      	mov	r0, r4
 801a648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a64c:	0801c7e4 	.word	0x0801c7e4
 801a650:	0801c870 	.word	0x0801c870

0801a654 <__s2b>:
 801a654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a658:	460c      	mov	r4, r1
 801a65a:	4615      	mov	r5, r2
 801a65c:	461f      	mov	r7, r3
 801a65e:	2209      	movs	r2, #9
 801a660:	3308      	adds	r3, #8
 801a662:	4606      	mov	r6, r0
 801a664:	fb93 f3f2 	sdiv	r3, r3, r2
 801a668:	2100      	movs	r1, #0
 801a66a:	2201      	movs	r2, #1
 801a66c:	429a      	cmp	r2, r3
 801a66e:	db09      	blt.n	801a684 <__s2b+0x30>
 801a670:	4630      	mov	r0, r6
 801a672:	f7ff ff47 	bl	801a504 <_Balloc>
 801a676:	b940      	cbnz	r0, 801a68a <__s2b+0x36>
 801a678:	4602      	mov	r2, r0
 801a67a:	4b19      	ldr	r3, [pc, #100]	; (801a6e0 <__s2b+0x8c>)
 801a67c:	4819      	ldr	r0, [pc, #100]	; (801a6e4 <__s2b+0x90>)
 801a67e:	21ce      	movs	r1, #206	; 0xce
 801a680:	f7ff f974 	bl	801996c <__assert_func>
 801a684:	0052      	lsls	r2, r2, #1
 801a686:	3101      	adds	r1, #1
 801a688:	e7f0      	b.n	801a66c <__s2b+0x18>
 801a68a:	9b08      	ldr	r3, [sp, #32]
 801a68c:	6143      	str	r3, [r0, #20]
 801a68e:	2d09      	cmp	r5, #9
 801a690:	f04f 0301 	mov.w	r3, #1
 801a694:	6103      	str	r3, [r0, #16]
 801a696:	dd16      	ble.n	801a6c6 <__s2b+0x72>
 801a698:	f104 0909 	add.w	r9, r4, #9
 801a69c:	46c8      	mov	r8, r9
 801a69e:	442c      	add	r4, r5
 801a6a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801a6a4:	4601      	mov	r1, r0
 801a6a6:	3b30      	subs	r3, #48	; 0x30
 801a6a8:	220a      	movs	r2, #10
 801a6aa:	4630      	mov	r0, r6
 801a6ac:	f7ff ff8c 	bl	801a5c8 <__multadd>
 801a6b0:	45a0      	cmp	r8, r4
 801a6b2:	d1f5      	bne.n	801a6a0 <__s2b+0x4c>
 801a6b4:	f1a5 0408 	sub.w	r4, r5, #8
 801a6b8:	444c      	add	r4, r9
 801a6ba:	1b2d      	subs	r5, r5, r4
 801a6bc:	1963      	adds	r3, r4, r5
 801a6be:	42bb      	cmp	r3, r7
 801a6c0:	db04      	blt.n	801a6cc <__s2b+0x78>
 801a6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6c6:	340a      	adds	r4, #10
 801a6c8:	2509      	movs	r5, #9
 801a6ca:	e7f6      	b.n	801a6ba <__s2b+0x66>
 801a6cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a6d0:	4601      	mov	r1, r0
 801a6d2:	3b30      	subs	r3, #48	; 0x30
 801a6d4:	220a      	movs	r2, #10
 801a6d6:	4630      	mov	r0, r6
 801a6d8:	f7ff ff76 	bl	801a5c8 <__multadd>
 801a6dc:	e7ee      	b.n	801a6bc <__s2b+0x68>
 801a6de:	bf00      	nop
 801a6e0:	0801c7e4 	.word	0x0801c7e4
 801a6e4:	0801c870 	.word	0x0801c870

0801a6e8 <__hi0bits>:
 801a6e8:	0c02      	lsrs	r2, r0, #16
 801a6ea:	0412      	lsls	r2, r2, #16
 801a6ec:	4603      	mov	r3, r0
 801a6ee:	b9ca      	cbnz	r2, 801a724 <__hi0bits+0x3c>
 801a6f0:	0403      	lsls	r3, r0, #16
 801a6f2:	2010      	movs	r0, #16
 801a6f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a6f8:	bf04      	itt	eq
 801a6fa:	021b      	lsleq	r3, r3, #8
 801a6fc:	3008      	addeq	r0, #8
 801a6fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a702:	bf04      	itt	eq
 801a704:	011b      	lsleq	r3, r3, #4
 801a706:	3004      	addeq	r0, #4
 801a708:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a70c:	bf04      	itt	eq
 801a70e:	009b      	lsleq	r3, r3, #2
 801a710:	3002      	addeq	r0, #2
 801a712:	2b00      	cmp	r3, #0
 801a714:	db05      	blt.n	801a722 <__hi0bits+0x3a>
 801a716:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801a71a:	f100 0001 	add.w	r0, r0, #1
 801a71e:	bf08      	it	eq
 801a720:	2020      	moveq	r0, #32
 801a722:	4770      	bx	lr
 801a724:	2000      	movs	r0, #0
 801a726:	e7e5      	b.n	801a6f4 <__hi0bits+0xc>

0801a728 <__lo0bits>:
 801a728:	6803      	ldr	r3, [r0, #0]
 801a72a:	4602      	mov	r2, r0
 801a72c:	f013 0007 	ands.w	r0, r3, #7
 801a730:	d00b      	beq.n	801a74a <__lo0bits+0x22>
 801a732:	07d9      	lsls	r1, r3, #31
 801a734:	d421      	bmi.n	801a77a <__lo0bits+0x52>
 801a736:	0798      	lsls	r0, r3, #30
 801a738:	bf49      	itett	mi
 801a73a:	085b      	lsrmi	r3, r3, #1
 801a73c:	089b      	lsrpl	r3, r3, #2
 801a73e:	2001      	movmi	r0, #1
 801a740:	6013      	strmi	r3, [r2, #0]
 801a742:	bf5c      	itt	pl
 801a744:	6013      	strpl	r3, [r2, #0]
 801a746:	2002      	movpl	r0, #2
 801a748:	4770      	bx	lr
 801a74a:	b299      	uxth	r1, r3
 801a74c:	b909      	cbnz	r1, 801a752 <__lo0bits+0x2a>
 801a74e:	0c1b      	lsrs	r3, r3, #16
 801a750:	2010      	movs	r0, #16
 801a752:	b2d9      	uxtb	r1, r3
 801a754:	b909      	cbnz	r1, 801a75a <__lo0bits+0x32>
 801a756:	3008      	adds	r0, #8
 801a758:	0a1b      	lsrs	r3, r3, #8
 801a75a:	0719      	lsls	r1, r3, #28
 801a75c:	bf04      	itt	eq
 801a75e:	091b      	lsreq	r3, r3, #4
 801a760:	3004      	addeq	r0, #4
 801a762:	0799      	lsls	r1, r3, #30
 801a764:	bf04      	itt	eq
 801a766:	089b      	lsreq	r3, r3, #2
 801a768:	3002      	addeq	r0, #2
 801a76a:	07d9      	lsls	r1, r3, #31
 801a76c:	d403      	bmi.n	801a776 <__lo0bits+0x4e>
 801a76e:	085b      	lsrs	r3, r3, #1
 801a770:	f100 0001 	add.w	r0, r0, #1
 801a774:	d003      	beq.n	801a77e <__lo0bits+0x56>
 801a776:	6013      	str	r3, [r2, #0]
 801a778:	4770      	bx	lr
 801a77a:	2000      	movs	r0, #0
 801a77c:	4770      	bx	lr
 801a77e:	2020      	movs	r0, #32
 801a780:	4770      	bx	lr
	...

0801a784 <__i2b>:
 801a784:	b510      	push	{r4, lr}
 801a786:	460c      	mov	r4, r1
 801a788:	2101      	movs	r1, #1
 801a78a:	f7ff febb 	bl	801a504 <_Balloc>
 801a78e:	4602      	mov	r2, r0
 801a790:	b928      	cbnz	r0, 801a79e <__i2b+0x1a>
 801a792:	4b05      	ldr	r3, [pc, #20]	; (801a7a8 <__i2b+0x24>)
 801a794:	4805      	ldr	r0, [pc, #20]	; (801a7ac <__i2b+0x28>)
 801a796:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801a79a:	f7ff f8e7 	bl	801996c <__assert_func>
 801a79e:	2301      	movs	r3, #1
 801a7a0:	6144      	str	r4, [r0, #20]
 801a7a2:	6103      	str	r3, [r0, #16]
 801a7a4:	bd10      	pop	{r4, pc}
 801a7a6:	bf00      	nop
 801a7a8:	0801c7e4 	.word	0x0801c7e4
 801a7ac:	0801c870 	.word	0x0801c870

0801a7b0 <__multiply>:
 801a7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7b4:	4691      	mov	r9, r2
 801a7b6:	690a      	ldr	r2, [r1, #16]
 801a7b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a7bc:	429a      	cmp	r2, r3
 801a7be:	bfb8      	it	lt
 801a7c0:	460b      	movlt	r3, r1
 801a7c2:	460c      	mov	r4, r1
 801a7c4:	bfbc      	itt	lt
 801a7c6:	464c      	movlt	r4, r9
 801a7c8:	4699      	movlt	r9, r3
 801a7ca:	6927      	ldr	r7, [r4, #16]
 801a7cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a7d0:	68a3      	ldr	r3, [r4, #8]
 801a7d2:	6861      	ldr	r1, [r4, #4]
 801a7d4:	eb07 060a 	add.w	r6, r7, sl
 801a7d8:	42b3      	cmp	r3, r6
 801a7da:	b085      	sub	sp, #20
 801a7dc:	bfb8      	it	lt
 801a7de:	3101      	addlt	r1, #1
 801a7e0:	f7ff fe90 	bl	801a504 <_Balloc>
 801a7e4:	b930      	cbnz	r0, 801a7f4 <__multiply+0x44>
 801a7e6:	4602      	mov	r2, r0
 801a7e8:	4b43      	ldr	r3, [pc, #268]	; (801a8f8 <__multiply+0x148>)
 801a7ea:	4844      	ldr	r0, [pc, #272]	; (801a8fc <__multiply+0x14c>)
 801a7ec:	f240 115d 	movw	r1, #349	; 0x15d
 801a7f0:	f7ff f8bc 	bl	801996c <__assert_func>
 801a7f4:	f100 0514 	add.w	r5, r0, #20
 801a7f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a7fc:	462b      	mov	r3, r5
 801a7fe:	2200      	movs	r2, #0
 801a800:	4543      	cmp	r3, r8
 801a802:	d321      	bcc.n	801a848 <__multiply+0x98>
 801a804:	f104 0314 	add.w	r3, r4, #20
 801a808:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801a80c:	f109 0314 	add.w	r3, r9, #20
 801a810:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801a814:	9202      	str	r2, [sp, #8]
 801a816:	1b3a      	subs	r2, r7, r4
 801a818:	3a15      	subs	r2, #21
 801a81a:	f022 0203 	bic.w	r2, r2, #3
 801a81e:	3204      	adds	r2, #4
 801a820:	f104 0115 	add.w	r1, r4, #21
 801a824:	428f      	cmp	r7, r1
 801a826:	bf38      	it	cc
 801a828:	2204      	movcc	r2, #4
 801a82a:	9201      	str	r2, [sp, #4]
 801a82c:	9a02      	ldr	r2, [sp, #8]
 801a82e:	9303      	str	r3, [sp, #12]
 801a830:	429a      	cmp	r2, r3
 801a832:	d80c      	bhi.n	801a84e <__multiply+0x9e>
 801a834:	2e00      	cmp	r6, #0
 801a836:	dd03      	ble.n	801a840 <__multiply+0x90>
 801a838:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d059      	beq.n	801a8f4 <__multiply+0x144>
 801a840:	6106      	str	r6, [r0, #16]
 801a842:	b005      	add	sp, #20
 801a844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a848:	f843 2b04 	str.w	r2, [r3], #4
 801a84c:	e7d8      	b.n	801a800 <__multiply+0x50>
 801a84e:	f8b3 a000 	ldrh.w	sl, [r3]
 801a852:	f1ba 0f00 	cmp.w	sl, #0
 801a856:	d023      	beq.n	801a8a0 <__multiply+0xf0>
 801a858:	f104 0e14 	add.w	lr, r4, #20
 801a85c:	46a9      	mov	r9, r5
 801a85e:	f04f 0c00 	mov.w	ip, #0
 801a862:	f85e 2b04 	ldr.w	r2, [lr], #4
 801a866:	f8d9 1000 	ldr.w	r1, [r9]
 801a86a:	fa1f fb82 	uxth.w	fp, r2
 801a86e:	b289      	uxth	r1, r1
 801a870:	fb0a 110b 	mla	r1, sl, fp, r1
 801a874:	4461      	add	r1, ip
 801a876:	f8d9 c000 	ldr.w	ip, [r9]
 801a87a:	0c12      	lsrs	r2, r2, #16
 801a87c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a880:	fb0a c202 	mla	r2, sl, r2, ip
 801a884:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a888:	b289      	uxth	r1, r1
 801a88a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a88e:	4577      	cmp	r7, lr
 801a890:	f849 1b04 	str.w	r1, [r9], #4
 801a894:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a898:	d8e3      	bhi.n	801a862 <__multiply+0xb2>
 801a89a:	9a01      	ldr	r2, [sp, #4]
 801a89c:	f845 c002 	str.w	ip, [r5, r2]
 801a8a0:	9a03      	ldr	r2, [sp, #12]
 801a8a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a8a6:	3304      	adds	r3, #4
 801a8a8:	f1b9 0f00 	cmp.w	r9, #0
 801a8ac:	d020      	beq.n	801a8f0 <__multiply+0x140>
 801a8ae:	6829      	ldr	r1, [r5, #0]
 801a8b0:	f104 0c14 	add.w	ip, r4, #20
 801a8b4:	46ae      	mov	lr, r5
 801a8b6:	f04f 0a00 	mov.w	sl, #0
 801a8ba:	f8bc b000 	ldrh.w	fp, [ip]
 801a8be:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801a8c2:	fb09 220b 	mla	r2, r9, fp, r2
 801a8c6:	4492      	add	sl, r2
 801a8c8:	b289      	uxth	r1, r1
 801a8ca:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801a8ce:	f84e 1b04 	str.w	r1, [lr], #4
 801a8d2:	f85c 2b04 	ldr.w	r2, [ip], #4
 801a8d6:	f8be 1000 	ldrh.w	r1, [lr]
 801a8da:	0c12      	lsrs	r2, r2, #16
 801a8dc:	fb09 1102 	mla	r1, r9, r2, r1
 801a8e0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801a8e4:	4567      	cmp	r7, ip
 801a8e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a8ea:	d8e6      	bhi.n	801a8ba <__multiply+0x10a>
 801a8ec:	9a01      	ldr	r2, [sp, #4]
 801a8ee:	50a9      	str	r1, [r5, r2]
 801a8f0:	3504      	adds	r5, #4
 801a8f2:	e79b      	b.n	801a82c <__multiply+0x7c>
 801a8f4:	3e01      	subs	r6, #1
 801a8f6:	e79d      	b.n	801a834 <__multiply+0x84>
 801a8f8:	0801c7e4 	.word	0x0801c7e4
 801a8fc:	0801c870 	.word	0x0801c870

0801a900 <__pow5mult>:
 801a900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a904:	4615      	mov	r5, r2
 801a906:	f012 0203 	ands.w	r2, r2, #3
 801a90a:	4606      	mov	r6, r0
 801a90c:	460f      	mov	r7, r1
 801a90e:	d007      	beq.n	801a920 <__pow5mult+0x20>
 801a910:	4c25      	ldr	r4, [pc, #148]	; (801a9a8 <__pow5mult+0xa8>)
 801a912:	3a01      	subs	r2, #1
 801a914:	2300      	movs	r3, #0
 801a916:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a91a:	f7ff fe55 	bl	801a5c8 <__multadd>
 801a91e:	4607      	mov	r7, r0
 801a920:	10ad      	asrs	r5, r5, #2
 801a922:	d03d      	beq.n	801a9a0 <__pow5mult+0xa0>
 801a924:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a926:	b97c      	cbnz	r4, 801a948 <__pow5mult+0x48>
 801a928:	2010      	movs	r0, #16
 801a92a:	f7fd fc11 	bl	8018150 <malloc>
 801a92e:	4602      	mov	r2, r0
 801a930:	6270      	str	r0, [r6, #36]	; 0x24
 801a932:	b928      	cbnz	r0, 801a940 <__pow5mult+0x40>
 801a934:	4b1d      	ldr	r3, [pc, #116]	; (801a9ac <__pow5mult+0xac>)
 801a936:	481e      	ldr	r0, [pc, #120]	; (801a9b0 <__pow5mult+0xb0>)
 801a938:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801a93c:	f7ff f816 	bl	801996c <__assert_func>
 801a940:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a944:	6004      	str	r4, [r0, #0]
 801a946:	60c4      	str	r4, [r0, #12]
 801a948:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a94c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a950:	b94c      	cbnz	r4, 801a966 <__pow5mult+0x66>
 801a952:	f240 2171 	movw	r1, #625	; 0x271
 801a956:	4630      	mov	r0, r6
 801a958:	f7ff ff14 	bl	801a784 <__i2b>
 801a95c:	2300      	movs	r3, #0
 801a95e:	f8c8 0008 	str.w	r0, [r8, #8]
 801a962:	4604      	mov	r4, r0
 801a964:	6003      	str	r3, [r0, #0]
 801a966:	f04f 0900 	mov.w	r9, #0
 801a96a:	07eb      	lsls	r3, r5, #31
 801a96c:	d50a      	bpl.n	801a984 <__pow5mult+0x84>
 801a96e:	4639      	mov	r1, r7
 801a970:	4622      	mov	r2, r4
 801a972:	4630      	mov	r0, r6
 801a974:	f7ff ff1c 	bl	801a7b0 <__multiply>
 801a978:	4639      	mov	r1, r7
 801a97a:	4680      	mov	r8, r0
 801a97c:	4630      	mov	r0, r6
 801a97e:	f7ff fe01 	bl	801a584 <_Bfree>
 801a982:	4647      	mov	r7, r8
 801a984:	106d      	asrs	r5, r5, #1
 801a986:	d00b      	beq.n	801a9a0 <__pow5mult+0xa0>
 801a988:	6820      	ldr	r0, [r4, #0]
 801a98a:	b938      	cbnz	r0, 801a99c <__pow5mult+0x9c>
 801a98c:	4622      	mov	r2, r4
 801a98e:	4621      	mov	r1, r4
 801a990:	4630      	mov	r0, r6
 801a992:	f7ff ff0d 	bl	801a7b0 <__multiply>
 801a996:	6020      	str	r0, [r4, #0]
 801a998:	f8c0 9000 	str.w	r9, [r0]
 801a99c:	4604      	mov	r4, r0
 801a99e:	e7e4      	b.n	801a96a <__pow5mult+0x6a>
 801a9a0:	4638      	mov	r0, r7
 801a9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a9a6:	bf00      	nop
 801a9a8:	0801c9c0 	.word	0x0801c9c0
 801a9ac:	0801c673 	.word	0x0801c673
 801a9b0:	0801c870 	.word	0x0801c870

0801a9b4 <__lshift>:
 801a9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a9b8:	460c      	mov	r4, r1
 801a9ba:	6849      	ldr	r1, [r1, #4]
 801a9bc:	6923      	ldr	r3, [r4, #16]
 801a9be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a9c2:	68a3      	ldr	r3, [r4, #8]
 801a9c4:	4607      	mov	r7, r0
 801a9c6:	4691      	mov	r9, r2
 801a9c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a9cc:	f108 0601 	add.w	r6, r8, #1
 801a9d0:	42b3      	cmp	r3, r6
 801a9d2:	db0b      	blt.n	801a9ec <__lshift+0x38>
 801a9d4:	4638      	mov	r0, r7
 801a9d6:	f7ff fd95 	bl	801a504 <_Balloc>
 801a9da:	4605      	mov	r5, r0
 801a9dc:	b948      	cbnz	r0, 801a9f2 <__lshift+0x3e>
 801a9de:	4602      	mov	r2, r0
 801a9e0:	4b2a      	ldr	r3, [pc, #168]	; (801aa8c <__lshift+0xd8>)
 801a9e2:	482b      	ldr	r0, [pc, #172]	; (801aa90 <__lshift+0xdc>)
 801a9e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801a9e8:	f7fe ffc0 	bl	801996c <__assert_func>
 801a9ec:	3101      	adds	r1, #1
 801a9ee:	005b      	lsls	r3, r3, #1
 801a9f0:	e7ee      	b.n	801a9d0 <__lshift+0x1c>
 801a9f2:	2300      	movs	r3, #0
 801a9f4:	f100 0114 	add.w	r1, r0, #20
 801a9f8:	f100 0210 	add.w	r2, r0, #16
 801a9fc:	4618      	mov	r0, r3
 801a9fe:	4553      	cmp	r3, sl
 801aa00:	db37      	blt.n	801aa72 <__lshift+0xbe>
 801aa02:	6920      	ldr	r0, [r4, #16]
 801aa04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801aa08:	f104 0314 	add.w	r3, r4, #20
 801aa0c:	f019 091f 	ands.w	r9, r9, #31
 801aa10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801aa14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801aa18:	d02f      	beq.n	801aa7a <__lshift+0xc6>
 801aa1a:	f1c9 0e20 	rsb	lr, r9, #32
 801aa1e:	468a      	mov	sl, r1
 801aa20:	f04f 0c00 	mov.w	ip, #0
 801aa24:	681a      	ldr	r2, [r3, #0]
 801aa26:	fa02 f209 	lsl.w	r2, r2, r9
 801aa2a:	ea42 020c 	orr.w	r2, r2, ip
 801aa2e:	f84a 2b04 	str.w	r2, [sl], #4
 801aa32:	f853 2b04 	ldr.w	r2, [r3], #4
 801aa36:	4298      	cmp	r0, r3
 801aa38:	fa22 fc0e 	lsr.w	ip, r2, lr
 801aa3c:	d8f2      	bhi.n	801aa24 <__lshift+0x70>
 801aa3e:	1b03      	subs	r3, r0, r4
 801aa40:	3b15      	subs	r3, #21
 801aa42:	f023 0303 	bic.w	r3, r3, #3
 801aa46:	3304      	adds	r3, #4
 801aa48:	f104 0215 	add.w	r2, r4, #21
 801aa4c:	4290      	cmp	r0, r2
 801aa4e:	bf38      	it	cc
 801aa50:	2304      	movcc	r3, #4
 801aa52:	f841 c003 	str.w	ip, [r1, r3]
 801aa56:	f1bc 0f00 	cmp.w	ip, #0
 801aa5a:	d001      	beq.n	801aa60 <__lshift+0xac>
 801aa5c:	f108 0602 	add.w	r6, r8, #2
 801aa60:	3e01      	subs	r6, #1
 801aa62:	4638      	mov	r0, r7
 801aa64:	612e      	str	r6, [r5, #16]
 801aa66:	4621      	mov	r1, r4
 801aa68:	f7ff fd8c 	bl	801a584 <_Bfree>
 801aa6c:	4628      	mov	r0, r5
 801aa6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa72:	f842 0f04 	str.w	r0, [r2, #4]!
 801aa76:	3301      	adds	r3, #1
 801aa78:	e7c1      	b.n	801a9fe <__lshift+0x4a>
 801aa7a:	3904      	subs	r1, #4
 801aa7c:	f853 2b04 	ldr.w	r2, [r3], #4
 801aa80:	f841 2f04 	str.w	r2, [r1, #4]!
 801aa84:	4298      	cmp	r0, r3
 801aa86:	d8f9      	bhi.n	801aa7c <__lshift+0xc8>
 801aa88:	e7ea      	b.n	801aa60 <__lshift+0xac>
 801aa8a:	bf00      	nop
 801aa8c:	0801c7e4 	.word	0x0801c7e4
 801aa90:	0801c870 	.word	0x0801c870

0801aa94 <__mcmp>:
 801aa94:	690a      	ldr	r2, [r1, #16]
 801aa96:	4603      	mov	r3, r0
 801aa98:	6900      	ldr	r0, [r0, #16]
 801aa9a:	1a80      	subs	r0, r0, r2
 801aa9c:	b530      	push	{r4, r5, lr}
 801aa9e:	d10d      	bne.n	801aabc <__mcmp+0x28>
 801aaa0:	3314      	adds	r3, #20
 801aaa2:	3114      	adds	r1, #20
 801aaa4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801aaa8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801aaac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801aab0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801aab4:	4295      	cmp	r5, r2
 801aab6:	d002      	beq.n	801aabe <__mcmp+0x2a>
 801aab8:	d304      	bcc.n	801aac4 <__mcmp+0x30>
 801aaba:	2001      	movs	r0, #1
 801aabc:	bd30      	pop	{r4, r5, pc}
 801aabe:	42a3      	cmp	r3, r4
 801aac0:	d3f4      	bcc.n	801aaac <__mcmp+0x18>
 801aac2:	e7fb      	b.n	801aabc <__mcmp+0x28>
 801aac4:	f04f 30ff 	mov.w	r0, #4294967295
 801aac8:	e7f8      	b.n	801aabc <__mcmp+0x28>
	...

0801aacc <__mdiff>:
 801aacc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aad0:	460d      	mov	r5, r1
 801aad2:	4607      	mov	r7, r0
 801aad4:	4611      	mov	r1, r2
 801aad6:	4628      	mov	r0, r5
 801aad8:	4614      	mov	r4, r2
 801aada:	f7ff ffdb 	bl	801aa94 <__mcmp>
 801aade:	1e06      	subs	r6, r0, #0
 801aae0:	d111      	bne.n	801ab06 <__mdiff+0x3a>
 801aae2:	4631      	mov	r1, r6
 801aae4:	4638      	mov	r0, r7
 801aae6:	f7ff fd0d 	bl	801a504 <_Balloc>
 801aaea:	4602      	mov	r2, r0
 801aaec:	b928      	cbnz	r0, 801aafa <__mdiff+0x2e>
 801aaee:	4b39      	ldr	r3, [pc, #228]	; (801abd4 <__mdiff+0x108>)
 801aaf0:	f240 2132 	movw	r1, #562	; 0x232
 801aaf4:	4838      	ldr	r0, [pc, #224]	; (801abd8 <__mdiff+0x10c>)
 801aaf6:	f7fe ff39 	bl	801996c <__assert_func>
 801aafa:	2301      	movs	r3, #1
 801aafc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801ab00:	4610      	mov	r0, r2
 801ab02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab06:	bfa4      	itt	ge
 801ab08:	4623      	movge	r3, r4
 801ab0a:	462c      	movge	r4, r5
 801ab0c:	4638      	mov	r0, r7
 801ab0e:	6861      	ldr	r1, [r4, #4]
 801ab10:	bfa6      	itte	ge
 801ab12:	461d      	movge	r5, r3
 801ab14:	2600      	movge	r6, #0
 801ab16:	2601      	movlt	r6, #1
 801ab18:	f7ff fcf4 	bl	801a504 <_Balloc>
 801ab1c:	4602      	mov	r2, r0
 801ab1e:	b918      	cbnz	r0, 801ab28 <__mdiff+0x5c>
 801ab20:	4b2c      	ldr	r3, [pc, #176]	; (801abd4 <__mdiff+0x108>)
 801ab22:	f44f 7110 	mov.w	r1, #576	; 0x240
 801ab26:	e7e5      	b.n	801aaf4 <__mdiff+0x28>
 801ab28:	6927      	ldr	r7, [r4, #16]
 801ab2a:	60c6      	str	r6, [r0, #12]
 801ab2c:	692e      	ldr	r6, [r5, #16]
 801ab2e:	f104 0014 	add.w	r0, r4, #20
 801ab32:	f105 0914 	add.w	r9, r5, #20
 801ab36:	f102 0e14 	add.w	lr, r2, #20
 801ab3a:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 801ab3e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801ab42:	3410      	adds	r4, #16
 801ab44:	46f2      	mov	sl, lr
 801ab46:	2100      	movs	r1, #0
 801ab48:	f859 3b04 	ldr.w	r3, [r9], #4
 801ab4c:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801ab50:	fa1f f883 	uxth.w	r8, r3
 801ab54:	fa11 f18b 	uxtah	r1, r1, fp
 801ab58:	0c1b      	lsrs	r3, r3, #16
 801ab5a:	eba1 0808 	sub.w	r8, r1, r8
 801ab5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ab62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ab66:	fa1f f888 	uxth.w	r8, r8
 801ab6a:	1419      	asrs	r1, r3, #16
 801ab6c:	454e      	cmp	r6, r9
 801ab6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ab72:	f84a 3b04 	str.w	r3, [sl], #4
 801ab76:	d8e7      	bhi.n	801ab48 <__mdiff+0x7c>
 801ab78:	1b73      	subs	r3, r6, r5
 801ab7a:	3b15      	subs	r3, #21
 801ab7c:	f023 0303 	bic.w	r3, r3, #3
 801ab80:	3304      	adds	r3, #4
 801ab82:	3515      	adds	r5, #21
 801ab84:	42ae      	cmp	r6, r5
 801ab86:	bf38      	it	cc
 801ab88:	2304      	movcc	r3, #4
 801ab8a:	4418      	add	r0, r3
 801ab8c:	4473      	add	r3, lr
 801ab8e:	469e      	mov	lr, r3
 801ab90:	4606      	mov	r6, r0
 801ab92:	4566      	cmp	r6, ip
 801ab94:	d30e      	bcc.n	801abb4 <__mdiff+0xe8>
 801ab96:	f10c 0103 	add.w	r1, ip, #3
 801ab9a:	1a09      	subs	r1, r1, r0
 801ab9c:	f021 0103 	bic.w	r1, r1, #3
 801aba0:	3803      	subs	r0, #3
 801aba2:	4584      	cmp	ip, r0
 801aba4:	bf38      	it	cc
 801aba6:	2100      	movcc	r1, #0
 801aba8:	4419      	add	r1, r3
 801abaa:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801abae:	b17b      	cbz	r3, 801abd0 <__mdiff+0x104>
 801abb0:	6117      	str	r7, [r2, #16]
 801abb2:	e7a5      	b.n	801ab00 <__mdiff+0x34>
 801abb4:	f856 8b04 	ldr.w	r8, [r6], #4
 801abb8:	fa11 f488 	uxtah	r4, r1, r8
 801abbc:	1425      	asrs	r5, r4, #16
 801abbe:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 801abc2:	b2a4      	uxth	r4, r4
 801abc4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 801abc8:	f84e 4b04 	str.w	r4, [lr], #4
 801abcc:	1429      	asrs	r1, r5, #16
 801abce:	e7e0      	b.n	801ab92 <__mdiff+0xc6>
 801abd0:	3f01      	subs	r7, #1
 801abd2:	e7ea      	b.n	801abaa <__mdiff+0xde>
 801abd4:	0801c7e4 	.word	0x0801c7e4
 801abd8:	0801c870 	.word	0x0801c870

0801abdc <__ulp>:
 801abdc:	4b11      	ldr	r3, [pc, #68]	; (801ac24 <__ulp+0x48>)
 801abde:	400b      	ands	r3, r1
 801abe0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	dd02      	ble.n	801abee <__ulp+0x12>
 801abe8:	2000      	movs	r0, #0
 801abea:	4619      	mov	r1, r3
 801abec:	4770      	bx	lr
 801abee:	425b      	negs	r3, r3
 801abf0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801abf4:	ea4f 5223 	mov.w	r2, r3, asr #20
 801abf8:	f04f 0000 	mov.w	r0, #0
 801abfc:	f04f 0100 	mov.w	r1, #0
 801ac00:	da04      	bge.n	801ac0c <__ulp+0x30>
 801ac02:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801ac06:	fa43 f102 	asr.w	r1, r3, r2
 801ac0a:	4770      	bx	lr
 801ac0c:	f1a2 0314 	sub.w	r3, r2, #20
 801ac10:	2b1e      	cmp	r3, #30
 801ac12:	bfda      	itte	le
 801ac14:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801ac18:	fa22 f303 	lsrle.w	r3, r2, r3
 801ac1c:	2301      	movgt	r3, #1
 801ac1e:	4618      	mov	r0, r3
 801ac20:	4770      	bx	lr
 801ac22:	bf00      	nop
 801ac24:	7ff00000 	.word	0x7ff00000

0801ac28 <__b2d>:
 801ac28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac2c:	6907      	ldr	r7, [r0, #16]
 801ac2e:	f100 0914 	add.w	r9, r0, #20
 801ac32:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801ac36:	f1a7 0804 	sub.w	r8, r7, #4
 801ac3a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 801ac3e:	4630      	mov	r0, r6
 801ac40:	f7ff fd52 	bl	801a6e8 <__hi0bits>
 801ac44:	f1c0 0320 	rsb	r3, r0, #32
 801ac48:	280a      	cmp	r0, #10
 801ac4a:	600b      	str	r3, [r1, #0]
 801ac4c:	491f      	ldr	r1, [pc, #124]	; (801accc <__b2d+0xa4>)
 801ac4e:	dc17      	bgt.n	801ac80 <__b2d+0x58>
 801ac50:	f1c0 0c0b 	rsb	ip, r0, #11
 801ac54:	45c1      	cmp	r9, r8
 801ac56:	fa26 f30c 	lsr.w	r3, r6, ip
 801ac5a:	bf38      	it	cc
 801ac5c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801ac60:	ea43 0501 	orr.w	r5, r3, r1
 801ac64:	bf28      	it	cs
 801ac66:	2200      	movcs	r2, #0
 801ac68:	f100 0315 	add.w	r3, r0, #21
 801ac6c:	fa06 f303 	lsl.w	r3, r6, r3
 801ac70:	fa22 f20c 	lsr.w	r2, r2, ip
 801ac74:	ea43 0402 	orr.w	r4, r3, r2
 801ac78:	4620      	mov	r0, r4
 801ac7a:	4629      	mov	r1, r5
 801ac7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac80:	45c1      	cmp	r9, r8
 801ac82:	bf3a      	itte	cc
 801ac84:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801ac88:	f1a7 0808 	subcc.w	r8, r7, #8
 801ac8c:	2200      	movcs	r2, #0
 801ac8e:	f1b0 030b 	subs.w	r3, r0, #11
 801ac92:	d016      	beq.n	801acc2 <__b2d+0x9a>
 801ac94:	f1c3 0720 	rsb	r7, r3, #32
 801ac98:	fa22 f107 	lsr.w	r1, r2, r7
 801ac9c:	45c8      	cmp	r8, r9
 801ac9e:	fa06 f603 	lsl.w	r6, r6, r3
 801aca2:	ea46 0601 	orr.w	r6, r6, r1
 801aca6:	bf8c      	ite	hi
 801aca8:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 801acac:	2100      	movls	r1, #0
 801acae:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801acb2:	fa02 f003 	lsl.w	r0, r2, r3
 801acb6:	40f9      	lsrs	r1, r7
 801acb8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801acbc:	ea40 0401 	orr.w	r4, r0, r1
 801acc0:	e7da      	b.n	801ac78 <__b2d+0x50>
 801acc2:	ea46 0501 	orr.w	r5, r6, r1
 801acc6:	4614      	mov	r4, r2
 801acc8:	e7d6      	b.n	801ac78 <__b2d+0x50>
 801acca:	bf00      	nop
 801accc:	3ff00000 	.word	0x3ff00000

0801acd0 <__d2b>:
 801acd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801acd4:	2101      	movs	r1, #1
 801acd6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801acda:	4690      	mov	r8, r2
 801acdc:	461d      	mov	r5, r3
 801acde:	f7ff fc11 	bl	801a504 <_Balloc>
 801ace2:	4604      	mov	r4, r0
 801ace4:	b930      	cbnz	r0, 801acf4 <__d2b+0x24>
 801ace6:	4602      	mov	r2, r0
 801ace8:	4b25      	ldr	r3, [pc, #148]	; (801ad80 <__d2b+0xb0>)
 801acea:	4826      	ldr	r0, [pc, #152]	; (801ad84 <__d2b+0xb4>)
 801acec:	f240 310a 	movw	r1, #778	; 0x30a
 801acf0:	f7fe fe3c 	bl	801996c <__assert_func>
 801acf4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801acf8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801acfc:	bb2d      	cbnz	r5, 801ad4a <__d2b+0x7a>
 801acfe:	9301      	str	r3, [sp, #4]
 801ad00:	f1b8 0300 	subs.w	r3, r8, #0
 801ad04:	d026      	beq.n	801ad54 <__d2b+0x84>
 801ad06:	4668      	mov	r0, sp
 801ad08:	9300      	str	r3, [sp, #0]
 801ad0a:	f7ff fd0d 	bl	801a728 <__lo0bits>
 801ad0e:	9900      	ldr	r1, [sp, #0]
 801ad10:	b1f0      	cbz	r0, 801ad50 <__d2b+0x80>
 801ad12:	9a01      	ldr	r2, [sp, #4]
 801ad14:	f1c0 0320 	rsb	r3, r0, #32
 801ad18:	fa02 f303 	lsl.w	r3, r2, r3
 801ad1c:	430b      	orrs	r3, r1
 801ad1e:	40c2      	lsrs	r2, r0
 801ad20:	6163      	str	r3, [r4, #20]
 801ad22:	9201      	str	r2, [sp, #4]
 801ad24:	9b01      	ldr	r3, [sp, #4]
 801ad26:	61a3      	str	r3, [r4, #24]
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	bf14      	ite	ne
 801ad2c:	2102      	movne	r1, #2
 801ad2e:	2101      	moveq	r1, #1
 801ad30:	6121      	str	r1, [r4, #16]
 801ad32:	b1c5      	cbz	r5, 801ad66 <__d2b+0x96>
 801ad34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801ad38:	4405      	add	r5, r0
 801ad3a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ad3e:	603d      	str	r5, [r7, #0]
 801ad40:	6030      	str	r0, [r6, #0]
 801ad42:	4620      	mov	r0, r4
 801ad44:	b002      	add	sp, #8
 801ad46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ad4e:	e7d6      	b.n	801acfe <__d2b+0x2e>
 801ad50:	6161      	str	r1, [r4, #20]
 801ad52:	e7e7      	b.n	801ad24 <__d2b+0x54>
 801ad54:	a801      	add	r0, sp, #4
 801ad56:	f7ff fce7 	bl	801a728 <__lo0bits>
 801ad5a:	9b01      	ldr	r3, [sp, #4]
 801ad5c:	6163      	str	r3, [r4, #20]
 801ad5e:	2101      	movs	r1, #1
 801ad60:	6121      	str	r1, [r4, #16]
 801ad62:	3020      	adds	r0, #32
 801ad64:	e7e5      	b.n	801ad32 <__d2b+0x62>
 801ad66:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801ad6a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ad6e:	6038      	str	r0, [r7, #0]
 801ad70:	6918      	ldr	r0, [r3, #16]
 801ad72:	f7ff fcb9 	bl	801a6e8 <__hi0bits>
 801ad76:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801ad7a:	6031      	str	r1, [r6, #0]
 801ad7c:	e7e1      	b.n	801ad42 <__d2b+0x72>
 801ad7e:	bf00      	nop
 801ad80:	0801c7e4 	.word	0x0801c7e4
 801ad84:	0801c870 	.word	0x0801c870

0801ad88 <__ratio>:
 801ad88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad8c:	4688      	mov	r8, r1
 801ad8e:	4669      	mov	r1, sp
 801ad90:	4681      	mov	r9, r0
 801ad92:	f7ff ff49 	bl	801ac28 <__b2d>
 801ad96:	460f      	mov	r7, r1
 801ad98:	4604      	mov	r4, r0
 801ad9a:	460d      	mov	r5, r1
 801ad9c:	4640      	mov	r0, r8
 801ad9e:	a901      	add	r1, sp, #4
 801ada0:	f7ff ff42 	bl	801ac28 <__b2d>
 801ada4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ada8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801adac:	eba3 0c02 	sub.w	ip, r3, r2
 801adb0:	e9dd 3200 	ldrd	r3, r2, [sp]
 801adb4:	1a9b      	subs	r3, r3, r2
 801adb6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801adba:	2b00      	cmp	r3, #0
 801adbc:	bfd5      	itete	le
 801adbe:	460a      	movle	r2, r1
 801adc0:	462a      	movgt	r2, r5
 801adc2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801adc6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801adca:	468b      	mov	fp, r1
 801adcc:	bfd8      	it	le
 801adce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801add2:	465b      	mov	r3, fp
 801add4:	4602      	mov	r2, r0
 801add6:	4639      	mov	r1, r7
 801add8:	4620      	mov	r0, r4
 801adda:	f7e5 fdc3 	bl	8000964 <__aeabi_ddiv>
 801adde:	b003      	add	sp, #12
 801ade0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ade4 <__copybits>:
 801ade4:	3901      	subs	r1, #1
 801ade6:	b570      	push	{r4, r5, r6, lr}
 801ade8:	1149      	asrs	r1, r1, #5
 801adea:	6914      	ldr	r4, [r2, #16]
 801adec:	3101      	adds	r1, #1
 801adee:	f102 0314 	add.w	r3, r2, #20
 801adf2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801adf6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801adfa:	1f05      	subs	r5, r0, #4
 801adfc:	42a3      	cmp	r3, r4
 801adfe:	d30c      	bcc.n	801ae1a <__copybits+0x36>
 801ae00:	1aa3      	subs	r3, r4, r2
 801ae02:	3b11      	subs	r3, #17
 801ae04:	f023 0303 	bic.w	r3, r3, #3
 801ae08:	3211      	adds	r2, #17
 801ae0a:	42a2      	cmp	r2, r4
 801ae0c:	bf88      	it	hi
 801ae0e:	2300      	movhi	r3, #0
 801ae10:	4418      	add	r0, r3
 801ae12:	2300      	movs	r3, #0
 801ae14:	4288      	cmp	r0, r1
 801ae16:	d305      	bcc.n	801ae24 <__copybits+0x40>
 801ae18:	bd70      	pop	{r4, r5, r6, pc}
 801ae1a:	f853 6b04 	ldr.w	r6, [r3], #4
 801ae1e:	f845 6f04 	str.w	r6, [r5, #4]!
 801ae22:	e7eb      	b.n	801adfc <__copybits+0x18>
 801ae24:	f840 3b04 	str.w	r3, [r0], #4
 801ae28:	e7f4      	b.n	801ae14 <__copybits+0x30>

0801ae2a <__any_on>:
 801ae2a:	f100 0214 	add.w	r2, r0, #20
 801ae2e:	6900      	ldr	r0, [r0, #16]
 801ae30:	114b      	asrs	r3, r1, #5
 801ae32:	4298      	cmp	r0, r3
 801ae34:	b510      	push	{r4, lr}
 801ae36:	db11      	blt.n	801ae5c <__any_on+0x32>
 801ae38:	dd0a      	ble.n	801ae50 <__any_on+0x26>
 801ae3a:	f011 011f 	ands.w	r1, r1, #31
 801ae3e:	d007      	beq.n	801ae50 <__any_on+0x26>
 801ae40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ae44:	fa24 f001 	lsr.w	r0, r4, r1
 801ae48:	fa00 f101 	lsl.w	r1, r0, r1
 801ae4c:	428c      	cmp	r4, r1
 801ae4e:	d10b      	bne.n	801ae68 <__any_on+0x3e>
 801ae50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ae54:	4293      	cmp	r3, r2
 801ae56:	d803      	bhi.n	801ae60 <__any_on+0x36>
 801ae58:	2000      	movs	r0, #0
 801ae5a:	bd10      	pop	{r4, pc}
 801ae5c:	4603      	mov	r3, r0
 801ae5e:	e7f7      	b.n	801ae50 <__any_on+0x26>
 801ae60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ae64:	2900      	cmp	r1, #0
 801ae66:	d0f5      	beq.n	801ae54 <__any_on+0x2a>
 801ae68:	2001      	movs	r0, #1
 801ae6a:	e7f6      	b.n	801ae5a <__any_on+0x30>

0801ae6c <_calloc_r>:
 801ae6c:	b570      	push	{r4, r5, r6, lr}
 801ae6e:	fba1 5402 	umull	r5, r4, r1, r2
 801ae72:	b934      	cbnz	r4, 801ae82 <_calloc_r+0x16>
 801ae74:	4629      	mov	r1, r5
 801ae76:	f7fd fa15 	bl	80182a4 <_malloc_r>
 801ae7a:	4606      	mov	r6, r0
 801ae7c:	b928      	cbnz	r0, 801ae8a <_calloc_r+0x1e>
 801ae7e:	4630      	mov	r0, r6
 801ae80:	bd70      	pop	{r4, r5, r6, pc}
 801ae82:	220c      	movs	r2, #12
 801ae84:	6002      	str	r2, [r0, #0]
 801ae86:	2600      	movs	r6, #0
 801ae88:	e7f9      	b.n	801ae7e <_calloc_r+0x12>
 801ae8a:	462a      	mov	r2, r5
 801ae8c:	4621      	mov	r1, r4
 801ae8e:	f7fd f997 	bl	80181c0 <memset>
 801ae92:	e7f4      	b.n	801ae7e <_calloc_r+0x12>

0801ae94 <nan>:
 801ae94:	4901      	ldr	r1, [pc, #4]	; (801ae9c <nan+0x8>)
 801ae96:	2000      	movs	r0, #0
 801ae98:	4770      	bx	lr
 801ae9a:	bf00      	nop
 801ae9c:	7ff80000 	.word	0x7ff80000

0801aea0 <__sread>:
 801aea0:	b510      	push	{r4, lr}
 801aea2:	460c      	mov	r4, r1
 801aea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aea8:	f000 f8a8 	bl	801affc <_read_r>
 801aeac:	2800      	cmp	r0, #0
 801aeae:	bfab      	itete	ge
 801aeb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801aeb2:	89a3      	ldrhlt	r3, [r4, #12]
 801aeb4:	181b      	addge	r3, r3, r0
 801aeb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801aeba:	bfac      	ite	ge
 801aebc:	6563      	strge	r3, [r4, #84]	; 0x54
 801aebe:	81a3      	strhlt	r3, [r4, #12]
 801aec0:	bd10      	pop	{r4, pc}

0801aec2 <__swrite>:
 801aec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aec6:	461f      	mov	r7, r3
 801aec8:	898b      	ldrh	r3, [r1, #12]
 801aeca:	05db      	lsls	r3, r3, #23
 801aecc:	4605      	mov	r5, r0
 801aece:	460c      	mov	r4, r1
 801aed0:	4616      	mov	r6, r2
 801aed2:	d505      	bpl.n	801aee0 <__swrite+0x1e>
 801aed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aed8:	2302      	movs	r3, #2
 801aeda:	2200      	movs	r2, #0
 801aedc:	f000 f87c 	bl	801afd8 <_lseek_r>
 801aee0:	89a3      	ldrh	r3, [r4, #12]
 801aee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aee6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801aeea:	81a3      	strh	r3, [r4, #12]
 801aeec:	4632      	mov	r2, r6
 801aeee:	463b      	mov	r3, r7
 801aef0:	4628      	mov	r0, r5
 801aef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aef6:	f000 b823 	b.w	801af40 <_write_r>

0801aefa <__sseek>:
 801aefa:	b510      	push	{r4, lr}
 801aefc:	460c      	mov	r4, r1
 801aefe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af02:	f000 f869 	bl	801afd8 <_lseek_r>
 801af06:	1c43      	adds	r3, r0, #1
 801af08:	89a3      	ldrh	r3, [r4, #12]
 801af0a:	bf15      	itete	ne
 801af0c:	6560      	strne	r0, [r4, #84]	; 0x54
 801af0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801af12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801af16:	81a3      	strheq	r3, [r4, #12]
 801af18:	bf18      	it	ne
 801af1a:	81a3      	strhne	r3, [r4, #12]
 801af1c:	bd10      	pop	{r4, pc}

0801af1e <__sclose>:
 801af1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af22:	f000 b827 	b.w	801af74 <_close_r>

0801af26 <__ascii_wctomb>:
 801af26:	4603      	mov	r3, r0
 801af28:	4608      	mov	r0, r1
 801af2a:	b141      	cbz	r1, 801af3e <__ascii_wctomb+0x18>
 801af2c:	2aff      	cmp	r2, #255	; 0xff
 801af2e:	d904      	bls.n	801af3a <__ascii_wctomb+0x14>
 801af30:	228a      	movs	r2, #138	; 0x8a
 801af32:	601a      	str	r2, [r3, #0]
 801af34:	f04f 30ff 	mov.w	r0, #4294967295
 801af38:	4770      	bx	lr
 801af3a:	700a      	strb	r2, [r1, #0]
 801af3c:	2001      	movs	r0, #1
 801af3e:	4770      	bx	lr

0801af40 <_write_r>:
 801af40:	b538      	push	{r3, r4, r5, lr}
 801af42:	4d07      	ldr	r5, [pc, #28]	; (801af60 <_write_r+0x20>)
 801af44:	4604      	mov	r4, r0
 801af46:	4608      	mov	r0, r1
 801af48:	4611      	mov	r1, r2
 801af4a:	2200      	movs	r2, #0
 801af4c:	602a      	str	r2, [r5, #0]
 801af4e:	461a      	mov	r2, r3
 801af50:	f7e6 ffc8 	bl	8001ee4 <_write>
 801af54:	1c43      	adds	r3, r0, #1
 801af56:	d102      	bne.n	801af5e <_write_r+0x1e>
 801af58:	682b      	ldr	r3, [r5, #0]
 801af5a:	b103      	cbz	r3, 801af5e <_write_r+0x1e>
 801af5c:	6023      	str	r3, [r4, #0]
 801af5e:	bd38      	pop	{r3, r4, r5, pc}
 801af60:	200019a8 	.word	0x200019a8

0801af64 <abort>:
 801af64:	b508      	push	{r3, lr}
 801af66:	2006      	movs	r0, #6
 801af68:	f000 f882 	bl	801b070 <raise>
 801af6c:	2001      	movs	r0, #1
 801af6e:	f7e6 ffa3 	bl	8001eb8 <_exit>
	...

0801af74 <_close_r>:
 801af74:	b538      	push	{r3, r4, r5, lr}
 801af76:	4d06      	ldr	r5, [pc, #24]	; (801af90 <_close_r+0x1c>)
 801af78:	2300      	movs	r3, #0
 801af7a:	4604      	mov	r4, r0
 801af7c:	4608      	mov	r0, r1
 801af7e:	602b      	str	r3, [r5, #0]
 801af80:	f7e6 ffbe 	bl	8001f00 <_close>
 801af84:	1c43      	adds	r3, r0, #1
 801af86:	d102      	bne.n	801af8e <_close_r+0x1a>
 801af88:	682b      	ldr	r3, [r5, #0]
 801af8a:	b103      	cbz	r3, 801af8e <_close_r+0x1a>
 801af8c:	6023      	str	r3, [r4, #0]
 801af8e:	bd38      	pop	{r3, r4, r5, pc}
 801af90:	200019a8 	.word	0x200019a8

0801af94 <_fstat_r>:
 801af94:	b538      	push	{r3, r4, r5, lr}
 801af96:	4d07      	ldr	r5, [pc, #28]	; (801afb4 <_fstat_r+0x20>)
 801af98:	2300      	movs	r3, #0
 801af9a:	4604      	mov	r4, r0
 801af9c:	4608      	mov	r0, r1
 801af9e:	4611      	mov	r1, r2
 801afa0:	602b      	str	r3, [r5, #0]
 801afa2:	f7e6 ffb0 	bl	8001f06 <_fstat>
 801afa6:	1c43      	adds	r3, r0, #1
 801afa8:	d102      	bne.n	801afb0 <_fstat_r+0x1c>
 801afaa:	682b      	ldr	r3, [r5, #0]
 801afac:	b103      	cbz	r3, 801afb0 <_fstat_r+0x1c>
 801afae:	6023      	str	r3, [r4, #0]
 801afb0:	bd38      	pop	{r3, r4, r5, pc}
 801afb2:	bf00      	nop
 801afb4:	200019a8 	.word	0x200019a8

0801afb8 <_isatty_r>:
 801afb8:	b538      	push	{r3, r4, r5, lr}
 801afba:	4d06      	ldr	r5, [pc, #24]	; (801afd4 <_isatty_r+0x1c>)
 801afbc:	2300      	movs	r3, #0
 801afbe:	4604      	mov	r4, r0
 801afc0:	4608      	mov	r0, r1
 801afc2:	602b      	str	r3, [r5, #0]
 801afc4:	f7e6 ffa4 	bl	8001f10 <_isatty>
 801afc8:	1c43      	adds	r3, r0, #1
 801afca:	d102      	bne.n	801afd2 <_isatty_r+0x1a>
 801afcc:	682b      	ldr	r3, [r5, #0]
 801afce:	b103      	cbz	r3, 801afd2 <_isatty_r+0x1a>
 801afd0:	6023      	str	r3, [r4, #0]
 801afd2:	bd38      	pop	{r3, r4, r5, pc}
 801afd4:	200019a8 	.word	0x200019a8

0801afd8 <_lseek_r>:
 801afd8:	b538      	push	{r3, r4, r5, lr}
 801afda:	4d07      	ldr	r5, [pc, #28]	; (801aff8 <_lseek_r+0x20>)
 801afdc:	4604      	mov	r4, r0
 801afde:	4608      	mov	r0, r1
 801afe0:	4611      	mov	r1, r2
 801afe2:	2200      	movs	r2, #0
 801afe4:	602a      	str	r2, [r5, #0]
 801afe6:	461a      	mov	r2, r3
 801afe8:	f7e6 ff94 	bl	8001f14 <_lseek>
 801afec:	1c43      	adds	r3, r0, #1
 801afee:	d102      	bne.n	801aff6 <_lseek_r+0x1e>
 801aff0:	682b      	ldr	r3, [r5, #0]
 801aff2:	b103      	cbz	r3, 801aff6 <_lseek_r+0x1e>
 801aff4:	6023      	str	r3, [r4, #0]
 801aff6:	bd38      	pop	{r3, r4, r5, pc}
 801aff8:	200019a8 	.word	0x200019a8

0801affc <_read_r>:
 801affc:	b538      	push	{r3, r4, r5, lr}
 801affe:	4d07      	ldr	r5, [pc, #28]	; (801b01c <_read_r+0x20>)
 801b000:	4604      	mov	r4, r0
 801b002:	4608      	mov	r0, r1
 801b004:	4611      	mov	r1, r2
 801b006:	2200      	movs	r2, #0
 801b008:	602a      	str	r2, [r5, #0]
 801b00a:	461a      	mov	r2, r3
 801b00c:	f7e6 ff5a 	bl	8001ec4 <_read>
 801b010:	1c43      	adds	r3, r0, #1
 801b012:	d102      	bne.n	801b01a <_read_r+0x1e>
 801b014:	682b      	ldr	r3, [r5, #0]
 801b016:	b103      	cbz	r3, 801b01a <_read_r+0x1e>
 801b018:	6023      	str	r3, [r4, #0]
 801b01a:	bd38      	pop	{r3, r4, r5, pc}
 801b01c:	200019a8 	.word	0x200019a8

0801b020 <_raise_r>:
 801b020:	291f      	cmp	r1, #31
 801b022:	b538      	push	{r3, r4, r5, lr}
 801b024:	4604      	mov	r4, r0
 801b026:	460d      	mov	r5, r1
 801b028:	d904      	bls.n	801b034 <_raise_r+0x14>
 801b02a:	2316      	movs	r3, #22
 801b02c:	6003      	str	r3, [r0, #0]
 801b02e:	f04f 30ff 	mov.w	r0, #4294967295
 801b032:	bd38      	pop	{r3, r4, r5, pc}
 801b034:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b036:	b112      	cbz	r2, 801b03e <_raise_r+0x1e>
 801b038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b03c:	b94b      	cbnz	r3, 801b052 <_raise_r+0x32>
 801b03e:	4620      	mov	r0, r4
 801b040:	f000 f830 	bl	801b0a4 <_getpid_r>
 801b044:	462a      	mov	r2, r5
 801b046:	4601      	mov	r1, r0
 801b048:	4620      	mov	r0, r4
 801b04a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b04e:	f000 b817 	b.w	801b080 <_kill_r>
 801b052:	2b01      	cmp	r3, #1
 801b054:	d00a      	beq.n	801b06c <_raise_r+0x4c>
 801b056:	1c59      	adds	r1, r3, #1
 801b058:	d103      	bne.n	801b062 <_raise_r+0x42>
 801b05a:	2316      	movs	r3, #22
 801b05c:	6003      	str	r3, [r0, #0]
 801b05e:	2001      	movs	r0, #1
 801b060:	e7e7      	b.n	801b032 <_raise_r+0x12>
 801b062:	2400      	movs	r4, #0
 801b064:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b068:	4628      	mov	r0, r5
 801b06a:	4798      	blx	r3
 801b06c:	2000      	movs	r0, #0
 801b06e:	e7e0      	b.n	801b032 <_raise_r+0x12>

0801b070 <raise>:
 801b070:	4b02      	ldr	r3, [pc, #8]	; (801b07c <raise+0xc>)
 801b072:	4601      	mov	r1, r0
 801b074:	6818      	ldr	r0, [r3, #0]
 801b076:	f7ff bfd3 	b.w	801b020 <_raise_r>
 801b07a:	bf00      	nop
 801b07c:	20000120 	.word	0x20000120

0801b080 <_kill_r>:
 801b080:	b538      	push	{r3, r4, r5, lr}
 801b082:	4d07      	ldr	r5, [pc, #28]	; (801b0a0 <_kill_r+0x20>)
 801b084:	2300      	movs	r3, #0
 801b086:	4604      	mov	r4, r0
 801b088:	4608      	mov	r0, r1
 801b08a:	4611      	mov	r1, r2
 801b08c:	602b      	str	r3, [r5, #0]
 801b08e:	f7e6 ff0b 	bl	8001ea8 <_kill>
 801b092:	1c43      	adds	r3, r0, #1
 801b094:	d102      	bne.n	801b09c <_kill_r+0x1c>
 801b096:	682b      	ldr	r3, [r5, #0]
 801b098:	b103      	cbz	r3, 801b09c <_kill_r+0x1c>
 801b09a:	6023      	str	r3, [r4, #0]
 801b09c:	bd38      	pop	{r3, r4, r5, pc}
 801b09e:	bf00      	nop
 801b0a0:	200019a8 	.word	0x200019a8

0801b0a4 <_getpid_r>:
 801b0a4:	f7e6 befe 	b.w	8001ea4 <_getpid>

0801b0a8 <floor>:
 801b0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b0ac:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801b0b0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801b0b4:	2e13      	cmp	r6, #19
 801b0b6:	4602      	mov	r2, r0
 801b0b8:	460b      	mov	r3, r1
 801b0ba:	4607      	mov	r7, r0
 801b0bc:	460c      	mov	r4, r1
 801b0be:	4605      	mov	r5, r0
 801b0c0:	dc33      	bgt.n	801b12a <floor+0x82>
 801b0c2:	2e00      	cmp	r6, #0
 801b0c4:	da14      	bge.n	801b0f0 <floor+0x48>
 801b0c6:	a334      	add	r3, pc, #208	; (adr r3, 801b198 <floor+0xf0>)
 801b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0cc:	f7e5 f96a 	bl	80003a4 <__adddf3>
 801b0d0:	2200      	movs	r2, #0
 801b0d2:	2300      	movs	r3, #0
 801b0d4:	f7e5 fdac 	bl	8000c30 <__aeabi_dcmpgt>
 801b0d8:	b138      	cbz	r0, 801b0ea <floor+0x42>
 801b0da:	2c00      	cmp	r4, #0
 801b0dc:	da58      	bge.n	801b190 <floor+0xe8>
 801b0de:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b0e2:	431d      	orrs	r5, r3
 801b0e4:	d001      	beq.n	801b0ea <floor+0x42>
 801b0e6:	4c2e      	ldr	r4, [pc, #184]	; (801b1a0 <floor+0xf8>)
 801b0e8:	2500      	movs	r5, #0
 801b0ea:	4623      	mov	r3, r4
 801b0ec:	462f      	mov	r7, r5
 801b0ee:	e025      	b.n	801b13c <floor+0x94>
 801b0f0:	4a2c      	ldr	r2, [pc, #176]	; (801b1a4 <floor+0xfc>)
 801b0f2:	fa42 f806 	asr.w	r8, r2, r6
 801b0f6:	ea01 0208 	and.w	r2, r1, r8
 801b0fa:	4302      	orrs	r2, r0
 801b0fc:	d01e      	beq.n	801b13c <floor+0x94>
 801b0fe:	a326      	add	r3, pc, #152	; (adr r3, 801b198 <floor+0xf0>)
 801b100:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b104:	f7e5 f94e 	bl	80003a4 <__adddf3>
 801b108:	2200      	movs	r2, #0
 801b10a:	2300      	movs	r3, #0
 801b10c:	f7e5 fd90 	bl	8000c30 <__aeabi_dcmpgt>
 801b110:	2800      	cmp	r0, #0
 801b112:	d0ea      	beq.n	801b0ea <floor+0x42>
 801b114:	2c00      	cmp	r4, #0
 801b116:	bfbe      	ittt	lt
 801b118:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b11c:	fa43 f606 	asrlt.w	r6, r3, r6
 801b120:	19a4      	addlt	r4, r4, r6
 801b122:	ea24 0408 	bic.w	r4, r4, r8
 801b126:	2500      	movs	r5, #0
 801b128:	e7df      	b.n	801b0ea <floor+0x42>
 801b12a:	2e33      	cmp	r6, #51	; 0x33
 801b12c:	dd0a      	ble.n	801b144 <floor+0x9c>
 801b12e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b132:	d103      	bne.n	801b13c <floor+0x94>
 801b134:	f7e5 f936 	bl	80003a4 <__adddf3>
 801b138:	4607      	mov	r7, r0
 801b13a:	460b      	mov	r3, r1
 801b13c:	4638      	mov	r0, r7
 801b13e:	4619      	mov	r1, r3
 801b140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b144:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801b148:	f04f 32ff 	mov.w	r2, #4294967295
 801b14c:	fa22 f808 	lsr.w	r8, r2, r8
 801b150:	ea18 0f00 	tst.w	r8, r0
 801b154:	d0f2      	beq.n	801b13c <floor+0x94>
 801b156:	a310      	add	r3, pc, #64	; (adr r3, 801b198 <floor+0xf0>)
 801b158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b15c:	f7e5 f922 	bl	80003a4 <__adddf3>
 801b160:	2200      	movs	r2, #0
 801b162:	2300      	movs	r3, #0
 801b164:	f7e5 fd64 	bl	8000c30 <__aeabi_dcmpgt>
 801b168:	2800      	cmp	r0, #0
 801b16a:	d0be      	beq.n	801b0ea <floor+0x42>
 801b16c:	2c00      	cmp	r4, #0
 801b16e:	da02      	bge.n	801b176 <floor+0xce>
 801b170:	2e14      	cmp	r6, #20
 801b172:	d103      	bne.n	801b17c <floor+0xd4>
 801b174:	3401      	adds	r4, #1
 801b176:	ea25 0508 	bic.w	r5, r5, r8
 801b17a:	e7b6      	b.n	801b0ea <floor+0x42>
 801b17c:	2301      	movs	r3, #1
 801b17e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b182:	fa03 f606 	lsl.w	r6, r3, r6
 801b186:	4435      	add	r5, r6
 801b188:	42bd      	cmp	r5, r7
 801b18a:	bf38      	it	cc
 801b18c:	18e4      	addcc	r4, r4, r3
 801b18e:	e7f2      	b.n	801b176 <floor+0xce>
 801b190:	2500      	movs	r5, #0
 801b192:	462c      	mov	r4, r5
 801b194:	e7a9      	b.n	801b0ea <floor+0x42>
 801b196:	bf00      	nop
 801b198:	8800759c 	.word	0x8800759c
 801b19c:	7e37e43c 	.word	0x7e37e43c
 801b1a0:	bff00000 	.word	0xbff00000
 801b1a4:	000fffff 	.word	0x000fffff

0801b1a8 <_gettimeofday>:
 801b1a8:	4b02      	ldr	r3, [pc, #8]	; (801b1b4 <_gettimeofday+0xc>)
 801b1aa:	2258      	movs	r2, #88	; 0x58
 801b1ac:	601a      	str	r2, [r3, #0]
 801b1ae:	f04f 30ff 	mov.w	r0, #4294967295
 801b1b2:	4770      	bx	lr
 801b1b4:	200019a8 	.word	0x200019a8

0801b1b8 <_init>:
 801b1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1ba:	bf00      	nop
 801b1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1be:	bc08      	pop	{r3}
 801b1c0:	469e      	mov	lr, r3
 801b1c2:	4770      	bx	lr

0801b1c4 <_fini>:
 801b1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1c6:	bf00      	nop
 801b1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1ca:	bc08      	pop	{r3}
 801b1cc:	469e      	mov	lr, r3
 801b1ce:	4770      	bx	lr
